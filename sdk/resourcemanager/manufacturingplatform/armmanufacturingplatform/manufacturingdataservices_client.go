// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanufacturingplatform

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ManufacturingDataServicesClient contains the methods for the ManufacturingDataServices group.
// Don't use this type directly, use NewManufacturingDataServicesClient() instead.
type ManufacturingDataServicesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewManufacturingDataServicesClient creates a new instance of ManufacturingDataServicesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewManufacturingDataServicesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ManufacturingDataServicesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ManufacturingDataServicesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a MdsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - mdsResourceName - Name.
//   - resource - Resource create parameters.
//   - options - ManufacturingDataServicesClientBeginCreateOrUpdateOptions contains the optional parameters for the ManufacturingDataServicesClient.BeginCreateOrUpdate
//     method.
func (client *ManufacturingDataServicesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, mdsResourceName string, resource MdsResource, options *ManufacturingDataServicesClientBeginCreateOrUpdateOptions) (*runtime.Poller[ManufacturingDataServicesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, mdsResourceName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ManufacturingDataServicesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ManufacturingDataServicesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a MdsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-01-preview
func (client *ManufacturingDataServicesClient) createOrUpdate(ctx context.Context, resourceGroupName string, mdsResourceName string, resource MdsResource, options *ManufacturingDataServicesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ManufacturingDataServicesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, mdsResourceName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ManufacturingDataServicesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, mdsResourceName string, resource MdsResource, _ *ManufacturingDataServicesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManufacturingPlatform/manufacturingDataServices/{mdsResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if mdsResourceName == "" {
		return nil, errors.New("parameter mdsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mdsResourceName}", url.PathEscape(mdsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a MdsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - mdsResourceName - Name.
//   - options - ManufacturingDataServicesClientBeginDeleteOptions contains the optional parameters for the ManufacturingDataServicesClient.BeginDelete
//     method.
func (client *ManufacturingDataServicesClient) BeginDelete(ctx context.Context, resourceGroupName string, mdsResourceName string, options *ManufacturingDataServicesClientBeginDeleteOptions) (*runtime.Poller[ManufacturingDataServicesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, mdsResourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ManufacturingDataServicesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ManufacturingDataServicesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a MdsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-01-preview
func (client *ManufacturingDataServicesClient) deleteOperation(ctx context.Context, resourceGroupName string, mdsResourceName string, options *ManufacturingDataServicesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "ManufacturingDataServicesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, mdsResourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ManufacturingDataServicesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, mdsResourceName string, _ *ManufacturingDataServicesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManufacturingPlatform/manufacturingDataServices/{mdsResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if mdsResourceName == "" {
		return nil, errors.New("parameter mdsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mdsResourceName}", url.PathEscape(mdsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a MdsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - mdsResourceName - Name.
//   - options - ManufacturingDataServicesClientGetOptions contains the optional parameters for the ManufacturingDataServicesClient.Get
//     method.
func (client *ManufacturingDataServicesClient) Get(ctx context.Context, resourceGroupName string, mdsResourceName string, options *ManufacturingDataServicesClientGetOptions) (ManufacturingDataServicesClientGetResponse, error) {
	var err error
	const operationName = "ManufacturingDataServicesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, mdsResourceName, options)
	if err != nil {
		return ManufacturingDataServicesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManufacturingDataServicesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ManufacturingDataServicesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ManufacturingDataServicesClient) getCreateRequest(ctx context.Context, resourceGroupName string, mdsResourceName string, _ *ManufacturingDataServicesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManufacturingPlatform/manufacturingDataServices/{mdsResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if mdsResourceName == "" {
		return nil, errors.New("parameter mdsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mdsResourceName}", url.PathEscape(mdsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ManufacturingDataServicesClient) getHandleResponse(resp *http.Response) (ManufacturingDataServicesClientGetResponse, error) {
	result := ManufacturingDataServicesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MdsResource); err != nil {
		return ManufacturingDataServicesClientGetResponse{}, err
	}
	return result, nil
}

// ListAvailableVersions - Returns the list of available versions
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - mdsResourceName - Name.
//   - options - ManufacturingDataServicesClientListAvailableVersionsOptions contains the optional parameters for the ManufacturingDataServicesClient.ListAvailableVersions
//     method.
func (client *ManufacturingDataServicesClient) ListAvailableVersions(ctx context.Context, resourceGroupName string, mdsResourceName string, options *ManufacturingDataServicesClientListAvailableVersionsOptions) (ManufacturingDataServicesClientListAvailableVersionsResponse, error) {
	var err error
	const operationName = "ManufacturingDataServicesClient.ListAvailableVersions"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listAvailableVersionsCreateRequest(ctx, resourceGroupName, mdsResourceName, options)
	if err != nil {
		return ManufacturingDataServicesClientListAvailableVersionsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManufacturingDataServicesClientListAvailableVersionsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ManufacturingDataServicesClientListAvailableVersionsResponse{}, err
	}
	resp, err := client.listAvailableVersionsHandleResponse(httpResp)
	return resp, err
}

// listAvailableVersionsCreateRequest creates the ListAvailableVersions request.
func (client *ManufacturingDataServicesClient) listAvailableVersionsCreateRequest(ctx context.Context, resourceGroupName string, mdsResourceName string, _ *ManufacturingDataServicesClientListAvailableVersionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManufacturingPlatform/manufacturingDataServices/{mdsResourceName}/listAvailableVersions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if mdsResourceName == "" {
		return nil, errors.New("parameter mdsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mdsResourceName}", url.PathEscape(mdsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAvailableVersionsHandleResponse handles the ListAvailableVersions response.
func (client *ManufacturingDataServicesClient) listAvailableVersionsHandleResponse(resp *http.Response) (ManufacturingDataServicesClientListAvailableVersionsResponse, error) {
	result := ManufacturingDataServicesClientListAvailableVersionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AvailableVersionListResult); err != nil {
		return ManufacturingDataServicesClientListAvailableVersionsResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List MdsResource resources by resource group
//
// Generated from API version 2024-02-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - ManufacturingDataServicesClientListByResourceGroupOptions contains the optional parameters for the ManufacturingDataServicesClient.NewListByResourceGroupPager
//     method.
func (client *ManufacturingDataServicesClient) NewListByResourceGroupPager(resourceGroupName string, options *ManufacturingDataServicesClientListByResourceGroupOptions) *runtime.Pager[ManufacturingDataServicesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[ManufacturingDataServicesClientListByResourceGroupResponse]{
		More: func(page ManufacturingDataServicesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ManufacturingDataServicesClientListByResourceGroupResponse) (ManufacturingDataServicesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ManufacturingDataServicesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return ManufacturingDataServicesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *ManufacturingDataServicesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *ManufacturingDataServicesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManufacturingPlatform/manufacturingDataServices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *ManufacturingDataServicesClient) listByResourceGroupHandleResponse(resp *http.Response) (ManufacturingDataServicesClientListByResourceGroupResponse, error) {
	result := ManufacturingDataServicesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MdsResourceListResult); err != nil {
		return ManufacturingDataServicesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List MdsResource resources by subscription ID
//
// Generated from API version 2024-02-01-preview
//   - options - ManufacturingDataServicesClientListBySubscriptionOptions contains the optional parameters for the ManufacturingDataServicesClient.NewListBySubscriptionPager
//     method.
func (client *ManufacturingDataServicesClient) NewListBySubscriptionPager(options *ManufacturingDataServicesClientListBySubscriptionOptions) *runtime.Pager[ManufacturingDataServicesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[ManufacturingDataServicesClientListBySubscriptionResponse]{
		More: func(page ManufacturingDataServicesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ManufacturingDataServicesClientListBySubscriptionResponse) (ManufacturingDataServicesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ManufacturingDataServicesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ManufacturingDataServicesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *ManufacturingDataServicesClient) listBySubscriptionCreateRequest(ctx context.Context, _ *ManufacturingDataServicesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ManufacturingPlatform/manufacturingDataServices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *ManufacturingDataServicesClient) listBySubscriptionHandleResponse(resp *http.Response) (ManufacturingDataServicesClientListBySubscriptionResponse, error) {
	result := ManufacturingDataServicesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MdsResourceListResult); err != nil {
		return ManufacturingDataServicesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a MdsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - mdsResourceName - Name.
//   - properties - The resource properties to be updated.
//   - options - ManufacturingDataServicesClientBeginUpdateOptions contains the optional parameters for the ManufacturingDataServicesClient.BeginUpdate
//     method.
func (client *ManufacturingDataServicesClient) BeginUpdate(ctx context.Context, resourceGroupName string, mdsResourceName string, properties MdsResourceUpdate, options *ManufacturingDataServicesClientBeginUpdateOptions) (*runtime.Poller[ManufacturingDataServicesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, mdsResourceName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ManufacturingDataServicesClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ManufacturingDataServicesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a MdsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-01-preview
func (client *ManufacturingDataServicesClient) update(ctx context.Context, resourceGroupName string, mdsResourceName string, properties MdsResourceUpdate, options *ManufacturingDataServicesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ManufacturingDataServicesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, mdsResourceName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *ManufacturingDataServicesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, mdsResourceName string, properties MdsResourceUpdate, _ *ManufacturingDataServicesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManufacturingPlatform/manufacturingDataServices/{mdsResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if mdsResourceName == "" {
		return nil, errors.New("parameter mdsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mdsResourceName}", url.PathEscape(mdsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
