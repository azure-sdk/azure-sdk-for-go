//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armpostgresqlhsc

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ConfigurationClient contains the methods for the Configuration group.
// Don't use this type directly, use NewConfigurationClient() instead.
type ConfigurationClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewConfigurationClient creates a new instance of ConfigurationClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewConfigurationClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ConfigurationClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &ConfigurationClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// GetCoordinator - Gets information of a coordinator configuration.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-08
// resourceGroupName - The name of the resource group. The name is case insensitive.
// clusterName - The name of the cluster.
// configurationName - The name of the cluster configuration.
// options - ConfigurationClientGetCoordinatorOptions contains the optional parameters for the ConfigurationClient.GetCoordinator
// method.
func (client *ConfigurationClient) GetCoordinator(ctx context.Context, resourceGroupName string, clusterName string, configurationName string, options *ConfigurationClientGetCoordinatorOptions) (ConfigurationClientGetCoordinatorResponse, error) {
	req, err := client.getCoordinatorCreateRequest(ctx, resourceGroupName, clusterName, configurationName, options)
	if err != nil {
		return ConfigurationClientGetCoordinatorResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ConfigurationClientGetCoordinatorResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ConfigurationClientGetCoordinatorResponse{}, runtime.NewResponseError(resp)
	}
	return client.getCoordinatorHandleResponse(resp)
}

// getCoordinatorCreateRequest creates the GetCoordinator request.
func (client *ConfigurationClient) getCoordinatorCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, configurationName string, options *ConfigurationClientGetCoordinatorOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/serverGroupsv2/{clusterName}/configurations/{configurationName}/coordinator"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if configurationName == "" {
		return nil, errors.New("parameter configurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{configurationName}", url.PathEscape(configurationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-08")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getCoordinatorHandleResponse handles the GetCoordinator response.
func (client *ConfigurationClient) getCoordinatorHandleResponse(resp *http.Response) (ConfigurationClientGetCoordinatorResponse, error) {
	result := ConfigurationClientGetCoordinatorResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServerConfiguration); err != nil {
		return ConfigurationClientGetCoordinatorResponse{}, err
	}
	return result, nil
}

// GetNode - Gets information of a node configuration.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-08
// resourceGroupName - The name of the resource group. The name is case insensitive.
// clusterName - The name of the cluster.
// configurationName - The name of the cluster configuration.
// options - ConfigurationClientGetNodeOptions contains the optional parameters for the ConfigurationClient.GetNode method.
func (client *ConfigurationClient) GetNode(ctx context.Context, resourceGroupName string, clusterName string, configurationName string, options *ConfigurationClientGetNodeOptions) (ConfigurationClientGetNodeResponse, error) {
	req, err := client.getNodeCreateRequest(ctx, resourceGroupName, clusterName, configurationName, options)
	if err != nil {
		return ConfigurationClientGetNodeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ConfigurationClientGetNodeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ConfigurationClientGetNodeResponse{}, runtime.NewResponseError(resp)
	}
	return client.getNodeHandleResponse(resp)
}

// getNodeCreateRequest creates the GetNode request.
func (client *ConfigurationClient) getNodeCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, configurationName string, options *ConfigurationClientGetNodeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/serverGroupsv2/{clusterName}/configurations/{configurationName}/node"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if configurationName == "" {
		return nil, errors.New("parameter configurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{configurationName}", url.PathEscape(configurationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-08")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNodeHandleResponse handles the GetNode response.
func (client *ConfigurationClient) getNodeHandleResponse(resp *http.Response) (ConfigurationClientGetNodeResponse, error) {
	result := ConfigurationClientGetNodeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServerConfiguration); err != nil {
		return ConfigurationClientGetNodeResponse{}, err
	}
	return result, nil
}
