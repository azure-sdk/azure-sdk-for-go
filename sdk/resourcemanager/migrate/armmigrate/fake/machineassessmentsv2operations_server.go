// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate/v2"
	"net/http"
	"net/url"
	"regexp"
)

// MachineAssessmentsV2OperationsServer is a fake server for instances of the armmigrate.MachineAssessmentsV2OperationsClient type.
type MachineAssessmentsV2OperationsServer struct {
	// BeginCreate is the fake for method MachineAssessmentsV2OperationsClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, resource armmigrate.MachineAssessmentV2, options *armmigrate.MachineAssessmentsV2OperationsClientBeginCreateOptions) (resp azfake.PollerResponder[armmigrate.MachineAssessmentsV2OperationsClientCreateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method MachineAssessmentsV2OperationsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, options *armmigrate.MachineAssessmentsV2OperationsClientDeleteOptions) (resp azfake.Responder[armmigrate.MachineAssessmentsV2OperationsClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginDownloadURL is the fake for method MachineAssessmentsV2OperationsClient.BeginDownloadURL
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginDownloadURL func(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, body armmigrate.DownloadURLRequest, options *armmigrate.MachineAssessmentsV2OperationsClientBeginDownloadURLOptions) (resp azfake.PollerResponder[armmigrate.MachineAssessmentsV2OperationsClientDownloadURLResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method MachineAssessmentsV2OperationsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, options *armmigrate.MachineAssessmentsV2OperationsClientGetOptions) (resp azfake.Responder[armmigrate.MachineAssessmentsV2OperationsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByParentPager is the fake for method MachineAssessmentsV2OperationsClient.NewListByParentPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByParentPager func(resourceGroupName string, projectName string, options *armmigrate.MachineAssessmentsV2OperationsClientListByParentOptions) (resp azfake.PagerResponder[armmigrate.MachineAssessmentsV2OperationsClientListByParentResponse])
}

// NewMachineAssessmentsV2OperationsServerTransport creates a new instance of MachineAssessmentsV2OperationsServerTransport with the provided implementation.
// The returned MachineAssessmentsV2OperationsServerTransport instance is connected to an instance of armmigrate.MachineAssessmentsV2OperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMachineAssessmentsV2OperationsServerTransport(srv *MachineAssessmentsV2OperationsServer) *MachineAssessmentsV2OperationsServerTransport {
	return &MachineAssessmentsV2OperationsServerTransport{
		srv:                  srv,
		beginCreate:          newTracker[azfake.PollerResponder[armmigrate.MachineAssessmentsV2OperationsClientCreateResponse]](),
		beginDownloadURL:     newTracker[azfake.PollerResponder[armmigrate.MachineAssessmentsV2OperationsClientDownloadURLResponse]](),
		newListByParentPager: newTracker[azfake.PagerResponder[armmigrate.MachineAssessmentsV2OperationsClientListByParentResponse]](),
	}
}

// MachineAssessmentsV2OperationsServerTransport connects instances of armmigrate.MachineAssessmentsV2OperationsClient to instances of MachineAssessmentsV2OperationsServer.
// Don't use this type directly, use NewMachineAssessmentsV2OperationsServerTransport instead.
type MachineAssessmentsV2OperationsServerTransport struct {
	srv                  *MachineAssessmentsV2OperationsServer
	beginCreate          *tracker[azfake.PollerResponder[armmigrate.MachineAssessmentsV2OperationsClientCreateResponse]]
	beginDownloadURL     *tracker[azfake.PollerResponder[armmigrate.MachineAssessmentsV2OperationsClientDownloadURLResponse]]
	newListByParentPager *tracker[azfake.PagerResponder[armmigrate.MachineAssessmentsV2OperationsClientListByParentResponse]]
}

// Do implements the policy.Transporter interface for MachineAssessmentsV2OperationsServerTransport.
func (m *MachineAssessmentsV2OperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *MachineAssessmentsV2OperationsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if machineAssessmentsV2OperationsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = machineAssessmentsV2OperationsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "MachineAssessmentsV2OperationsClient.BeginCreate":
				res.resp, res.err = m.dispatchBeginCreate(req)
			case "MachineAssessmentsV2OperationsClient.Delete":
				res.resp, res.err = m.dispatchDelete(req)
			case "MachineAssessmentsV2OperationsClient.BeginDownloadURL":
				res.resp, res.err = m.dispatchBeginDownloadURL(req)
			case "MachineAssessmentsV2OperationsClient.Get":
				res.resp, res.err = m.dispatchGet(req)
			case "MachineAssessmentsV2OperationsClient.NewListByParentPager":
				res.resp, res.err = m.dispatchNewListByParentPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *MachineAssessmentsV2OperationsServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if m.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := m.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/assessmentProjects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/assessments/(?P<assessmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.MachineAssessmentV2](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
		if err != nil {
			return nil, err
		}
		assessmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("assessmentName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginCreate(req.Context(), resourceGroupNameParam, projectNameParam, assessmentNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		m.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		m.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		m.beginCreate.remove(req)
	}

	return resp, nil
}

func (m *MachineAssessmentsV2OperationsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if m.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/assessmentProjects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/assessments/(?P<assessmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
	if err != nil {
		return nil, err
	}
	assessmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("assessmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Delete(req.Context(), resourceGroupNameParam, projectNameParam, assessmentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MachineAssessmentsV2OperationsServerTransport) dispatchBeginDownloadURL(req *http.Request) (*http.Response, error) {
	if m.srv.BeginDownloadURL == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDownloadURL not implemented")}
	}
	beginDownloadURL := m.beginDownloadURL.get(req)
	if beginDownloadURL == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/assessmentProjects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/assessments/(?P<assessmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/downloadUrl`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.DownloadURLRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
		if err != nil {
			return nil, err
		}
		assessmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("assessmentName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginDownloadURL(req.Context(), resourceGroupNameParam, projectNameParam, assessmentNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDownloadURL = &respr
		m.beginDownloadURL.add(req, beginDownloadURL)
	}

	resp, err := server.PollerResponderNext(beginDownloadURL, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		m.beginDownloadURL.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDownloadURL) {
		m.beginDownloadURL.remove(req)
	}

	return resp, nil
}

func (m *MachineAssessmentsV2OperationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/assessmentProjects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/assessments/(?P<assessmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
	if err != nil {
		return nil, err
	}
	assessmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("assessmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Get(req.Context(), resourceGroupNameParam, projectNameParam, assessmentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MachineAssessmentV2, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MachineAssessmentsV2OperationsServerTransport) dispatchNewListByParentPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListByParentPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByParentPager not implemented")}
	}
	newListByParentPager := m.newListByParentPager.get(req)
	if newListByParentPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/assessmentProjects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/assessments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
		if err != nil {
			return nil, err
		}
		resp := m.srv.NewListByParentPager(resourceGroupNameParam, projectNameParam, nil)
		newListByParentPager = &resp
		m.newListByParentPager.add(req, newListByParentPager)
		server.PagerResponderInjectNextLinks(newListByParentPager, req, func(page *armmigrate.MachineAssessmentsV2OperationsClientListByParentResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByParentPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListByParentPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByParentPager) {
		m.newListByParentPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to MachineAssessmentsV2OperationsServerTransport
var machineAssessmentsV2OperationsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
