//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/terraform/armterraform"
	"net/http"
	"regexp"
)

// Server is a fake server for instances of the armterraform.Client type.
type Server struct {
	// BeginExportTerraform is the fake for method Client.BeginExportTerraform
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginExportTerraform func(ctx context.Context, body armterraform.BaseExportModelClassification, options *armterraform.ClientBeginExportTerraformOptions) (resp azfake.PollerResponder[armterraform.ClientExportTerraformResponse], errResp azfake.ErrorResponder)
}

// NewServerTransport creates a new instance of ServerTransport with the provided implementation.
// The returned ServerTransport instance is connected to an instance of armterraform.Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerTransport(srv *Server) *ServerTransport {
	return &ServerTransport{
		srv:                  srv,
		beginExportTerraform: newTracker[azfake.PollerResponder[armterraform.ClientExportTerraformResponse]](),
	}
}

// ServerTransport connects instances of armterraform.Client to instances of Server.
// Don't use this type directly, use NewServerTransport instead.
type ServerTransport struct {
	srv                  *Server
	beginExportTerraform *tracker[azfake.PollerResponder[armterraform.ClientExportTerraformResponse]]
}

// Do implements the policy.Transporter interface for ServerTransport.
func (s *ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "Client.BeginExportTerraform":
		resp, err = s.dispatchBeginExportTerraform(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *ServerTransport) dispatchBeginExportTerraform(req *http.Request) (*http.Response, error) {
	if s.srv.BeginExportTerraform == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginExportTerraform not implemented")}
	}
	beginExportTerraform := s.beginExportTerraform.get(req)
	if beginExportTerraform == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureTerraform/exportTerraform`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		raw, err := readRequestBody(req)
		if err != nil {
			return nil, err
		}
		body, err := unmarshalBaseExportModelClassification(raw)
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginExportTerraform(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginExportTerraform = &respr
		s.beginExportTerraform.add(req, beginExportTerraform)
	}

	resp, err := server.PollerResponderNext(beginExportTerraform, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		s.beginExportTerraform.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginExportTerraform) {
		s.beginExportTerraform.remove(req)
	}

	return resp, nil
}
