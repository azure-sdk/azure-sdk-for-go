// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armnotificationhubs

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PrivateLinkResourcesClient contains the methods for the PrivateLinkResources group.
// Don't use this type directly, use NewPrivateLinkResourcesClient() instead.
type PrivateLinkResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPrivateLinkResourcesClient creates a new instance of PrivateLinkResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPrivateLinkResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PrivateLinkResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PrivateLinkResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// GetGroupID - Even though this namespace requires subscription id, resource group and namespace name, it returns a constant
// payload (for a given namespacE) every time it's called.
// That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the request.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - namespaceName - Namespace name
//   - subResourceName - Name of the Private Link sub-resource. The only supported sub-resource is "namespace"
//   - options - PrivateLinkResourcesClientGetGroupIDOptions contains the optional parameters for the PrivateLinkResourcesClient.GetGroupID
//     method.
func (client *PrivateLinkResourcesClient) GetGroupID(ctx context.Context, resourceGroupName string, namespaceName string, subResourceName string, options *PrivateLinkResourcesClientGetGroupIDOptions) (PrivateLinkResourcesClientGetGroupIDResponse, error) {
	var err error
	const operationName = "PrivateLinkResourcesClient.GetGroupID"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getGroupIDCreateRequest(ctx, resourceGroupName, namespaceName, subResourceName, options)
	if err != nil {
		return PrivateLinkResourcesClientGetGroupIDResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateLinkResourcesClientGetGroupIDResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateLinkResourcesClientGetGroupIDResponse{}, err
	}
	resp, err := client.getGroupIDHandleResponse(httpResp)
	return resp, err
}

// getGroupIDCreateRequest creates the GetGroupID request.
func (client *PrivateLinkResourcesClient) getGroupIDCreateRequest(ctx context.Context, resourceGroupName string, namespaceName string, subResourceName string, _ *PrivateLinkResourcesClientGetGroupIDOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources/{subResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if namespaceName == "" {
		return nil, errors.New("parameter namespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	if subResourceName == "" {
		return nil, errors.New("parameter subResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subResourceName}", url.PathEscape(subResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getGroupIDHandleResponse handles the GetGroupID response.
func (client *PrivateLinkResourcesClient) getGroupIDHandleResponse(resp *http.Response) (PrivateLinkResourcesClientGetGroupIDResponse, error) {
	result := PrivateLinkResourcesClientGetGroupIDResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateLinkResource); err != nil {
		return PrivateLinkResourcesClientGetGroupIDResponse{}, err
	}
	return result, nil
}

// NewListGroupIDsPager - Even though this namespace requires subscription id, resource group and namespace name, it returns
// a constant payload (for a given namespacE) every time it's called.
// That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the request.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - namespaceName - Namespace name
//   - options - PrivateLinkResourcesClientListGroupIDsOptions contains the optional parameters for the PrivateLinkResourcesClient.NewListGroupIDsPager
//     method.
func (client *PrivateLinkResourcesClient) NewListGroupIDsPager(resourceGroupName string, namespaceName string, options *PrivateLinkResourcesClientListGroupIDsOptions) *runtime.Pager[PrivateLinkResourcesClientListGroupIDsResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateLinkResourcesClientListGroupIDsResponse]{
		More: func(page PrivateLinkResourcesClientListGroupIDsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateLinkResourcesClientListGroupIDsResponse) (PrivateLinkResourcesClientListGroupIDsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PrivateLinkResourcesClient.NewListGroupIDsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listGroupIDsCreateRequest(ctx, resourceGroupName, namespaceName, options)
			}, nil)
			if err != nil {
				return PrivateLinkResourcesClientListGroupIDsResponse{}, err
			}
			return client.listGroupIDsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listGroupIDsCreateRequest creates the ListGroupIDs request.
func (client *PrivateLinkResourcesClient) listGroupIDsCreateRequest(ctx context.Context, resourceGroupName string, namespaceName string, _ *PrivateLinkResourcesClientListGroupIDsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if namespaceName == "" {
		return nil, errors.New("parameter namespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listGroupIDsHandleResponse handles the ListGroupIDs response.
func (client *PrivateLinkResourcesClient) listGroupIDsHandleResponse(resp *http.Response) (PrivateLinkResourcesClientListGroupIDsResponse, error) {
	result := PrivateLinkResourcesClientListGroupIDsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateLinkResourceListResult); err != nil {
		return PrivateLinkResourcesClientListGroupIDsResponse{}, err
	}
	return result, nil
}
