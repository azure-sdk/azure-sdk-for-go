//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// VMwareSitesClient contains the methods for the VMwareSites group.
// Don't use this type directly, use NewVMwareSitesClient() instead.
type VMwareSitesClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewVMwareSitesClient creates a new instance of VMwareSitesClient with the specified values.
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewVMwareSitesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*VMwareSitesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &VMwareSitesClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// NewListPager - Get all the vmware sites in the resource group.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - VMwareSitesClientListOptions contains the optional parameters for the VMwareSitesClient.NewListPager method.
func (client *VMwareSitesClient) NewListPager(resourceGroupName string, options *VMwareSitesClientListOptions) *runtime.Pager[VMwareSitesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[VMwareSitesClientListResponse]{
		More: func(page VMwareSitesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *VMwareSitesClientListResponse) (VMwareSitesClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return VMwareSitesClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return VMwareSitesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return VMwareSitesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *VMwareSitesClient) listCreateRequest(ctx context.Context, resourceGroupName string, options *VMwareSitesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *VMwareSitesClient) listHandleResponse(resp *http.Response) (VMwareSitesClientListResponse, error) {
	result := VMwareSitesClientListResponse{}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.XMSRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMWareSitesResultList); err != nil {
		return VMwareSitesClientListResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get all the vmware sites in the subscription.
//
// Generated from API version 2020-07-07
//   - options - VMwareSitesClientListBySubscriptionOptions contains the optional parameters for the VMwareSitesClient.NewListBySubscriptionPager
//     method.
func (client *VMwareSitesClient) NewListBySubscriptionPager(options *VMwareSitesClientListBySubscriptionOptions) *runtime.Pager[VMwareSitesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[VMwareSitesClientListBySubscriptionResponse]{
		More: func(page VMwareSitesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *VMwareSitesClientListBySubscriptionResponse) (VMwareSitesClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return VMwareSitesClientListBySubscriptionResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return VMwareSitesClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return VMwareSitesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *VMwareSitesClient) listBySubscriptionCreateRequest(ctx context.Context, options *VMwareSitesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/VMwareSites"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *VMwareSitesClient) listBySubscriptionHandleResponse(resp *http.Response) (VMwareSitesClientListBySubscriptionResponse, error) {
	result := VMwareSitesClientListBySubscriptionResponse{}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.XMSRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMWareSitesResultList); err != nil {
		return VMwareSitesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}
