// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armhelp

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SimplifiedSolutionsResourcesClient contains the methods for the SimplifiedSolutionsResources group.
// Don't use this type directly, use NewSimplifiedSolutionsResourcesClient() instead.
type SimplifiedSolutionsResourcesClient struct {
	internal *arm.Client
}

// NewSimplifiedSolutionsResourcesClient creates a new instance of SimplifiedSolutionsResourcesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSimplifiedSolutionsResourcesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SimplifiedSolutionsResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SimplifiedSolutionsResourcesClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreate - Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the
// input. <br/><br/> Simplified Solutions API makes the consumption of solutions APIs easier while still providing access
// to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't have to worry about stitching
// together the article using replacement maps and can use the content in the API response to directly render as HTML content.<br/>
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - simplifiedSolutionsResourceName - Simplified Solutions Resource Name.
//   - simplifiedSolutionsRequestBody - The required request body for simplified Solutions resource creation.
//   - options - SimplifiedSolutionsResourcesClientBeginCreateOptions contains the optional parameters for the SimplifiedSolutionsResourcesClient.BeginCreate
//     method.
func (client *SimplifiedSolutionsResourcesClient) BeginCreate(ctx context.Context, scope string, simplifiedSolutionsResourceName string, simplifiedSolutionsRequestBody SimplifiedSolutionsResource, options *SimplifiedSolutionsResourcesClientBeginCreateOptions) (*runtime.Poller[SimplifiedSolutionsResourcesClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, scope, simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SimplifiedSolutionsResourcesClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SimplifiedSolutionsResourcesClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
// <br/><br/> Simplified Solutions API makes the consumption of solutions APIs easier while still providing access to the
// same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't have to worry about stitching
// together the article using replacement maps and can use the content in the API response to directly render as HTML content.<br/>
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
func (client *SimplifiedSolutionsResourcesClient) create(ctx context.Context, scope string, simplifiedSolutionsResourceName string, simplifiedSolutionsRequestBody SimplifiedSolutionsResource, options *SimplifiedSolutionsResourcesClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "SimplifiedSolutionsResourcesClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, scope, simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *SimplifiedSolutionsResourcesClient) createCreateRequest(ctx context.Context, scope string, simplifiedSolutionsResourceName string, simplifiedSolutionsRequestBody SimplifiedSolutionsResource, _ *SimplifiedSolutionsResourcesClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if simplifiedSolutionsResourceName == "" {
		return nil, errors.New("parameter simplifiedSolutionsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{simplifiedSolutionsResourceName}", url.PathEscape(simplifiedSolutionsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, simplifiedSolutionsRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Get the simplified Solutions using the applicable solutionResourceName while creating the simplified Solutions.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - simplifiedSolutionsResourceName - Simplified Solutions Resource Name.
//   - options - SimplifiedSolutionsResourcesClientGetOptions contains the optional parameters for the SimplifiedSolutionsResourcesClient.Get
//     method.
func (client *SimplifiedSolutionsResourcesClient) Get(ctx context.Context, scope string, simplifiedSolutionsResourceName string, options *SimplifiedSolutionsResourcesClientGetOptions) (SimplifiedSolutionsResourcesClientGetResponse, error) {
	var err error
	const operationName = "SimplifiedSolutionsResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, scope, simplifiedSolutionsResourceName, options)
	if err != nil {
		return SimplifiedSolutionsResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SimplifiedSolutionsResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SimplifiedSolutionsResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SimplifiedSolutionsResourcesClient) getCreateRequest(ctx context.Context, scope string, simplifiedSolutionsResourceName string, _ *SimplifiedSolutionsResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if simplifiedSolutionsResourceName == "" {
		return nil, errors.New("parameter simplifiedSolutionsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{simplifiedSolutionsResourceName}", url.PathEscape(simplifiedSolutionsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SimplifiedSolutionsResourcesClient) getHandleResponse(resp *http.Response) (SimplifiedSolutionsResourcesClientGetResponse, error) {
	result := SimplifiedSolutionsResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SimplifiedSolutionsResource); err != nil {
		return SimplifiedSolutionsResourcesClientGetResponse{}, err
	}
	return result, nil
}
