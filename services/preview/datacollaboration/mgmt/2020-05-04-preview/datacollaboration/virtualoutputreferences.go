package datacollaboration

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// VirtualOutputReferencesClient is the creates a Microsoft.DataCollaboration management client.
type VirtualOutputReferencesClient struct {
	BaseClient
}

// NewVirtualOutputReferencesClient creates an instance of the VirtualOutputReferencesClient client.
func NewVirtualOutputReferencesClient(subscriptionID string) VirtualOutputReferencesClient {
	return NewVirtualOutputReferencesClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewVirtualOutputReferencesClientWithBaseURI creates an instance of the VirtualOutputReferencesClient client using a
// custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds,
// Azure stack).
func NewVirtualOutputReferencesClientWithBaseURI(baseURI string, subscriptionID string) VirtualOutputReferencesClient {
	return VirtualOutputReferencesClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Get get a VirtualOutputReference in a Proposal
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// proposalName - the name of the proposal.
// referenceName - the name of the reference.
func (client VirtualOutputReferencesClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, proposalName string, referenceName string) (result VirtualOutputReference, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/VirtualOutputReferencesClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, workspaceName, proposalName, referenceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client VirtualOutputReferencesClient) GetPreparer(ctx context.Context, resourceGroupName string, workspaceName string, proposalName string, referenceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"proposalName":      autorest.Encode("path", proposalName),
		"referenceName":     autorest.Encode("path", referenceName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/proposals/{proposalName}/virtualOutputReferences/{referenceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client VirtualOutputReferencesClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client VirtualOutputReferencesClient) GetResponder(resp *http.Response) (result VirtualOutputReference, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByProposal list VirtualOutputReference in a Proposal
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// proposalName - the name of the proposal.
// skipToken - continuation token
func (client VirtualOutputReferencesClient) ListByProposal(ctx context.Context, resourceGroupName string, workspaceName string, proposalName string, skipToken string) (result VirtualOutputReferenceListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/VirtualOutputReferencesClient.ListByProposal")
		defer func() {
			sc := -1
			if result.vorl.Response.Response != nil {
				sc = result.vorl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByProposalNextResults
	req, err := client.ListByProposalPreparer(ctx, resourceGroupName, workspaceName, proposalName, skipToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "ListByProposal", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByProposalSender(req)
	if err != nil {
		result.vorl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "ListByProposal", resp, "Failure sending request")
		return
	}

	result.vorl, err = client.ListByProposalResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "ListByProposal", resp, "Failure responding to request")
		return
	}
	if result.vorl.hasNextLink() && result.vorl.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByProposalPreparer prepares the ListByProposal request.
func (client VirtualOutputReferencesClient) ListByProposalPreparer(ctx context.Context, resourceGroupName string, workspaceName string, proposalName string, skipToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"proposalName":      autorest.Encode("path", proposalName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/proposals/{proposalName}/virtualOutputReferences", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByProposalSender sends the ListByProposal request. The method will close the
// http.Response Body if it receives an error.
func (client VirtualOutputReferencesClient) ListByProposalSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByProposalResponder handles the response to the ListByProposal request. The method always
// closes the http.Response Body.
func (client VirtualOutputReferencesClient) ListByProposalResponder(resp *http.Response) (result VirtualOutputReferenceList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByProposalNextResults retrieves the next set of results, if any.
func (client VirtualOutputReferencesClient) listByProposalNextResults(ctx context.Context, lastResults VirtualOutputReferenceList) (result VirtualOutputReferenceList, err error) {
	req, err := lastResults.virtualOutputReferenceListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "listByProposalNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByProposalSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "listByProposalNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByProposalResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.VirtualOutputReferencesClient", "listByProposalNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByProposalComplete enumerates all values, automatically crossing page boundaries as required.
func (client VirtualOutputReferencesClient) ListByProposalComplete(ctx context.Context, resourceGroupName string, workspaceName string, proposalName string, skipToken string) (result VirtualOutputReferenceListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/VirtualOutputReferencesClient.ListByProposal")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByProposal(ctx, resourceGroupName, workspaceName, proposalName, skipToken)
	return
}
