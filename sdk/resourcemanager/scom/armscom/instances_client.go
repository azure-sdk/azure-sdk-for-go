// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armscom

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// InstancesClient contains the methods for the Instances group.
// Don't use this type directly, use NewInstancesClient() instead.
type InstancesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewInstancesClient creates a new instance of InstancesClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewInstancesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*InstancesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &InstancesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create or update SCOM managed instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - managedInstance - SCOM Managed Instance
//   - options - InstancesClientBeginCreateOrUpdateOptions contains the optional parameters for the InstancesClient.BeginCreateOrUpdate
//     method.
func (client *InstancesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, instanceName string, managedInstance ManagedInstance, options *InstancesClientBeginCreateOrUpdateOptions) (*runtime.Poller[InstancesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, instanceName, managedInstance, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[InstancesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[InstancesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create or update SCOM managed instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
func (client *InstancesClient) createOrUpdate(ctx context.Context, resourceGroupName string, instanceName string, managedInstance ManagedInstance, options *InstancesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "InstancesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, instanceName, managedInstance, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *InstancesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, managedInstance ManagedInstance, options *InstancesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	if options != nil && options.ValidationMode != nil {
		reqQP.Set("validationMode", strconv.FormatBool(*options.ValidationMode))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, managedInstance); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a SCOM managed instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - options - InstancesClientBeginDeleteOptions contains the optional parameters for the InstancesClient.BeginDelete method.
func (client *InstancesClient) BeginDelete(ctx context.Context, resourceGroupName string, instanceName string, options *InstancesClientBeginDeleteOptions) (*runtime.Poller[InstancesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, instanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[InstancesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[InstancesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a SCOM managed instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
func (client *InstancesClient) deleteOperation(ctx context.Context, resourceGroupName string, instanceName string, options *InstancesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "InstancesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, instanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *InstancesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, _ *InstancesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get SCOM managed instance details
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - options - InstancesClientGetOptions contains the optional parameters for the InstancesClient.Get method.
func (client *InstancesClient) Get(ctx context.Context, resourceGroupName string, instanceName string, options *InstancesClientGetOptions) (InstancesClientGetResponse, error) {
	var err error
	const operationName = "InstancesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, instanceName, options)
	if err != nil {
		return InstancesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return InstancesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return InstancesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *InstancesClient) getCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, _ *InstancesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *InstancesClient) getHandleResponse(resp *http.Response) (InstancesClientGetResponse, error) {
	result := InstancesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagedInstance); err != nil {
		return InstancesClientGetResponse{}, err
	}
	return result, nil
}

// BeginLinkLogAnalytics - Link Log Analytics workspace for SCOM monitoring instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - options - InstancesClientBeginLinkLogAnalyticsOptions contains the optional parameters for the InstancesClient.BeginLinkLogAnalytics
//     method.
func (client *InstancesClient) BeginLinkLogAnalytics(ctx context.Context, resourceGroupName string, instanceName string, body LogAnalyticsConfiguration, options *InstancesClientBeginLinkLogAnalyticsOptions) (*runtime.Poller[InstancesClientLinkLogAnalyticsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.linkLogAnalytics(ctx, resourceGroupName, instanceName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[InstancesClientLinkLogAnalyticsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[InstancesClientLinkLogAnalyticsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// LinkLogAnalytics - Link Log Analytics workspace for SCOM monitoring instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
func (client *InstancesClient) linkLogAnalytics(ctx context.Context, resourceGroupName string, instanceName string, body LogAnalyticsConfiguration, options *InstancesClientBeginLinkLogAnalyticsOptions) (*http.Response, error) {
	var err error
	const operationName = "InstancesClient.BeginLinkLogAnalytics"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.linkLogAnalyticsCreateRequest(ctx, resourceGroupName, instanceName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// linkLogAnalyticsCreateRequest creates the LinkLogAnalytics request.
func (client *InstancesClient) linkLogAnalyticsCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, body LogAnalyticsConfiguration, _ *InstancesClientBeginLinkLogAnalyticsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/linkLogAnalytics"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// NewListByResourceGroupPager - Lists all SCOM managed instances in a resource group
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - InstancesClientListByResourceGroupOptions contains the optional parameters for the InstancesClient.NewListByResourceGroupPager
//     method.
func (client *InstancesClient) NewListByResourceGroupPager(resourceGroupName string, options *InstancesClientListByResourceGroupOptions) *runtime.Pager[InstancesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[InstancesClientListByResourceGroupResponse]{
		More: func(page InstancesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *InstancesClientListByResourceGroupResponse) (InstancesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "InstancesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return InstancesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *InstancesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *InstancesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *InstancesClient) listByResourceGroupHandleResponse(resp *http.Response) (InstancesClientListByResourceGroupResponse, error) {
	result := InstancesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoringInstanceList); err != nil {
		return InstancesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Lists all SCOM managed instances in a subscription
//
// Generated from API version 2023-07-07-preview
//   - options - InstancesClientListBySubscriptionOptions contains the optional parameters for the InstancesClient.NewListBySubscriptionPager
//     method.
func (client *InstancesClient) NewListBySubscriptionPager(options *InstancesClientListBySubscriptionOptions) *runtime.Pager[InstancesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[InstancesClientListBySubscriptionResponse]{
		More: func(page InstancesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *InstancesClientListBySubscriptionResponse) (InstancesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "InstancesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return InstancesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *InstancesClient) listBySubscriptionCreateRequest(ctx context.Context, _ *InstancesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Scom/managedInstances"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *InstancesClient) listBySubscriptionHandleResponse(resp *http.Response) (InstancesClientListBySubscriptionResponse, error) {
	result := InstancesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoringInstanceList); err != nil {
		return InstancesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginPatchServers - Update SCOM servers with latest scom software.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - options - InstancesClientBeginPatchServersOptions contains the optional parameters for the InstancesClient.BeginPatchServers
//     method.
func (client *InstancesClient) BeginPatchServers(ctx context.Context, resourceGroupName string, instanceName string, options *InstancesClientBeginPatchServersOptions) (*runtime.Poller[InstancesClientPatchServersResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.patchServers(ctx, resourceGroupName, instanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[InstancesClientPatchServersResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[InstancesClientPatchServersResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// PatchServers - Update SCOM servers with latest scom software.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
func (client *InstancesClient) patchServers(ctx context.Context, resourceGroupName string, instanceName string, options *InstancesClientBeginPatchServersOptions) (*http.Response, error) {
	var err error
	const operationName = "InstancesClient.BeginPatchServers"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchServersCreateRequest(ctx, resourceGroupName, instanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// patchServersCreateRequest creates the PatchServers request.
func (client *InstancesClient) patchServersCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, _ *InstancesClientBeginPatchServersOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/patchServers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginScale - Scaling SCOM managed instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - options - InstancesClientBeginScaleOptions contains the optional parameters for the InstancesClient.BeginScale method.
func (client *InstancesClient) BeginScale(ctx context.Context, resourceGroupName string, instanceName string, body ScalingProperties, options *InstancesClientBeginScaleOptions) (*runtime.Poller[InstancesClientScaleResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.scale(ctx, resourceGroupName, instanceName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[InstancesClientScaleResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[InstancesClientScaleResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Scale - Scaling SCOM managed instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
func (client *InstancesClient) scale(ctx context.Context, resourceGroupName string, instanceName string, body ScalingProperties, options *InstancesClientBeginScaleOptions) (*http.Response, error) {
	var err error
	const operationName = "InstancesClient.BeginScale"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.scaleCreateRequest(ctx, resourceGroupName, instanceName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// scaleCreateRequest creates the Scale request.
func (client *InstancesClient) scaleCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, body ScalingProperties, _ *InstancesClientBeginScaleOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/setServerCount"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUnlinkLogAnalytics - Unlink Log Analytics workspace for SCOM monitoring instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - options - InstancesClientBeginUnlinkLogAnalyticsOptions contains the optional parameters for the InstancesClient.BeginUnlinkLogAnalytics
//     method.
func (client *InstancesClient) BeginUnlinkLogAnalytics(ctx context.Context, resourceGroupName string, instanceName string, options *InstancesClientBeginUnlinkLogAnalyticsOptions) (*runtime.Poller[InstancesClientUnlinkLogAnalyticsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.unlinkLogAnalytics(ctx, resourceGroupName, instanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[InstancesClientUnlinkLogAnalyticsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[InstancesClientUnlinkLogAnalyticsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// UnlinkLogAnalytics - Unlink Log Analytics workspace for SCOM monitoring instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
func (client *InstancesClient) unlinkLogAnalytics(ctx context.Context, resourceGroupName string, instanceName string, options *InstancesClientBeginUnlinkLogAnalyticsOptions) (*http.Response, error) {
	var err error
	const operationName = "InstancesClient.BeginUnlinkLogAnalytics"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unlinkLogAnalyticsCreateRequest(ctx, resourceGroupName, instanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// unlinkLogAnalyticsCreateRequest creates the UnlinkLogAnalytics request.
func (client *InstancesClient) unlinkLogAnalyticsCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, _ *InstancesClientBeginUnlinkLogAnalyticsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/unlinkLogAnalytics"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginUpdate - Patch SCOM managed instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - managedInstance - SCOM managed instance properties update
//   - options - InstancesClientBeginUpdateOptions contains the optional parameters for the InstancesClient.BeginUpdate method.
func (client *InstancesClient) BeginUpdate(ctx context.Context, resourceGroupName string, instanceName string, managedInstance MonitoringInstancePatch, options *InstancesClientBeginUpdateOptions) (*runtime.Poller[InstancesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, instanceName, managedInstance, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[InstancesClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[InstancesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Patch SCOM managed instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
func (client *InstancesClient) update(ctx context.Context, resourceGroupName string, instanceName string, managedInstance MonitoringInstancePatch, options *InstancesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "InstancesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, instanceName, managedInstance, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *InstancesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, managedInstance MonitoringInstancePatch, _ *InstancesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, managedInstance); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdateLogAnalytics - Update configuration for log analytics linking for SCOM monitoring instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - options - InstancesClientBeginUpdateLogAnalyticsOptions contains the optional parameters for the InstancesClient.BeginUpdateLogAnalytics
//     method.
func (client *InstancesClient) BeginUpdateLogAnalytics(ctx context.Context, resourceGroupName string, instanceName string, body LogAnalyticsUpdateConfiguration, options *InstancesClientBeginUpdateLogAnalyticsOptions) (*runtime.Poller[InstancesClientUpdateLogAnalyticsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateLogAnalytics(ctx, resourceGroupName, instanceName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[InstancesClientUpdateLogAnalyticsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[InstancesClientUpdateLogAnalyticsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// UpdateLogAnalytics - Update configuration for log analytics linking for SCOM monitoring instance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
func (client *InstancesClient) updateLogAnalytics(ctx context.Context, resourceGroupName string, instanceName string, body LogAnalyticsUpdateConfiguration, options *InstancesClientBeginUpdateLogAnalyticsOptions) (*http.Response, error) {
	var err error
	const operationName = "InstancesClient.BeginUpdateLogAnalytics"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateLogAnalyticsCreateRequest(ctx, resourceGroupName, instanceName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateLogAnalyticsCreateRequest creates the UpdateLogAnalytics request.
func (client *InstancesClient) updateLogAnalyticsCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, body LogAnalyticsUpdateConfiguration, _ *InstancesClientBeginUpdateLogAnalyticsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/updateLogAnalytics"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
