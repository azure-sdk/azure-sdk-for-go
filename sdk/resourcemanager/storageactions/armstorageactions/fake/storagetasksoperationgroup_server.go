// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storageactions/armstorageactions"
	"net/http"
	"net/url"
	"regexp"
)

// StorageTasksOperationGroupServer is a fake server for instances of the armstorageactions.StorageTasksOperationGroupClient type.
type StorageTasksOperationGroupServer struct {
	// PreviewActions is the fake for method StorageTasksOperationGroupClient.PreviewActions
	// HTTP status codes to indicate success: http.StatusOK
	PreviewActions func(ctx context.Context, location string, parameters armstorageactions.StorageTaskPreviewAction, options *armstorageactions.StorageTasksOperationGroupClientPreviewActionsOptions) (resp azfake.Responder[armstorageactions.StorageTasksOperationGroupClientPreviewActionsResponse], errResp azfake.ErrorResponder)
}

// NewStorageTasksOperationGroupServerTransport creates a new instance of StorageTasksOperationGroupServerTransport with the provided implementation.
// The returned StorageTasksOperationGroupServerTransport instance is connected to an instance of armstorageactions.StorageTasksOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewStorageTasksOperationGroupServerTransport(srv *StorageTasksOperationGroupServer) *StorageTasksOperationGroupServerTransport {
	return &StorageTasksOperationGroupServerTransport{srv: srv}
}

// StorageTasksOperationGroupServerTransport connects instances of armstorageactions.StorageTasksOperationGroupClient to instances of StorageTasksOperationGroupServer.
// Don't use this type directly, use NewStorageTasksOperationGroupServerTransport instead.
type StorageTasksOperationGroupServerTransport struct {
	srv *StorageTasksOperationGroupServer
}

// Do implements the policy.Transporter interface for StorageTasksOperationGroupServerTransport.
func (s *StorageTasksOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *StorageTasksOperationGroupServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if storageTasksOperationGroupServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = storageTasksOperationGroupServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "StorageTasksOperationGroupClient.PreviewActions":
				res.resp, res.err = s.dispatchPreviewActions(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *StorageTasksOperationGroupServerTransport) dispatchPreviewActions(req *http.Request) (*http.Response, error) {
	if s.srv.PreviewActions == nil {
		return nil, &nonRetriableError{errors.New("fake for method PreviewActions not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.StorageActions/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/previewActions`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armstorageactions.StorageTaskPreviewAction](req)
	if err != nil {
		return nil, err
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.PreviewActions(req.Context(), locationParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StorageTaskPreviewAction, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to StorageTasksOperationGroupServerTransport
var storageTasksOperationGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
