//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappcontainers

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ContainerAppsSessionPoolSessionsClient contains the methods for the ContainerAppsSessionPoolSessions group.
// Don't use this type directly, use NewContainerAppsSessionPoolSessionsClient() instead.
type ContainerAppsSessionPoolSessionsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewContainerAppsSessionPoolSessionsClient creates a new instance of ContainerAppsSessionPoolSessionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewContainerAppsSessionPoolSessionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ContainerAppsSessionPoolSessionsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ContainerAppsSessionPoolSessionsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// NewGenerateSessionsPager - Generate Sessions from a Session Pool.
//
// Generated from API version 2024-02-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - sessionPoolName - Name of the Session Pool.
//   - sessionEnvelope - Properties used to generate a session
//   - options - ContainerAppsSessionPoolSessionsClientGenerateSessionsOptions contains the optional parameters for the ContainerAppsSessionPoolSessionsClient.NewGenerateSessionsPager
//     method.
func (client *ContainerAppsSessionPoolSessionsClient) NewGenerateSessionsPager(resourceGroupName string, sessionPoolName string, sessionEnvelope Session, options *ContainerAppsSessionPoolSessionsClientGenerateSessionsOptions) *runtime.Pager[ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse]{
		More: func(page ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse) (ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ContainerAppsSessionPoolSessionsClient.NewGenerateSessionsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.generateSessionsCreateRequest(ctx, resourceGroupName, sessionPoolName, sessionEnvelope, options)
			}, nil)
			if err != nil {
				return ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse{}, err
			}
			return client.generateSessionsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// generateSessionsCreateRequest creates the GenerateSessions request.
func (client *ContainerAppsSessionPoolSessionsClient) generateSessionsCreateRequest(ctx context.Context, resourceGroupName string, sessionPoolName string, sessionEnvelope Session, options *ContainerAppsSessionPoolSessionsClientGenerateSessionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/generateSessions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sessionPoolName == "" {
		return nil, errors.New("parameter sessionPoolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sessionPoolName}", url.PathEscape(sessionPoolName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, sessionEnvelope); err != nil {
		return nil, err
	}
	return req, nil
}

// generateSessionsHandleResponse handles the GenerateSessions response.
func (client *ContainerAppsSessionPoolSessionsClient) generateSessionsHandleResponse(resp *http.Response) (ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse, error) {
	result := ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SessionCollection); err != nil {
		return ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse{}, err
	}
	return result, nil
}

// Get - Get the properties of a Session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - sessionPoolName - Name of the Session Pool.
//   - name - Name of the Session.
//   - options - ContainerAppsSessionPoolSessionsClientGetOptions contains the optional parameters for the ContainerAppsSessionPoolSessionsClient.Get
//     method.
func (client *ContainerAppsSessionPoolSessionsClient) Get(ctx context.Context, resourceGroupName string, sessionPoolName string, name string, options *ContainerAppsSessionPoolSessionsClientGetOptions) (ContainerAppsSessionPoolSessionsClientGetResponse, error) {
	var err error
	const operationName = "ContainerAppsSessionPoolSessionsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, sessionPoolName, name, options)
	if err != nil {
		return ContainerAppsSessionPoolSessionsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ContainerAppsSessionPoolSessionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ContainerAppsSessionPoolSessionsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ContainerAppsSessionPoolSessionsClient) getCreateRequest(ctx context.Context, resourceGroupName string, sessionPoolName string, name string, options *ContainerAppsSessionPoolSessionsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/sessions/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sessionPoolName == "" {
		return nil, errors.New("parameter sessionPoolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sessionPoolName}", url.PathEscape(sessionPoolName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ContainerAppsSessionPoolSessionsClient) getHandleResponse(resp *http.Response) (ContainerAppsSessionPoolSessionsClientGetResponse, error) {
	result := ContainerAppsSessionPoolSessionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Session); err != nil {
		return ContainerAppsSessionPoolSessionsClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySessionPoolPager - Get the Session Pools in a Session Pool.
//
// Generated from API version 2024-02-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - sessionPoolName - Name of the Session Pool.
//   - options - ContainerAppsSessionPoolSessionsClientListBySessionPoolOptions contains the optional parameters for the ContainerAppsSessionPoolSessionsClient.NewListBySessionPoolPager
//     method.
func (client *ContainerAppsSessionPoolSessionsClient) NewListBySessionPoolPager(resourceGroupName string, sessionPoolName string, options *ContainerAppsSessionPoolSessionsClientListBySessionPoolOptions) *runtime.Pager[ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse] {
	return runtime.NewPager(runtime.PagingHandler[ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse]{
		More: func(page ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse) (ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ContainerAppsSessionPoolSessionsClient.NewListBySessionPoolPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySessionPoolCreateRequest(ctx, resourceGroupName, sessionPoolName, options)
			}, nil)
			if err != nil {
				return ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse{}, err
			}
			return client.listBySessionPoolHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySessionPoolCreateRequest creates the ListBySessionPool request.
func (client *ContainerAppsSessionPoolSessionsClient) listBySessionPoolCreateRequest(ctx context.Context, resourceGroupName string, sessionPoolName string, options *ContainerAppsSessionPoolSessionsClientListBySessionPoolOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/sessions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sessionPoolName == "" {
		return nil, errors.New("parameter sessionPoolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sessionPoolName}", url.PathEscape(sessionPoolName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySessionPoolHandleResponse handles the ListBySessionPool response.
func (client *ContainerAppsSessionPoolSessionsClient) listBySessionPoolHandleResponse(resp *http.Response) (ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse, error) {
	result := ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SessionCollection); err != nil {
		return ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse{}, err
	}
	return result, nil
}

// UpdateEnvironmentVariables - Update environment variables of a Session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-02-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - sessionPoolName - Name of the Session Pool.
//   - name - Name of the Session.
//   - environmentVariables - Environment variables to update
//   - options - ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesOptions contains the optional parameters for
//     the ContainerAppsSessionPoolSessionsClient.UpdateEnvironmentVariables method.
func (client *ContainerAppsSessionPoolSessionsClient) UpdateEnvironmentVariables(ctx context.Context, resourceGroupName string, sessionPoolName string, name string, environmentVariables EnvironmentVariableCollection, options *ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesOptions) (ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesResponse, error) {
	var err error
	const operationName = "ContainerAppsSessionPoolSessionsClient.UpdateEnvironmentVariables"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateEnvironmentVariablesCreateRequest(ctx, resourceGroupName, sessionPoolName, name, environmentVariables, options)
	if err != nil {
		return ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesResponse{}, err
	}
	return ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesResponse{}, nil
}

// updateEnvironmentVariablesCreateRequest creates the UpdateEnvironmentVariables request.
func (client *ContainerAppsSessionPoolSessionsClient) updateEnvironmentVariablesCreateRequest(ctx context.Context, resourceGroupName string, sessionPoolName string, name string, environmentVariables EnvironmentVariableCollection, options *ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/sessions/{name}/updateEnvironmentVariables"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sessionPoolName == "" {
		return nil, errors.New("parameter sessionPoolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sessionPoolName}", url.PathEscape(sessionPoolName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, environmentVariables); err != nil {
		return nil, err
	}
	return req, nil
}
