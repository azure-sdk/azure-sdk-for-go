package eventhub

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// NetworkSecurityPerimeterConfigurationsClient is the client for the NetworkSecurityPerimeterConfigurations methods of
// the Eventhub service.
type NetworkSecurityPerimeterConfigurationsClient struct {
	BaseClient
}

// NewNetworkSecurityPerimeterConfigurationsClient creates an instance of the
// NetworkSecurityPerimeterConfigurationsClient client.
func NewNetworkSecurityPerimeterConfigurationsClient(subscriptionID string) NetworkSecurityPerimeterConfigurationsClient {
	return NewNetworkSecurityPerimeterConfigurationsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewNetworkSecurityPerimeterConfigurationsClientWithBaseURI creates an instance of the
// NetworkSecurityPerimeterConfigurationsClient client using a custom endpoint.  Use this when interacting with an
// Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewNetworkSecurityPerimeterConfigurationsClientWithBaseURI(baseURI string, subscriptionID string) NetworkSecurityPerimeterConfigurationsClient {
	return NetworkSecurityPerimeterConfigurationsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdate refreshes any information about the association.
// Parameters:
// resourceGroupName - name of the resource group within the azure subscription.
// namespaceName - the Namespace name
// resourceAssociationName - the ResourceAssociation Name
func (client NetworkSecurityPerimeterConfigurationsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, resourceAssociationName string) (result NetworkSecurityPerimeterConfigurationsCreateOrUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/NetworkSecurityPerimeterConfigurationsClient.CreateOrUpdate")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: namespaceName,
			Constraints: []validation.Constraint{{Target: "namespaceName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "namespaceName", Name: validation.MinLength, Rule: 6, Chain: nil}}}}); err != nil {
		return result, validation.NewError("eventhub.NetworkSecurityPerimeterConfigurationsClient", "CreateOrUpdate", err.Error())
	}

	req, err := client.CreateOrUpdatePreparer(ctx, resourceGroupName, namespaceName, resourceAssociationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "eventhub.NetworkSecurityPerimeterConfigurationsClient", "CreateOrUpdate", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "eventhub.NetworkSecurityPerimeterConfigurationsClient", "CreateOrUpdate", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
func (client NetworkSecurityPerimeterConfigurationsClient) CreateOrUpdatePreparer(ctx context.Context, resourceGroupName string, namespaceName string, resourceAssociationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"namespaceName":           autorest.Encode("path", namespaceName),
		"resourceAssociationName": autorest.Encode("path", resourceAssociationName),
		"resourceGroupName":       autorest.Encode("path", resourceGroupName),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-01-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkSecurityPerimeterConfigurations/{resourceAssociationName}/reconcile", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
// http.Response Body if it receives an error.
func (client NetworkSecurityPerimeterConfigurationsClient) CreateOrUpdateSender(req *http.Request) (future NetworkSecurityPerimeterConfigurationsCreateOrUpdateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
// closes the http.Response Body.
func (client NetworkSecurityPerimeterConfigurationsClient) CreateOrUpdateResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}
