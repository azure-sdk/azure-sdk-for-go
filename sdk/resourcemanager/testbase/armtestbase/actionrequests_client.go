//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armtestbase

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ActionRequestsClient contains the methods for the ActionRequests group.
// Don't use this type directly, use NewActionRequestsClient() instead.
type ActionRequestsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewActionRequestsClient creates a new instance of ActionRequestsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewActionRequestsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ActionRequestsClient, error) {
	cl, err := arm.NewClient(moduleName+".ActionRequestsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ActionRequestsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Delete - Create (submit) an action request. Only requests in review can be deleted.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - testBaseAccountName - The resource name of the Test Base Account.
//   - options - ActionRequestsClientDeleteOptions contains the optional parameters for the ActionRequestsClient.Delete method.
func (client *ActionRequestsClient) Delete(ctx context.Context, resourceGroupName string, testBaseAccountName string, actionRequestName string, options *ActionRequestsClientDeleteOptions) (ActionRequestsClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, testBaseAccountName, actionRequestName, options)
	if err != nil {
		return ActionRequestsClientDeleteResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ActionRequestsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ActionRequestsClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return ActionRequestsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ActionRequestsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, actionRequestName string, options *ActionRequestsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/actionRequests/{actionRequestName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	if actionRequestName == "" {
		return nil, errors.New("parameter actionRequestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{actionRequestName}", url.PathEscape(actionRequestName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// List - List all action requests under the specified test base account.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - testBaseAccountName - The resource name of the Test Base Account.
//   - options - ActionRequestsClientListOptions contains the optional parameters for the ActionRequestsClient.List method.
func (client *ActionRequestsClient) List(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *ActionRequestsClientListOptions) (ActionRequestsClientListResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, testBaseAccountName, options)
	if err != nil {
		return ActionRequestsClientListResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ActionRequestsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ActionRequestsClientListResponse{}, runtime.NewResponseError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *ActionRequestsClient) listCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *ActionRequestsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/actionRequests"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01-preview")
	if options != nil && options.RequestType != nil {
		reqQP.Set("requestType", *options.RequestType)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ActionRequestsClient) listHandleResponse(resp *http.Response) (ActionRequestsClientListResponse, error) {
	result := ActionRequestsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ActionRequests); err != nil {
		return ActionRequestsClientListResponse{}, err
	}
	return result, nil
}

// Put - Create (submit) an action request.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - testBaseAccountName - The resource name of the Test Base Account.
//   - options - ActionRequestsClientPutOptions contains the optional parameters for the ActionRequestsClient.Put method.
func (client *ActionRequestsClient) Put(ctx context.Context, resourceGroupName string, testBaseAccountName string, actionRequestName string, options *ActionRequestsClientPutOptions) (ActionRequestsClientPutResponse, error) {
	req, err := client.putCreateRequest(ctx, resourceGroupName, testBaseAccountName, actionRequestName, options)
	if err != nil {
		return ActionRequestsClientPutResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ActionRequestsClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ActionRequestsClientPutResponse{}, runtime.NewResponseError(resp)
	}
	return client.putHandleResponse(resp)
}

// putCreateRequest creates the Put request.
func (client *ActionRequestsClient) putCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, actionRequestName string, options *ActionRequestsClientPutOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/actionRequests/{actionRequestName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	if actionRequestName == "" {
		return nil, errors.New("parameter actionRequestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{actionRequestName}", url.PathEscape(actionRequestName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.ActionRequest != nil {
		return req, runtime.MarshalAsJSON(req, *options.ActionRequest)
	}
	return req, nil
}

// putHandleResponse handles the Put response.
func (client *ActionRequestsClient) putHandleResponse(resp *http.Response) (ActionRequestsClientPutResponse, error) {
	result := ActionRequestsClientPutResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ActionRequest); err != nil {
		return ActionRequestsClientPutResponse{}, err
	}
	return result, nil
}
