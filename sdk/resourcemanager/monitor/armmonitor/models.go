// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import "time"

// ActionDetail - The action detail
type ActionDetail struct {
	// The detail of the friendly error message
	Detail *string

	// The mechanism type
	MechanismType *string

	// The name of the action
	Name *string

	// The send time
	SendTime *string

	// The status of the action
	Status *string

	// The substatus of the action
	SubState *string
}

// ActionGroup - An Azure action group.
type ActionGroup struct {
	// REQUIRED; Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers
	// will receive communications.
	Enabled *bool

	// REQUIRED; The short name of the action group. This will be used in SMS messages.
	GroupShortName *string

	// The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are
	// supported.
	ArmRoleReceivers []*ArmRoleReceiver

	// The list of AutomationRunbook receivers that are part of this action group.
	AutomationRunbookReceivers []*AutomationRunbookReceiver

	// The list of AzureAppPush receivers that are part of this action group.
	AzureAppPushReceivers []*AzureAppPushReceiver

	// The list of azure function receivers that are part of this action group.
	AzureFunctionReceivers []*AzureFunctionReceiver

	// The list of email receivers that are part of this action group.
	EmailReceivers []*EmailReceiver

	// The list of event hub receivers that are part of this action group.
	EventHubReceivers []*EventHubReceiver

	// The list of incident receivers that are part of this action group.
	IncidentReceivers []*IncidentReceiver

	// The list of ITSM receivers that are part of this action group.
	ItsmReceivers []*ItsmReceiver

	// The list of logic app receivers that are part of this action group.
	LogicAppReceivers []*LogicAppReceiver

	// The list of SMS receivers that are part of this action group.
	SmsReceivers []*SmsReceiver

	// The list of voice receivers that are part of this action group.
	VoiceReceivers []*VoiceReceiver

	// The list of webhook receivers that are part of this action group.
	WebhookReceivers []*WebhookReceiver
}

// ActionGroupList - A list of action groups.
type ActionGroupList struct {
	// Provides the link to retrieve the next set of elements.
	NextLink *string

	// The list of action groups.
	Value []*ActionGroupResource
}

// ActionGroupPatch - An Azure action group for patch operations.
type ActionGroupPatch struct {
	// Indicates whether this action group is enabled. If an action group is not enabled, then none of its actions will be activated.
	Enabled *bool
}

// ActionGroupPatchBody - An action group object for the body of patch operations.
type ActionGroupPatchBody struct {
	// Managed service identity (system assigned and/or user assigned identities)
	Identity *ManagedServiceIdentity

	// The action group settings for an update operation.
	Properties *ActionGroupPatch

	// Resource tags
	Tags map[string]*string
}

// ActionGroupResource - An action group resource.
type ActionGroupResource struct {
	// REQUIRED; Resource location
	Location *string

	// Managed service identity (system assigned and/or user assigned identities)
	Identity *ManagedServiceIdentity

	// The action groups properties of the resource.
	Properties *ActionGroup

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Azure resource Id
	ID *string

	// READ-ONLY; Azure resource name
	Name *string

	// READ-ONLY; Azure resource type
	Type *string
}

// Actions to invoke when the alert fires.
type Actions struct {
	// Action Group resource Ids to invoke when the alert fires.
	ActionGroups []*string

	// The properties of an action properties.
	ActionProperties map[string]*string

	// The properties of an alert payload.
	CustomProperties map[string]*string
}

// ArmRoleReceiver - An arm role receiver.
type ArmRoleReceiver struct {
	// REQUIRED; The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name *string

	// REQUIRED; The arm role id.
	RoleID *string

	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool
}

// AutomationRunbookReceiver - The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiver struct {
	// REQUIRED; The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountID *string

	// REQUIRED; Indicates whether this instance is global runbook.
	IsGlobalRunbook *bool

	// REQUIRED; The name for this runbook.
	RunbookName *string

	// REQUIRED; The resource id for webhook linked to this runbook.
	WebhookResourceID *string

	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string

	// Indicates name of the webhook.
	Name *string

	// The URI where webhooks should be sent.
	ServiceURI *string

	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool
}

// AzureAppPushReceiver - The Azure mobile App push notification receiver.
type AzureAppPushReceiver struct {
	// REQUIRED; The email address registered for the Azure mobile app.
	EmailAddress *string

	// REQUIRED; The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name *string
}

// AzureFunctionReceiver - An azure function receiver.
type AzureFunctionReceiver struct {
	// REQUIRED; The azure resource id of the function app.
	FunctionAppResourceID *string

	// REQUIRED; The function name in the function app.
	FunctionName *string

	// REQUIRED; The http trigger url where http request sent to.
	HTTPTriggerURL *string

	// REQUIRED; The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name *string

	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string

	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool
}

// AzureResource - An azure resource object
type AzureResource struct {
	// REQUIRED; Resource location
	Location *string

	// Managed service identity (system assigned and/or user assigned identities)
	Identity *ManagedServiceIdentity

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Azure resource Id
	ID *string

	// READ-ONLY; Azure resource name
	Name *string

	// READ-ONLY; Azure resource type
	Type *string
}

// Condition - A condition of the scheduled query rule.
type Condition struct {
	// The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how
	// tight the threshold is to the metric series pattern. Relevant only for dynamic
	// threshold rules of the kind LogAlert.
	AlertSensitivity *string

	// Specifies the type of threshold criteria
	CriterionType *CriterionType

	// List of Dimensions conditions
	Dimensions []*Dimension

	// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant
	// only for rules of the kind LogAlert.
	FailingPeriods *ConditionFailingPeriods

	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds
	// (in ISO8601 format). Relevant only for dynamic threshold rules of the kind
	// LogAlert.
	IgnoreDataBefore *time.Time

	// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
	MetricMeasureColumn *string

	// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
	MetricName *string

	// The minimum results count that should be found for triggering an alert. Relevant only for rules of the kind SimpleLogAlert.
	MinRecurrenceCount *int64

	// The criteria operator. Relevant and required only for rules of the kind LogAlert.
	Operator *ConditionOperator

	// Log query alert
	Query *string

	// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only
	// for rules of the kind LogAlert.
	ResourceIDColumn *string

	// the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind
	// LogAlert.
	Threshold *float64

	// Aggregation type. Relevant and required only for rules of the kind LogAlert.
	TimeAggregation *TimeAggregation
}

// ConditionFailingPeriods - The minimum number of violations required within the selected lookback time window required to
// raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionFailingPeriods struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is
	// 1
	MinFailingPeriodsToAlert *int64

	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize)
	// and the selected number of aggregated points. Default value is 1
	NumberOfEvaluationPeriods *int64
}

// Context - The context info
type Context struct {
	// The context id type
	ContextType *string

	// The source of the notification request
	NotificationSource *string
}

// Dimension splitting and filtering definition
type Dimension struct {
	// REQUIRED; Name of the dimension
	Name *string

	// REQUIRED; Operator for dimension values
	Operator *DimensionOperator

	// REQUIRED; List of dimension values
	Values []*string
}

// EmailReceiver - An email receiver.
type EmailReceiver struct {
	// REQUIRED; The email address of this receiver.
	EmailAddress *string

	// REQUIRED; The name of the email receiver. Names must be unique across all receivers within an action group.
	Name *string

	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool

	// READ-ONLY; The receiver status of the e-mail.
	Status *ReceiverStatus
}

// EnableRequest - Describes a receiver that should be resubscribed.
type EnableRequest struct {
	// REQUIRED; The name of the receiver to resubscribe.
	ReceiverName *string
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorContract - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.)
type ErrorContract struct {
	// The error object.
	Error *ErrorResponseAutoGenerated2
}

// ErrorResponse - Describes the format of Error response.
type ErrorResponse struct {
	// Error code
	Code *string

	// Error message indicating why the operation failed.
	Message *string
}

type ErrorResponseAutoGenerated struct {
	Error *ErrorResponseError
}

// ErrorResponseAutoGenerated2 - Common error response for all Azure Resource Manager APIs to return error details for failed
// operations. (This also follows the OData error response format.)
type ErrorResponseAutoGenerated2 struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorResponseAutoGenerated2

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

type ErrorResponseError struct {
	// Error code
	Code *string

	// Error message
	Message *string
}

// EventHubReceiver - An Event hub receiver.
type EventHubReceiver struct {
	// REQUIRED; The name of the specific Event Hub queue
	EventHubName *string

	// REQUIRED; The Event Hub namespace
	EventHubNameSpace *string

	// REQUIRED; The name of the Event hub receiver. Names must be unique across all receivers within an action group.
	Name *string

	// REQUIRED; The Id for the subscription containing this event hub
	SubscriptionID *string

	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string

	// The tenant Id for the subscription containing this event hub
	TenantID *string

	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool
}

// Identity for the resource.
type Identity struct {
	// REQUIRED; Type of managed service identity.
	Type *IdentityType

	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource
	// ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*UserIdentityProperties

	// READ-ONLY; The principal ID of resource identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of resource.
	TenantID *string
}

// IncidentReceiver - An Incident receiver.
type IncidentReceiver struct {
	// REQUIRED; The incident service connection
	Connection *IncidentServiceConnection

	// REQUIRED; The incident management service type
	IncidentManagementService *IncidentManagementService

	// REQUIRED; Field mappings for the incident service
	Mappings map[string]*string

	// REQUIRED; The name of the Incident receiver. Names must be unique across all receivers within an action group.
	Name *string
}

// IncidentServiceConnection - The connection info for Incident Receiver.
type IncidentServiceConnection struct {
	// REQUIRED; GUID value representing the connection ID for the incident management service.
	ID *string

	// REQUIRED; The name of the connection.
	Name *string
}

// ItsmReceiver - An Itsm receiver.
type ItsmReceiver struct {
	// REQUIRED; Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionID *string

	// REQUIRED; The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name *string

	// REQUIRED; Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region *string

	// REQUIRED; JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob
	// as well.
	TicketConfiguration *string

	// REQUIRED; OMS LA instance identifier.
	WorkspaceID *string
}

// LogicAppReceiver - A logic app receiver.
type LogicAppReceiver struct {
	// REQUIRED; The callback url where http request sent to.
	CallbackURL *string

	// REQUIRED; The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name *string

	// REQUIRED; The azure resource id of the logic app receiver.
	ResourceID *string

	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string

	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType

	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
	// resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	// The dictionary values can be empty objects ({}) in
	// requests.
	UserAssignedIdentities map[string]*UserAssignedIdentity

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

type MetricAlertResource struct {
	// REQUIRED; Indicates the type of metric alert
	Kind *MetricAlertResourceKind

	// Azure resource Id
	ID *string

	// Resource location
	Location *string

	// Azure resource name
	Name       *string
	Properties *MetricAlertsPropertiesBase

	// Resource tags
	Tags map[string]*string

	// Azure resource type
	Type *string
}

type MetricAlertResourceCollection struct {
	// List of metric alert rules
	Value []*MetricAlertResource
}

type MetricAlertResourcePatch struct {
	Properties *MetricAlertResourcePatchProperties

	// Resource tags
	Tags map[string]*string
}

type MetricAlertResourcePatchProperties struct {
	// The actions to take when the alert fires
	Actions []*MetricAlertRuleAction

	// Indicates whether this alert rule is enabled
	Enabled *bool
}

type MetricAlertRuleAction struct {
	// The resource ID of the action group
	ActionGroupID *string
}

type MetricAlertRuleCriteria struct {
	// The operator used to compare the metric value against the threshold
	Operator *MetricAlertRuleCriteriaOperator

	// The threshold value that activates the alert
	Threshold *float32
}

type MetricAlertsMetricProperties struct {
	// REQUIRED
	Criteria *MetricAlertRuleCriteria

	// REQUIRED; Indicates whether this alert rule is enabled
	Enabled *bool

	// REQUIRED; The frequency with which the metric alert is evaluated
	EvaluationFrequency *string

	// REQUIRED; The list of resource id's being monitored
	Scopes []*string

	// REQUIRED; The severity of the metric alert
	Severity *int32

	// REQUIRED; The period of time that is used to monitor alert activity
	WindowSize *string

	// Properties to customize alert actions
	ActionProperties map[string]*string

	// The actions to take when the alert fires
	Actions []*MetricAlertRuleAction

	// Indicates whether the alert should be auto resolved
	AutoMitigate *bool

	// Custom properties for the alert
	CustomProperties map[string]*string

	// The description of the metric alert
	Description *string

	// The region of the target resource
	TargetResourceRegion *string

	// The resource type of the target resource
	TargetResourceType *string
}

type MetricAlertsPropertiesBase struct {
	// REQUIRED; Indicates whether this alert rule is enabled
	Enabled *bool

	// REQUIRED; The frequency with which the metric alert is evaluated
	EvaluationFrequency *string

	// REQUIRED; The list of resource id's being monitored
	Scopes []*string

	// REQUIRED; The severity of the metric alert
	Severity *int32

	// Properties to customize alert actions
	ActionProperties map[string]*string

	// The actions to take when the alert fires
	Actions []*MetricAlertRuleAction

	// Indicates whether the alert should be auto resolved
	AutoMitigate *bool

	// Custom properties for the alert
	CustomProperties map[string]*string

	// The description of the metric alert
	Description *string

	// The region of the target resource
	TargetResourceRegion *string

	// The resource type of the target resource
	TargetResourceType *string
}

type MetricAlertsQueryProperties struct {
	// REQUIRED
	Criteria *MetricQueryCriteria

	// REQUIRED; Indicates whether this alert rule is enabled
	Enabled *bool

	// REQUIRED; The frequency with which the metric alert is evaluated
	EvaluationFrequency *string

	// REQUIRED; The list of resource id's being monitored
	Scopes []*string

	// REQUIRED; The severity of the metric alert
	Severity *int32

	// Properties to customize alert actions
	ActionProperties map[string]*string

	// The actions to take when the alert fires
	Actions []*MetricAlertRuleAction

	// Indicates whether the alert should be auto resolved
	AutoMitigate *bool

	// Custom properties for the alert
	CustomProperties map[string]*string

	// The description of the metric alert
	Description          *string
	ResolveConfiguration *QueryResolveConfiguration

	// The region of the target resource
	TargetResourceRegion *string

	// The resource type of the target resource
	TargetResourceType *string
}

type MetricQueryCriteria struct {
	// The query used to evaluate the alert rule
	Query *string
}

// NotificationRequestBody - The request body which contain contact detail metadata
type NotificationRequestBody struct {
	// REQUIRED; The value of the supported alert type. Supported alert type values are: servicehealth, metricstaticthreshold,
	// metricsdynamicthreshold, logalertv2, smartalert, webtestalert, logalertv1numresult,
	// logalertv1metricmeasurement, resourcehealth, activitylog, actualcostbudget, forecastedbudget
	AlertType *string

	// The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are
	// supported.
	ArmRoleReceivers []*ArmRoleReceiver

	// The list of AutomationRunbook receivers that are part of this action group.
	AutomationRunbookReceivers []*AutomationRunbookReceiver

	// The list of AzureAppPush receivers that are part of this action group.
	AzureAppPushReceivers []*AzureAppPushReceiver

	// The list of azure function receivers that are part of this action group.
	AzureFunctionReceivers []*AzureFunctionReceiver

	// The list of email receivers that are part of this action group.
	EmailReceivers []*EmailReceiver

	// The list of event hub receivers that are part of this action group.
	EventHubReceivers []*EventHubReceiver

	// The list of incident receivers that are part of this action group.
	IncidentReceivers []*IncidentReceiver

	// The list of ITSM receivers that are part of this action group.
	ItsmReceivers []*ItsmReceiver

	// The list of logic app receivers that are part of this action group.
	LogicAppReceivers []*LogicAppReceiver

	// The list of SMS receivers that are part of this action group.
	SmsReceivers []*SmsReceiver

	// The list of voice receivers that are part of this action group.
	VoiceReceivers []*VoiceReceiver

	// The list of webhook receivers that are part of this action group.
	WebhookReceivers []*WebhookReceiver
}

type QueryResolveConfiguration struct {
	// Indicates whether the alert should be auto resolved
	AutoResolved *bool

	// The time after which the alert should be auto resolved
	TimeToResolve *string
}

// RuleResolveConfiguration - TBD. Relevant only for rules of the kind LogAlert.
type RuleResolveConfiguration struct {
	// The flag that indicates whether or not to auto resolve a fired alert.
	AutoResolved *bool

	// The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration
	// format.
	TimeToResolve *string
}

// ScheduledQueryRuleCriteria - The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteria struct {
	// A list of conditions to evaluate against the specified scopes
	AllOf []*Condition
}

// ScheduledQueryRuleProperties - scheduled query rule Definition
type ScheduledQueryRuleProperties struct {
	// Actions to invoke when the alert fires.
	Actions *Actions

	// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for
	// rules of kinds LogAlert and SimpleLogAlert.
	AutoMitigate *bool

	// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false.
	// Relevant only for rules of the kind LogAlert.
	CheckWorkspaceAlertsStorageConfigured *bool

	// The rule criteria that defines the conditions of the scheduled query rule.
	Criteria *ScheduledQueryRuleCriteria

	// The description of the scheduled query rule.
	Description *string

	// The display name of the alert rule
	DisplayName *string

	// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
	Enabled *bool

	// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
	// rules of the kind LogAlert.
	EvaluationFrequency *string

	// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
	// of the kind LogAlert.
	MuteActionsDuration *string

	// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules
	// of the kind LogAlert.
	OverrideQueryTimeRange *string

	// Defines the configuration for resolving fired alerts. Relevant only for rules of kinds LogAlert and SimpleLogAlert.
	ResolveConfiguration *RuleResolveConfiguration

	// The list of resource id's that this scheduled query rule is scoped to.
	Scopes []*string

	// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
	// of the kind LogAlert.
	Severity *AlertSeverity

	// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
	// rules of the kind LogAlert.
	SkipQueryValidation *bool

	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
	// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a
	// different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only
	// for rules of the kind LogAlert
	TargetResourceTypes []*string

	// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
	// only for rules of the kind LogAlert.
	WindowSize *string

	// READ-ONLY; The api-version used when creating this alert rule
	CreatedWithAPIVersion *string

	// READ-ONLY; True if alert rule is legacy Log Analytic rule
	IsLegacyLogAnalyticsRule *bool

	// READ-ONLY; The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's
	// storage. The default is false.
	IsWorkspaceAlertsStorageConfigured *bool
}

// ScheduledQueryRuleResource - The scheduled query rule resource.
type ScheduledQueryRuleResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The rule properties of the resource.
	Properties *ScheduledQueryRuleProperties

	// The identity of the resource.
	Identity *Identity

	// Indicates the type of scheduled query rule. The default is LogAlert.
	Kind *Kind

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; The etag field is not required. If it is provided in the response body, it must also be provided as a header
	// per the normal etag convention. Entity tags are used for comparing two or more entities
	// from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match
	// (section 14.26), and If-Range (section 14.27) header fields.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; SystemData of ScheduledQueryRule.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ScheduledQueryRuleResourceCollection - Represents a collection of scheduled query rule resources.
type ScheduledQueryRuleResourceCollection struct {
	// The values for the scheduled query rule resources.
	Value []*ScheduledQueryRuleResource

	// READ-ONLY; Provides the link to retrieve the next set of elements.
	NextLink *string
}

// ScheduledQueryRuleResourcePatch - The scheduled query rule resource for patch operations.
type ScheduledQueryRuleResourcePatch struct {
	// The identity of the resource.
	Identity *Identity

	// The scheduled query rule properties of the resource.
	Properties *ScheduledQueryRuleProperties

	// Resource tags
	Tags map[string]*string
}

// SmsReceiver - An SMS receiver.
type SmsReceiver struct {
	// REQUIRED; The country code of the SMS receiver.
	CountryCode *string

	// REQUIRED; The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name *string

	// REQUIRED; The phone number of the SMS receiver.
	PhoneNumber *string

	// READ-ONLY; The status of the receiver.
	Status *ReceiverStatus
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TestNotificationDetailsResponse - The details of the test notification results.
type TestNotificationDetailsResponse struct {
	// REQUIRED; The overall state
	State *string

	// The list of action detail
	ActionDetails []*ActionDetail

	// The completed time
	CompletedTime *string

	// The context info
	Context *Context

	// The created time
	CreatedTime *string
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}

// UserIdentityProperties - User assigned identity properties.
type UserIdentityProperties struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string
}

// VoiceReceiver - A voice receiver.
type VoiceReceiver struct {
	// REQUIRED; The country code of the voice receiver.
	CountryCode *string

	// REQUIRED; The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name *string

	// REQUIRED; The phone number of the voice receiver.
	PhoneNumber *string
}

// WebhookReceiver - A webhook receiver.
type WebhookReceiver struct {
	// REQUIRED; The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name *string

	// REQUIRED; The URI where webhooks should be sent.
	ServiceURI *string

	// Indicates the identifier uri for aad auth.
	IdentifierURI *string

	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string

	// Indicates the webhook app object Id for aad auth.
	ObjectID *string

	// Indicates the tenant id for aad auth.
	TenantID *string

	// Indicates whether or not use AAD authentication.
	UseAADAuth *bool

	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool
}
