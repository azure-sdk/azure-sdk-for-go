//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestack

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ProductsClient contains the methods for the Products group.
// Don't use this type directly, use NewProductsClient() instead.
type ProductsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewProductsClient creates a new instance of ProductsClient with the specified values.
//   - subscriptionID - Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewProductsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ProductsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ProductsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Returns the specified product.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-06-01
//   - resourceGroup - Name of the resource group.
//   - registrationName - Name of the Azure Stack registration.
//   - productName - Name of the product.
//   - options - ProductsClientGetOptions contains the optional parameters for the ProductsClient.Get method.
func (client *ProductsClient) Get(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetOptions) (ProductsClientGetResponse, error) {
	var err error
	const operationName = "ProductsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProductsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ProductsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ProductsClient) getCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ProductsClient) getHandleResponse(resp *http.Response) (ProductsClientGetResponse, error) {
	result := ProductsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return ProductsClientGetResponse{}, err
	}
	return result, nil
}

// GetProduct - Returns the specified product.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-06-01
//   - resourceGroup - Name of the resource group.
//   - registrationName - Name of the Azure Stack registration.
//   - productName - Name of the product.
//   - options - ProductsClientGetProductOptions contains the optional parameters for the ProductsClient.GetProduct method.
func (client *ProductsClient) GetProduct(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetProductOptions) (ProductsClientGetProductResponse, error) {
	var err error
	const operationName = "ProductsClient.GetProduct"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getProductCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientGetProductResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProductsClientGetProductResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ProductsClientGetProductResponse{}, err
	}
	resp, err := client.getProductHandleResponse(httpResp)
	return resp, err
}

// getProductCreateRequest creates the GetProduct request.
func (client *ProductsClient) getProductCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetProductOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/getProduct"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.DeviceConfiguration != nil {
		if err := runtime.MarshalAsJSON(req, *options.DeviceConfiguration); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// getProductHandleResponse handles the GetProduct response.
func (client *ProductsClient) getProductHandleResponse(resp *http.Response) (ProductsClientGetProductResponse, error) {
	result := ProductsClientGetProductResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return ProductsClientGetProductResponse{}, err
	}
	return result, nil
}

// GetProducts - Returns a list of products.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-06-01
//   - resourceGroup - Name of the resource group.
//   - registrationName - Name of the Azure Stack registration.
//   - productName - Name of the product.
//   - options - ProductsClientGetProductsOptions contains the optional parameters for the ProductsClient.GetProducts method.
func (client *ProductsClient) GetProducts(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetProductsOptions) (ProductsClientGetProductsResponse, error) {
	var err error
	const operationName = "ProductsClient.GetProducts"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getProductsCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientGetProductsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProductsClientGetProductsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ProductsClientGetProductsResponse{}, err
	}
	resp, err := client.getProductsHandleResponse(httpResp)
	return resp, err
}

// getProductsCreateRequest creates the GetProducts request.
func (client *ProductsClient) getProductsCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetProductsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/getProducts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.DeviceConfiguration != nil {
		if err := runtime.MarshalAsJSON(req, *options.DeviceConfiguration); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// getProductsHandleResponse handles the GetProducts response.
func (client *ProductsClient) getProductsHandleResponse(resp *http.Response) (ProductsClientGetProductsResponse, error) {
	result := ProductsClientGetProductsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductList); err != nil {
		return ProductsClientGetProductsResponse{}, err
	}
	return result, nil
}

// NewListPager - Returns a list of products.
//
// Generated from API version 2022-06-01
//   - resourceGroup - Name of the resource group.
//   - registrationName - Name of the Azure Stack registration.
//   - options - ProductsClientListOptions contains the optional parameters for the ProductsClient.NewListPager method.
func (client *ProductsClient) NewListPager(resourceGroup string, registrationName string, options *ProductsClientListOptions) *runtime.Pager[ProductsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[ProductsClientListResponse]{
		More: func(page ProductsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ProductsClientListResponse) (ProductsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ProductsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroup, registrationName, options)
			}, nil)
			if err != nil {
				return ProductsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *ProductsClient) listCreateRequest(ctx context.Context, resourceGroup string, registrationName string, options *ProductsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ProductsClient) listHandleResponse(resp *http.Response) (ProductsClientListResponse, error) {
	result := ProductsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductList); err != nil {
		return ProductsClientListResponse{}, err
	}
	return result, nil
}

// ListDetails - Returns the extended properties of a product.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-06-01
//   - resourceGroup - Name of the resource group.
//   - registrationName - Name of the Azure Stack registration.
//   - productName - Name of the product.
//   - options - ProductsClientListDetailsOptions contains the optional parameters for the ProductsClient.ListDetails method.
func (client *ProductsClient) ListDetails(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientListDetailsOptions) (ProductsClientListDetailsResponse, error) {
	var err error
	const operationName = "ProductsClient.ListDetails"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listDetailsCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientListDetailsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProductsClientListDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ProductsClientListDetailsResponse{}, err
	}
	resp, err := client.listDetailsHandleResponse(httpResp)
	return resp, err
}

// listDetailsCreateRequest creates the ListDetails request.
func (client *ProductsClient) listDetailsCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientListDetailsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listDetails"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDetailsHandleResponse handles the ListDetails response.
func (client *ProductsClient) listDetailsHandleResponse(resp *http.Response) (ProductsClientListDetailsResponse, error) {
	result := ProductsClientListDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExtendedProduct); err != nil {
		return ProductsClientListDetailsResponse{}, err
	}
	return result, nil
}

// ListProducts - Returns a list of products.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-06-01
//   - resourceGroup - Name of the resource group.
//   - registrationName - Name of the Azure Stack registration.
//   - productName - Name of the product.
//   - options - ProductsClientListProductsOptions contains the optional parameters for the ProductsClient.ListProducts method.
func (client *ProductsClient) ListProducts(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientListProductsOptions) (ProductsClientListProductsResponse, error) {
	var err error
	const operationName = "ProductsClient.ListProducts"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listProductsCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientListProductsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProductsClientListProductsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ProductsClientListProductsResponse{}, err
	}
	resp, err := client.listProductsHandleResponse(httpResp)
	return resp, err
}

// listProductsCreateRequest creates the ListProducts request.
func (client *ProductsClient) listProductsCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientListProductsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listProducts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.DeviceConfiguration != nil {
		if err := runtime.MarshalAsJSON(req, *options.DeviceConfiguration); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// listProductsHandleResponse handles the ListProducts response.
func (client *ProductsClient) listProductsHandleResponse(resp *http.Response) (ProductsClientListProductsResponse, error) {
	result := ProductsClientListProductsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductList); err != nil {
		return ProductsClientListProductsResponse{}, err
	}
	return result, nil
}

// UploadLog - Returns the specified product.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-06-01
//   - resourceGroup - Name of the resource group.
//   - registrationName - Name of the Azure Stack registration.
//   - productName - Name of the product.
//   - options - ProductsClientUploadLogOptions contains the optional parameters for the ProductsClient.UploadLog method.
func (client *ProductsClient) UploadLog(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientUploadLogOptions) (ProductsClientUploadLogResponse, error) {
	var err error
	const operationName = "ProductsClient.UploadLog"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.uploadLogCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientUploadLogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProductsClientUploadLogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ProductsClientUploadLogResponse{}, err
	}
	resp, err := client.uploadLogHandleResponse(httpResp)
	return resp, err
}

// uploadLogCreateRequest creates the UploadLog request.
func (client *ProductsClient) uploadLogCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientUploadLogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/uploadProductLog"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.MarketplaceProductLogUpdate != nil {
		if err := runtime.MarshalAsJSON(req, *options.MarketplaceProductLogUpdate); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// uploadLogHandleResponse handles the UploadLog response.
func (client *ProductsClient) uploadLogHandleResponse(resp *http.Response) (ProductsClientUploadLogResponse, error) {
	result := ProductsClientUploadLogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductLog); err != nil {
		return ProductsClientUploadLogResponse{}, err
	}
	return result, nil
}
