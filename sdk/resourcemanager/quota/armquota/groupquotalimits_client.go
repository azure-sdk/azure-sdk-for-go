//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquota

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GroupQuotaLimitsClient contains the methods for the GroupQuotaLimits group.
// Don't use this type directly, use NewGroupQuotaLimitsClient() instead.
type GroupQuotaLimitsClient struct {
	internal *arm.Client
}

// NewGroupQuotaLimitsClient creates a new instance of GroupQuotaLimitsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGroupQuotaLimitsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*GroupQuotaLimitsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GroupQuotaLimitsClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Updates the GroupQuotaLimits for the specific resource for a specific resource based on the resourceProviderScope.
// The resourceProviderScope will be provided in the request body, as
// resourceProviderScope. Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
// GroupQuotaLimitRequestId will be returned by the Service in the response. The
// status can be polled periodically. The status Async polling is using standards defined at -
// https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations. Use
// the OperationsStatus URI provided in Azure-AsyncOperation header, the duration
// will be specified in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will
// change to Get URI for groupQuotaRequests and full details can be checked from
// the Get API for groupQuotaRequests.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - options - GroupQuotaLimitsClientBeginCreateOrUpdateOptions contains the optional parameters for the GroupQuotaLimitsClient.BeginCreateOrUpdate
//     method.
func (client *GroupQuotaLimitsClient) BeginCreateOrUpdate(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, options *GroupQuotaLimitsClientBeginCreateOrUpdateOptions) (*runtime.Poller[GroupQuotaLimitsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, managementGroupID, groupQuotaName, resourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GroupQuotaLimitsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GroupQuotaLimitsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Updates the GroupQuotaLimits for the specific resource for a specific resource based on the resourceProviderScope.
// The resourceProviderScope will be provided in the request body, as
// resourceProviderScope. Example of resourceProviderScope for compute - /providers/{Microsoft.Compute}/locations/{eastus}.
// GroupQuotaLimitRequestId will be returned by the Service in the response. The
// status can be polled periodically. The status Async polling is using standards defined at -
// https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations. Use
// the OperationsStatus URI provided in Azure-AsyncOperation header, the duration
// will be specified in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will
// change to Get URI for groupQuotaRequests and full details can be checked from
// the Get API for groupQuotaRequests.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
func (client *GroupQuotaLimitsClient) createOrUpdate(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, options *GroupQuotaLimitsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "GroupQuotaLimitsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, managementGroupID, groupQuotaName, resourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *GroupQuotaLimitsClient) createOrUpdateCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, options *GroupQuotaLimitsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.GroupQuotaLimitRequest != nil {
		if err := runtime.MarshalAsJSON(req, *options.GroupQuotaLimitRequest); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// Get - Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the filer query parameter.
// The filter can be - $filter= provider eq Microsoft.Compute and location eq
// eastus. The $filter is a required parameter to filter out the specific resource based on the ResourceProvider/Location.
// It will include the limits, availableLimits, AllocatedToSubscriptions: Quotas
// allocated to subscriptions from the group quota.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - filter - FIELD SUPPORTED OPERATORS
//     provider eq {resourceProvider} and location eq {location}
//     Example: $filter= provider eq Microsoft.Compute and location eq eastus
//   - options - GroupQuotaLimitsClientGetOptions contains the optional parameters for the GroupQuotaLimitsClient.Get method.
func (client *GroupQuotaLimitsClient) Get(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, filter string, options *GroupQuotaLimitsClientGetOptions) (GroupQuotaLimitsClientGetResponse, error) {
	var err error
	const operationName = "GroupQuotaLimitsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, managementGroupID, groupQuotaName, resourceName, filter, options)
	if err != nil {
		return GroupQuotaLimitsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GroupQuotaLimitsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GroupQuotaLimitsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *GroupQuotaLimitsClient) getCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, filter string, options *GroupQuotaLimitsClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("$filter", filter)
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GroupQuotaLimitsClient) getHandleResponse(resp *http.Response) (GroupQuotaLimitsClientGetResponse, error) {
	result := GroupQuotaLimitsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GroupQuotaLimit); err != nil {
		return GroupQuotaLimitsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be - $filter=
// provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the
// Get API - It will include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to subscriptions from
// the group quota.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - filter - FIELD SUPPORTED OPERATORS
//     provider eq {resourceProvider} and location eq {location}
//     Example: $filter= provider eq Microsoft.Compute and location eq eastus
//   - options - GroupQuotaLimitsClientListOptions contains the optional parameters for the GroupQuotaLimitsClient.NewListPager
//     method.
func (client *GroupQuotaLimitsClient) NewListPager(managementGroupID string, groupQuotaName string, filter string, options *GroupQuotaLimitsClientListOptions) *runtime.Pager[GroupQuotaLimitsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[GroupQuotaLimitsClientListResponse]{
		More: func(page GroupQuotaLimitsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GroupQuotaLimitsClientListResponse) (GroupQuotaLimitsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "GroupQuotaLimitsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, managementGroupID, groupQuotaName, filter, options)
			}, nil)
			if err != nil {
				return GroupQuotaLimitsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *GroupQuotaLimitsClient) listCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, filter string, options *GroupQuotaLimitsClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("$filter", filter)
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *GroupQuotaLimitsClient) listHandleResponse(resp *http.Response) (GroupQuotaLimitsClientListResponse, error) {
	result := GroupQuotaLimitsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GroupQuotaLimitList); err != nil {
		return GroupQuotaLimitsClientListResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the
// request body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by
// the Service. The status will be updated periodically. The status Async polling is using standards defined at -
// https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations. Use
// the OperationsStatus URI provided in Azure-AsyncOperation header, the duration
// will be specified in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will
// change to Get URI and full details can be checked.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - options - GroupQuotaLimitsClientBeginUpdateOptions contains the optional parameters for the GroupQuotaLimitsClient.BeginUpdate
//     method.
func (client *GroupQuotaLimitsClient) BeginUpdate(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, options *GroupQuotaLimitsClientBeginUpdateOptions) (*runtime.Poller[GroupQuotaLimitsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, managementGroupID, groupQuotaName, resourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GroupQuotaLimitsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GroupQuotaLimitsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided in the request
// body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by
// the Service. The status will be updated periodically. The status Async polling is using standards defined at -
// https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations. Use
// the OperationsStatus URI provided in Azure-AsyncOperation header, the duration
// will be specified in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will
// change to Get URI and full details can be checked.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
func (client *GroupQuotaLimitsClient) update(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, options *GroupQuotaLimitsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "GroupQuotaLimitsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, managementGroupID, groupQuotaName, resourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *GroupQuotaLimitsClient) updateCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, options *GroupQuotaLimitsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaLimits/{resourceName}"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.GroupQuotaLimitRequest != nil {
		if err := runtime.MarshalAsJSON(req, *options.GroupQuotaLimitRequest); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}
