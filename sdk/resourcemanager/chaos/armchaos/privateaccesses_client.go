//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armchaos

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PrivateAccessesClient contains the methods for the PrivateAccesses group.
// Don't use this type directly, use NewPrivateAccessesClient() instead.
type PrivateAccessesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPrivateAccessesClient creates a new instance of PrivateAccessesClient with the specified values.
//   - subscriptionID - GUID that represents an Azure subscription ID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPrivateAccessesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PrivateAccessesClient, error) {
	cl, err := arm.NewClient(moduleName+".PrivateAccessesClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PrivateAccessesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update a private access
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - privateAccess - private access resource to be created or updated.
//   - options - PrivateAccessesClientCreateOrUpdateOptions contains the optional parameters for the PrivateAccessesClient.CreateOrUpdate
//     method.
func (client *PrivateAccessesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, privateAccessName string, privateAccess PrivateAccess, options *PrivateAccessesClientCreateOrUpdateOptions) (PrivateAccessesClientCreateOrUpdateResponse, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, privateAccessName, privateAccess, options)
	if err != nil {
		return PrivateAccessesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateAccessesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PrivateAccessesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PrivateAccessesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, privateAccess PrivateAccess, options *PrivateAccessesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, privateAccess); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *PrivateAccessesClient) createOrUpdateHandleResponse(resp *http.Response) (PrivateAccessesClientCreateOrUpdateResponse, error) {
	result := PrivateAccessesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateAccess); err != nil {
		return PrivateAccessesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a private access
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - options - PrivateAccessesClientDeleteOptions contains the optional parameters for the PrivateAccessesClient.Delete method.
func (client *PrivateAccessesClient) Delete(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientDeleteOptions) (PrivateAccessesClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, privateAccessName, options)
	if err != nil {
		return PrivateAccessesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateAccessesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PrivateAccessesClientDeleteResponse{}, err
	}
	return PrivateAccessesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PrivateAccessesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDeleteAPrivateEndpointConnection - Deletes a private endpoint connection under a private access resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - privateEndpointConnectionName - The name of the private endpoint connection.
//   - options - PrivateAccessesClientBeginDeleteAPrivateEndpointConnectionOptions contains the optional parameters for the PrivateAccessesClient.BeginDeleteAPrivateEndpointConnection
//     method.
func (client *PrivateAccessesClient) BeginDeleteAPrivateEndpointConnection(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (*runtime.Poller[PrivateAccessesClientDeleteAPrivateEndpointConnectionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteAPrivateEndpointConnection(ctx, resourceGroupName, privateAccessName, privateEndpointConnectionName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[PrivateAccessesClientDeleteAPrivateEndpointConnectionResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[PrivateAccessesClientDeleteAPrivateEndpointConnectionResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// DeleteAPrivateEndpointConnection - Deletes a private endpoint connection under a private access resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
func (client *PrivateAccessesClient) deleteAPrivateEndpointConnection(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (*http.Response, error) {
	var err error
	req, err := client.deleteAPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, privateAccessName, privateEndpointConnectionName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteAPrivateEndpointConnectionCreateRequest creates the DeleteAPrivateEndpointConnection request.
func (client *PrivateAccessesClient) deleteAPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections/{privateEndpointConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	if privateEndpointConnectionName == "" {
		return nil, errors.New("parameter privateEndpointConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateEndpointConnectionName}", url.PathEscape(privateEndpointConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a private access resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - options - PrivateAccessesClientGetOptions contains the optional parameters for the PrivateAccessesClient.Get method.
func (client *PrivateAccessesClient) Get(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientGetOptions) (PrivateAccessesClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, resourceGroupName, privateAccessName, options)
	if err != nil {
		return PrivateAccessesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateAccessesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateAccessesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PrivateAccessesClient) getCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PrivateAccessesClient) getHandleResponse(resp *http.Response) (PrivateAccessesClientGetResponse, error) {
	result := PrivateAccessesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateAccess); err != nil {
		return PrivateAccessesClientGetResponse{}, err
	}
	return result, nil
}

// GetAPrivateEndpointConnection - Gets information about a private endpoint connection under a private access resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - privateEndpointConnectionName - The name of the private endpoint connection.
//   - options - PrivateAccessesClientGetAPrivateEndpointConnectionOptions contains the optional parameters for the PrivateAccessesClient.GetAPrivateEndpointConnection
//     method.
func (client *PrivateAccessesClient) GetAPrivateEndpointConnection(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientGetAPrivateEndpointConnectionOptions) (PrivateAccessesClientGetAPrivateEndpointConnectionResponse, error) {
	var err error
	req, err := client.getAPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, privateAccessName, privateEndpointConnectionName, options)
	if err != nil {
		return PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}, err
	}
	resp, err := client.getAPrivateEndpointConnectionHandleResponse(httpResp)
	return resp, err
}

// getAPrivateEndpointConnectionCreateRequest creates the GetAPrivateEndpointConnection request.
func (client *PrivateAccessesClient) getAPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientGetAPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections/{privateEndpointConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	if privateEndpointConnectionName == "" {
		return nil, errors.New("parameter privateEndpointConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateEndpointConnectionName}", url.PathEscape(privateEndpointConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAPrivateEndpointConnectionHandleResponse handles the GetAPrivateEndpointConnection response.
func (client *PrivateAccessesClient) getAPrivateEndpointConnectionHandleResponse(resp *http.Response) (PrivateAccessesClientGetAPrivateEndpointConnectionResponse, error) {
	result := PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnection); err != nil {
		return PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}, err
	}
	return result, nil
}

// GetPrivateLinkResources - Gets the private link resources possible under private access resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - options - PrivateAccessesClientGetPrivateLinkResourcesOptions contains the optional parameters for the PrivateAccessesClient.GetPrivateLinkResources
//     method.
func (client *PrivateAccessesClient) GetPrivateLinkResources(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientGetPrivateLinkResourcesOptions) (PrivateAccessesClientGetPrivateLinkResourcesResponse, error) {
	var err error
	req, err := client.getPrivateLinkResourcesCreateRequest(ctx, resourceGroupName, privateAccessName, options)
	if err != nil {
		return PrivateAccessesClientGetPrivateLinkResourcesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateAccessesClientGetPrivateLinkResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateAccessesClientGetPrivateLinkResourcesResponse{}, err
	}
	resp, err := client.getPrivateLinkResourcesHandleResponse(httpResp)
	return resp, err
}

// getPrivateLinkResourcesCreateRequest creates the GetPrivateLinkResources request.
func (client *PrivateAccessesClient) getPrivateLinkResourcesCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientGetPrivateLinkResourcesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateLinkResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPrivateLinkResourcesHandleResponse handles the GetPrivateLinkResources response.
func (client *PrivateAccessesClient) getPrivateLinkResourcesHandleResponse(resp *http.Response) (PrivateAccessesClientGetPrivateLinkResourcesResponse, error) {
	result := PrivateAccessesClientGetPrivateLinkResourcesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateLinkResourceListResult); err != nil {
		return PrivateAccessesClientGetPrivateLinkResourcesResponse{}, err
	}
	return result, nil
}

// NewListPager - Get a list of private access resources in a resource group.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - options - PrivateAccessesClientListOptions contains the optional parameters for the PrivateAccessesClient.NewListPager
//     method.
func (client *PrivateAccessesClient) NewListPager(resourceGroupName string, options *PrivateAccessesClientListOptions) *runtime.Pager[PrivateAccessesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateAccessesClientListResponse]{
		More: func(page PrivateAccessesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateAccessesClientListResponse) (PrivateAccessesClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PrivateAccessesClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return PrivateAccessesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PrivateAccessesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *PrivateAccessesClient) listCreateRequest(ctx context.Context, resourceGroupName string, options *PrivateAccessesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PrivateAccessesClient) listHandleResponse(resp *http.Response) (PrivateAccessesClientListResponse, error) {
	result := PrivateAccessesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateAccessListResult); err != nil {
		return PrivateAccessesClientListResponse{}, err
	}
	return result, nil
}

// NewListAllPager - Get a list of private access resources in a subscription.
//
// Generated from API version 2023-10-27-preview
//   - options - PrivateAccessesClientListAllOptions contains the optional parameters for the PrivateAccessesClient.NewListAllPager
//     method.
func (client *PrivateAccessesClient) NewListAllPager(options *PrivateAccessesClientListAllOptions) *runtime.Pager[PrivateAccessesClientListAllResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateAccessesClientListAllResponse]{
		More: func(page PrivateAccessesClientListAllResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateAccessesClientListAllResponse) (PrivateAccessesClientListAllResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listAllCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PrivateAccessesClientListAllResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return PrivateAccessesClientListAllResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PrivateAccessesClientListAllResponse{}, runtime.NewResponseError(resp)
			}
			return client.listAllHandleResponse(resp)
		},
	})
}

// listAllCreateRequest creates the ListAll request.
func (client *PrivateAccessesClient) listAllCreateRequest(ctx context.Context, options *PrivateAccessesClientListAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/privateAccesses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *PrivateAccessesClient) listAllHandleResponse(resp *http.Response) (PrivateAccessesClientListAllResponse, error) {
	result := PrivateAccessesClientListAllResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateAccessListResult); err != nil {
		return PrivateAccessesClientListAllResponse{}, err
	}
	return result, nil
}

// NewListPrivateEndpointConnectionsPager - List information about private endpoint connections under a private access resource
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - options - PrivateAccessesClientListPrivateEndpointConnectionsOptions contains the optional parameters for the PrivateAccessesClient.NewListPrivateEndpointConnectionsPager
//     method.
func (client *PrivateAccessesClient) NewListPrivateEndpointConnectionsPager(resourceGroupName string, privateAccessName string, options *PrivateAccessesClientListPrivateEndpointConnectionsOptions) *runtime.Pager[PrivateAccessesClientListPrivateEndpointConnectionsResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateAccessesClientListPrivateEndpointConnectionsResponse]{
		More: func(page PrivateAccessesClientListPrivateEndpointConnectionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateAccessesClientListPrivateEndpointConnectionsResponse) (PrivateAccessesClientListPrivateEndpointConnectionsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listPrivateEndpointConnectionsCreateRequest(ctx, resourceGroupName, privateAccessName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PrivateAccessesClientListPrivateEndpointConnectionsResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return PrivateAccessesClientListPrivateEndpointConnectionsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PrivateAccessesClientListPrivateEndpointConnectionsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listPrivateEndpointConnectionsHandleResponse(resp)
		},
	})
}

// listPrivateEndpointConnectionsCreateRequest creates the ListPrivateEndpointConnections request.
func (client *PrivateAccessesClient) listPrivateEndpointConnectionsCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientListPrivateEndpointConnectionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listPrivateEndpointConnectionsHandleResponse handles the ListPrivateEndpointConnections response.
func (client *PrivateAccessesClient) listPrivateEndpointConnectionsHandleResponse(resp *http.Response) (PrivateAccessesClientListPrivateEndpointConnectionsResponse, error) {
	result := PrivateAccessesClientListPrivateEndpointConnectionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnectionListResult); err != nil {
		return PrivateAccessesClientListPrivateEndpointConnectionsResponse{}, err
	}
	return result, nil
}

// Update - Updates an private access instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - parameters - The update to the private access instance.
//   - options - PrivateAccessesClientUpdateOptions contains the optional parameters for the PrivateAccessesClient.Update method.
func (client *PrivateAccessesClient) Update(ctx context.Context, resourceGroupName string, privateAccessName string, parameters PrivateAccessUpdate, options *PrivateAccessesClientUpdateOptions) (PrivateAccessesClientUpdateResponse, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, resourceGroupName, privateAccessName, parameters, options)
	if err != nil {
		return PrivateAccessesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateAccessesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateAccessesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *PrivateAccessesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, parameters PrivateAccessUpdate, options *PrivateAccessesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *PrivateAccessesClient) updateHandleResponse(resp *http.Response) (PrivateAccessesClientUpdateResponse, error) {
	result := PrivateAccessesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateAccess); err != nil {
		return PrivateAccessesClientUpdateResponse{}, err
	}
	return result, nil
}

// BeginUpdateAPrivateEndpointConnection - Approve or reject a private endpoint connection under private access resource,
// this can't be used to create a new private endpoint connection.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - privateEndpointConnectionName - The name of the private endpoint connection.
//   - privateEndpointConnection - private endpoint connection object supplied in the body of the Put private endpoint connection
//     operation.
//   - options - PrivateAccessesClientBeginUpdateAPrivateEndpointConnectionOptions contains the optional parameters for the PrivateAccessesClient.BeginUpdateAPrivateEndpointConnection
//     method.
func (client *PrivateAccessesClient) BeginUpdateAPrivateEndpointConnection(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, privateEndpointConnection PrivateEndpointConnection, options *PrivateAccessesClientBeginUpdateAPrivateEndpointConnectionOptions) (*runtime.Poller[PrivateAccessesClientUpdateAPrivateEndpointConnectionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateAPrivateEndpointConnection(ctx, resourceGroupName, privateAccessName, privateEndpointConnectionName, privateEndpointConnection, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[PrivateAccessesClientUpdateAPrivateEndpointConnectionResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[PrivateAccessesClientUpdateAPrivateEndpointConnectionResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// UpdateAPrivateEndpointConnection - Approve or reject a private endpoint connection under private access resource, this
// can't be used to create a new private endpoint connection.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-27-preview
func (client *PrivateAccessesClient) updateAPrivateEndpointConnection(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, privateEndpointConnection PrivateEndpointConnection, options *PrivateAccessesClientBeginUpdateAPrivateEndpointConnectionOptions) (*http.Response, error) {
	var err error
	req, err := client.updateAPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, privateAccessName, privateEndpointConnectionName, privateEndpointConnection, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateAPrivateEndpointConnectionCreateRequest creates the UpdateAPrivateEndpointConnection request.
func (client *PrivateAccessesClient) updateAPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, privateEndpointConnection PrivateEndpointConnection, options *PrivateAccessesClientBeginUpdateAPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections/{privateEndpointConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	if privateEndpointConnectionName == "" {
		return nil, errors.New("parameter privateEndpointConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateEndpointConnectionName}", url.PathEscape(privateEndpointConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, privateEndpointConnection); err != nil {
		return nil, err
	}
	return req, nil
}
