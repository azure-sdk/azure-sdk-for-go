// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armneonpostgres_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/neonpostgres/armneonpostgres"
	"log"
)

// Generated from example definition: 2025-03-01-preview/Projects_CreateOrUpdate_MaximumSet_Gen.json
func ExampleProjectsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("671936A4-ED6C-445D-ACEE-5637920E7051", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewProjectsClient().BeginCreateOrUpdate(ctx, "rgneon", "testOrg123", "test-entity", armneonpostgres.Project{
		Properties: &armneonpostgres.ProjectProperties{
			EntityName: to.Ptr("test-name"),
			Attributes: []*armneonpostgres.Attributes{
				{
					Name:  to.Ptr("ioyjfywmt"),
					Value: to.Ptr("sfbpcr"),
				},
			},
			RegionID:         to.Ptr("cpnssldzuftdqgjdaqzjayqujpb"),
			Storage:          to.Ptr[int64](3),
			PgVersion:        to.Ptr[int32](1),
			HistoryRetention: to.Ptr[int32](3600),
			DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
				AutoscalingLimitMinCu: to.Ptr[float32](0.25),
				AutoscalingLimitMaxCu: to.Ptr[float32](4),
			},
			Branch: &armneonpostgres.BranchProperties{
				EntityName: to.Ptr("test-name"),
				Attributes: []*armneonpostgres.Attributes{
					{
						Name:  to.Ptr("ioyjfywmt"),
						Value: to.Ptr("sfbpcr"),
					},
				},
				ProjectID:    to.Ptr("vtdzaxdiwnzvq"),
				ParentID:     to.Ptr("test-id"),
				RoleName:     to.Ptr("imfhfgfpamibgcgibgxor"),
				DatabaseName: to.Ptr("xargveemydmqrdtjcdhf"),
				Roles: []*armneonpostgres.NeonRoleProperties{
					{
						EntityName: to.Ptr("test-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("ioyjfywmt"),
								Value: to.Ptr("sfbpcr"),
							},
						},
						BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
						Permissions: []*string{
							to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
						},
						IsSuperUser: to.Ptr(true),
					},
				},
				Databases: []*armneonpostgres.NeonDatabaseProperties{
					{
						EntityName: to.Ptr("test-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("ioyjfywmt"),
								Value: to.Ptr("sfbpcr"),
							},
						},
						BranchID:  to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
						OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
					},
				},
				Endpoints: []*armneonpostgres.EndpointProperties{
					{
						EntityName: to.Ptr("test-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("ioyjfywmt"),
								Value: to.Ptr("sfbpcr"),
							},
						},
						ProjectID:    to.Ptr("fhfdyuiaaftqormerayks"),
						BranchID:     to.Ptr("oejenjawxexhuotsxodbl"),
						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
					},
				},
			},
			Roles: []*armneonpostgres.NeonRoleProperties{
				{
					EntityName: to.Ptr("test-name"),
					Attributes: []*armneonpostgres.Attributes{
						{
							Name:  to.Ptr("ioyjfywmt"),
							Value: to.Ptr("sfbpcr"),
						},
					},
					BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
					Permissions: []*string{
						to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
					},
					IsSuperUser: to.Ptr(true),
				},
			},
			Databases: []*armneonpostgres.NeonDatabaseProperties{
				{
					EntityName: to.Ptr("test-name"),
					Attributes: []*armneonpostgres.Attributes{
						{
							Name:  to.Ptr("ioyjfywmt"),
							Value: to.Ptr("sfbpcr"),
						},
					},
					BranchID:  to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
					OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
				},
			},
			Endpoints: []*armneonpostgres.EndpointProperties{
				{
					EntityName: to.Ptr("test-name"),
					Attributes: []*armneonpostgres.Attributes{
						{
							Name:  to.Ptr("ioyjfywmt"),
							Value: to.Ptr("sfbpcr"),
						},
					},
					ProjectID:    to.Ptr("fhfdyuiaaftqormerayks"),
					BranchID:     to.Ptr("oejenjawxexhuotsxodbl"),
					EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.ProjectsClientCreateOrUpdateResponse{
	// 	Project: &armneonpostgres.Project{
	// 		Properties: &armneonpostgres.ProjectProperties{
	// 			EntityID: to.Ptr("test-id"),
	// 			EntityName: to.Ptr("test-name"),
	// 			CreatedAt: to.Ptr("kkcodxjhxrjmunsqlzbagbyxmp"),
	// 			ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 			Attributes: []*armneonpostgres.Attributes{
	// 				{
	// 					Name: to.Ptr("ioyjfywmt"),
	// 					Value: to.Ptr("sfbpcr"),
	// 				},
	// 			},
	// 			RegionID: to.Ptr("cpnssldzuftdqgjdaqzjayqujpb"),
	// 			Storage: to.Ptr[int64](3),
	// 			PgVersion: to.Ptr[int32](1),
	// 			Branch: &armneonpostgres.BranchProperties{
	// 				EntityID: to.Ptr("test-id"),
	// 				EntityName: to.Ptr("test-name"),
	// 				CreatedAt: to.Ptr("ujfeowkbcrghfut"),
	// 				ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 				Attributes: []*armneonpostgres.Attributes{
	// 					{
	// 						Name: to.Ptr("ioyjfywmt"),
	// 						Value: to.Ptr("sfbpcr"),
	// 					},
	// 				},
	// 				ProjectID: to.Ptr("vtdzaxdiwnzvq"),
	// 				ParentID: to.Ptr("test-id"),
	// 				RoleName: to.Ptr("imfhfgfpamibgcgibgxor"),
	// 				DatabaseName: to.Ptr("xargveemydmqrdtjcdhf"),
	// 				Roles: []*armneonpostgres.NeonRoleProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("ffrubcskkjcwd"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
	// 						Permissions: []*string{
	// 							to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
	// 						},
	// 						IsSuperUser: to.Ptr(true),
	// 					},
	// 				},
	// 				Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("xelkuxjvrgclmw"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
	// 						OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
	// 					},
	// 				},
	// 				Endpoints: []*armneonpostgres.EndpointProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("gokkvjmaabj"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						ProjectID: to.Ptr("fhfdyuiaaftqormerayks"),
	// 						BranchID: to.Ptr("oejenjawxexhuotsxodbl"),
	// 						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 					},
	// 				},
	// 			},
	// 			Roles: []*armneonpostgres.NeonRoleProperties{
	// 				{
	// 					EntityID: to.Ptr("test-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("ffrubcskkjcwd"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
	// 					Permissions: []*string{
	// 						to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
	// 					},
	// 					IsSuperUser: to.Ptr(true),
	// 				},
	// 			},
	// 			Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 				{
	// 					EntityID: to.Ptr("test-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("xelkuxjvrgclmw"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					BranchID: to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
	// 					OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
	// 				},
	// 			},
	// 			Endpoints: []*armneonpostgres.EndpointProperties{
	// 				{
	// 					EntityID: to.Ptr("test-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("gokkvjmaabj"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					ProjectID: to.Ptr("fhfdyuiaaftqormerayks"),
	// 					BranchID: to.Ptr("oejenjawxexhuotsxodbl"),
	// 					EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 				},
	// 			},
	// 		},
	// 		ID: to.Ptr("/subscriptions/671936A4-ED6C-445D-ACEE-5637920E7051/resourceGroups/rgneon/providers/Microsoft.Neon/organizations/testOrg123/projects/test-entity"),
	// 		Name: to.Ptr("edcrl"),
	// 		Type: to.Ptr("ejnsmqyl"),
	// 		SystemData: &armneonpostgres.SystemData{
	// 			CreatedBy: to.Ptr("dknvmdx"),
	// 			CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-18T04:09:40.329Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("zhachretjgocylfh"),
	// 			LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-18T04:09:40.329Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/Projects_Delete_MaximumSet_Gen.json
func ExampleProjectsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("671936A4-ED6C-445D-ACEE-5637920E7051", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewProjectsClient().Delete(ctx, "rgneon", "testOrg123", "test-entity", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.ProjectsClientDeleteResponse{
	// }
}

// Generated from example definition: 2025-03-01-preview/Projects_Get_MaximumSet_Gen.json
func ExampleProjectsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("671936A4-ED6C-445D-ACEE-5637920E7051", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewProjectsClient().Get(ctx, "rgneon", "testOrg123", "testProject123", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.ProjectsClientGetResponse{
	// 	Project: &armneonpostgres.Project{
	// 		Properties: &armneonpostgres.ProjectProperties{
	// 			EntityID: to.Ptr("test-id"),
	// 			EntityName: to.Ptr("test-name"),
	// 			CreatedAt: to.Ptr("kkcodxjhxrjmunsqlzbagbyxmp"),
	// 			ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 			Attributes: []*armneonpostgres.Attributes{
	// 				{
	// 					Name: to.Ptr("ioyjfywmt"),
	// 					Value: to.Ptr("sfbpcr"),
	// 				},
	// 			},
	// 			RegionID: to.Ptr("cpnssldzuftdqgjdaqzjayqujpb"),
	// 			Storage: to.Ptr[int64](3),
	// 			PgVersion: to.Ptr[int32](1),
	// 			HistoryRetention: to.Ptr[int32](3600),
	// 			DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
	// 				AutoscalingLimitMinCu: to.Ptr[float32](0.25),
	// 				AutoscalingLimitMaxCu: to.Ptr[float32](4),
	// 			},
	// 			Branch: &armneonpostgres.BranchProperties{
	// 				EntityID: to.Ptr("test-id"),
	// 				EntityName: to.Ptr("test-name"),
	// 				CreatedAt: to.Ptr("ujfeowkbcrghfut"),
	// 				ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 				Attributes: []*armneonpostgres.Attributes{
	// 					{
	// 						Name: to.Ptr("ioyjfywmt"),
	// 						Value: to.Ptr("sfbpcr"),
	// 					},
	// 				},
	// 				ProjectID: to.Ptr("vtdzaxdiwnzvq"),
	// 				ParentID: to.Ptr("test-id"),
	// 				RoleName: to.Ptr("imfhfgfpamibgcgibgxor"),
	// 				DatabaseName: to.Ptr("xargveemydmqrdtjcdhf"),
	// 				Roles: []*armneonpostgres.NeonRoleProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("ffrubcskkjcwd"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
	// 						Permissions: []*string{
	// 							to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
	// 						},
	// 						IsSuperUser: to.Ptr(true),
	// 					},
	// 				},
	// 				Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("xelkuxjvrgclmw"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
	// 						OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
	// 					},
	// 				},
	// 				Endpoints: []*armneonpostgres.EndpointProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("gokkvjmaabj"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						ProjectID: to.Ptr("fhfdyuiaaftqormerayks"),
	// 						BranchID: to.Ptr("oejenjawxexhuotsxodbl"),
	// 						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 					},
	// 				},
	// 			},
	// 			Roles: []*armneonpostgres.NeonRoleProperties{
	// 				{
	// 					EntityID: to.Ptr("test-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("ffrubcskkjcwd"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
	// 					Permissions: []*string{
	// 						to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
	// 					},
	// 					IsSuperUser: to.Ptr(true),
	// 				},
	// 			},
	// 			Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 				{
	// 					EntityID: to.Ptr("test-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("xelkuxjvrgclmw"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					BranchID: to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
	// 					OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
	// 				},
	// 			},
	// 			Endpoints: []*armneonpostgres.EndpointProperties{
	// 				{
	// 					EntityID: to.Ptr("test-entity-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("gokkvjmaabj"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					ProjectID: to.Ptr("fhfdyuiaaftqormerayks"),
	// 					BranchID: to.Ptr("oejenjawxexhuotsxodbl"),
	// 					EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 				},
	// 			},
	// 		},
	// 		ID: to.Ptr("/subscriptions/671936A4-ED6C-445D-ACEE-5637920E7051/resourceGroups/rgneon/providers/Microsoft.Neon/organizations/testOrg123/projects/testProject123"),
	// 		Name: to.Ptr("edcrl"),
	// 		Type: to.Ptr("ejnsmqyl"),
	// 		SystemData: &armneonpostgres.SystemData{
	// 			CreatedBy: to.Ptr("dknvmdx"),
	// 			CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-18T04:09:40.329Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("zhachretjgocylfh"),
	// 			LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-18T04:09:40.329Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/Projects_GetConnectionUri_MaximumSet_Gen.json
func ExampleProjectsClient_GetConnectionURI() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("671936A4-ED6C-445D-ACEE-5637920E7051", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewProjectsClient().GetConnectionURI(ctx, "rgneon", "testOrg123", "test-entity", armneonpostgres.ConnectionURIProperties{
		ProjectID:    to.Ptr("jfbzabgdsxnaopubcgavnykgza"),
		BranchID:     to.Ptr("rxfwxomuukix"),
		DatabaseName: to.Ptr("kqjsyemrjhe"),
		RoleName:     to.Ptr("vven"),
		EndpointID:   to.Ptr("mnjkdgqhlfqcdxmnzoyqiaakt"),
		IsPooled:     to.Ptr(true),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.ProjectsClientGetConnectionURIResponse{
	// 	ConnectionURIProperties: &armneonpostgres.ConnectionURIProperties{
	// 		ProjectID: to.Ptr("jfbzabgdsxnaopubcgavnykgza"),
	// 		BranchID: to.Ptr("rxfwxomuukix"),
	// 		DatabaseName: to.Ptr("kqjsyemrjhe"),
	// 		RoleName: to.Ptr("vven"),
	// 		EndpointID: to.Ptr("mnjkdgqhlfqcdxmnzoyqiaakt"),
	// 		IsPooled: to.Ptr(true),
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/Projects_List_MaximumSet_Gen.json
func ExampleProjectsClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("671936A4-ED6C-445D-ACEE-5637920E7051", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewProjectsClient().NewListPager("rgneon", "testOrg123", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armneonpostgres.ProjectsClientListResponse{
		// 	ProjectListResult: armneonpostgres.ProjectListResult{
		// 		Value: []*armneonpostgres.Project{
		// 			{
		// 				Properties: &armneonpostgres.ProjectProperties{
		// 					EntityID: to.Ptr("test-id"),
		// 					EntityName: to.Ptr("test-entity"),
		// 					CreatedAt: to.Ptr("kkcodxjhxrjmunsqlzbagbyxmp"),
		// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 					Attributes: []*armneonpostgres.Attributes{
		// 						{
		// 							Name: to.Ptr("ioyjfywmt"),
		// 							Value: to.Ptr("sfbpcr"),
		// 						},
		// 					},
		// 					RegionID: to.Ptr("cpnssldzuftdqgjdaqzjayqujpb"),
		// 					Storage: to.Ptr[int64](3),
		// 					PgVersion: to.Ptr[int32](1),
		// 					Branch: &armneonpostgres.BranchProperties{
		// 						EntityID: to.Ptr("test-id"),
		// 						EntityName: to.Ptr("test-entity"),
		// 						CreatedAt: to.Ptr("ujfeowkbcrghfut"),
		// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 						Attributes: []*armneonpostgres.Attributes{
		// 							{
		// 								Name: to.Ptr("ioyjfywmt"),
		// 								Value: to.Ptr("sfbpcr"),
		// 							},
		// 						},
		// 						ProjectID: to.Ptr("vtdzaxdiwnzvq"),
		// 						ParentID: to.Ptr("test-id"),
		// 						RoleName: to.Ptr("imfhfgfpamibgcgibgxor"),
		// 						DatabaseName: to.Ptr("xargveemydmqrdtjcdhf"),
		// 						Roles: []*armneonpostgres.NeonRoleProperties{
		// 							{
		// 								EntityID: to.Ptr("test-id"),
		// 								EntityName: to.Ptr("test-entity"),
		// 								CreatedAt: to.Ptr("ffrubcskkjcwd"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("ioyjfywmt"),
		// 										Value: to.Ptr("sfbpcr"),
		// 									},
		// 								},
		// 								BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
		// 								Permissions: []*string{
		// 									to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
		// 								},
		// 								IsSuperUser: to.Ptr(true),
		// 							},
		// 						},
		// 						Databases: []*armneonpostgres.NeonDatabaseProperties{
		// 							{
		// 								EntityID: to.Ptr("test-id"),
		// 								EntityName: to.Ptr("test-entity"),
		// 								CreatedAt: to.Ptr("xelkuxjvrgclmw"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("ioyjfywmt"),
		// 										Value: to.Ptr("sfbpcr"),
		// 									},
		// 								},
		// 								BranchID: to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
		// 								OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
		// 							},
		// 						},
		// 						Endpoints: []*armneonpostgres.EndpointProperties{
		// 							{
		// 								EntityID: to.Ptr("test-id"),
		// 								EntityName: to.Ptr("test-entity"),
		// 								CreatedAt: to.Ptr("gokkvjmaabj"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("ioyjfywmt"),
		// 										Value: to.Ptr("sfbpcr"),
		// 									},
		// 								},
		// 								ProjectID: to.Ptr("fhfdyuiaaftqormerayks"),
		// 								BranchID: to.Ptr("oejenjawxexhuotsxodbl"),
		// 								EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
		// 							},
		// 						},
		// 					},
		// 					Roles: []*armneonpostgres.NeonRoleProperties{
		// 						{
		// 							EntityID: to.Ptr("test-id"),
		// 							EntityName: to.Ptr("test-entity"),
		// 							CreatedAt: to.Ptr("ffrubcskkjcwd"),
		// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 							Attributes: []*armneonpostgres.Attributes{
		// 								{
		// 									Name: to.Ptr("ioyjfywmt"),
		// 									Value: to.Ptr("sfbpcr"),
		// 								},
		// 							},
		// 							BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
		// 							Permissions: []*string{
		// 								to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
		// 							},
		// 							IsSuperUser: to.Ptr(true),
		// 						},
		// 					},
		// 					Databases: []*armneonpostgres.NeonDatabaseProperties{
		// 						{
		// 							EntityID: to.Ptr("test-id"),
		// 							EntityName: to.Ptr("test-entity"),
		// 							CreatedAt: to.Ptr("xelkuxjvrgclmw"),
		// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 							Attributes: []*armneonpostgres.Attributes{
		// 								{
		// 									Name: to.Ptr("ioyjfywmt"),
		// 									Value: to.Ptr("sfbpcr"),
		// 								},
		// 							},
		// 							BranchID: to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
		// 							OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
		// 						},
		// 					},
		// 					Endpoints: []*armneonpostgres.EndpointProperties{
		// 						{
		// 							EntityID: to.Ptr("test-id"),
		// 							EntityName: to.Ptr("test-entity"),
		// 							CreatedAt: to.Ptr("gokkvjmaabj"),
		// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 							Attributes: []*armneonpostgres.Attributes{
		// 								{
		// 									Name: to.Ptr("ioyjfywmt"),
		// 									Value: to.Ptr("sfbpcr"),
		// 								},
		// 							},
		// 							ProjectID: to.Ptr("fhfdyuiaaftqormerayks"),
		// 							BranchID: to.Ptr("oejenjawxexhuotsxodbl"),
		// 							EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
		// 						},
		// 					},
		// 				},
		// 				ID: to.Ptr("/subscriptions/671936A4-ED6C-445D-ACEE-5637920E7051/resourceGroups/rgneon/providers/Microsoft.Neon/organizations/testOrg123/projects/test-id"),
		// 				Name: to.Ptr("edcrl"),
		// 				Type: to.Ptr("ejnsmqyl"),
		// 				SystemData: &armneonpostgres.SystemData{
		// 					CreatedBy: to.Ptr("dknvmdx"),
		// 					CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-18T04:09:40.329Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("zhachretjgocylfh"),
		// 					LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-18T04:09:40.329Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-03-01-preview/Projects_Update_MaximumSet_Gen.json
func ExampleProjectsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("671936A4-ED6C-445D-ACEE-5637920E7051", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewProjectsClient().BeginUpdate(ctx, "rgneon", "testOrg123", "test-entity", armneonpostgres.Project{
		Properties: &armneonpostgres.ProjectProperties{
			EntityName: to.Ptr("test-name"),
			Attributes: []*armneonpostgres.Attributes{
				{
					Name:  to.Ptr("ioyjfywmt"),
					Value: to.Ptr("sfbpcr"),
				},
			},
			RegionID:  to.Ptr("cpnssldzuftdqgjdaqzjayqujpb"),
			Storage:   to.Ptr[int64](3),
			PgVersion: to.Ptr[int32](1),
			Branch: &armneonpostgres.BranchProperties{
				EntityName: to.Ptr("test-name"),
				Attributes: []*armneonpostgres.Attributes{
					{
						Name:  to.Ptr("ioyjfywmt"),
						Value: to.Ptr("sfbpcr"),
					},
				},
				ProjectID:    to.Ptr("vtdzaxdiwnzvq"),
				ParentID:     to.Ptr("test-id"),
				RoleName:     to.Ptr("imfhfgfpamibgcgibgxor"),
				DatabaseName: to.Ptr("xargveemydmqrdtjcdhf"),
				Roles: []*armneonpostgres.NeonRoleProperties{
					{
						EntityName: to.Ptr("test-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("ioyjfywmt"),
								Value: to.Ptr("sfbpcr"),
							},
						},
						BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
						Permissions: []*string{
							to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
						},
						IsSuperUser: to.Ptr(true),
					},
				},
				Databases: []*armneonpostgres.NeonDatabaseProperties{
					{
						EntityName: to.Ptr("test-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("ioyjfywmt"),
								Value: to.Ptr("sfbpcr"),
							},
						},
						BranchID:  to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
						OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
					},
				},
				Endpoints: []*armneonpostgres.EndpointProperties{
					{
						EntityName: to.Ptr("test-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("ioyjfywmt"),
								Value: to.Ptr("sfbpcr"),
							},
						},
						ProjectID:    to.Ptr("fhfdyuiaaftqormerayks"),
						BranchID:     to.Ptr("oejenjawxexhuotsxodbl"),
						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
					},
				},
			},
			Roles: []*armneonpostgres.NeonRoleProperties{
				{
					EntityName: to.Ptr("test-name"),
					Attributes: []*armneonpostgres.Attributes{
						{
							Name:  to.Ptr("ioyjfywmt"),
							Value: to.Ptr("sfbpcr"),
						},
					},
					BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
					Permissions: []*string{
						to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
					},
					IsSuperUser: to.Ptr(true),
				},
			},
			Databases: []*armneonpostgres.NeonDatabaseProperties{
				{
					EntityName: to.Ptr("test-name"),
					Attributes: []*armneonpostgres.Attributes{
						{
							Name:  to.Ptr("ioyjfywmt"),
							Value: to.Ptr("sfbpcr"),
						},
					},
					BranchID:  to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
					OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
				},
			},
			Endpoints: []*armneonpostgres.EndpointProperties{
				{
					EntityName: to.Ptr("test-name"),
					Attributes: []*armneonpostgres.Attributes{
						{
							Name:  to.Ptr("ioyjfywmt"),
							Value: to.Ptr("sfbpcr"),
						},
					},
					ProjectID:    to.Ptr("fhfdyuiaaftqormerayks"),
					BranchID:     to.Ptr("oejenjawxexhuotsxodbl"),
					EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.ProjectsClientUpdateResponse{
	// 	Project: &armneonpostgres.Project{
	// 		Properties: &armneonpostgres.ProjectProperties{
	// 			EntityID: to.Ptr("test-id"),
	// 			EntityName: to.Ptr("test-name"),
	// 			CreatedAt: to.Ptr("kkcodxjhxrjmunsqlzbagbyxmp"),
	// 			ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 			Attributes: []*armneonpostgres.Attributes{
	// 				{
	// 					Name: to.Ptr("ioyjfywmt"),
	// 					Value: to.Ptr("sfbpcr"),
	// 				},
	// 			},
	// 			RegionID: to.Ptr("cpnssldzuftdqgjdaqzjayqujpb"),
	// 			Storage: to.Ptr[int64](3),
	// 			PgVersion: to.Ptr[int32](1),
	// 			Branch: &armneonpostgres.BranchProperties{
	// 				EntityID: to.Ptr("test-id"),
	// 				EntityName: to.Ptr("test-name"),
	// 				CreatedAt: to.Ptr("ujfeowkbcrghfut"),
	// 				ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 				Attributes: []*armneonpostgres.Attributes{
	// 					{
	// 						Name: to.Ptr("ioyjfywmt"),
	// 						Value: to.Ptr("sfbpcr"),
	// 					},
	// 				},
	// 				ProjectID: to.Ptr("vtdzaxdiwnzvq"),
	// 				ParentID: to.Ptr("test-id"),
	// 				RoleName: to.Ptr("imfhfgfpamibgcgibgxor"),
	// 				DatabaseName: to.Ptr("xargveemydmqrdtjcdhf"),
	// 				Roles: []*armneonpostgres.NeonRoleProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("ffrubcskkjcwd"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
	// 						Permissions: []*string{
	// 							to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
	// 						},
	// 						IsSuperUser: to.Ptr(true),
	// 					},
	// 				},
	// 				Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("xelkuxjvrgclmw"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
	// 						OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
	// 					},
	// 				},
	// 				Endpoints: []*armneonpostgres.EndpointProperties{
	// 					{
	// 						EntityID: to.Ptr("test-id"),
	// 						EntityName: to.Ptr("test-name"),
	// 						CreatedAt: to.Ptr("gokkvjmaabj"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("ioyjfywmt"),
	// 								Value: to.Ptr("sfbpcr"),
	// 							},
	// 						},
	// 						ProjectID: to.Ptr("fhfdyuiaaftqormerayks"),
	// 						BranchID: to.Ptr("oejenjawxexhuotsxodbl"),
	// 						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 					},
	// 				},
	// 			},
	// 			Roles: []*armneonpostgres.NeonRoleProperties{
	// 				{
	// 					EntityID: to.Ptr("test-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("ffrubcskkjcwd"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					BranchID: to.Ptr("iecxepxhnzhjzeiguki"),
	// 					Permissions: []*string{
	// 						to.Ptr("ddwmkyztotgspcbetfokelddpmq"),
	// 					},
	// 					IsSuperUser: to.Ptr(true),
	// 				},
	// 			},
	// 			Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 				{
	// 					EntityID: to.Ptr("test-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("xelkuxjvrgclmw"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					BranchID: to.Ptr("zoaopvqitcgjdmsllgzdbrb"),
	// 					OwnerName: to.Ptr("cutdyjupbqghhxfkmsslzvmjwa"),
	// 				},
	// 			},
	// 			Endpoints: []*armneonpostgres.EndpointProperties{
	// 				{
	// 					EntityID: to.Ptr("test-id"),
	// 					EntityName: to.Ptr("test-name"),
	// 					CreatedAt: to.Ptr("gokkvjmaabj"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("ioyjfywmt"),
	// 							Value: to.Ptr("sfbpcr"),
	// 						},
	// 					},
	// 					ProjectID: to.Ptr("fhfdyuiaaftqormerayks"),
	// 					BranchID: to.Ptr("oejenjawxexhuotsxodbl"),
	// 					EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 				},
	// 			},
	// 		},
	// 		ID: to.Ptr("/subscriptions/671936A4-ED6C-445D-ACEE-5637920E7051/resourceGroups/rgneon/providers/Microsoft.Neon/organizations/testOrg123/projects/test-entity"),
	// 		Name: to.Ptr("edcrl"),
	// 		Type: to.Ptr("ejnsmqyl"),
	// 		SystemData: &armneonpostgres.SystemData{
	// 			CreatedBy: to.Ptr("dknvmdx"),
	// 			CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-18T04:09:40.329Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("zhachretjgocylfh"),
	// 			LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-18T04:09:40.329Z"); return t}()),
	// 		},
	// 	},
	// }
}
