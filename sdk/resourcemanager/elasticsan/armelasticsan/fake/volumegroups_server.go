// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/elasticsan/armelasticsan"
	"net/http"
	"net/url"
	"regexp"
)

// VolumeGroupsServer is a fake server for instances of the armelasticsan.VolumeGroupsClient type.
type VolumeGroupsServer struct {
	// BeginCreate is the fake for method VolumeGroupsClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, elasticSanName string, volumeGroupName string, parameters armelasticsan.VolumeGroup, options *armelasticsan.VolumeGroupsClientBeginCreateOptions) (resp azfake.PollerResponder[armelasticsan.VolumeGroupsClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method VolumeGroupsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, elasticSanName string, volumeGroupName string, options *armelasticsan.VolumeGroupsClientBeginDeleteOptions) (resp azfake.PollerResponder[armelasticsan.VolumeGroupsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method VolumeGroupsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, elasticSanName string, volumeGroupName string, options *armelasticsan.VolumeGroupsClientGetOptions) (resp azfake.Responder[armelasticsan.VolumeGroupsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByElasticSanPager is the fake for method VolumeGroupsClient.NewListByElasticSanPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByElasticSanPager func(resourceGroupName string, elasticSanName string, options *armelasticsan.VolumeGroupsClientListByElasticSanOptions) (resp azfake.PagerResponder[armelasticsan.VolumeGroupsClientListByElasticSanResponse])

	// BeginPreBackup is the fake for method VolumeGroupsClient.BeginPreBackup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginPreBackup func(ctx context.Context, resourceGroupName string, elasticSanName string, volumeGroupName string, parameters armelasticsan.VolumeNameList, options *armelasticsan.VolumeGroupsClientBeginPreBackupOptions) (resp azfake.PollerResponder[armelasticsan.VolumeGroupsClientPreBackupResponse], errResp azfake.ErrorResponder)

	// BeginPreRestore is the fake for method VolumeGroupsClient.BeginPreRestore
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginPreRestore func(ctx context.Context, resourceGroupName string, elasticSanName string, volumeGroupName string, parameters armelasticsan.DiskSnapshotList, options *armelasticsan.VolumeGroupsClientBeginPreRestoreOptions) (resp azfake.PollerResponder[armelasticsan.VolumeGroupsClientPreRestoreResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method VolumeGroupsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, elasticSanName string, volumeGroupName string, parameters armelasticsan.VolumeGroupUpdate, options *armelasticsan.VolumeGroupsClientBeginUpdateOptions) (resp azfake.PollerResponder[armelasticsan.VolumeGroupsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewVolumeGroupsServerTransport creates a new instance of VolumeGroupsServerTransport with the provided implementation.
// The returned VolumeGroupsServerTransport instance is connected to an instance of armelasticsan.VolumeGroupsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVolumeGroupsServerTransport(srv *VolumeGroupsServer) *VolumeGroupsServerTransport {
	return &VolumeGroupsServerTransport{
		srv:                      srv,
		beginCreate:              newTracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientCreateResponse]](),
		beginDelete:              newTracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientDeleteResponse]](),
		newListByElasticSanPager: newTracker[azfake.PagerResponder[armelasticsan.VolumeGroupsClientListByElasticSanResponse]](),
		beginPreBackup:           newTracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientPreBackupResponse]](),
		beginPreRestore:          newTracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientPreRestoreResponse]](),
		beginUpdate:              newTracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientUpdateResponse]](),
	}
}

// VolumeGroupsServerTransport connects instances of armelasticsan.VolumeGroupsClient to instances of VolumeGroupsServer.
// Don't use this type directly, use NewVolumeGroupsServerTransport instead.
type VolumeGroupsServerTransport struct {
	srv                      *VolumeGroupsServer
	beginCreate              *tracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientCreateResponse]]
	beginDelete              *tracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientDeleteResponse]]
	newListByElasticSanPager *tracker[azfake.PagerResponder[armelasticsan.VolumeGroupsClientListByElasticSanResponse]]
	beginPreBackup           *tracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientPreBackupResponse]]
	beginPreRestore          *tracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientPreRestoreResponse]]
	beginUpdate              *tracker[azfake.PollerResponder[armelasticsan.VolumeGroupsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for VolumeGroupsServerTransport.
func (v *VolumeGroupsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return v.dispatchToMethodFake(req, method)
}

func (v *VolumeGroupsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if volumeGroupsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = volumeGroupsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "VolumeGroupsClient.BeginCreate":
				res.resp, res.err = v.dispatchBeginCreate(req)
			case "VolumeGroupsClient.BeginDelete":
				res.resp, res.err = v.dispatchBeginDelete(req)
			case "VolumeGroupsClient.Get":
				res.resp, res.err = v.dispatchGet(req)
			case "VolumeGroupsClient.NewListByElasticSanPager":
				res.resp, res.err = v.dispatchNewListByElasticSanPager(req)
			case "VolumeGroupsClient.BeginPreBackup":
				res.resp, res.err = v.dispatchBeginPreBackup(req)
			case "VolumeGroupsClient.BeginPreRestore":
				res.resp, res.err = v.dispatchBeginPreRestore(req)
			case "VolumeGroupsClient.BeginUpdate":
				res.resp, res.err = v.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (v *VolumeGroupsServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := v.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ElasticSan/elasticSans/(?P<elasticSanName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumegroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armelasticsan.VolumeGroup](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		elasticSanNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("elasticSanName")])
		if err != nil {
			return nil, err
		}
		volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginCreate(req.Context(), resourceGroupNameParam, elasticSanNameParam, volumeGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		v.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		v.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		v.beginCreate.remove(req)
	}

	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := v.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ElasticSan/elasticSans/(?P<elasticSanName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumegroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		elasticSanNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("elasticSanName")])
		if err != nil {
			return nil, err
		}
		volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginDelete(req.Context(), resourceGroupNameParam, elasticSanNameParam, volumeGroupNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		v.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		v.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		v.beginDelete.remove(req)
	}

	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ElasticSan/elasticSans/(?P<elasticSanName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumegroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	elasticSanNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("elasticSanName")])
	if err != nil {
		return nil, err
	}
	volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.Get(req.Context(), resourceGroupNameParam, elasticSanNameParam, volumeGroupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VolumeGroup, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchNewListByElasticSanPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListByElasticSanPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByElasticSanPager not implemented")}
	}
	newListByElasticSanPager := v.newListByElasticSanPager.get(req)
	if newListByElasticSanPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ElasticSan/elasticSans/(?P<elasticSanName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumeGroups`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		elasticSanNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("elasticSanName")])
		if err != nil {
			return nil, err
		}
		resp := v.srv.NewListByElasticSanPager(resourceGroupNameParam, elasticSanNameParam, nil)
		newListByElasticSanPager = &resp
		v.newListByElasticSanPager.add(req, newListByElasticSanPager)
		server.PagerResponderInjectNextLinks(newListByElasticSanPager, req, func(page *armelasticsan.VolumeGroupsClientListByElasticSanResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByElasticSanPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListByElasticSanPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByElasticSanPager) {
		v.newListByElasticSanPager.remove(req)
	}
	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchBeginPreBackup(req *http.Request) (*http.Response, error) {
	if v.srv.BeginPreBackup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginPreBackup not implemented")}
	}
	beginPreBackup := v.beginPreBackup.get(req)
	if beginPreBackup == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ElasticSan/elasticSans/(?P<elasticSanName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumegroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/preBackup`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armelasticsan.VolumeNameList](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		elasticSanNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("elasticSanName")])
		if err != nil {
			return nil, err
		}
		volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginPreBackup(req.Context(), resourceGroupNameParam, elasticSanNameParam, volumeGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginPreBackup = &respr
		v.beginPreBackup.add(req, beginPreBackup)
	}

	resp, err := server.PollerResponderNext(beginPreBackup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginPreBackup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginPreBackup) {
		v.beginPreBackup.remove(req)
	}

	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchBeginPreRestore(req *http.Request) (*http.Response, error) {
	if v.srv.BeginPreRestore == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginPreRestore not implemented")}
	}
	beginPreRestore := v.beginPreRestore.get(req)
	if beginPreRestore == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ElasticSan/elasticSans/(?P<elasticSanName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumegroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/preRestore`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armelasticsan.DiskSnapshotList](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		elasticSanNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("elasticSanName")])
		if err != nil {
			return nil, err
		}
		volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginPreRestore(req.Context(), resourceGroupNameParam, elasticSanNameParam, volumeGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginPreRestore = &respr
		v.beginPreRestore.add(req, beginPreRestore)
	}

	resp, err := server.PollerResponderNext(beginPreRestore, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginPreRestore.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginPreRestore) {
		v.beginPreRestore.remove(req)
	}

	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := v.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ElasticSan/elasticSans/(?P<elasticSanName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumegroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armelasticsan.VolumeGroupUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		elasticSanNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("elasticSanName")])
		if err != nil {
			return nil, err
		}
		volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginUpdate(req.Context(), resourceGroupNameParam, elasticSanNameParam, volumeGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		v.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		v.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to VolumeGroupsServerTransport
var volumeGroupsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
