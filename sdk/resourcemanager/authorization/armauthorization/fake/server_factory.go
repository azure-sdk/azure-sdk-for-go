//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armauthorization.ClientFactory type.
type ServerFactory struct {
	EligibleChildResourcesServer           EligibleChildResourcesServer
	RoleAssignmentScheduleInstancesServer  RoleAssignmentScheduleInstancesServer
	RoleAssignmentScheduleRequestsServer   RoleAssignmentScheduleRequestsServer
	RoleAssignmentSchedulesServer          RoleAssignmentSchedulesServer
	RoleAssignmentsServer                  RoleAssignmentsServer
	RoleEligibilityScheduleInstancesServer RoleEligibilityScheduleInstancesServer
	RoleEligibilityScheduleRequestsServer  RoleEligibilityScheduleRequestsServer
	RoleEligibilitySchedulesServer         RoleEligibilitySchedulesServer
	RoleManagementPoliciesServer           RoleManagementPoliciesServer
	RoleManagementPolicyAssignmentsServer  RoleManagementPolicyAssignmentsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armauthorization.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armauthorization.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                      *ServerFactory
	trMu                                     sync.Mutex
	trEligibleChildResourcesServer           *EligibleChildResourcesServerTransport
	trRoleAssignmentScheduleInstancesServer  *RoleAssignmentScheduleInstancesServerTransport
	trRoleAssignmentScheduleRequestsServer   *RoleAssignmentScheduleRequestsServerTransport
	trRoleAssignmentSchedulesServer          *RoleAssignmentSchedulesServerTransport
	trRoleAssignmentsServer                  *RoleAssignmentsServerTransport
	trRoleEligibilityScheduleInstancesServer *RoleEligibilityScheduleInstancesServerTransport
	trRoleEligibilityScheduleRequestsServer  *RoleEligibilityScheduleRequestsServerTransport
	trRoleEligibilitySchedulesServer         *RoleEligibilitySchedulesServerTransport
	trRoleManagementPoliciesServer           *RoleManagementPoliciesServerTransport
	trRoleManagementPolicyAssignmentsServer  *RoleManagementPolicyAssignmentsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "EligibleChildResourcesClient":
		initServer(s, &s.trEligibleChildResourcesServer, func() *EligibleChildResourcesServerTransport {
			return NewEligibleChildResourcesServerTransport(&s.srv.EligibleChildResourcesServer)
		})
		resp, err = s.trEligibleChildResourcesServer.Do(req)
	case "RoleAssignmentScheduleInstancesClient":
		initServer(s, &s.trRoleAssignmentScheduleInstancesServer, func() *RoleAssignmentScheduleInstancesServerTransport {
			return NewRoleAssignmentScheduleInstancesServerTransport(&s.srv.RoleAssignmentScheduleInstancesServer)
		})
		resp, err = s.trRoleAssignmentScheduleInstancesServer.Do(req)
	case "RoleAssignmentScheduleRequestsClient":
		initServer(s, &s.trRoleAssignmentScheduleRequestsServer, func() *RoleAssignmentScheduleRequestsServerTransport {
			return NewRoleAssignmentScheduleRequestsServerTransport(&s.srv.RoleAssignmentScheduleRequestsServer)
		})
		resp, err = s.trRoleAssignmentScheduleRequestsServer.Do(req)
	case "RoleAssignmentSchedulesClient":
		initServer(s, &s.trRoleAssignmentSchedulesServer, func() *RoleAssignmentSchedulesServerTransport {
			return NewRoleAssignmentSchedulesServerTransport(&s.srv.RoleAssignmentSchedulesServer)
		})
		resp, err = s.trRoleAssignmentSchedulesServer.Do(req)
	case "RoleAssignmentsClient":
		initServer(s, &s.trRoleAssignmentsServer, func() *RoleAssignmentsServerTransport {
			return NewRoleAssignmentsServerTransport(&s.srv.RoleAssignmentsServer)
		})
		resp, err = s.trRoleAssignmentsServer.Do(req)
	case "RoleEligibilityScheduleInstancesClient":
		initServer(s, &s.trRoleEligibilityScheduleInstancesServer, func() *RoleEligibilityScheduleInstancesServerTransport {
			return NewRoleEligibilityScheduleInstancesServerTransport(&s.srv.RoleEligibilityScheduleInstancesServer)
		})
		resp, err = s.trRoleEligibilityScheduleInstancesServer.Do(req)
	case "RoleEligibilityScheduleRequestsClient":
		initServer(s, &s.trRoleEligibilityScheduleRequestsServer, func() *RoleEligibilityScheduleRequestsServerTransport {
			return NewRoleEligibilityScheduleRequestsServerTransport(&s.srv.RoleEligibilityScheduleRequestsServer)
		})
		resp, err = s.trRoleEligibilityScheduleRequestsServer.Do(req)
	case "RoleEligibilitySchedulesClient":
		initServer(s, &s.trRoleEligibilitySchedulesServer, func() *RoleEligibilitySchedulesServerTransport {
			return NewRoleEligibilitySchedulesServerTransport(&s.srv.RoleEligibilitySchedulesServer)
		})
		resp, err = s.trRoleEligibilitySchedulesServer.Do(req)
	case "RoleManagementPoliciesClient":
		initServer(s, &s.trRoleManagementPoliciesServer, func() *RoleManagementPoliciesServerTransport {
			return NewRoleManagementPoliciesServerTransport(&s.srv.RoleManagementPoliciesServer)
		})
		resp, err = s.trRoleManagementPoliciesServer.Do(req)
	case "RoleManagementPolicyAssignmentsClient":
		initServer(s, &s.trRoleManagementPolicyAssignmentsServer, func() *RoleManagementPolicyAssignmentsServerTransport {
			return NewRoleManagementPolicyAssignmentsServerTransport(&s.srv.RoleManagementPolicyAssignmentsServer)
		})
		resp, err = s.trRoleManagementPolicyAssignmentsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
