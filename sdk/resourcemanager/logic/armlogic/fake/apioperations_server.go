// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/logic/armlogic/v2"
	"net/http"
	"net/url"
	"regexp"
)

// APIOperationsServer is a fake server for instances of the armlogic.APIOperationsClient type.
type APIOperationsServer struct {
	// NewListPager is the fake for method APIOperationsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(integrationServiceEnvironmentName string, apiName string, options *armlogic.APIOperationsClientListOptions) (resp azfake.PagerResponder[armlogic.APIOperationsClientListResponse])
}

// NewAPIOperationsServerTransport creates a new instance of APIOperationsServerTransport with the provided implementation.
// The returned APIOperationsServerTransport instance is connected to an instance of armlogic.APIOperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAPIOperationsServerTransport(srv *APIOperationsServer) *APIOperationsServerTransport {
	return &APIOperationsServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armlogic.APIOperationsClientListResponse]](),
	}
}

// APIOperationsServerTransport connects instances of armlogic.APIOperationsClient to instances of APIOperationsServer.
// Don't use this type directly, use NewAPIOperationsServerTransport instead.
type APIOperationsServerTransport struct {
	srv          *APIOperationsServer
	newListPager *tracker[azfake.PagerResponder[armlogic.APIOperationsClientListResponse]]
}

// Do implements the policy.Transporter interface for APIOperationsServerTransport.
func (a *APIOperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *APIOperationsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if apiOperationsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = apiOperationsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "APIOperationsClient.NewListPager":
				res.resp, res.err = a.dispatchNewListPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *APIOperationsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := a.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/integrationServiceEnvironments/(?P<integrationServiceEnvironmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/managedApis/(?P<apiName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/apiOperations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		integrationServiceEnvironmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("integrationServiceEnvironmentName")])
		if err != nil {
			return nil, err
		}
		apiNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("apiName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListPager(integrationServiceEnvironmentNameParam, apiNameParam, nil)
		newListPager = &resp
		a.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armlogic.APIOperationsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		a.newListPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to APIOperationsServerTransport
var apiOperationsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
