// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azspeechbatchtranscription

// FileKind - FileKind
type FileKind string

const (
	// FileKindAcousticDataArchive - Type of data is acoustic data archive.
	FileKindAcousticDataArchive FileKind = "AcousticDataArchive"
	// FileKindAcousticDataTranscriptionV2 - Type of data is acoustic data transcription v2.
	FileKindAcousticDataTranscriptionV2 FileKind = "AcousticDataTranscriptionV2"
	// FileKindAudio - Type of data is audio.
	FileKindAudio FileKind = "Audio"
	// FileKindDatasetReport - Type of data is dataset report.
	FileKindDatasetReport FileKind = "DatasetReport"
	// FileKindEvaluationDetails - Type of data is evaluation details.
	FileKindEvaluationDetails FileKind = "EvaluationDetails"
	// FileKindLanguageData - Type of data is language data.
	FileKindLanguageData FileKind = "LanguageData"
	// FileKindModelReport - Type of data is model report.
	FileKindModelReport FileKind = "ModelReport"
	// FileKindOutputFormattingData - Type of data is output formatting input file.
	FileKindOutputFormattingData FileKind = "OutputFormattingData"
	// FileKindPronunciationData - Type of data is pronunciation data.
	FileKindPronunciationData FileKind = "PronunciationData"
	// FileKindTranscription - Type of data is transcription.
	FileKindTranscription FileKind = "Transcription"
	// FileKindTranscriptionReport - Type of data is transcription report.
	FileKindTranscriptionReport FileKind = "TranscriptionReport"
)

// PossibleFileKindValues returns the possible values for the FileKind const type.
func PossibleFileKindValues() []FileKind {
	return []FileKind{
		FileKindAcousticDataArchive,
		FileKindAcousticDataTranscriptionV2,
		FileKindAudio,
		FileKindDatasetReport,
		FileKindEvaluationDetails,
		FileKindLanguageData,
		FileKindModelReport,
		FileKindOutputFormattingData,
		FileKindPronunciationData,
		FileKindTranscription,
		FileKindTranscriptionReport,
	}
}

// LanguageIdentificationMode - The mode used for language identification.
type LanguageIdentificationMode string

const (
	// LanguageIdentificationModeContinuous - Continuous language identification (Default).
	LanguageIdentificationModeContinuous LanguageIdentificationMode = "Continuous"
	// LanguageIdentificationModeSingle - Single language identification. If no language can be identified, the error code NoLanguageIdentified
	// is returned to the user. If there is ambiguity between multiple languages, the error code MultipleLanguagesIdentified is
	// returned to the user.
	LanguageIdentificationModeSingle LanguageIdentificationMode = "Single"
)

// PossibleLanguageIdentificationModeValues returns the possible values for the LanguageIdentificationMode const type.
func PossibleLanguageIdentificationModeValues() []LanguageIdentificationMode {
	return []LanguageIdentificationMode{
		LanguageIdentificationModeContinuous,
		LanguageIdentificationModeSingle,
	}
}

// ProfanityFilterMode - Mode of profanity filtering.
type ProfanityFilterMode string

const (
	// ProfanityFilterModeMasked - Mask the profanity with * except of the first letter, e.g., f***
	ProfanityFilterModeMasked ProfanityFilterMode = "Masked"
	// ProfanityFilterModeNone - Disable profanity filtering.
	ProfanityFilterModeNone ProfanityFilterMode = "None"
	// ProfanityFilterModeRemoved - Remove profanity.
	ProfanityFilterModeRemoved ProfanityFilterMode = "Removed"
	// ProfanityFilterModeTags - Add "profanity" XML tags</Profanity>
	ProfanityFilterModeTags ProfanityFilterMode = "Tags"
)

// PossibleProfanityFilterModeValues returns the possible values for the ProfanityFilterMode const type.
func PossibleProfanityFilterModeValues() []ProfanityFilterMode {
	return []ProfanityFilterMode{
		ProfanityFilterModeMasked,
		ProfanityFilterModeNone,
		ProfanityFilterModeRemoved,
		ProfanityFilterModeTags,
	}
}

// PunctuationMode - The mode used for punctuation.
type PunctuationMode string

const (
	// PunctuationModeAutomatic - Automatic punctuation.
	PunctuationModeAutomatic PunctuationMode = "Automatic"
	// PunctuationModeDictated - Dictated punctuation marks only, i.e., explicit punctuation.
	PunctuationModeDictated PunctuationMode = "Dictated"
	// PunctuationModeDictatedAndAutomatic - Dictated punctuation marks or automatic punctuation.
	PunctuationModeDictatedAndAutomatic PunctuationMode = "DictatedAndAutomatic"
	// PunctuationModeNone - No punctuation.
	PunctuationModeNone PunctuationMode = "None"
)

// PossiblePunctuationModeValues returns the possible values for the PunctuationMode const type.
func PossiblePunctuationModeValues() []PunctuationMode {
	return []PunctuationMode{
		PunctuationModeAutomatic,
		PunctuationModeDictated,
		PunctuationModeDictatedAndAutomatic,
		PunctuationModeNone,
	}
}

// TranscriptionStatus - Describe the current state of the API.
type TranscriptionStatus string

const (
	// TranscriptionStatusFailed - The long running operation has failed.
	TranscriptionStatusFailed TranscriptionStatus = "Failed"
	// TranscriptionStatusNotStarted - The long running operation has not yet started.
	TranscriptionStatusNotStarted TranscriptionStatus = "NotStarted"
	// TranscriptionStatusRunning - The long running operation is currently processing.
	TranscriptionStatusRunning TranscriptionStatus = "Running"
	// TranscriptionStatusSucceeded - The long running operation has successfully completed.
	TranscriptionStatusSucceeded TranscriptionStatus = "Succeeded"
)

// PossibleTranscriptionStatusValues returns the possible values for the TranscriptionStatus const type.
func PossibleTranscriptionStatusValues() []TranscriptionStatus {
	return []TranscriptionStatus{
		TranscriptionStatusFailed,
		TranscriptionStatusNotStarted,
		TranscriptionStatusRunning,
		TranscriptionStatusSucceeded,
	}
}
