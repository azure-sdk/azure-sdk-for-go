//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armsecurity

const (
	moduleName    = "armsecurity"
	moduleVersion = "v0.10.0"
)

// RuleSeverity - The rule severity.
type RuleSeverity string

const (
	// RuleSeverityHigh - High
	RuleSeverityHigh RuleSeverity = "High"
	// RuleSeverityInformational - Informational
	RuleSeverityInformational RuleSeverity = "Informational"
	// RuleSeverityLow - Low
	RuleSeverityLow RuleSeverity = "Low"
	// RuleSeverityMedium - Medium
	RuleSeverityMedium RuleSeverity = "Medium"
	// RuleSeverityObsolete - Obsolete
	RuleSeverityObsolete RuleSeverity = "Obsolete"
)

// PossibleRuleSeverityValues returns the possible values for the RuleSeverity const type.
func PossibleRuleSeverityValues() []RuleSeverity {
	return []RuleSeverity{
		RuleSeverityHigh,
		RuleSeverityInformational,
		RuleSeverityLow,
		RuleSeverityMedium,
		RuleSeverityObsolete,
	}
}

// RuleStatus - The rule result status.
type RuleStatus string

const (
	// RuleStatusFinding - Finding
	RuleStatusFinding RuleStatus = "Finding"
	// RuleStatusInternalError - InternalError
	RuleStatusInternalError RuleStatus = "InternalError"
	// RuleStatusNonFinding - NonFinding
	RuleStatusNonFinding RuleStatus = "NonFinding"
)

// PossibleRuleStatusValues returns the possible values for the RuleStatus const type.
func PossibleRuleStatusValues() []RuleStatus {
	return []RuleStatus{
		RuleStatusFinding,
		RuleStatusInternalError,
		RuleStatusNonFinding,
	}
}

// RuleType - The rule type.
type RuleType string

const (
	// RuleTypeBaselineExpected - BaselineExpected
	RuleTypeBaselineExpected RuleType = "BaselineExpected"
	// RuleTypeBinary - Binary
	RuleTypeBinary RuleType = "Binary"
	// RuleTypeNegativeList - NegativeList
	RuleTypeNegativeList RuleType = "NegativeList"
	// RuleTypePositiveList - PositiveList
	RuleTypePositiveList RuleType = "PositiveList"
)

// PossibleRuleTypeValues returns the possible values for the RuleType const type.
func PossibleRuleTypeValues() []RuleType {
	return []RuleType{
		RuleTypeBaselineExpected,
		RuleTypeBinary,
		RuleTypeNegativeList,
		RuleTypePositiveList,
	}
}

// ScanState - The scan status.
type ScanState string

const (
	// ScanStateFailed - Failed
	ScanStateFailed ScanState = "Failed"
	// ScanStateFailedToRun - FailedToRun
	ScanStateFailedToRun ScanState = "FailedToRun"
	// ScanStateInProgress - InProgress
	ScanStateInProgress ScanState = "InProgress"
	// ScanStatePassed - Passed
	ScanStatePassed ScanState = "Passed"
)

// PossibleScanStateValues returns the possible values for the ScanState const type.
func PossibleScanStateValues() []ScanState {
	return []ScanState{
		ScanStateFailed,
		ScanStateFailedToRun,
		ScanStateInProgress,
		ScanStatePassed,
	}
}

// ScanTriggerType - The scan trigger type.
type ScanTriggerType string

const (
	// ScanTriggerTypeOnDemand - OnDemand
	ScanTriggerTypeOnDemand ScanTriggerType = "OnDemand"
	// ScanTriggerTypeRecurring - Recurring
	ScanTriggerTypeRecurring ScanTriggerType = "Recurring"
)

// PossibleScanTriggerTypeValues returns the possible values for the ScanTriggerType const type.
func PossibleScanTriggerTypeValues() []ScanTriggerType {
	return []ScanTriggerType{
		ScanTriggerTypeOnDemand,
		ScanTriggerTypeRecurring,
	}
}
