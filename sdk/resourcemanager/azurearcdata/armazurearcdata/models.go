// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

import "time"

// ActiveDirectoryConnectorDNSDetails - DNS server details
type ActiveDirectoryConnectorDNSDetails struct {
	// REQUIRED; List of Active Directory DNS server IP addresses.
	NameserverIPAddresses []*string

	// DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
	DomainName *string

	// Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
	PreferK8SDNSForPtrLookups *bool

	// Replica count for DNS proxy service. Default value is 1.
	Replicas *int64
}

// ActiveDirectoryConnectorDomainDetails - Active Directory domain details
type ActiveDirectoryConnectorDomainDetails struct {
	// REQUIRED; Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
	Realm *string

	// null
	DomainControllers *ActiveDirectoryDomainControllers

	// NETBIOS name of the Active Directory domain.
	NetbiosDomainName *string

	// The distinguished name of the Active Directory Organizational Unit.
	OuDistinguishedName *string

	// The service account provisioning mode for this Active Directory connector.
	ServiceAccountProvisioning *AccountProvisioningMode
}

// ActiveDirectoryConnectorListResult - A list of active directory connectors
type ActiveDirectoryConnectorListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of results.
	Value []*ActiveDirectoryConnectorResource
}

// ActiveDirectoryConnectorProperties - The properties of an Active Directory connector resource
type ActiveDirectoryConnectorProperties struct {
	// REQUIRED; null
	Spec *ActiveDirectoryConnectorSpec

	// Username and password for domain service account authentication.
	DomainServiceAccountLoginInformation *BasicLoginInformation

	// null
	Status *ActiveDirectoryConnectorStatus

	// READ-ONLY; The provisioning state of the Active Directory connector resource.
	ProvisioningState *string
}

// ActiveDirectoryConnectorResource - Active directory connector resource
type ActiveDirectoryConnectorResource struct {
	// REQUIRED; null
	Properties *ActiveDirectoryConnectorProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ActiveDirectoryConnectorSpec - The specifications of the AD Kubernetes resource.
type ActiveDirectoryConnectorSpec struct {
	// REQUIRED; null
	ActiveDirectory *ActiveDirectoryConnectorDomainDetails

	// REQUIRED; null
	DNS *ActiveDirectoryConnectorDNSDetails
}

// ActiveDirectoryConnectorStatus - The status of the Kubernetes custom resource.
type ActiveDirectoryConnectorStatus struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The time that the custom resource was last updated.
	LastUpdateTime *string

	// The version of the replicaSet associated with the AD connector custom resource.
	ObservedGeneration *int64

	// The state of the AD connector custom resource.
	State *string
}

// ActiveDirectoryDomainController - Information about a domain controller in the AD domain.
type ActiveDirectoryDomainController struct {
	// REQUIRED; Fully-qualified domain name of a domain controller in the AD domain.
	Hostname *string
}

// ActiveDirectoryDomainControllers - Details about the Active Directory domain controllers associated with this AD connector
// instance
type ActiveDirectoryDomainControllers struct {
	// Information about the Primary Domain Controller (PDC) in the AD domain.
	PrimaryDomainController *ActiveDirectoryDomainController

	// null
	SecondaryDomainControllers []*ActiveDirectoryDomainController
}

// ActiveDirectoryInformation - Active Directory information that related to the resource.
type ActiveDirectoryInformation struct {
	// Keytab information that is used for the Sql Managed Instance when Active Directory authentication is used.
	KeytabInformation *KeytabInformation
}

// ArcSQLServerAvailabilityGroupListResult - A list of Arc Sql Server Availability Groups.
type ArcSQLServerAvailabilityGroupListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of Arc Sql Server Availability Groups.
	Value []*SQLServerAvailabilityGroupResource
}

// ArcSQLServerDatabaseListResult - A list of Arc Sql Server database.
type ArcSQLServerDatabaseListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of Arc Sql Server database.
	Value []*SQLServerDatabaseResource
}

// AvailabilityGroupConfigure - The specifications of the availability group replica configuration
type AvailabilityGroupConfigure struct {
	// Property that determines whether a given availability replica can run in synchronous-commit mode
	AvailabilityMode *ArcSQLServerAvailabilityMode

	// Represents the user-specified priority for performing backups on this replica relative to the other replicas in the same
	// availability group.
	BackupPriority *int32

	// Name of certificate to use for authentication. Required if any CERTIFICATE authentication modes are specified.
	CertificateName *string

	// Permitted authentication modes for the mirroring endpoint.
	EndpointAuthenticationMode *ConnectionAuth

	// The login which will connect to the mirroring endpoint.
	EndpointConnectLogin *string

	// Name of the mirroring endpoint URL
	EndpointName *string

	// Mirroring endpoint URL of availability group replica
	EndpointURL *string

	// Property to set the failover mode of the availability group replica
	FailoverMode *ArcSQLServerFailoverMode

	// Whether the primary replica should allow all connections or only READ_WRITE connections (disallowing ReadOnly connections)
	PrimaryAllowConnections *PrimaryAllowConnections

	// Connectivity endpoint (URL) of the read only availability replica.
	ReadOnlyRoutingURL *string

	// Connectivity endpoint (URL) of the read write availability replica.
	ReadWriteRoutingURL *string

	// Whether the secondary replica should allow all connections, no connections, or only ReadOnly connections.
	SecondaryAllowConnections *SecondaryAllowConnections

	// Specifies how the secondary replica will be initially seeded. AUTOMATIC enables direct seeding. This method will seed the
	// secondary replica over the network. This method does not require you to backup
	// and restore a copy of the primary database on the replica. MANUAL specifies manual seeding (default). This method requires
	// you to create a backup of the database on the primary replica and manually
	// restore that backup on the secondary replica.
	SeedingMode *SeedingMode

	// The time-out period of availability group session replica, in seconds.
	SessionTimeout *int32

	// READ-ONLY; The Availability Synchronization mode of the availability group replica.
	AvailabilityModeDescription *string

	// READ-ONLY; The failover mode of the availability group replica.
	FailoverModeDescription *string

	// READ-ONLY; Whether the availability allows all connections or only read-write connections.
	PrimaryRoleAllowConnectionsDescription *string

	// READ-ONLY; Date that the replica was created.
	ReplicaCreateDate *time.Time

	// READ-ONLY; Date that the replica was modified.
	ReplicaModifyDate *time.Time

	// READ-ONLY; Whether an availability replica that is performing the secondary role (that is, a secondary replica) can accept
	// connections from clients.
	SecondaryRoleAllowConnectionsDescription *string

	// READ-ONLY; Describes seeding mode.
	SeedingModeDescription *string
}

// AvailabilityGroupCreateUpdateConfiguration - Options used in creating an availability group
type AvailabilityGroupCreateUpdateConfiguration struct {
	// Preferred replica for running automated backups.
	AutomatedBackupPreference *AutomatedBackupPreference

	// Name of the availability group.
	AvailabilityGroupName *string

	// Set to WSFC when availability group is on a failover cluster instance on a Windows Server failover cluster. Set to NONE
	// when availability group not using WSFC for cluster coordination.
	ClusterType *ClusterType

	// List of databases to include in the availability group.
	Databases []*string

	// Specifies whether the availability group supports failover for database health conditions.
	DbFailover *DbFailover

	// Specifies whether DTC support has been enabled for this availability group.
	DtcSupport *DtcSupport

	// User-defined failure condition level under which an automatic failover must be triggered.
	FailureConditionLevel *FailureConditionLevel

	// Wait time (in milliseconds) for the spserverdiagnostics system stored procedure to return server-health information, before
	// the server instance is assumed to be slow or not responding.
	HealthCheckTimeout *int32

	// The listener for the sql server availability group
	Listener *SQLAvailabilityGroupStaticIPListenerProperties

	// List of availability group replicas.
	Replicas []*AvailabilityGroupCreateUpdateReplicaConfiguration

	// The number of secondary replicas that must be in a synchronized state for a commit to complete.
	RequiredSynchronizedSecondariesToCommit *int32
}

// AvailabilityGroupCreateUpdateReplicaConfiguration - The specifications of the availability group replica configuration
type AvailabilityGroupCreateUpdateReplicaConfiguration struct {
	// Property that determines whether a given availability replica can run in synchronous-commit mode
	AvailabilityMode *ArcSQLServerAvailabilityMode

	// Represents the user-specified priority for performing backups on this replica relative to the other replicas in the same
	// availability group.
	BackupPriority *int32

	// Name of certificate to use for authentication. Required if any CERTIFICATE authentication modes are specified.
	CertificateName *string

	// Permitted authentication modes for the mirroring endpoint.
	EndpointAuthenticationMode *ConnectionAuth

	// The login which will connect to the mirroring endpoint
	EndpointConnectLogin *string

	// Name of the database mirroring endpoint URL for the availability group replica
	EndpointName *string

	// Database mirroring endpoint URL of availability group replica
	EndpointURL *string

	// Property to set the failover mode of the availability group replica
	FailoverMode *ArcSQLServerFailoverMode

	// Whether the primary replica should allow all connections or only READ_WRITE connections (disallowing ReadOnly connections)
	PrimaryRoleAllowConnections *PrimaryAllowConnections

	// List of read only routing URLs.
	PrimaryRoleReadOnlyRoutingList []*string

	// Whether the secondary replica should allow all connections, no connections, or only ReadOnly connections.
	SecondaryRoleAllowConnections *SecondaryAllowConnections

	// Connectivity endpoint (URL) of the read only availability replica.
	SecondaryRoleReadOnlyRoutingURL *string

	// Specifies how the secondary replica will be initially seeded. AUTOMATIC enables direct seeding. This method will seed the
	// secondary replica over the network. This method does not require you to backup
	// and restore a copy of the primary database on the replica. MANUAL specifies manual seeding (default). This method requires
	// you to create a backup of the database on the primary replica and manually
	// restore that backup on the secondary replica.
	SeedingMode *SeedingMode

	// the server instance hosting the replica.
	ServerInstance *string

	// The time-out period of availability group session replica, in seconds.
	SessionTimeout *int32
}

// AvailabilityGroupInfo - The specifications of the availability group state
type AvailabilityGroupInfo struct {
	// Specifies whether this is a basic availability group.
	BasicFeatures *bool

	// Specifies whether the availability group supports failover for database health conditions.
	DbFailover *bool

	// Specifies whether DTC support has been enabled for this availability group.
	DtcSupport *bool

	// User-defined failure condition level under which an automatic failover must be triggered.
	FailureConditionLevel *int32

	// Wait time (in milliseconds) for the spserverdiagnostics system stored procedure to return server-health information, before
	// the server instance is assumed to be slow or not responding.
	HealthCheckTimeout *int32

	// SQL Server availability group contained system databases.
	IsContained *bool

	// Specifies whether this is a distributed availability group.
	IsDistributed *bool

	// The listener for the sql server availability group
	Listener *SQLAvailabilityGroupStaticIPListenerProperties

	// The number of secondary replicas that must be in a synchronized state for a commit to complete.
	RequiredSynchronizedSecondariesToCommit *int32

	// READ-ONLY; Preferred location for performing backups on the availability databases in this availability group.
	AutomatedBackupPreferenceDescription *string

	// READ-ONLY; SQL Server availability group cluster type description
	ClusterTypeDescription *string

	// READ-ONLY; Indicates the recovery health of the primary replica.
	PrimaryRecoveryHealthDescription *string

	// READ-ONLY; Name of the server instance that is hosting the current primary replica.
	PrimaryReplica *string

	// READ-ONLY
	ReplicationPartnerType *ReplicationPartnerType

	// READ-ONLY; Indicates the recovery health of a secondary replica.
	SecondaryRecoveryHealthDescription *string

	// READ-ONLY; Reflects a roll-up of the synchronization health of all availability replicas in the availability group.
	SynchronizationHealthDescription *string

	// READ-ONLY; SQL Server availability group current version.
	Version *int32
}

// AvailabilityGroupState - The specifications of the availability group state
type AvailabilityGroupState struct {
	// READ-ONLY; Current Always On availability groups role of the availability group replica.
	AvailabilityGroupReplicaRole *string

	// READ-ONLY; Whether a secondary replica is currently connected to the primary replica.
	ConnectedStateDescription *string

	// READ-ONLY; Text description of the last connection error of the availability group replica.
	LastConnectErrorDescription *string

	// READ-ONLY; Date and time timestamp indicating when the last connect error occurred.
	LastConnectErrorTimestamp *time.Time

	// READ-ONLY; Current operational state of the availability group replica
	OperationalStateDescription *string

	// READ-ONLY; Recovery health of the availability group replica.
	RecoveryHealthDescription *string

	// READ-ONLY; Reflects a rollup of the database synchronization state (synchronization_state) of all joined availability databases
	// (also known as replicas) and the availability mode of the replica
	// (synchronous-commit or asynchronous-commit mode). The rollup will reflect the least healthy accumulated state the databases
	// on the replica.
	SynchronizationHealthDescription *string
}

// BackgroundJob - The background job details.
type BackgroundJob struct {
	// The end time of the background job.
	EndTime *time.Time

	// The execution state of the background job.
	ExecutionState *ExecutionState

	// The last execution status of the background job.
	LastExecutionStatus *LastExecutionStatus

	// The last execution time of the background job.
	LastExecutionTime *time.Time

	// The start time of the background job.
	StartTime *time.Time

	// The state of the background job.
	State *State
}

// BackupPolicy - The backup profile for the SQL server.
type BackupPolicy struct {
	// The differential backup interval in hours.
	DifferentialBackupHours *DifferentialBackupHours

	// The value indicating days between full backups.
	FullBackupDays *int32

	// The retention period for all the databases in this managed instance.
	RetentionPeriodDays *int32

	// The value indicating minutes between transaction log backups.
	TransactionLogBackupMinutes *int32
}

// BasicLoginInformation - Username and password for basic login authentication.
type BasicLoginInformation struct {
	// Login password.
	Password *string

	// Login username.
	Username *string
}

// ClientConnection - Client connection related configuration.
type ClientConnection struct {
	// Indicates if client connection is enabled for this SQL Server instance.
	Enabled *bool
}

// CommonSKU - The resource model definition representing SKU for ARM resources
type CommonSKU struct {
	// REQUIRED; The name of the SKU. It is typically a letter+number code
	Name *string

	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
	// resource this may be omitted.
	Capacity *int32

	// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
	Dev *bool

	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string

	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string
}

// DBMEndpoint - Database mirroring endpoint related properties.
type DBMEndpoint struct {
	// READ-ONLY; Name of the certificate.
	CertificateName *string

	// READ-ONLY; The type of connection authentication required for connections to this endpoint
	ConnectionAuth *ConnectionAuth

	// READ-ONLY; Encryption Algorithm
	EncryptionAlgorithm *EncryptionAlgorithm

	// READ-ONLY; Name of the database mirroring endpoint.
	EndpointName *string

	// READ-ONLY; Listener IP address.
	IPAddress *string

	// READ-ONLY; Is the port number dynamically assigned.
	IsDynamicPort *bool

	// READ-ONLY; Is Encryption enabled
	IsEncryptionEnabled *bool

	// READ-ONLY; The port number that the endpoint is listening on.
	Port *int32

	// READ-ONLY; Mirroring Role
	Role *Role
}

// DataBaseMigration - Migration related configuration.
type DataBaseMigration struct {
	// Migration assessments related configuration.
	Assessment *DataBaseMigrationAssessment
}

// DataBaseMigrationAssessment - The migration assessment related configuration.
type DataBaseMigrationAssessment struct {
	// READ-ONLY; The time when Migration Assessment Report upload was last performed.
	AssessmentUploadTime *time.Time

	// READ-ONLY; Issues and warnings impacting the migration of Database to particular Azure Migration Target.
	DatabaseAssessments []*DatabaseAssessmentsItem

	// READ-ONLY; The target readiness for migration for this database.
	TargetReadiness *TargetReadiness
}

// DataControllerProperties - The data controller properties.
type DataControllerProperties struct {
	// Deprecated. Azure Arc Data Services data controller no longer expose any endpoint. All traffic are exposed through Kubernetes
	// native API.
	BasicLoginInformation *BasicLoginInformation

	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterID *string

	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionID *string

	// The infrastructure the data controller is running on.
	Infrastructure *Infrastructure

	// The raw kubernetes information
	K8SRaw any

	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *time.Time

	// Log analytics workspace id and primary key
	LogAnalyticsWorkspaceConfig *LogAnalyticsWorkspaceConfig

	// Login credential for logs dashboard on the Kubernetes cluster.
	LogsDashboardCredential *BasicLoginInformation

	// Login credential for metrics dashboard on the Kubernetes cluster.
	MetricsDashboardCredential *BasicLoginInformation

	// Properties from the Kubernetes data controller
	OnPremiseProperty *OnPremiseProperty

	// Deprecated. Service principal is deprecated in favor of Arc Kubernetes service extension managed identity.
	UploadServicePrincipal *UploadServicePrincipal

	// Properties on upload watermark. Mostly timestamp for each upload data type
	UploadWatermark *UploadWatermark

	// READ-ONLY; The provisioning state of the Arc Data Controller resource.
	ProvisioningState *string
}

// DataControllerResource - Data controller resource
type DataControllerResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The data controller's properties
	Properties *DataControllerProperties

	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DataControllerUpdate - Used for updating a data controller resource.
type DataControllerUpdate struct {
	// The data controller's properties
	Properties *DataControllerProperties

	// Resource tags
	Tags map[string]*string
}

type DatabaseAssessmentsItem struct {
	AppliesToMigrationTargetPlatform *string
	FeatureID                        *string
	IssueCategory                    *string
	MoreInformation                  *string
}

// Databases - List of database names.
type Databases struct {
	// List of database names.
	Values []*string
}

// DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration - The availability group certificate
// configuration.
type DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration struct {
	// Name of the certificate.
	CertificateName *string
}

// DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration - The availability group configuration specification
// for a distributed availability group.
type DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration struct {
	// The azure resource identifier for the availability group.
	AvailabilityGroup *string

	// The availability mode of the availability group.
	AvailabilityMode *ArcSQLServerAvailabilityMode

	// The certificate configuration for the availability group.
	CertificateConfiguration *DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration

	// The failover mode of the availability group.
	FailoverMode *ArcSQLServerFailoverMode

	// The listener URL of the availability group.
	ListenerURL *string

	// The seeding mode of the availability group.
	SeedingMode *SeedingMode
}

// DistributedAvailabilityGroupCreateUpdateConfiguration - Options used in creating a distributed availability group.
type DistributedAvailabilityGroupCreateUpdateConfiguration struct {
	// Name of the availability group.
	AvailabilityGroupName *string

	// The initial primary availability group for the distributed availability group.
	PrimaryAvailabilityGroup *DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration

	// The initial secondary availability group for the distributed availability group.
	SecondaryAvailabilityGroup *DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail
}

// ExtendedLocation - The complex type of the extended location.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string

	// The type of the extended location.
	Type *ExtendedLocationTypes
}

// FailoverCluster - Failover Cluster Instance properties.
type FailoverCluster struct {
	// READ-ONLY; The host names which are part of the SQL FCI resource group.
	HostNames []*string

	// READ-ONLY; The GUID of the SQL Server's underlying Failover Cluster.
	ID *string

	// READ-ONLY; The network name to connect to the SQL FCI.
	NetworkName *string

	// READ-ONLY; The ARM IDs of the Arc SQL Server resources, belonging to the current server's Failover cluster.
	SQLInstanceIDs []*string
}

// FailoverGroupListResult - A list of failover groups.
type FailoverGroupListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of failover group results.
	Value []*FailoverGroupResource
}

// FailoverGroupProperties - The properties of a failover group resource.
type FailoverGroupProperties struct {
	// REQUIRED; The resource ID of the partner SQL managed instance.
	PartnerManagedInstanceID *string

	// REQUIRED; The specifications of the failover group resource.
	Spec *FailoverGroupSpec

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The status of the failover group custom resource.
	Status any

	// READ-ONLY; The provisioning state of the failover group resource.
	ProvisioningState *ProvisioningState
}

// FailoverGroupResource - A failover group resource.
type FailoverGroupResource struct {
	// REQUIRED; null
	Properties *FailoverGroupProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// FailoverGroupSpec - The specifications of the failover group resource.
type FailoverGroupSpec struct {
	// REQUIRED; The role of the SQL managed instance in this failover group.
	Role *InstanceFailoverGroupRole

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The name of the partner SQL managed instance.
	PartnerMI *string

	// The mirroring endpoint public certificate for the partner SQL managed instance. Only PEM format is supported.
	PartnerMirroringCert *string

	// The mirroring endpoint URL of the partner SQL managed instance.
	PartnerMirroringURL *string

	// The partner sync mode of the SQL managed instance.
	PartnerSyncMode *FailoverGroupPartnerSyncMode

	// The shared name of the failover group for this SQL managed instance. Both SQL managed instance and its partner have to
	// use the same shared name.
	SharedName *string

	// The name of the SQL managed instance with this failover group role.
	SourceMI *string
}

// K8SActiveDirectory - The kubernetes active directory information.
type K8SActiveDirectory struct {
	// Account name for AAD
	AccountName *string
	Connector   *K8SActiveDirectoryConnector

	// An array of encryption types
	EncryptionTypes []*string

	// Keytab secret used to authenticate with Active Directory.
	KeytabSecret *string
}

type K8SActiveDirectoryConnector struct {
	// Name of the connector
	Name *string

	// Name space of the connector
	Namespace *string
}

// K8SNetworkSettings - The kubernetes network settings information.
type K8SNetworkSettings struct {
	// If 1, then SQL Server forces all connections to be encrypted. By default, this option is 0
	Forceencryption *int32

	// Specifies which ciphers are allowed by SQL Server for TLS
	Tlsciphers *string

	// A comma-separated list of which TLS protocols are allowed by SQL Server
	Tlsprotocols *string
}

// K8SResourceRequirements - The kubernetes resource limits and requests used to restrict or reserve resource usage.
type K8SResourceRequirements struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit.
	// Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi.
	// If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Limits map[string]*string

	// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit.
	// Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is
	// '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Requests map[string]*string
}

// K8SScheduling - The kubernetes scheduling information.
type K8SScheduling struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the
	// database service
	Default *K8SSchedulingOptions
}

// K8SSchedulingOptions - The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate
// nodes to host the database service
type K8SSchedulingOptions struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The kubernetes resource limits and requests used to restrict or reserve resource usage.
	Resources *K8SResourceRequirements
}

// K8SSecurity - The kubernetes security information.
type K8SSecurity struct {
	// The kubernetes active directory information.
	ActiveDirectory *K8SActiveDirectory

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Admin login secret key
	AdminLoginSecret *string

	// Service certificate secret used
	ServiceCertificateSecret *string

	// Transparent data encryption information.
	TransparentDataEncryption *K8StransparentDataEncryption
}

// K8SSettings - The kubernetes settings information.
type K8SSettings struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The kubernetes network settings information.
	Network *K8SNetworkSettings
}

// K8StransparentDataEncryption - Transparent data encryption information.
type K8StransparentDataEncryption struct {
	// Transparent data encryption mode. Can be Service Managed, Customer managed or disabled
	Mode *string

	// Protector secret for customer managed Transparent data encryption mode
	ProtectorSecret *string
}

// KeytabInformation - Keytab used for authenticate with Active Directory.
type KeytabInformation struct {
	// A base64-encoded keytab.
	Keytab *string
}

// LogAnalyticsWorkspaceConfig - Log analytics workspace id and primary key
type LogAnalyticsWorkspaceConfig struct {
	// Primary key of the workspace
	PrimaryKey *string

	// Azure Log Analytics workspace ID
	WorkspaceID *string
}

// Migration related configuration.
type Migration struct {
	// Migration assessments related configuration.
	Assessment *MigrationAssessment
}

// MigrationAssessment - The migration assessment related configuration.
type MigrationAssessment struct {
	// Indicates if migration assessment is enabled for this SQL Server instance.
	Enabled *bool

	// READ-ONLY; The time when Migration Assessment Report upload was last performed.
	AssessmentUploadTime *time.Time

	// READ-ONLY; SKU Recommendation results for Azure migration targets for SQL Server.
	SKURecommendationResults *SKURecommendationResults

	// READ-ONLY; Issues and warnings impacting the migration of SQL Server instance to particular Azure Migration Target.
	ServerAssessments []*ServerAssessmentsItem
}

// Monitoring - The monitoring configuration.
type Monitoring struct {
	// Indicates if monitoring is enabled for this SQL Server instance.
	Enabled *bool
}

// OnPremiseProperty - Properties from the Kubernetes data controller
type OnPremiseProperty struct {
	// REQUIRED; A globally unique ID identifying the associated Kubernetes cluster
	ID *string

	// REQUIRED; Certificate that contains the Kubernetes cluster public key used to verify signing
	PublicSigningKey *string

	// Unique thumbprint returned to customer to verify the certificate being uploaded
	SigningCertificateThumbprint *string
}

// Operation - Azure Data Services on Azure Arc operation definition.
type Operation struct {
	// REQUIRED; The localized display information for this particular operation / action.
	Display *OperationDisplay

	// REQUIRED; Indicates whether the operation is a data action
	IsDataAction *bool

	// REQUIRED; The name of the operation being performed on this particular object.
	Name *string

	// READ-ONLY; The intended executor of the operation.
	Origin *OperationOrigin

	// READ-ONLY; Additional descriptions for the operation.
	Properties map[string]any
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// REQUIRED; The localized friendly description for the operation.
	Description *string

	// REQUIRED; The localized friendly name for the operation.
	Operation *string

	// REQUIRED; The localized friendly form of the resource provider name.
	Provider *string

	// REQUIRED; The localized friendly form of the resource type related to this action/operation.
	Resource *string
}

// OperationListResult - Result of the request to list Azure Data Services on Azure Arc operations.
type OperationListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of results.
	Value []*Operation
}

// PageOfDataControllerResource - A list of data controllers.
type PageOfDataControllerResource struct {
	// Link to retrieve next page of results.
	NextLink *string

	// Array of results.
	Value []*DataControllerResource
}

// PostgresInstance - A Postgres Instance.
type PostgresInstance struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; null
	Properties *PostgresInstanceProperties

	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation

	// Resource sku.
	SKU *PostgresInstanceSKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PostgresInstanceListResult - A list of PostgresInstance.
type PostgresInstanceListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of results.
	Value []*PostgresInstance
}

// PostgresInstanceProperties - Postgres Instance properties.
type PostgresInstanceProperties struct {
	// The instance admin
	Admin *string

	// Username and password for basic authentication.
	BasicLoginInformation *BasicLoginInformation

	// The data controller id
	DataControllerID *string

	// The raw kubernetes information
	K8SRaw any

	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *time.Time

	// READ-ONLY; The provisioning state of the Azure Arc-enabled PostgreSQL instance.
	ProvisioningState *string
}

// PostgresInstanceSKU - The resource model definition representing SKU for Azure Database for PostgresSQL - Azure Arc
type PostgresInstanceSKU struct {
	// REQUIRED; The name of the SKU. It is typically a letter+number code
	Name *string

	// CONSTANT; This field is required to be implemented by the Resource Provider if the service has more than one tier.
	// Field has constant value "Hyperscale", any specified value is ignored.
	Tier *string

	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
	// resource this may be omitted.
	Capacity *int32

	// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
	Dev *bool

	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string

	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string
}

// PostgresInstanceUpdate - An update to a Postgres Instance.
type PostgresInstanceUpdate struct {
	// Postgres Instance properties.
	Properties *PostgresInstanceProperties

	// Resource tags.
	Tags map[string]*string
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a
// location
type ProxyResource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ResourceAutoGenerated - Common fields that are returned in the response for all Azure Resource Manager resources
type ResourceAutoGenerated struct {
	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SKURecommendationResults - SKU Recommendation results for Azure migration targets for SQL Server.
type SKURecommendationResults struct {
	// SKU Recommendation results for Azure SQL Database.
	AzureSQLDatabase *SKURecommendationResultsAzureSQLDatabase

	// SKU Recommendation results for Azure SQL Managed Instance.
	AzureSQLManagedInstance *SKURecommendationResultsAzureSQLManagedInstance

	// SKU Recommendation results for Azure SQL Virtual Machine.
	AzureSQLVirtualMachine *SKURecommendationResultsAzureSQLVirtualMachine
}

// SKURecommendationResultsAzureSQLDatabase - SKU Recommendation results for Azure SQL Database.
type SKURecommendationResultsAzureSQLDatabase struct {
	// The Monthly cost of the particular SKU.
	MonthlyCost *SKURecommendationResultsMonthlyCost

	// Number of blocker issues to fix before migrating to the target platform.
	NumberOfServerBlockerIssues *int32

	// The target recommendation Status for this database.
	RecommendationStatus *RecommendationStatus
	TargetSKU            *SKURecommendationResultsAzureSQLDatabaseTargetSKU
}

type SKURecommendationResultsAzureSQLDatabaseTargetSKU struct {
	Category *SKURecommendationResultsAzureSQLDatabaseTargetSKUCategory
}

type SKURecommendationResultsAzureSQLDatabaseTargetSKUCategory struct {
	// The compute tier of the target SKU.
	ComputeTier *string

	// The hardware type of the target SKU.
	HardwareType *string

	// The SQL purchasing model of the target SKU.
	SQLPurchasingModel *string

	// The SQL service tier of the target SKU.
	SQLServiceTier *string

	// Indicates if zone redundancy is available for the target SKU.
	ZoneRedundancyAvailable *bool
}

// SKURecommendationResultsAzureSQLManagedInstance - SKU Recommendation results for Azure SQL Managed Instance.
type SKURecommendationResultsAzureSQLManagedInstance struct {
	// The Monthly cost of the particular SKU.
	MonthlyCost *SKURecommendationResultsMonthlyCost

	// Number of blocker issues to fix before migrating to the target platform.
	NumberOfServerBlockerIssues *int32

	// The target recommendation Status for this database.
	RecommendationStatus *RecommendationStatus
	TargetSKU            *SKURecommendationResultsAzureSQLManagedInstanceTargetSKU
}

type SKURecommendationResultsAzureSQLManagedInstanceTargetSKU struct {
	Category *SKURecommendationResultsAzureSQLManagedInstanceTargetSKUCategory
}

type SKURecommendationResultsAzureSQLManagedInstanceTargetSKUCategory struct {
	// The compute tier of the target SKU.
	ComputeTier *string

	// The hardware type of the target SKU.
	HardwareType *string

	// The SQL purchasing model of the target SKU.
	SQLPurchasingModel *string

	// The SQL service tier of the target SKU.
	SQLServiceTier *string

	// Indicates if zone redundancy is available for the target SKU.
	ZoneRedundancyAvailable *bool
}

// SKURecommendationResultsAzureSQLVirtualMachine - SKU Recommendation results for Azure SQL Virtual Machine.
type SKURecommendationResultsAzureSQLVirtualMachine struct {
	// The Monthly cost of the particular SKU.
	MonthlyCost *SKURecommendationResultsMonthlyCost

	// Number of blocker issues to fix before migrating to the target platform.
	NumberOfServerBlockerIssues *int32

	// The target recommendation Status for this database.
	RecommendationStatus *RecommendationStatus
	TargetSKU            *SKURecommendationResultsAzureSQLVirtualMachineTargetSKU
}

type SKURecommendationResultsAzureSQLVirtualMachineTargetSKU struct {
	Category *SKURecommendationResultsAzureSQLVirtualMachineTargetSKUCategory
}

type SKURecommendationResultsAzureSQLVirtualMachineTargetSKUCategory struct {
	// Available VM SKUs for the Azure SQL Virtual Machine.
	AvailableVMSKUs []*string

	// The virtual machine family of the target SKU.
	VirtualMachineFamily *string
}

// SKURecommendationResultsMonthlyCost - The Monthly cost of the particular SKU.
type SKURecommendationResultsMonthlyCost struct {
	// Represents the Cost of Compute.
	ComputeCost *float32

	// Represents the Cost of Storage.
	StorageCost *float32

	// Represents the Total Cost.
	TotalCost *float32
}

// SKURecommendationSummary - The SKU recommendation summary.
type SKURecommendationSummary struct {
	// Number of blocker issues to fix before migrating this database to the target platform.
	NumOfBlockerIssues *int32

	// The target recommendation Status for this database.
	RecommendationStatus *RecommendationStatus
}

// SQLAvailabilityGroupDatabaseReplicaResourceProperties - The properties of Arc Sql availability group database replica resource
type SQLAvailabilityGroupDatabaseReplicaResourceProperties struct {
	// the database name.
	DatabaseName *string

	// READ-ONLY; Description of the database state of the availability replica.
	DatabaseStateDescription *string

	// READ-ONLY; Whether this replica is transaction committer.
	IsCommitParticipant *bool

	// READ-ONLY; Whether the availability database is local.
	IsLocal *bool

	// READ-ONLY; Returns 1 if the replica is primary, or 0 if it is a secondary replica.
	IsPrimaryReplica *bool

	// READ-ONLY; Whether this data movement is suspended.
	IsSuspended *bool

	// READ-ONLY; the database replica name.
	ReplicaName *string

	// READ-ONLY; Description of the database suspended state reason.
	SuspendReasonDescription *string

	// READ-ONLY; Description of the health of database.
	SynchronizationHealthDescription *string

	// READ-ONLY; Description of the data-movement state.
	SynchronizationStateDescription *string
}

// SQLAvailabilityGroupDhcpListenerProperties - The properties of a DHCP Arc Sql availability group listener
type SQLAvailabilityGroupDhcpListenerProperties struct {
	// the DNS name for the listener.
	DNSName *string

	// The netmask for the listener.
	Mask *string

	// Network port for the listener. Default is 1433.
	Port *int32

	// The IPV4 subnet for the listener.
	Subnet *string
}

type SQLAvailabilityGroupIPV4AddressesAndMasksPropertiesItem struct {
	// IPV4 address
	IPAddress *string

	// IPV4 netmask
	Mask *string
}

// SQLAvailabilityGroupReplicaResourceProperties - The properties of Arc Sql availability group replica resource
type SQLAvailabilityGroupReplicaResourceProperties struct {
	// null
	Configure *AvailabilityGroupConfigure

	// the replica name.
	ReplicaName *string

	// null
	State *AvailabilityGroupState

	// READ-ONLY; ID GUID of the availability group.
	ReplicaID *string
}

// SQLAvailabilityGroupStaticIPListenerProperties - The properties of a static IP Arc Sql availability group listener
type SQLAvailabilityGroupStaticIPListenerProperties struct {
	// the DNS name for the listener.
	DNSName *string

	// IP V4 Addresses and masks for the listener.
	IPV4AddressesAndMasks []*SQLAvailabilityGroupIPV4AddressesAndMasksPropertiesItem

	// IP V6 Addresses for the listener
	IPV6Addresses []*string

	// Network port for the listener. Default is 1433.
	Port *int32
}

// SQLManagedInstance - A SqlManagedInstance.
type SQLManagedInstance struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; null
	Properties *SQLManagedInstanceProperties

	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation

	// Resource sku.
	SKU *SQLManagedInstanceSKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SQLManagedInstanceK8SRaw - The raw kubernetes information.
type SQLManagedInstanceK8SRaw struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The kubernetes spec information.
	Spec *SQLManagedInstanceK8SSpec
}

// SQLManagedInstanceK8SSpec - The kubernetes spec information.
type SQLManagedInstanceK8SSpec struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for
	// high availability purposes. If sku.tier is BusinessCritical, allowed values are
	// '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
	Replicas *int32

	// The kubernetes scheduling information.
	Scheduling *K8SScheduling

	// The kubernetes security information.
	Security *K8SSecurity

	// The kubernetes settings information.
	Settings *K8SSettings
}

// SQLManagedInstanceListResult - A list of SqlManagedInstance.
type SQLManagedInstanceListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of results.
	Value []*SQLManagedInstance
}

// SQLManagedInstanceProperties - Properties of sqlManagedInstance.
type SQLManagedInstanceProperties struct {
	// Active Directory information related to this SQL Managed Instance.
	ActiveDirectoryInformation *ActiveDirectoryInformation

	// The instance admin user
	Admin *string

	// Username and password for basic authentication.
	BasicLoginInformation *BasicLoginInformation

	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterID *string

	// null
	DataControllerID *string

	// The instance end time
	EndTime *string

	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionID *string

	// The raw kubernetes information
	K8SRaw *SQLManagedInstanceK8SRaw

	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *time.Time

	// The license type to apply for this managed instance.
	LicenseType *ArcSQLManagedInstanceLicenseType

	// The instance start time
	StartTime *string

	// READ-ONLY; The provisioning state of the Arc-enabled SQL Managed Instance resource.
	ProvisioningState *string
}

// SQLManagedInstanceSKU - The resource model definition representing SKU for Azure Managed Instance - Azure Arc
type SQLManagedInstanceSKU struct {
	// CONSTANT; The name of the SKU.
	// Field has constant value "vCore", any specified value is ignored.
	Name *string

	// The SKU capacity
	Capacity *int32

	// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
	Dev *bool

	// The SKU family
	Family *string

	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string

	// The pricing tier for the instance.
	Tier *SQLManagedInstanceSKUTier
}

// SQLManagedInstanceUpdate - An update to a SQL Managed Instance.
type SQLManagedInstanceUpdate struct {
	// Resource tags.
	Tags map[string]*string
}

// SQLServerAvailabilityGroupResource - Arc Sql Server Availability Group
type SQLServerAvailabilityGroupResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Properties of Arc Sql Server availability group
	Properties *SQLServerAvailabilityGroupResourceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SQLServerAvailabilityGroupResourceProperties - The properties of Arc Sql Server availability group resource
type SQLServerAvailabilityGroupResourceProperties struct {
	// A list of Availability Group Database Replicas.
	Databases *SQLServerAvailabilityGroupResourcePropertiesDatabases

	// Availability Group Info
	Info *AvailabilityGroupInfo

	// A list of Availability Group Replicas.
	Replicas *SQLServerAvailabilityGroupResourcePropertiesReplicas

	// READ-ONLY; ID GUID of the availability group.
	AvailabilityGroupID *string

	// READ-ONLY; Timestamp for when the data was collected from the client machine.
	CollectionTimestamp *time.Time

	// READ-ONLY; the SQL Server Instance name.
	InstanceName *string

	// READ-ONLY; The provisioning state of the Arc-enabled SQL Server availability group resource.
	ProvisioningState *string

	// READ-ONLY; the SQL server name.
	ServerName *string
}

// SQLServerAvailabilityGroupResourcePropertiesDatabases - A list of Availability Group Database Replicas.
type SQLServerAvailabilityGroupResourcePropertiesDatabases struct {
	// Array of Availability Group Database Replicas.
	Value []*SQLAvailabilityGroupDatabaseReplicaResourceProperties

	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string
}

// SQLServerAvailabilityGroupResourcePropertiesReplicas - A list of Availability Group Replicas.
type SQLServerAvailabilityGroupResourcePropertiesReplicas struct {
	// Array of Availability Group Replicas.
	Value []*SQLAvailabilityGroupReplicaResourceProperties

	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string
}

// SQLServerAvailabilityGroupUpdate - An update to availability group resource.
type SQLServerAvailabilityGroupUpdate struct {
	// The Server Availability Group's properties
	Properties *SQLServerAvailabilityGroupResourceProperties

	// Resource tags.
	Tags map[string]*string
}

// SQLServerDatabaseResource - Arc Sql Server database
type SQLServerDatabaseResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Properties of Arc Sql Server database
	Properties *SQLServerDatabaseResourceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SQLServerDatabaseResourceProperties - The properties of Arc Sql Server database resource
type SQLServerDatabaseResourceProperties struct {
	BackupInformation *SQLServerDatabaseResourcePropertiesBackupInformation

	// The backup profile for the SQL server.
	BackupPolicy *BackupPolicy

	// Collation of the database.
	CollationName *string

	// Compatibility level of the database
	CompatibilityLevel *int32

	// Database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database.
	// sourceDatabaseId and restorePointInTime must be specified.
	CreateMode *DatabaseCreateMode

	// Creation date of the database.
	DatabaseCreationDate *time.Time

	// List of features that are enabled for the database
	DatabaseOptions *SQLServerDatabaseResourcePropertiesDatabaseOptions

	// Whether the database is read only or not.
	IsReadOnly *bool

	// Migration related configuration.
	Migration *DataBaseMigration

	// Status of the database.
	RecoveryMode *RecoveryMode

	// Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601 format)
	// of the source database that will be restored to create the new database.
	RestorePointInTime *time.Time

	// Size of the database.
	SizeMB *float32

	// The name of the source database associated with create operation of this database.
	SourceDatabaseID *string

	// Space left of the database.
	SpaceAvailableMB *float32

	// State of the database.
	State *DatabaseState

	// READ-ONLY; This records the earliest start date and time that restore is available for this database (ISO8601 format).
	EarliestRestoreDate *time.Time

	// READ-ONLY; The time when last successful database upload was performed.
	LastDatabaseUploadTime *time.Time

	// READ-ONLY; The provisioning state of the Arc-enabled SQL Server database resource.
	ProvisioningState *string
}

type SQLServerDatabaseResourcePropertiesBackupInformation struct {
	// Date time of last full backup.
	LastFullBackup *time.Time

	// Date time of last log backup.
	LastLogBackup *time.Time
}

// SQLServerDatabaseResourcePropertiesDatabaseOptions - List of features that are enabled for the database
type SQLServerDatabaseResourcePropertiesDatabaseOptions struct {
	IsAutoCloseOn               *bool
	IsAutoCreateStatsOn         *bool
	IsAutoShrinkOn              *bool
	IsAutoUpdateStatsOn         *bool
	IsEncrypted                 *bool
	IsMemoryOptimizationEnabled *bool
	IsRemoteDataArchiveEnabled  *bool
	IsTrustworthyOn             *bool
}

// SQLServerDatabaseUpdate - An update to database resource.
type SQLServerDatabaseUpdate struct {
	// The data controller's properties
	Properties *SQLServerDatabaseResourceProperties

	// Resource tags.
	Tags map[string]*string
}

// SQLServerEsuLicense - Describe SQL Server ESU license resource.
type SQLServerEsuLicense struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; SQL Server ESU license properties
	Properties *SQLServerEsuLicenseProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SQLServerEsuLicenseListResult - A list of SQL Server ESU licenses.
type SQLServerEsuLicenseListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of results.
	Value []*SQLServerEsuLicense
}

// SQLServerEsuLicenseProperties - Properties of SQL Server ESU license.
type SQLServerEsuLicenseProperties struct {
	// REQUIRED; The activation state of the license.
	ActivationState *State

	// REQUIRED; SQL Server ESU license type.
	BillingPlan *BillingPlan

	// REQUIRED; The number of total cores of the license covers.
	PhysicalCores *int32

	// REQUIRED; The Azure scope to which the license will apply.
	ScopeType *ScopeType

	// REQUIRED; The SQL Server version the license covers.
	Version *Version

	// READ-ONLY; The timestamp of the activation of the SqlServerEsuLicense in ISO 8601 date-time format.
	ActivatedAt *time.Time

	// READ-ONLY; The tenantId the SQL Server ESU license resource subscription resides in.
	TenantID *string

	// READ-ONLY; The timestamp of the termination of the SqlServerEsuLicense in ISO 8601 date-time format.
	TerminatedAt *time.Time

	// READ-ONLY; The unique ID of this license. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
	UniqueID *string
}

// SQLServerEsuLicenseUpdate - An update to a SQL Server ESU license resource.
type SQLServerEsuLicenseUpdate struct {
	// null
	Properties *SQLServerEsuLicenseUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// SQLServerEsuLicenseUpdateProperties - Properties of update SqlServerEsuLicense.
type SQLServerEsuLicenseUpdateProperties struct {
	// The activation state of the license.
	ActivationState *State

	// SQL Server ESU license type.
	BillingPlan *BillingPlan

	// The number of total cores of the license covers.
	PhysicalCores *int32

	// The Azure scope to which the license will apply.
	ScopeType *ScopeType

	// The SQL Server version the license covers.
	Version *Version

	// READ-ONLY; The timestamp of the activation of the SqlServerEsuLicense in ISO 8601 date-time format.
	ActivatedAt *time.Time

	// READ-ONLY; The tenantId the SQL Server ESU license resource subscription resides in.
	TenantID *string

	// READ-ONLY; The timestamp of the termination of the SqlServerEsuLicense in ISO 8601 date-time format.
	TerminatedAt *time.Time

	// READ-ONLY; The unique ID of this license. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
	UniqueID *string
}

// SQLServerInstance - A SqlServerInstance.
type SQLServerInstance struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// null
	Properties *SQLServerInstanceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SQLServerInstanceJobStatus - The status of the job running on the SQL Server instance.
type SQLServerInstanceJobStatus struct {
	// The background job details.
	BackgroundJob *BackgroundJob

	// The unique identifier of the job.
	ID *string

	// The name of the SQL Server instance.
	InstanceName *string

	// The exception message if the job failed.
	JobException *string

	// The status of the job.
	JobStatus *JobStatus

	// The list of sequencer actions.
	SequencerActions []*SequencerAction
}

// SQLServerInstanceJobsStatusRequest - The request for the status of the jobs running on the SQL Server instance.
type SQLServerInstanceJobsStatusRequest struct {
	// The name of the feature to retrieve the job status for.
	FeatureName *string

	// The type of the job to retrieve the status for.
	JobType *string
}

// SQLServerInstanceJobsStatusResponse - The response for the status of the jobs running on the SQL Server instance.
type SQLServerInstanceJobsStatusResponse struct {
	// The list of jobs status running on the SQL Server instance.
	JobsStatus []*SQLServerInstanceJobStatus
}

// SQLServerInstanceListResult - A list of SqlServerInstance.
type SQLServerInstanceListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of results.
	Value []*SQLServerInstance
}

// SQLServerInstanceProperties - Properties of SqlServerInstance.
type SQLServerInstanceProperties struct {
	// The backup profile for the SQL server.
	BackupPolicy *BackupPolicy

	// Client connection related configuration.
	ClientConnection *ClientConnection

	// The number of total cores of the Operating System Environment (OSE) hosting the SQL Server instance.
	Cores *string

	// Database mirroring endpoint related properties.
	DatabaseMirroringEndpoint *DBMEndpoint

	// SQL Server edition.
	Edition *EditionType

	// Failover Cluster Instance properties.
	FailoverCluster *FailoverCluster

	// Type of host for Azure Arc SQL Server
	HostType *HostType

	// SQL Server instance name.
	InstanceName *string

	// Migration related configuration.
	Migration *Migration

	// The monitoring configuration.
	Monitoring *Monitoring

	// Indicates if the resource represents a SQL Server engine or a SQL Server component service installed on the host.
	ServiceType *ServiceType

	// Upgrade Action for this resource is locked until it expires. The Expiration time indicated by this value. It is not locked
	// when it is empty.
	UpgradeLockedUntil *time.Time

	// SQL Server version.
	Version *SQLVersion

	// READ-ONLY; The role of the SQL Server, based on availability.
	AlwaysOnRole *AlwaysOnRole

	// READ-ONLY; Status of Azure Defender.
	AzureDefenderStatus *DefenderStatus

	// READ-ONLY; Timestamp of last Azure Defender status update.
	AzureDefenderStatusLastUpdated *time.Time

	// READ-ONLY; SQL Server collation.
	Collation *string

	// READ-ONLY; ARM Resource id of the container resource (Azure Arc for Servers).
	ContainerResourceID *string

	// READ-ONLY; The time when the resource was created.
	CreateTime *string

	// READ-ONLY; SQL Server current version.
	CurrentVersion *string

	// READ-ONLY; Indicates whether database master key exists in SQL Server.
	DbMasterKeyExists *bool

	// READ-ONLY; Indicates whether always On availability groups is enabled in SQL Server.
	IsHadrEnabled *bool

	// READ-ONLY; The time when last successful inventory upload was performed.
	LastInventoryUploadTime *time.Time

	// READ-ONLY; The time when last successful usage upload was performed.
	LastUsageUploadTime *time.Time

	// READ-ONLY; SQL Server license type.
	LicenseType *ArcSQLServerLicenseType

	// READ-ONLY; SQL Server update level.
	PatchLevel *string

	// READ-ONLY; SQL Server product ID.
	ProductID *string

	// READ-ONLY; The provisioning state of the Arc-enabled SQL Server resource.
	ProvisioningState *string

	// READ-ONLY; The cloud connectivity status.
	Status *ConnectionStatus

	// READ-ONLY; Dynamic TCP ports used by SQL Server.
	TCPDynamicPorts *string

	// READ-ONLY; Static TCP ports used by SQL Server.
	TCPStaticPorts *string

	// READ-ONLY; An array of integers, where each value represents the enabled trace flags in SQL Server.
	TraceFlags []*int32

	// READ-ONLY; The number of logical processors used by the SQL Server instance.
	VCore *string
}

// SQLServerInstanceRunMigrationAssessmentResponse - The response for running migration assessment on the SQL Server instance.
type SQLServerInstanceRunMigrationAssessmentResponse struct {
	// The background job details.
	BackgroundJob *BackgroundJob

	// The unique identifier of the job.
	ID *string

	// The name of the SQL Server instance.
	InstanceName *string

	// The exception message if the job failed.
	JobException *string

	// The status of the job.
	JobStatus *JobStatus

	// The list of sequencer actions.
	SequencerActions []*SequencerAction
}

// SQLServerInstanceTelemetryColumn - The telemetry column for the SQL Server instance.
type SQLServerInstanceTelemetryColumn struct {
	// The name of the telemetry column.
	Name *string

	// The type of the telemetry column.
	Type *SQLServerInstanceTelemetryColumnType
}

// SQLServerInstanceTelemetryRequest - The Arc SQL Server instance telemetry retrieval request.
type SQLServerInstanceTelemetryRequest struct {
	// REQUIRED; The name of the telemetry dataset to retrieve.
	DatasetName *string

	// The aggregation type to use for the numerical columns in the dataset.
	AggregationType *AggregationType

	// The list of database names to return telemetry for. If not specified, telemetry for all databases will be aggregated and
	// returned.
	DatabaseNames []*string

	// The end time for the time range to fetch telemetry for. If not specified, the current time is used.
	EndTime *time.Time

	// The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples: PT15M, PT1H, P1D
	Interval *string

	// The start time for the time range to fetch telemetry for. If not specified, the current time minus 1 hour is used.
	StartTime *time.Time
}

// SQLServerInstanceTelemetryResponse - A section of the telemetry response for the SQL Server instance.
type SQLServerInstanceTelemetryResponse struct {
	// REQUIRED; The columns of the result telemetry table for the SQL Server instance.
	Columns []*SQLServerInstanceTelemetryColumn

	// REQUIRED; A list of rows from the result telemetry table for the SQL Server instance.
	Rows [][]*string

	// READ-ONLY; The link to the next section of rows of the telemetry response for the SQL Server instance. Null if no more
	// sections are available.
	NextLink *string
}

// SQLServerInstanceUpdate - An update to a SQL Server Instance.
type SQLServerInstanceUpdate struct {
	// null
	Properties *SQLServerInstanceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// SQLServerInstanceUpdateProperties - Properties of update SqlServerInstance.
type SQLServerInstanceUpdateProperties struct {
	// The backup profile for the SQL server.
	BackupPolicy *BackupPolicy

	// Client connection related configuration.
	ClientConnection *ClientConnection

	// The number of total cores of the Operating System Environment (OSE) hosting the SQL Server instance.
	Cores *string

	// SQL Server edition.
	Edition *EditionType

	// Failover Cluster Instance properties.
	FailoverCluster *FailoverCluster

	// Type of host for Azure Arc SQL Server
	HostType *HostType

	// SQL Server instance name.
	InstanceName *string

	// Migration related configuration.
	Migration *Migration

	// The monitoring configuration.
	Monitoring *Monitoring

	// Indicates if the resource represents a SQL Server engine or a SQL Server component service installed on the host.
	ServiceType *ServiceType

	// Upgrade Action for this resource is locked until it expires. The Expiration time indicated by this value. It is not locked
	// when it is empty.
	UpgradeLockedUntil *time.Time

	// SQL Server version.
	Version *SQLVersion

	// READ-ONLY; The role of the SQL Server, based on availability.
	AlwaysOnRole *AlwaysOnRole

	// READ-ONLY; Status of Azure Defender.
	AzureDefenderStatus *DefenderStatus

	// READ-ONLY; Timestamp of last Azure Defender status update.
	AzureDefenderStatusLastUpdated *time.Time

	// READ-ONLY; SQL Server collation.
	Collation *string

	// READ-ONLY; ARM Resource id of the container resource (Azure Arc for Servers).
	ContainerResourceID *string

	// READ-ONLY; The time when the resource was created.
	CreateTime *string

	// READ-ONLY; SQL Server current version.
	CurrentVersion *string

	// READ-ONLY; Indicates whether database master key exists in SQL Server.
	DbMasterKeyExists *bool

	// READ-ONLY; Indicates whether always On availability groups is enabled in SQL Server.
	IsHadrEnabled *bool

	// READ-ONLY; The time when last successful inventory upload was performed.
	LastInventoryUploadTime *time.Time

	// READ-ONLY; The time when last successful usage upload was performed.
	LastUsageUploadTime *time.Time

	// READ-ONLY; SQL Server license type.
	LicenseType *ArcSQLServerLicenseType

	// READ-ONLY; SQL Server update level.
	PatchLevel *string

	// READ-ONLY; SQL Server product ID.
	ProductID *string

	// READ-ONLY; The provisioning state of the Arc-enabled SQL Server resource.
	ProvisioningState *string

	// READ-ONLY; The cloud connectivity status.
	Status *ConnectionStatus

	// READ-ONLY; Dynamic TCP ports used by SQL Server.
	TCPDynamicPorts *string

	// READ-ONLY; Static TCP ports used by SQL Server.
	TCPStaticPorts *string

	// READ-ONLY; An array of integers, where each value represents the enabled trace flags in SQL Server.
	TraceFlags []*int32

	// READ-ONLY; The number of logical processors used by the SQL Server instance.
	VCore *string
}

// SQLServerLicense - Describe SQL Server license resource.
type SQLServerLicense struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; SQL Server license properties
	Properties *SQLServerLicenseProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SQLServerLicenseListResult - A list of SQL Server licenses.
type SQLServerLicenseListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string

	// READ-ONLY; Array of results.
	Value []*SQLServerLicense
}

// SQLServerLicenseProperties - Properties of SQL Server License.
type SQLServerLicenseProperties struct {
	// REQUIRED; The activation state of the license.
	ActivationState *ActivationState

	// REQUIRED; SQL Server license type.
	BillingPlan *BillingPlan

	// REQUIRED; This property represents the choice between SQL Server Core and ESU licenses.
	LicenseCategory *LicenseCategory

	// REQUIRED; The number of total cores of the license covers.
	PhysicalCores *int32

	// REQUIRED; The Azure scope to which the license will apply.
	ScopeType *ScopeType

	// READ-ONLY; The timestamp of the most recent activation of the SqlServerLicense.
	LastActivatedAt *time.Time

	// READ-ONLY; The timestamp of the most recent deactivation of the SqlServerLicense.
	LastDeactivatedAt *time.Time

	// READ-ONLY; The tenantId the SQL Server license resource subscription resides in.
	TenantID *string
}

// SQLServerLicenseUpdate - An update to a SQL Server license resource.
type SQLServerLicenseUpdate struct {
	// null
	Properties *SQLServerLicenseUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// SQLServerLicenseUpdateProperties - Properties of update SqlServerLicense.
type SQLServerLicenseUpdateProperties struct {
	// The activation state of the license.
	ActivationState *ActivationState

	// SQL Server license type.
	BillingPlan *BillingPlan

	// This property represents the choice between SQL Server Core and ESU licenses.
	LicenseCategory *LicenseCategory

	// The number of total cores of the license covers.
	PhysicalCores *int32

	// The Azure scope to which the license will apply.
	ScopeType *ScopeType

	// READ-ONLY; The timestamp of the most recent activation of the SqlServerLicense.
	LastActivatedAt *time.Time

	// READ-ONLY; The timestamp of the most recent deactivation of the SqlServerLicense.
	LastDeactivatedAt *time.Time

	// READ-ONLY; The tenantId the SQL Server license resource subscription resides in.
	TenantID *string
}

// SequencerAction - The sequencer action details.
type SequencerAction struct {
	// The unique identifier of the sequencer action.
	ActionID *string

	// The result of the sequencer action.
	Result *Result

	// The state of the sequencer action.
	State *SequencerState
}

type ServerAssessmentsItem struct {
	AppliesToMigrationTargetPlatform *string
	FeatureID                        *string
	ImpactedObjects                  []*ServerAssessmentsPropertiesItemsItem
	IssueCategory                    *string
	MoreInformation                  *string
}

type ServerAssessmentsPropertiesItemsItem struct {
	ImpactDetail *string
	Name         *string
	ObjectType   *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TargetReadiness - The target readiness for migration for this database.
type TargetReadiness struct {
	// The SKU recommendation summary.
	AzureSQLDatabase *SKURecommendationSummary

	// The SKU recommendation summary.
	AzureSQLManagedInstance *SKURecommendationSummary

	// The SKU recommendation summary.
	AzureSQLVirtualMachine *SKURecommendationSummary
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// TrackedResourceAutoGenerated - The resource model definition for an Azure Resource Manager tracked top level resource which
// has 'tags' and a 'location'
type TrackedResourceAutoGenerated struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// UploadServicePrincipal - Service principal for uploading billing, metrics and logs.
type UploadServicePrincipal struct {
	// Authority for the service principal. Example: https://login.microsoftonline.com/
	Authority *string

	// Client ID of the service principal for uploading data.
	ClientID *string

	// Secret of the service principal
	ClientSecret *string

	// Tenant ID of the service principal.
	TenantID *string
}

// UploadWatermark - Properties on upload watermark. Mostly timestamp for each upload data type
type UploadWatermark struct {
	// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
	Logs *time.Time

	// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
	Metrics *time.Time

	// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
	Usages *time.Time
}
