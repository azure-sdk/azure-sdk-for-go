//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armPremonition

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SampleOperationsClient contains the methods for the SampleOperations group.
// Don't use this type directly, use NewSampleOperationsClient() instead.
type SampleOperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSampleOperationsClient creates a new instance of SampleOperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSampleOperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SampleOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SampleOperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Create - Create a Sample
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - libraryName - Name of the library
//   - sampleName - Name of the sample
//   - resource - Resource create parameters.
//   - options - SampleOperationsClientCreateOptions contains the optional parameters for the SampleOperationsClient.Create method.
func (client *SampleOperationsClient) Create(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, resource Sample, options *SampleOperationsClientCreateOptions) (SampleOperationsClientCreateResponse, error) {
	var err error
	const operationName = "SampleOperationsClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, libraryName, sampleName, resource, options)
	if err != nil {
		return SampleOperationsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SampleOperationsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SampleOperationsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *SampleOperationsClient) createCreateRequest(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, resource Sample, options *SampleOperationsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/samples/{sampleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if libraryName == "" {
		return nil, errors.New("parameter libraryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{libraryName}", url.PathEscape(libraryName))
	if sampleName == "" {
		return nil, errors.New("parameter sampleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sampleName}", url.PathEscape(sampleName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *SampleOperationsClient) createHandleResponse(resp *http.Response) (SampleOperationsClientCreateResponse, error) {
	result := SampleOperationsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Sample); err != nil {
		return SampleOperationsClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a Sample
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - libraryName - Name of the library
//   - sampleName - Name of the sample
//   - options - SampleOperationsClientDeleteOptions contains the optional parameters for the SampleOperationsClient.Delete method.
func (client *SampleOperationsClient) Delete(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, options *SampleOperationsClientDeleteOptions) (SampleOperationsClientDeleteResponse, error) {
	var err error
	const operationName = "SampleOperationsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, libraryName, sampleName, options)
	if err != nil {
		return SampleOperationsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SampleOperationsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SampleOperationsClientDeleteResponse{}, err
	}
	return SampleOperationsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SampleOperationsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, options *SampleOperationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/samples/{sampleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if libraryName == "" {
		return nil, errors.New("parameter libraryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{libraryName}", url.PathEscape(libraryName))
	if sampleName == "" {
		return nil, errors.New("parameter sampleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sampleName}", url.PathEscape(sampleName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a Sample
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - libraryName - Name of the library
//   - sampleName - Name of the sample
//   - options - SampleOperationsClientGetOptions contains the optional parameters for the SampleOperationsClient.Get method.
func (client *SampleOperationsClient) Get(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, options *SampleOperationsClientGetOptions) (SampleOperationsClientGetResponse, error) {
	var err error
	const operationName = "SampleOperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, libraryName, sampleName, options)
	if err != nil {
		return SampleOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SampleOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SampleOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SampleOperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, options *SampleOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/samples/{sampleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if libraryName == "" {
		return nil, errors.New("parameter libraryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{libraryName}", url.PathEscape(libraryName))
	if sampleName == "" {
		return nil, errors.New("parameter sampleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sampleName}", url.PathEscape(sampleName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SampleOperationsClient) getHandleResponse(resp *http.Response) (SampleOperationsClientGetResponse, error) {
	result := SampleOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Sample); err != nil {
		return SampleOperationsClientGetResponse{}, err
	}
	return result, nil
}

// BeginIdentify - Create a Metagenomics analysis of this sample
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - libraryName - Name of the library
//   - sampleName - Name of the sample
//   - body - The content of the action request
//   - options - SampleOperationsClientBeginIdentifyOptions contains the optional parameters for the SampleOperationsClient.BeginIdentify
//     method.
func (client *SampleOperationsClient) BeginIdentify(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, body IdentifyRequest, options *SampleOperationsClientBeginIdentifyOptions) (*runtime.Poller[SampleOperationsClientIdentifyResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.identify(ctx, resourceGroupName, libraryName, sampleName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SampleOperationsClientIdentifyResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SampleOperationsClientIdentifyResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Identify - Create a Metagenomics analysis of this sample
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
func (client *SampleOperationsClient) identify(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, body IdentifyRequest, options *SampleOperationsClientBeginIdentifyOptions) (*http.Response, error) {
	var err error
	const operationName = "SampleOperationsClient.BeginIdentify"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.identifyCreateRequest(ctx, resourceGroupName, libraryName, sampleName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// identifyCreateRequest creates the Identify request.
func (client *SampleOperationsClient) identifyCreateRequest(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, body IdentifyRequest, options *SampleOperationsClientBeginIdentifyOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/samples/{sampleName}/identify"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if libraryName == "" {
		return nil, errors.New("parameter libraryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{libraryName}", url.PathEscape(libraryName))
	if sampleName == "" {
		return nil, errors.New("parameter sampleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sampleName}", url.PathEscape(sampleName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// NewListByParentPager - List Sample resources by Library
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - libraryName - Name of the library
//   - options - SampleOperationsClientListByParentOptions contains the optional parameters for the SampleOperationsClient.NewListByParentPager
//     method.
func (client *SampleOperationsClient) NewListByParentPager(resourceGroupName string, libraryName string, options *SampleOperationsClientListByParentOptions) *runtime.Pager[SampleOperationsClientListByParentResponse] {
	return runtime.NewPager(runtime.PagingHandler[SampleOperationsClientListByParentResponse]{
		More: func(page SampleOperationsClientListByParentResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SampleOperationsClientListByParentResponse) (SampleOperationsClientListByParentResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SampleOperationsClient.NewListByParentPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByParentCreateRequest(ctx, resourceGroupName, libraryName, options)
			}, nil)
			if err != nil {
				return SampleOperationsClientListByParentResponse{}, err
			}
			return client.listByParentHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByParentCreateRequest creates the ListByParent request.
func (client *SampleOperationsClient) listByParentCreateRequest(ctx context.Context, resourceGroupName string, libraryName string, options *SampleOperationsClientListByParentOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/samples"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if libraryName == "" {
		return nil, errors.New("parameter libraryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{libraryName}", url.PathEscape(libraryName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByParentHandleResponse handles the ListByParent response.
func (client *SampleOperationsClient) listByParentHandleResponse(resp *http.Response) (SampleOperationsClientListByParentResponse, error) {
	result := SampleOperationsClientListByParentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SampleListResult); err != nil {
		return SampleOperationsClientListByParentResponse{}, err
	}
	return result, nil
}

// Update - Update a Sample
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - libraryName - Name of the library
//   - sampleName - Name of the sample
//   - properties - The resource properties to be updated.
//   - options - SampleOperationsClientUpdateOptions contains the optional parameters for the SampleOperationsClient.Update method.
func (client *SampleOperationsClient) Update(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, properties SampleUpdate, options *SampleOperationsClientUpdateOptions) (SampleOperationsClientUpdateResponse, error) {
	var err error
	const operationName = "SampleOperationsClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, libraryName, sampleName, properties, options)
	if err != nil {
		return SampleOperationsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SampleOperationsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SampleOperationsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *SampleOperationsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, properties SampleUpdate, options *SampleOperationsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/samples/{sampleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if libraryName == "" {
		return nil, errors.New("parameter libraryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{libraryName}", url.PathEscape(libraryName))
	if sampleName == "" {
		return nil, errors.New("parameter sampleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sampleName}", url.PathEscape(sampleName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *SampleOperationsClient) updateHandleResponse(resp *http.Response) (SampleOperationsClientUpdateResponse, error) {
	result := SampleOperationsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Sample); err != nil {
		return SampleOperationsClientUpdateResponse{}, err
	}
	return result, nil
}
