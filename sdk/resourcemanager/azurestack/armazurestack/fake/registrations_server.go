//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestack/armazurestack"
	"net/http"
	"net/url"
	"regexp"
)

// RegistrationsServer is a fake server for instances of the armazurestack.RegistrationsClient type.
type RegistrationsServer struct {
	// CreateOrUpdate is the fake for method RegistrationsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroup string, registrationName string, tokenParam armazurestack.RegistrationParameter, options *armazurestack.RegistrationsClientCreateOrUpdateOptions) (resp azfake.Responder[armazurestack.RegistrationsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method RegistrationsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroup string, registrationName string, options *armazurestack.RegistrationsClientDeleteOptions) (resp azfake.Responder[armazurestack.RegistrationsClientDeleteResponse], errResp azfake.ErrorResponder)

	// EnableRemoteManagement is the fake for method RegistrationsClient.EnableRemoteManagement
	// HTTP status codes to indicate success: http.StatusOK
	EnableRemoteManagement func(ctx context.Context, resourceGroup string, registrationName string, options *armazurestack.RegistrationsClientEnableRemoteManagementOptions) (resp azfake.Responder[armazurestack.RegistrationsClientEnableRemoteManagementResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method RegistrationsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroup string, registrationName string, options *armazurestack.RegistrationsClientGetOptions) (resp azfake.Responder[armazurestack.RegistrationsClientGetResponse], errResp azfake.ErrorResponder)

	// GetActivationKey is the fake for method RegistrationsClient.GetActivationKey
	// HTTP status codes to indicate success: http.StatusOK
	GetActivationKey func(ctx context.Context, resourceGroup string, registrationName string, options *armazurestack.RegistrationsClientGetActivationKeyOptions) (resp azfake.Responder[armazurestack.RegistrationsClientGetActivationKeyResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method RegistrationsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroup string, options *armazurestack.RegistrationsClientListOptions) (resp azfake.PagerResponder[armazurestack.RegistrationsClientListResponse])

	// NewListBySubscriptionPager is the fake for method RegistrationsClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armazurestack.RegistrationsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armazurestack.RegistrationsClientListBySubscriptionResponse])

	// Update is the fake for method RegistrationsClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroup string, registrationName string, tokenParam armazurestack.RegistrationParameter, options *armazurestack.RegistrationsClientUpdateOptions) (resp azfake.Responder[armazurestack.RegistrationsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewRegistrationsServerTransport creates a new instance of RegistrationsServerTransport with the provided implementation.
// The returned RegistrationsServerTransport instance is connected to an instance of armazurestack.RegistrationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRegistrationsServerTransport(srv *RegistrationsServer) *RegistrationsServerTransport {
	return &RegistrationsServerTransport{
		srv:                        srv,
		newListPager:               newTracker[azfake.PagerResponder[armazurestack.RegistrationsClientListResponse]](),
		newListBySubscriptionPager: newTracker[azfake.PagerResponder[armazurestack.RegistrationsClientListBySubscriptionResponse]](),
	}
}

// RegistrationsServerTransport connects instances of armazurestack.RegistrationsClient to instances of RegistrationsServer.
// Don't use this type directly, use NewRegistrationsServerTransport instead.
type RegistrationsServerTransport struct {
	srv                        *RegistrationsServer
	newListPager               *tracker[azfake.PagerResponder[armazurestack.RegistrationsClientListResponse]]
	newListBySubscriptionPager *tracker[azfake.PagerResponder[armazurestack.RegistrationsClientListBySubscriptionResponse]]
}

// Do implements the policy.Transporter interface for RegistrationsServerTransport.
func (r *RegistrationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "RegistrationsClient.CreateOrUpdate":
		resp, err = r.dispatchCreateOrUpdate(req)
	case "RegistrationsClient.Delete":
		resp, err = r.dispatchDelete(req)
	case "RegistrationsClient.EnableRemoteManagement":
		resp, err = r.dispatchEnableRemoteManagement(req)
	case "RegistrationsClient.Get":
		resp, err = r.dispatchGet(req)
	case "RegistrationsClient.GetActivationKey":
		resp, err = r.dispatchGetActivationKey(req)
	case "RegistrationsClient.NewListPager":
		resp, err = r.dispatchNewListPager(req)
	case "RegistrationsClient.NewListBySubscriptionPager":
		resp, err = r.dispatchNewListBySubscriptionPager(req)
	case "RegistrationsClient.Update":
		resp, err = r.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *RegistrationsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if r.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurestack.RegistrationParameter](req)
	if err != nil {
		return nil, err
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.CreateOrUpdate(req.Context(), resourceGroupParam, registrationNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Registration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegistrationsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if r.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Delete(req.Context(), resourceGroupParam, registrationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegistrationsServerTransport) dispatchEnableRemoteManagement(req *http.Request) (*http.Response, error) {
	if r.srv.EnableRemoteManagement == nil {
		return nil, &nonRetriableError{errors.New("fake for method EnableRemoteManagement not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enableRemoteManagement`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.EnableRemoteManagement(req.Context(), resourceGroupParam, registrationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegistrationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if r.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Get(req.Context(), resourceGroupParam, registrationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Registration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegistrationsServerTransport) dispatchGetActivationKey(req *http.Request) (*http.Response, error) {
	if r.srv.GetActivationKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetActivationKey not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getactivationkey`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.GetActivationKey(req.Context(), resourceGroupParam, registrationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ActivationKeyResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegistrationsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := r.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
		if err != nil {
			return nil, err
		}
		resp := r.srv.NewListPager(resourceGroupParam, nil)
		newListPager = &resp
		r.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armazurestack.RegistrationsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		r.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		r.newListPager.remove(req)
	}
	return resp, nil
}

func (r *RegistrationsServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := r.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := r.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		r.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armazurestack.RegistrationsClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		r.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		r.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (r *RegistrationsServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if r.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurestack.RegistrationParameter](req)
	if err != nil {
		return nil, err
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Update(req.Context(), resourceGroupParam, registrationNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Registration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
