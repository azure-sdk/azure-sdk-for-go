//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armscvmm

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// VirtualMachineInstanceHybridIdentityMetadataClient contains the methods for the VirtualMachineInstanceHybridIdentityMetadata group.
// Don't use this type directly, use NewVirtualMachineInstanceHybridIdentityMetadataClient() instead.
type VirtualMachineInstanceHybridIdentityMetadataClient struct {
	internal *arm.Client
}

// NewVirtualMachineInstanceHybridIdentityMetadataClient creates a new instance of VirtualMachineInstanceHybridIdentityMetadataClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewVirtualMachineInstanceHybridIdentityMetadataClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*VirtualMachineInstanceHybridIdentityMetadataClient, error) {
	cl, err := arm.NewClient(moduleName+".VirtualMachineInstanceHybridIdentityMetadataClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &VirtualMachineInstanceHybridIdentityMetadataClient{
		internal: cl,
	}
	return client, nil
}

// Get - Implements HybridIdentityMetadata GET method.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-07
//   - resourceURI - The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.
//   - options - VirtualMachineInstanceHybridIdentityMetadataClientGetOptions contains the optional parameters for the VirtualMachineInstanceHybridIdentityMetadataClient.Get
//     method.
func (client *VirtualMachineInstanceHybridIdentityMetadataClient) Get(ctx context.Context, resourceURI string, options *VirtualMachineInstanceHybridIdentityMetadataClientGetOptions) (VirtualMachineInstanceHybridIdentityMetadataClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, resourceURI, options)
	if err != nil {
		return VirtualMachineInstanceHybridIdentityMetadataClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VirtualMachineInstanceHybridIdentityMetadataClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return VirtualMachineInstanceHybridIdentityMetadataClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *VirtualMachineInstanceHybridIdentityMetadataClient) getCreateRequest(ctx context.Context, resourceURI string, options *VirtualMachineInstanceHybridIdentityMetadataClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/hybridIdentityMetadata/default"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *VirtualMachineInstanceHybridIdentityMetadataClient) getHandleResponse(resp *http.Response) (VirtualMachineInstanceHybridIdentityMetadataClientGetResponse, error) {
	result := VirtualMachineInstanceHybridIdentityMetadataClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMInstanceHybridIdentityMetadata); err != nil {
		return VirtualMachineInstanceHybridIdentityMetadataClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Returns the list of HybridIdentityMetadata of the given vm.
//
// Generated from API version 2023-10-07
//   - resourceURI - The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.
//   - options - VirtualMachineInstanceHybridIdentityMetadataClientListOptions contains the optional parameters for the VirtualMachineInstanceHybridIdentityMetadataClient.NewListPager
//     method.
func (client *VirtualMachineInstanceHybridIdentityMetadataClient) NewListPager(resourceURI string, options *VirtualMachineInstanceHybridIdentityMetadataClientListOptions) *runtime.Pager[VirtualMachineInstanceHybridIdentityMetadataClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[VirtualMachineInstanceHybridIdentityMetadataClientListResponse]{
		More: func(page VirtualMachineInstanceHybridIdentityMetadataClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *VirtualMachineInstanceHybridIdentityMetadataClientListResponse) (VirtualMachineInstanceHybridIdentityMetadataClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceURI, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return VirtualMachineInstanceHybridIdentityMetadataClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return VirtualMachineInstanceHybridIdentityMetadataClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return VirtualMachineInstanceHybridIdentityMetadataClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *VirtualMachineInstanceHybridIdentityMetadataClient) listCreateRequest(ctx context.Context, resourceURI string, options *VirtualMachineInstanceHybridIdentityMetadataClientListOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/hybridIdentityMetadata"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *VirtualMachineInstanceHybridIdentityMetadataClient) listHandleResponse(resp *http.Response) (VirtualMachineInstanceHybridIdentityMetadataClientListResponse, error) {
	result := VirtualMachineInstanceHybridIdentityMetadataClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMInstanceHybridIdentityMetadataList); err != nil {
		return VirtualMachineInstanceHybridIdentityMetadataClientListResponse{}, err
	}
	return result, nil
}
