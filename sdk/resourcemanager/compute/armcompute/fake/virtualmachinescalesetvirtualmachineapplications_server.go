//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v6"
	"net/http"
	"net/url"
	"regexp"
)

// VirtualMachineScaleSetVirtualMachineApplicationsServer is a fake server for instances of the armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClient type.
type VirtualMachineScaleSetVirtualMachineApplicationsServer struct {
	// NewGetPager is the fake for method VirtualMachineScaleSetVirtualMachineApplicationsClient.NewGetPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetPager func(resourceGroupName string, vmScaleSetName string, instanceID string, applicationName string, options *armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClientGetOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse])

	// GetInstanceView is the fake for method VirtualMachineScaleSetVirtualMachineApplicationsClient.GetInstanceView
	// HTTP status codes to indicate success: http.StatusOK
	GetInstanceView func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, applicationName string, options *armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewResponse], errResp azfake.ErrorResponder)
}

// NewVirtualMachineScaleSetVirtualMachineApplicationsServerTransport creates a new instance of VirtualMachineScaleSetVirtualMachineApplicationsServerTransport with the provided implementation.
// The returned VirtualMachineScaleSetVirtualMachineApplicationsServerTransport instance is connected to an instance of armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVirtualMachineScaleSetVirtualMachineApplicationsServerTransport(srv *VirtualMachineScaleSetVirtualMachineApplicationsServer) *VirtualMachineScaleSetVirtualMachineApplicationsServerTransport {
	return &VirtualMachineScaleSetVirtualMachineApplicationsServerTransport{
		srv:         srv,
		newGetPager: newTracker[azfake.PagerResponder[armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse]](),
	}
}

// VirtualMachineScaleSetVirtualMachineApplicationsServerTransport connects instances of armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClient to instances of VirtualMachineScaleSetVirtualMachineApplicationsServer.
// Don't use this type directly, use NewVirtualMachineScaleSetVirtualMachineApplicationsServerTransport instead.
type VirtualMachineScaleSetVirtualMachineApplicationsServerTransport struct {
	srv         *VirtualMachineScaleSetVirtualMachineApplicationsServer
	newGetPager *tracker[azfake.PagerResponder[armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse]]
}

// Do implements the policy.Transporter interface for VirtualMachineScaleSetVirtualMachineApplicationsServerTransport.
func (v *VirtualMachineScaleSetVirtualMachineApplicationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VirtualMachineScaleSetVirtualMachineApplicationsClient.NewGetPager":
		resp, err = v.dispatchNewGetPager(req)
	case "VirtualMachineScaleSetVirtualMachineApplicationsClient.GetInstanceView":
		resp, err = v.dispatchGetInstanceView(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVirtualMachineApplicationsServerTransport) dispatchNewGetPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewGetPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetPager not implemented")}
	}
	newGetPager := v.newGetPager.get(req)
	if newGetPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/virtualMachines/(?P<instanceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/applications/(?P<applicationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		vmScaleSetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vmScaleSetName")])
		if err != nil {
			return nil, err
		}
		instanceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceId")])
		if err != nil {
			return nil, err
		}
		applicationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("applicationName")])
		if err != nil {
			return nil, err
		}
		expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
		if err != nil {
			return nil, err
		}
		expandParam := getOptional(expandUnescaped)
		var options *armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClientGetOptions
		if expandParam != nil {
			options = &armcompute.VirtualMachineScaleSetVirtualMachineApplicationsClientGetOptions{
				Expand: expandParam,
			}
		}
		resp := v.srv.NewGetPager(resourceGroupNameParam, vmScaleSetNameParam, instanceIDParam, applicationNameParam, options)
		newGetPager = &resp
		v.newGetPager.add(req, newGetPager)
	}
	resp, err := server.PagerResponderNext(newGetPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newGetPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetPager) {
		v.newGetPager.remove(req)
	}
	return resp, nil
}

func (v *VirtualMachineScaleSetVirtualMachineApplicationsServerTransport) dispatchGetInstanceView(req *http.Request) (*http.Response, error) {
	if v.srv.GetInstanceView == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetInstanceView not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/virtualMachines/(?P<instanceId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/applications/(?P<applicationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/instanceView`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	vmScaleSetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vmScaleSetName")])
	if err != nil {
		return nil, err
	}
	instanceIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceId")])
	if err != nil {
		return nil, err
	}
	applicationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("applicationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.GetInstanceView(req.Context(), resourceGroupNameParam, vmScaleSetNameParam, instanceIDParam, applicationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VMApplicationWithInstanceView, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
