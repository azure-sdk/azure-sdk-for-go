// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationdiscovery

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ImportJobsControllerClient contains the methods for the ImportJobsController group.
// Don't use this type directly, use NewImportJobsControllerClient() instead.
type ImportJobsControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewImportJobsControllerClient creates a new instance of ImportJobsControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewImportJobsControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ImportJobsControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ImportJobsControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get a ImportJob
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - jobName - Jobs name
//   - options - ImportJobsControllerClientGetOptions contains the optional parameters for the ImportJobsControllerClient.Get
//     method.
func (client *ImportJobsControllerClient) Get(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *ImportJobsControllerClientGetOptions) (ImportJobsControllerClientGetResponse, error) {
	var err error
	const operationName = "ImportJobsControllerClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, siteName, jobName, options)
	if err != nil {
		return ImportJobsControllerClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ImportJobsControllerClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ImportJobsControllerClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ImportJobsControllerClient) getCreateRequest(ctx context.Context, resourceGroupName string, siteName string, jobName string, _ *ImportJobsControllerClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/jobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if jobName == "" {
		return nil, errors.New("parameter jobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", url.PathEscape(jobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ImportJobsControllerClient) getHandleResponse(resp *http.Response) (ImportJobsControllerClientGetResponse, error) {
	result := ImportJobsControllerClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImportJob); err != nil {
		return ImportJobsControllerClientGetResponse{}, err
	}
	return result, nil
}

// GetDeletejob - Gets the delete imported machines job with the given job name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - jobName - Job Arm Name.
//   - options - ImportJobsControllerClientGetDeletejobOptions contains the optional parameters for the ImportJobsControllerClient.GetDeletejob
//     method.
func (client *ImportJobsControllerClient) GetDeletejob(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *ImportJobsControllerClientGetDeletejobOptions) (ImportJobsControllerClientGetDeletejobResponse, error) {
	var err error
	const operationName = "ImportJobsControllerClient.GetDeletejob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDeletejobCreateRequest(ctx, resourceGroupName, siteName, jobName, options)
	if err != nil {
		return ImportJobsControllerClientGetDeletejobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ImportJobsControllerClientGetDeletejobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ImportJobsControllerClientGetDeletejobResponse{}, err
	}
	resp, err := client.getDeletejobHandleResponse(httpResp)
	return resp, err
}

// getDeletejobCreateRequest creates the GetDeletejob request.
func (client *ImportJobsControllerClient) getDeletejobCreateRequest(ctx context.Context, resourceGroupName string, siteName string, jobName string, _ *ImportJobsControllerClientGetDeletejobOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/deleteJobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if jobName == "" {
		return nil, errors.New("parameter jobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", url.PathEscape(jobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDeletejobHandleResponse handles the GetDeletejob response.
func (client *ImportJobsControllerClient) getDeletejobHandleResponse(resp *http.Response) (ImportJobsControllerClientGetDeletejobResponse, error) {
	result := ImportJobsControllerClientGetDeletejobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeleteImportMachinesJob); err != nil {
		return ImportJobsControllerClientGetDeletejobResponse{}, err
	}
	return result, nil
}

// GetExportjob - Gets the export imported machines job with the given job name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - jobName - Job Arm Name.
//   - options - ImportJobsControllerClientGetExportjobOptions contains the optional parameters for the ImportJobsControllerClient.GetExportjob
//     method.
func (client *ImportJobsControllerClient) GetExportjob(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *ImportJobsControllerClientGetExportjobOptions) (ImportJobsControllerClientGetExportjobResponse, error) {
	var err error
	const operationName = "ImportJobsControllerClient.GetExportjob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getExportjobCreateRequest(ctx, resourceGroupName, siteName, jobName, options)
	if err != nil {
		return ImportJobsControllerClientGetExportjobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ImportJobsControllerClientGetExportjobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ImportJobsControllerClientGetExportjobResponse{}, err
	}
	resp, err := client.getExportjobHandleResponse(httpResp)
	return resp, err
}

// getExportjobCreateRequest creates the GetExportjob request.
func (client *ImportJobsControllerClient) getExportjobCreateRequest(ctx context.Context, resourceGroupName string, siteName string, jobName string, _ *ImportJobsControllerClientGetExportjobOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/exportJobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if jobName == "" {
		return nil, errors.New("parameter jobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", url.PathEscape(jobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getExportjobHandleResponse handles the GetExportjob response.
func (client *ImportJobsControllerClient) getExportjobHandleResponse(resp *http.Response) (ImportJobsControllerClientGetExportjobResponse, error) {
	result := ImportJobsControllerClientGetExportjobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExportImportedMachinesJob); err != nil {
		return ImportJobsControllerClientGetExportjobResponse{}, err
	}
	return result, nil
}

// GetImportjob - Gets the import job with the given job name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - jobName - Job Arm Name.
//   - options - ImportJobsControllerClientGetImportjobOptions contains the optional parameters for the ImportJobsControllerClient.GetImportjob
//     method.
func (client *ImportJobsControllerClient) GetImportjob(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *ImportJobsControllerClientGetImportjobOptions) (ImportJobsControllerClientGetImportjobResponse, error) {
	var err error
	const operationName = "ImportJobsControllerClient.GetImportjob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getImportjobCreateRequest(ctx, resourceGroupName, siteName, jobName, options)
	if err != nil {
		return ImportJobsControllerClientGetImportjobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ImportJobsControllerClientGetImportjobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ImportJobsControllerClientGetImportjobResponse{}, err
	}
	resp, err := client.getImportjobHandleResponse(httpResp)
	return resp, err
}

// getImportjobCreateRequest creates the GetImportjob request.
func (client *ImportJobsControllerClient) getImportjobCreateRequest(ctx context.Context, resourceGroupName string, siteName string, jobName string, _ *ImportJobsControllerClientGetImportjobOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/importJobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if jobName == "" {
		return nil, errors.New("parameter jobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", url.PathEscape(jobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getImportjobHandleResponse handles the GetImportjob response.
func (client *ImportJobsControllerClient) getImportjobHandleResponse(resp *http.Response) (ImportJobsControllerClientGetImportjobResponse, error) {
	result := ImportJobsControllerClientGetImportjobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImportMachinesJob); err != nil {
		return ImportJobsControllerClientGetImportjobResponse{}, err
	}
	return result, nil
}

// NewListByImportSitePager - List ImportJob resources by ImportSite
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - ImportJobsControllerClientListByImportSiteOptions contains the optional parameters for the ImportJobsControllerClient.NewListByImportSitePager
//     method.
func (client *ImportJobsControllerClient) NewListByImportSitePager(resourceGroupName string, siteName string, options *ImportJobsControllerClientListByImportSiteOptions) *runtime.Pager[ImportJobsControllerClientListByImportSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[ImportJobsControllerClientListByImportSiteResponse]{
		More: func(page ImportJobsControllerClientListByImportSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ImportJobsControllerClientListByImportSiteResponse) (ImportJobsControllerClientListByImportSiteResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ImportJobsControllerClient.NewListByImportSitePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByImportSiteCreateRequest(ctx, resourceGroupName, siteName, options)
			}, nil)
			if err != nil {
				return ImportJobsControllerClientListByImportSiteResponse{}, err
			}
			return client.listByImportSiteHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByImportSiteCreateRequest creates the ListByImportSite request.
func (client *ImportJobsControllerClient) listByImportSiteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, _ *ImportJobsControllerClientListByImportSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/jobs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByImportSiteHandleResponse handles the ListByImportSite response.
func (client *ImportJobsControllerClient) listByImportSiteHandleResponse(resp *http.Response) (ImportJobsControllerClientListByImportSiteResponse, error) {
	result := ImportJobsControllerClientListByImportSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImportJobListResult); err != nil {
		return ImportJobsControllerClientListByImportSiteResponse{}, err
	}
	return result, nil
}

// NewListDeletejobsPager - Method to get all delete import machines job for the given site.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - ImportJobsControllerClientListDeletejobsOptions contains the optional parameters for the ImportJobsControllerClient.NewListDeletejobsPager
//     method.
func (client *ImportJobsControllerClient) NewListDeletejobsPager(resourceGroupName string, siteName string, options *ImportJobsControllerClientListDeletejobsOptions) *runtime.Pager[ImportJobsControllerClientListDeletejobsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ImportJobsControllerClientListDeletejobsResponse]{
		More: func(page ImportJobsControllerClientListDeletejobsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ImportJobsControllerClientListDeletejobsResponse) (ImportJobsControllerClientListDeletejobsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ImportJobsControllerClient.NewListDeletejobsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDeletejobsCreateRequest(ctx, resourceGroupName, siteName, options)
			}, nil)
			if err != nil {
				return ImportJobsControllerClientListDeletejobsResponse{}, err
			}
			return client.listDeletejobsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listDeletejobsCreateRequest creates the ListDeletejobs request.
func (client *ImportJobsControllerClient) listDeletejobsCreateRequest(ctx context.Context, resourceGroupName string, siteName string, _ *ImportJobsControllerClientListDeletejobsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/deleteJobs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDeletejobsHandleResponse handles the ListDeletejobs response.
func (client *ImportJobsControllerClient) listDeletejobsHandleResponse(resp *http.Response) (ImportJobsControllerClientListDeletejobsResponse, error) {
	result := ImportJobsControllerClientListDeletejobsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedDeleteImportMachinesJob); err != nil {
		return ImportJobsControllerClientListDeletejobsResponse{}, err
	}
	return result, nil
}

// NewListExportjobsPager - Method to get all export import machines job for the given site.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - ImportJobsControllerClientListExportjobsOptions contains the optional parameters for the ImportJobsControllerClient.NewListExportjobsPager
//     method.
func (client *ImportJobsControllerClient) NewListExportjobsPager(resourceGroupName string, siteName string, options *ImportJobsControllerClientListExportjobsOptions) *runtime.Pager[ImportJobsControllerClientListExportjobsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ImportJobsControllerClientListExportjobsResponse]{
		More: func(page ImportJobsControllerClientListExportjobsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ImportJobsControllerClientListExportjobsResponse) (ImportJobsControllerClientListExportjobsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ImportJobsControllerClient.NewListExportjobsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listExportjobsCreateRequest(ctx, resourceGroupName, siteName, options)
			}, nil)
			if err != nil {
				return ImportJobsControllerClientListExportjobsResponse{}, err
			}
			return client.listExportjobsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listExportjobsCreateRequest creates the ListExportjobs request.
func (client *ImportJobsControllerClient) listExportjobsCreateRequest(ctx context.Context, resourceGroupName string, siteName string, _ *ImportJobsControllerClientListExportjobsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/exportJobs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listExportjobsHandleResponse handles the ListExportjobs response.
func (client *ImportJobsControllerClient) listExportjobsHandleResponse(resp *http.Response) (ImportJobsControllerClientListExportjobsResponse, error) {
	result := ImportJobsControllerClientListExportjobsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedExportImportedMachinesJob); err != nil {
		return ImportJobsControllerClientListExportjobsResponse{}, err
	}
	return result, nil
}

// NewListImportjobsPager - Method to get all import machines job for the given site.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - ImportJobsControllerClientListImportjobsOptions contains the optional parameters for the ImportJobsControllerClient.NewListImportjobsPager
//     method.
func (client *ImportJobsControllerClient) NewListImportjobsPager(resourceGroupName string, siteName string, options *ImportJobsControllerClientListImportjobsOptions) *runtime.Pager[ImportJobsControllerClientListImportjobsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ImportJobsControllerClientListImportjobsResponse]{
		More: func(page ImportJobsControllerClientListImportjobsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ImportJobsControllerClientListImportjobsResponse) (ImportJobsControllerClientListImportjobsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ImportJobsControllerClient.NewListImportjobsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listImportjobsCreateRequest(ctx, resourceGroupName, siteName, options)
			}, nil)
			if err != nil {
				return ImportJobsControllerClientListImportjobsResponse{}, err
			}
			return client.listImportjobsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listImportjobsCreateRequest creates the ListImportjobs request.
func (client *ImportJobsControllerClient) listImportjobsCreateRequest(ctx context.Context, resourceGroupName string, siteName string, _ *ImportJobsControllerClientListImportjobsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/importJobs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listImportjobsHandleResponse handles the ListImportjobs response.
func (client *ImportJobsControllerClient) listImportjobsHandleResponse(resp *http.Response) (ImportJobsControllerClientListImportjobsResponse, error) {
	result := ImportJobsControllerClientListImportjobsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedImportMachinesJob); err != nil {
		return ImportJobsControllerClientListImportjobsResponse{}, err
	}
	return result, nil
}
