//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcodesigning

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CertificateProfileClient contains the methods for the CertificateProfile group.
// Don't use this type directly, use NewCertificateProfileClient() instead.
type CertificateProfileClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewCertificateProfileClient creates a new instance of CertificateProfileClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCertificateProfileClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CertificateProfileClient, error) {
	cl, err := arm.NewClient(moduleName+".CertificateProfileClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CertificateProfileClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Create a certificate profile
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Code Signing account name
//   - profileName - Certificate profile name
//   - certificateProfile - Parameters to create the certificate profile
//   - options - CertificateProfileClientBeginCreateOptions contains the optional parameters for the CertificateProfileClient.BeginCreate
//     method.
func (client *CertificateProfileClient) BeginCreate(ctx context.Context, resourceGroupName string, accountName string, profileName string, certificateProfile CertificateProfile, options *CertificateProfileClientBeginCreateOptions) (*runtime.Poller[CertificateProfileClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, accountName, profileName, certificateProfile, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CertificateProfileClientCreateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CertificateProfileClientCreateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Create - Create a certificate profile
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-30-preview
func (client *CertificateProfileClient) create(ctx context.Context, resourceGroupName string, accountName string, profileName string, certificateProfile CertificateProfile, options *CertificateProfileClientBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, accountName, profileName, certificateProfile, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *CertificateProfileClient) createCreateRequest(ctx context.Context, resourceGroupName string, accountName string, profileName string, certificateProfile CertificateProfile, options *CertificateProfileClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, certificateProfile)
}

// BeginDelete - Delete a Certificate Profile
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Code Signing account name
//   - profileName - Certificate profile name
//   - options - CertificateProfileClientBeginDeleteOptions contains the optional parameters for the CertificateProfileClient.BeginDelete
//     method.
func (client *CertificateProfileClient) BeginDelete(ctx context.Context, resourceGroupName string, accountName string, profileName string, options *CertificateProfileClientBeginDeleteOptions) (*runtime.Poller[CertificateProfileClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, accountName, profileName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CertificateProfileClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CertificateProfileClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a Certificate Profile
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-30-preview
func (client *CertificateProfileClient) deleteOperation(ctx context.Context, resourceGroupName string, accountName string, profileName string, options *CertificateProfileClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, accountName, profileName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CertificateProfileClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, accountName string, profileName string, options *CertificateProfileClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get details of a certificate profile
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Code Signing account name
//   - profileName - Certificate profile name
//   - options - CertificateProfileClientGetOptions contains the optional parameters for the CertificateProfileClient.Get method.
func (client *CertificateProfileClient) Get(ctx context.Context, resourceGroupName string, accountName string, profileName string, options *CertificateProfileClientGetOptions) (CertificateProfileClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, profileName, options)
	if err != nil {
		return CertificateProfileClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CertificateProfileClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CertificateProfileClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CertificateProfileClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, profileName string, options *CertificateProfileClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CertificateProfileClient) getHandleResponse(resp *http.Response) (CertificateProfileClientGetResponse, error) {
	result := CertificateProfileClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CertificateProfile); err != nil {
		return CertificateProfileClientGetResponse{}, err
	}
	return result, nil
}

// NewListByCodeSigningAccountPager - List certificate profiles within a code signing account
//
// Generated from API version 2023-04-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Code Signing account name
//   - options - CertificateProfileClientListByCodeSigningAccountOptions contains the optional parameters for the CertificateProfileClient.NewListByCodeSigningAccountPager
//     method.
func (client *CertificateProfileClient) NewListByCodeSigningAccountPager(resourceGroupName string, accountName string, options *CertificateProfileClientListByCodeSigningAccountOptions) *runtime.Pager[CertificateProfileClientListByCodeSigningAccountResponse] {
	return runtime.NewPager(runtime.PagingHandler[CertificateProfileClientListByCodeSigningAccountResponse]{
		More: func(page CertificateProfileClientListByCodeSigningAccountResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CertificateProfileClientListByCodeSigningAccountResponse) (CertificateProfileClientListByCodeSigningAccountResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByCodeSigningAccountCreateRequest(ctx, resourceGroupName, accountName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return CertificateProfileClientListByCodeSigningAccountResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return CertificateProfileClientListByCodeSigningAccountResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CertificateProfileClientListByCodeSigningAccountResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByCodeSigningAccountHandleResponse(resp)
		},
	})
}

// listByCodeSigningAccountCreateRequest creates the ListByCodeSigningAccount request.
func (client *CertificateProfileClient) listByCodeSigningAccountCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *CertificateProfileClientListByCodeSigningAccountOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByCodeSigningAccountHandleResponse handles the ListByCodeSigningAccount response.
func (client *CertificateProfileClient) listByCodeSigningAccountHandleResponse(resp *http.Response) (CertificateProfileClientListByCodeSigningAccountResponse, error) {
	result := CertificateProfileClientListByCodeSigningAccountResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CertificateProfiles); err != nil {
		return CertificateProfileClientListByCodeSigningAccountResponse{}, err
	}
	return result, nil
}

// Update - Update a certificate profile
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Code Signing account name
//   - profileName - Certificate profile name
//   - certificateProfilePatch - Parameters supplied to update certificate profile
//   - options - CertificateProfileClientUpdateOptions contains the optional parameters for the CertificateProfileClient.Update
//     method.
func (client *CertificateProfileClient) Update(ctx context.Context, resourceGroupName string, accountName string, profileName string, certificateProfilePatch CertificateProfilePatch, options *CertificateProfileClientUpdateOptions) (CertificateProfileClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, accountName, profileName, certificateProfilePatch, options)
	if err != nil {
		return CertificateProfileClientUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CertificateProfileClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CertificateProfileClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *CertificateProfileClient) updateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, profileName string, certificateProfilePatch CertificateProfilePatch, options *CertificateProfileClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, certificateProfilePatch)
}

// updateHandleResponse handles the Update response.
func (client *CertificateProfileClient) updateHandleResponse(resp *http.Response) (CertificateProfileClientUpdateResponse, error) {
	result := CertificateProfileClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CertificateProfile); err != nil {
		return CertificateProfileClientUpdateResponse{}, err
	}
	return result, nil
}
