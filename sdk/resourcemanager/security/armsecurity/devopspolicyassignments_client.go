//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DevOpsPolicyAssignmentsClient contains the methods for the DevOpsPolicyAssignments group.
// Don't use this type directly, use NewDevOpsPolicyAssignmentsClient() instead.
type DevOpsPolicyAssignmentsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDevOpsPolicyAssignmentsClient creates a new instance of DevOpsPolicyAssignmentsClient with the specified values.
//   - subscriptionID - Azure subscription ID
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDevOpsPolicyAssignmentsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DevOpsPolicyAssignmentsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DevOpsPolicyAssignmentsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates a DevOps Policy Assignment Resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - securityConnectorName - The security connector name.
//   - policyAssignmentID - The policy assignment Id.
//   - devOpsPolicyAssignment - The DevOps Policy Assignment.
//   - options - DevOpsPolicyAssignmentsClientBeginCreateOrUpdateOptions contains the optional parameters for the DevOpsPolicyAssignmentsClient.BeginCreateOrUpdate
//     method.
func (client *DevOpsPolicyAssignmentsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, devOpsPolicyAssignment DevOpsPolicyAssignment, options *DevOpsPolicyAssignmentsClientBeginCreateOrUpdateOptions) (*runtime.Poller[DevOpsPolicyAssignmentsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, securityConnectorName, policyAssignmentID, devOpsPolicyAssignment, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DevOpsPolicyAssignmentsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DevOpsPolicyAssignmentsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates or updates a DevOps Policy Assignment Resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-15-preview
func (client *DevOpsPolicyAssignmentsClient) createOrUpdate(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, devOpsPolicyAssignment DevOpsPolicyAssignment, options *DevOpsPolicyAssignmentsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "DevOpsPolicyAssignmentsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, securityConnectorName, policyAssignmentID, devOpsPolicyAssignment, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DevOpsPolicyAssignmentsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, devOpsPolicyAssignment DevOpsPolicyAssignment, options *DevOpsPolicyAssignmentsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments/{policyAssignmentId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if securityConnectorName == "" {
		return nil, errors.New("parameter securityConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{securityConnectorName}", url.PathEscape(securityConnectorName))
	if policyAssignmentID == "" {
		return nil, errors.New("parameter policyAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", url.PathEscape(policyAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, devOpsPolicyAssignment); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes a DevOps Policy Assignment Resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - securityConnectorName - The security connector name.
//   - policyAssignmentID - The policy assignment Id.
//   - options - DevOpsPolicyAssignmentsClientBeginDeleteOptions contains the optional parameters for the DevOpsPolicyAssignmentsClient.BeginDelete
//     method.
func (client *DevOpsPolicyAssignmentsClient) BeginDelete(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, options *DevOpsPolicyAssignmentsClientBeginDeleteOptions) (*runtime.Poller[DevOpsPolicyAssignmentsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, securityConnectorName, policyAssignmentID, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DevOpsPolicyAssignmentsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DevOpsPolicyAssignmentsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes a DevOps Policy Assignment Resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-15-preview
func (client *DevOpsPolicyAssignmentsClient) deleteOperation(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, options *DevOpsPolicyAssignmentsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "DevOpsPolicyAssignmentsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, securityConnectorName, policyAssignmentID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DevOpsPolicyAssignmentsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, options *DevOpsPolicyAssignmentsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments/{policyAssignmentId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if securityConnectorName == "" {
		return nil, errors.New("parameter securityConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{securityConnectorName}", url.PathEscape(securityConnectorName))
	if policyAssignmentID == "" {
		return nil, errors.New("parameter policyAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", url.PathEscape(policyAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Returns a DevOps Policy Assignment Resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - securityConnectorName - The security connector name.
//   - policyAssignmentID - The policy assignment Id.
//   - options - DevOpsPolicyAssignmentsClientGetOptions contains the optional parameters for the DevOpsPolicyAssignmentsClient.Get
//     method.
func (client *DevOpsPolicyAssignmentsClient) Get(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, options *DevOpsPolicyAssignmentsClientGetOptions) (DevOpsPolicyAssignmentsClientGetResponse, error) {
	var err error
	const operationName = "DevOpsPolicyAssignmentsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, securityConnectorName, policyAssignmentID, options)
	if err != nil {
		return DevOpsPolicyAssignmentsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DevOpsPolicyAssignmentsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DevOpsPolicyAssignmentsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DevOpsPolicyAssignmentsClient) getCreateRequest(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, options *DevOpsPolicyAssignmentsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments/{policyAssignmentId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if securityConnectorName == "" {
		return nil, errors.New("parameter securityConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{securityConnectorName}", url.PathEscape(securityConnectorName))
	if policyAssignmentID == "" {
		return nil, errors.New("parameter policyAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", url.PathEscape(policyAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DevOpsPolicyAssignmentsClient) getHandleResponse(resp *http.Response) (DevOpsPolicyAssignmentsClientGetResponse, error) {
	result := DevOpsPolicyAssignmentsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DevOpsPolicyAssignment); err != nil {
		return DevOpsPolicyAssignmentsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Returns a list of DevOps Policy Assignments.
//
// Generated from API version 2024-05-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - securityConnectorName - The security connector name.
//   - options - DevOpsPolicyAssignmentsClientListOptions contains the optional parameters for the DevOpsPolicyAssignmentsClient.NewListPager
//     method.
func (client *DevOpsPolicyAssignmentsClient) NewListPager(resourceGroupName string, securityConnectorName string, options *DevOpsPolicyAssignmentsClientListOptions) *runtime.Pager[DevOpsPolicyAssignmentsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[DevOpsPolicyAssignmentsClientListResponse]{
		More: func(page DevOpsPolicyAssignmentsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DevOpsPolicyAssignmentsClientListResponse) (DevOpsPolicyAssignmentsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DevOpsPolicyAssignmentsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, securityConnectorName, options)
			}, nil)
			if err != nil {
				return DevOpsPolicyAssignmentsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *DevOpsPolicyAssignmentsClient) listCreateRequest(ctx context.Context, resourceGroupName string, securityConnectorName string, options *DevOpsPolicyAssignmentsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if securityConnectorName == "" {
		return nil, errors.New("parameter securityConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{securityConnectorName}", url.PathEscape(securityConnectorName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-15-preview")
	if options != nil && options.DevOpsPolicyType != nil {
		reqQP.Set("devOpsPolicyType", *options.DevOpsPolicyType)
	}
	if options != nil && options.ResourceID != nil {
		reqQP.Set("resourceId", *options.ResourceID)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DevOpsPolicyAssignmentsClient) listHandleResponse(resp *http.Response) (DevOpsPolicyAssignmentsClientListResponse, error) {
	result := DevOpsPolicyAssignmentsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DevOpsPolicyAssignmentListResponse); err != nil {
		return DevOpsPolicyAssignmentsClientListResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Updates a DevOps Policy Assignment Resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - securityConnectorName - The security connector name.
//   - policyAssignmentID - The policy assignment Id.
//   - devOpsPolicyAssignment - The DevOps Policy Assignment.
//   - options - DevOpsPolicyAssignmentsClientBeginUpdateOptions contains the optional parameters for the DevOpsPolicyAssignmentsClient.BeginUpdate
//     method.
func (client *DevOpsPolicyAssignmentsClient) BeginUpdate(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, devOpsPolicyAssignment DevOpsPolicyAssignment, options *DevOpsPolicyAssignmentsClientBeginUpdateOptions) (*runtime.Poller[DevOpsPolicyAssignmentsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, securityConnectorName, policyAssignmentID, devOpsPolicyAssignment, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DevOpsPolicyAssignmentsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DevOpsPolicyAssignmentsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Updates a DevOps Policy Assignment Resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-15-preview
func (client *DevOpsPolicyAssignmentsClient) update(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, devOpsPolicyAssignment DevOpsPolicyAssignment, options *DevOpsPolicyAssignmentsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "DevOpsPolicyAssignmentsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, securityConnectorName, policyAssignmentID, devOpsPolicyAssignment, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *DevOpsPolicyAssignmentsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, securityConnectorName string, policyAssignmentID string, devOpsPolicyAssignment DevOpsPolicyAssignment, options *DevOpsPolicyAssignmentsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments/{policyAssignmentId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if securityConnectorName == "" {
		return nil, errors.New("parameter securityConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{securityConnectorName}", url.PathEscape(securityConnectorName))
	if policyAssignmentID == "" {
		return nil, errors.New("parameter policyAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", url.PathEscape(policyAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, devOpsPolicyAssignment); err != nil {
		return nil, err
	}
	return req, nil
}
