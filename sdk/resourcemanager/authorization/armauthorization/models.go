//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armauthorization

import "time"

// AccessReviewActorIdentity - Details of the actor identity
type AccessReviewActorIdentity struct {
	// READ-ONLY; The identity id
	PrincipalID *string

	// READ-ONLY; The identity display name
	PrincipalName *string

	// READ-ONLY; The identity type : user/servicePrincipal
	PrincipalType *AccessReviewActorIdentityType

	// READ-ONLY; The user principal name(if valid)
	UserPrincipalName *string
}

// AccessReviewContactedReviewer - Access Review Contacted Reviewer.
type AccessReviewContactedReviewer struct {
	// Access Review Contacted Reviewer properties.
	Properties *AccessReviewContactedReviewerProperties

	// READ-ONLY; The access review reviewer id.
	ID *string

	// READ-ONLY; The access review reviewer id.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// AccessReviewContactedReviewerListResult - List of access review contacted reviewers.
type AccessReviewContactedReviewerListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Access Review Contacted Reviewer.
	Value []*AccessReviewContactedReviewer
}

// AccessReviewContactedReviewerProperties - Properties of access review contacted reviewer.
type AccessReviewContactedReviewerProperties struct {
	// READ-ONLY; Date Time when the reviewer was contacted.
	CreatedDateTime *time.Time

	// READ-ONLY; The display name of the reviewer
	UserDisplayName *string

	// READ-ONLY; The user principal name of the reviewer
	UserPrincipalName *string
}

// AccessReviewDecision - Access Review.
type AccessReviewDecision struct {
	// Access Review Decision properties.
	Properties *AccessReviewDecisionProperties

	// READ-ONLY; The access review decision id.
	ID *string

	// READ-ONLY; The access review decision name.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// AccessReviewDecisionIdentityClassification provides polymorphic access to related types.
// Call the interface's GetAccessReviewDecisionIdentity() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AccessReviewDecisionIdentity, *AccessReviewDecisionServicePrincipalIdentity, *AccessReviewDecisionUserIdentity
type AccessReviewDecisionIdentityClassification interface {
	// GetAccessReviewDecisionIdentity returns the AccessReviewDecisionIdentity content of the underlying type.
	GetAccessReviewDecisionIdentity() *AccessReviewDecisionIdentity
}

// AccessReviewDecisionIdentity - Target of the decision.
type AccessReviewDecisionIdentity struct {
	// REQUIRED; The type of decision target : User/ServicePrincipal
	Type *DecisionTargetType

	// READ-ONLY; The display name of the user whose access was reviewed.
	DisplayName *string

	// READ-ONLY; The id of principal whose access was reviewed.
	ID *string
}

// GetAccessReviewDecisionIdentity implements the AccessReviewDecisionIdentityClassification interface for type AccessReviewDecisionIdentity.
func (a *AccessReviewDecisionIdentity) GetAccessReviewDecisionIdentity() *AccessReviewDecisionIdentity {
	return a
}

// AccessReviewDecisionInsight - Access Review Decision Insight.
type AccessReviewDecisionInsight struct {
	// Access Review Decision Insight properties.
	Properties AccessReviewDecisionInsightPropertiesClassification

	// READ-ONLY; The access review insight id.
	ID *string

	// READ-ONLY; The access review insight name.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// AccessReviewDecisionInsightPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetAccessReviewDecisionInsightProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AccessReviewDecisionInsightProperties, *AccessReviewDecisionUserSignInInsightProperties
type AccessReviewDecisionInsightPropertiesClassification interface {
	// GetAccessReviewDecisionInsightProperties returns the AccessReviewDecisionInsightProperties content of the underlying type.
	GetAccessReviewDecisionInsightProperties() *AccessReviewDecisionInsightProperties
}

// AccessReviewDecisionInsightProperties - Details of the Insight.
type AccessReviewDecisionInsightProperties struct {
	// REQUIRED; The type of insight
	Type *AccessReviewDecisionInsightType

	// READ-ONLY; Date Time when the insight was created.
	InsightCreatedDateTime any
}

// GetAccessReviewDecisionInsightProperties implements the AccessReviewDecisionInsightPropertiesClassification interface for
// type AccessReviewDecisionInsightProperties.
func (a *AccessReviewDecisionInsightProperties) GetAccessReviewDecisionInsightProperties() *AccessReviewDecisionInsightProperties {
	return a
}

// AccessReviewDecisionListResult - List of access review decisions.
type AccessReviewDecisionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Access Review Decision list.
	Value []*AccessReviewDecision
}

// AccessReviewDecisionPrincipalResourceMembership - Target of the decision.
type AccessReviewDecisionPrincipalResourceMembership struct {
	// Every decision item in an access review represents a principal's membership to a resource. This property represents details
	// of the membership. Examples of this detail might be whether the principal
	// has direct access or indirect access
	MembershipTypes []*AccessReviewDecisionPrincipalResourceMembershipType
}

// AccessReviewDecisionProperties - Approval Step.
type AccessReviewDecisionProperties struct {
	// The decision on the approval step. This value is initially set to NotReviewed. Approvers can take action of Approve/Deny
	Decision *AccessReviewResult

	// This is the collection of insights for this decision item.
	Insights []*AccessReviewDecisionInsight

	// Justification provided by approvers for their action
	Justification *string

	// READ-ONLY; Details of the approver.
	AppliedBy *AccessReviewActorIdentity

	// READ-ONLY; The date and time when the review decision was applied.
	AppliedDateTime *time.Time

	// READ-ONLY; The outcome of applying the decision.
	ApplyResult *AccessReviewApplyResult

	// READ-ONLY; Principal associated with the decision record. Can be AccessReviewDecisionUserIdentity or AccessReviewDecisionServicePrincipalIdentity
	Principal AccessReviewDecisionIdentityClassification

	// READ-ONLY; Details of the membership type.
	PrincipalResourceMembership *AccessReviewDecisionPrincipalResourceMembership

	// READ-ONLY; The feature- generated recommendation shown to the reviewer.
	Recommendation *AccessRecommendationType

	// READ-ONLY; Resource associated with this decision record.
	Resource *AccessReviewDecisionResource

	// READ-ONLY; Details of the approver.
	ReviewedBy *AccessReviewActorIdentity

	// READ-ONLY; Date Time when a decision was taken.
	ReviewedDateTime *time.Time
}

// AccessReviewDecisionResource - Target of the decision.
type AccessReviewDecisionResource struct {
	// REQUIRED; The type of resource
	Type *DecisionResourceType

	// READ-ONLY; The display name of resource associated with a decision record.
	DisplayName *string

	// READ-ONLY; The id of resource associated with a decision record.
	ID *string
}

// AccessReviewDecisionServicePrincipalIdentity - Service Principal Decision Target
type AccessReviewDecisionServicePrincipalIdentity struct {
	// REQUIRED; The type of decision target : User/ServicePrincipal
	Type *DecisionTargetType

	// READ-ONLY; The appId for the service principal entity being reviewed
	AppID *string

	// READ-ONLY; The display name of the user whose access was reviewed.
	DisplayName *string

	// READ-ONLY; The id of principal whose access was reviewed.
	ID *string
}

// GetAccessReviewDecisionIdentity implements the AccessReviewDecisionIdentityClassification interface for type AccessReviewDecisionServicePrincipalIdentity.
func (a *AccessReviewDecisionServicePrincipalIdentity) GetAccessReviewDecisionIdentity() *AccessReviewDecisionIdentity {
	return &AccessReviewDecisionIdentity{
		Type:        a.Type,
		ID:          a.ID,
		DisplayName: a.DisplayName,
	}
}

// AccessReviewDecisionUserIdentity - User Decision Target
type AccessReviewDecisionUserIdentity struct {
	// REQUIRED; The type of decision target : User/ServicePrincipal
	Type *DecisionTargetType

	// READ-ONLY; The display name of the user whose access was reviewed.
	DisplayName *string

	// READ-ONLY; The id of principal whose access was reviewed.
	ID *string

	// READ-ONLY; The user principal name of the user whose access was reviewed.
	UserPrincipalName *string
}

// GetAccessReviewDecisionIdentity implements the AccessReviewDecisionIdentityClassification interface for type AccessReviewDecisionUserIdentity.
func (a *AccessReviewDecisionUserIdentity) GetAccessReviewDecisionIdentity() *AccessReviewDecisionIdentity {
	return &AccessReviewDecisionIdentity{
		Type:        a.Type,
		ID:          a.ID,
		DisplayName: a.DisplayName,
	}
}

// AccessReviewDecisionUserSignInInsightProperties - User Decision Target
type AccessReviewDecisionUserSignInInsightProperties struct {
	// REQUIRED; The type of insight
	Type *AccessReviewDecisionInsightType

	// READ-ONLY; Date Time when the insight was created.
	InsightCreatedDateTime any

	// READ-ONLY; Date Time when the user signed into the tenant.
	LastSignInDateTime any
}

// GetAccessReviewDecisionInsightProperties implements the AccessReviewDecisionInsightPropertiesClassification interface for
// type AccessReviewDecisionUserSignInInsightProperties.
func (a *AccessReviewDecisionUserSignInInsightProperties) GetAccessReviewDecisionInsightProperties() *AccessReviewDecisionInsightProperties {
	return &AccessReviewDecisionInsightProperties{
		Type:                   a.Type,
		InsightCreatedDateTime: a.InsightCreatedDateTime,
	}
}

// AccessReviewDefaultSettings - Access Review Default Settings.
type AccessReviewDefaultSettings struct {
	// Access Review properties.
	Properties *AccessReviewScheduleSettings

	// READ-ONLY; The access review default settings id. This is only going to be default
	ID *string

	// READ-ONLY; The access review default settings name. This is always going to be Access Review Default Settings
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// AccessReviewDefaultSettingsClientGetOptions contains the optional parameters for the AccessReviewDefaultSettingsClient.Get
// method.
type AccessReviewDefaultSettingsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewDefaultSettingsClientPutOptions contains the optional parameters for the AccessReviewDefaultSettingsClient.Put
// method.
type AccessReviewDefaultSettingsClientPutOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewHistoryDefinition - Access Review History Definition.
type AccessReviewHistoryDefinition struct {
	// Access Review History Definition properties.
	Properties *AccessReviewHistoryDefinitionProperties

	// READ-ONLY; The access review history definition id.
	ID *string

	// READ-ONLY; The access review history definition unique id.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// AccessReviewHistoryDefinitionClientCreateOptions contains the optional parameters for the AccessReviewHistoryDefinitionClient.Create
// method.
type AccessReviewHistoryDefinitionClientCreateOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewHistoryDefinitionClientDeleteByIDOptions contains the optional parameters for the AccessReviewHistoryDefinitionClient.DeleteByID
// method.
type AccessReviewHistoryDefinitionClientDeleteByIDOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewHistoryDefinitionInstanceClientGenerateDownloadURIOptions contains the optional parameters for the AccessReviewHistoryDefinitionInstanceClient.GenerateDownloadURI
// method.
type AccessReviewHistoryDefinitionInstanceClientGenerateDownloadURIOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewHistoryDefinitionInstanceListResult - List of Access Review History Instances.
type AccessReviewHistoryDefinitionInstanceListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Access Review History Definition's Instance list.
	Value []*AccessReviewHistoryInstance
}

// AccessReviewHistoryDefinitionInstancesClientListOptions contains the optional parameters for the AccessReviewHistoryDefinitionInstancesClient.NewListPager
// method.
type AccessReviewHistoryDefinitionInstancesClientListOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewHistoryDefinitionListResult - List of Access Review History Definitions.
type AccessReviewHistoryDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Access Review History Definition list.
	Value []*AccessReviewHistoryDefinition
}

// AccessReviewHistoryDefinitionProperties - Access Review History Instances.
type AccessReviewHistoryDefinitionProperties struct {
	// Collection of review decisions which the history data should be filtered on. For example if Approve and Deny are supplied
	// the data will only contain review results in which the decision maker approved
	// or denied a review request.
	Decisions []*AccessReviewResult

	// The display name for the history definition.
	DisplayName *string

	// Set of access review history instances for this history definition.
	Instances []*AccessReviewHistoryInstance

	// A collection of scopes used when selecting review history data
	Scopes []*AccessReviewScope

	// Recurrence settings for recurring history reports, skip for one-time reports.
	Settings *AccessReviewHistoryScheduleSettings

	// READ-ONLY; The user or other identity who created this history definition.
	CreatedBy *AccessReviewActorIdentity

	// READ-ONLY; Date time when history definition was created
	CreatedDateTime *time.Time

	// READ-ONLY; Date time used when selecting review data, all reviews included in data end on or before this date. For use
	// only with one-time/non-recurring reports.
	ReviewHistoryPeriodEndDateTime *time.Time

	// READ-ONLY; Date time used when selecting review data, all reviews included in data start on or after this date. For use
	// only with one-time/non-recurring reports.
	ReviewHistoryPeriodStartDateTime *time.Time

	// READ-ONLY; This read-only field specifies the of the requested review history data. This is either requested, in-progress,
	// done or error.
	Status *AccessReviewHistoryDefinitionStatus
}

// AccessReviewHistoryDefinitionsClientGetByIDOptions contains the optional parameters for the AccessReviewHistoryDefinitionsClient.GetByID
// method.
type AccessReviewHistoryDefinitionsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewHistoryDefinitionsClientListOptions contains the optional parameters for the AccessReviewHistoryDefinitionsClient.NewListPager
// method.
type AccessReviewHistoryDefinitionsClientListOptions struct {
	// The filter to apply on the operation. Only standard filters on definition name and created date are supported
	Filter *string
}

// AccessReviewHistoryInstance - Access Review History Definition Instance.
type AccessReviewHistoryInstance struct {
	// Access Review History Definition Instance properties.
	Properties *AccessReviewHistoryInstanceProperties

	// READ-ONLY; The access review history definition instance id.
	ID *string

	// READ-ONLY; The access review history definition instance unique id.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// AccessReviewHistoryInstanceProperties - Access Review History Definition Instance properties.
type AccessReviewHistoryInstanceProperties struct {
	// The display name for the parent history definition.
	DisplayName *string

	// Date time when history data report expires and the associated data is deleted.
	Expiration *time.Time

	// Date time when the history data report is scheduled to be generated.
	FulfilledDateTime *time.Time

	// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring
	// reports.
	ReviewHistoryPeriodEndDateTime *time.Time

	// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with
	// one-time/non-recurring reports.
	ReviewHistoryPeriodStartDateTime *time.Time

	// Date time when the history data report is scheduled to be generated.
	RunDateTime *time.Time

	// READ-ONLY; Uri which can be used to retrieve review history data. To generate this Uri, generateDownloadUri() must be called
	// for a specific accessReviewHistoryDefinitionInstance. The link expires after a 24 hour
	// period. Callers can see the expiration date time by looking at the 'se' parameter in the generated uri.
	DownloadURI *string

	// READ-ONLY; Status of the requested review history instance data. This is either requested, in-progress, done or error.
	// The state transitions are as follows - Requested -> InProgress -> Done -> Expired
	Status *AccessReviewHistoryDefinitionStatus
}

// AccessReviewHistoryScheduleSettings - Recurrence settings of an Access Review History Definition.
type AccessReviewHistoryScheduleSettings struct {
	// Access Review History Definition recurrence settings.
	Pattern *AccessReviewRecurrencePattern

	// Access Review History Definition recurrence settings.
	Range *AccessReviewRecurrenceRange
}

// AccessReviewInstance - Access Review Instance.
type AccessReviewInstance struct {
	// Access Review properties.
	Properties *AccessReviewInstanceProperties

	// READ-ONLY; The access review instance id.
	ID *string

	// READ-ONLY; The access review instance name.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// AccessReviewInstanceClientAcceptRecommendationsOptions contains the optional parameters for the AccessReviewInstanceClient.AcceptRecommendations
// method.
type AccessReviewInstanceClientAcceptRecommendationsOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstanceClientApplyDecisionsOptions contains the optional parameters for the AccessReviewInstanceClient.ApplyDecisions
// method.
type AccessReviewInstanceClientApplyDecisionsOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstanceClientResetDecisionsOptions contains the optional parameters for the AccessReviewInstanceClient.ResetDecisions
// method.
type AccessReviewInstanceClientResetDecisionsOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstanceClientSendRemindersOptions contains the optional parameters for the AccessReviewInstanceClient.SendReminders
// method.
type AccessReviewInstanceClientSendRemindersOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstanceClientStopOptions contains the optional parameters for the AccessReviewInstanceClient.Stop method.
type AccessReviewInstanceClientStopOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstanceContactedReviewersClientListOptions contains the optional parameters for the AccessReviewInstanceContactedReviewersClient.NewListPager
// method.
type AccessReviewInstanceContactedReviewersClientListOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstanceDecisionsClientListOptions contains the optional parameters for the AccessReviewInstanceDecisionsClient.NewListPager
// method.
type AccessReviewInstanceDecisionsClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// AccessReviewInstanceListResult - List of Access Review Instances.
type AccessReviewInstanceListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Access Review Instance list.
	Value []*AccessReviewInstance
}

// AccessReviewInstanceMyDecisionsClientGetByIDOptions contains the optional parameters for the AccessReviewInstanceMyDecisionsClient.GetByID
// method.
type AccessReviewInstanceMyDecisionsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstanceMyDecisionsClientListOptions contains the optional parameters for the AccessReviewInstanceMyDecisionsClient.NewListPager
// method.
type AccessReviewInstanceMyDecisionsClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// AccessReviewInstanceMyDecisionsClientPatchOptions contains the optional parameters for the AccessReviewInstanceMyDecisionsClient.Patch
// method.
type AccessReviewInstanceMyDecisionsClientPatchOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstanceProperties - Access Review Instance properties.
type AccessReviewInstanceProperties struct {
	// This is the collection of backup reviewers.
	BackupReviewers []*AccessReviewReviewer

	// The DateTime when the review instance is scheduled to end.
	EndDateTime *time.Time

	// This is the collection of reviewers.
	Reviewers []*AccessReviewReviewer

	// The DateTime when the review instance is scheduled to be start.
	StartDateTime *time.Time

	// READ-ONLY; This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned.
	// However, in some cases, the reviewers may not be assigned and instead be chosen
	// dynamically. For example managers review or self review.
	ReviewersType *AccessReviewInstanceReviewersType

	// READ-ONLY; This read-only field specifies the status of an access review instance.
	Status *AccessReviewInstanceStatus
}

// AccessReviewInstancesAssignedForMyApprovalClientGetByIDOptions contains the optional parameters for the AccessReviewInstancesAssignedForMyApprovalClient.GetByID
// method.
type AccessReviewInstancesAssignedForMyApprovalClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstancesAssignedForMyApprovalClientListOptions contains the optional parameters for the AccessReviewInstancesAssignedForMyApprovalClient.NewListPager
// method.
type AccessReviewInstancesAssignedForMyApprovalClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// AccessReviewInstancesClientCreateOptions contains the optional parameters for the AccessReviewInstancesClient.Create method.
type AccessReviewInstancesClientCreateOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstancesClientGetByIDOptions contains the optional parameters for the AccessReviewInstancesClient.GetByID
// method.
type AccessReviewInstancesClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewInstancesClientListOptions contains the optional parameters for the AccessReviewInstancesClient.NewListPager
// method.
type AccessReviewInstancesClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// AccessReviewRecurrencePattern - Recurrence Pattern of an Access Review Schedule Definition.
type AccessReviewRecurrencePattern struct {
	// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
	Interval *int32

	// The recurrence type : weekly, monthly, etc.
	Type *AccessReviewRecurrencePatternType
}

// AccessReviewRecurrenceRange - Recurrence Range of an Access Review Schedule Definition.
type AccessReviewRecurrenceRange struct {
	// The DateTime when the review is scheduled to end. Required if type is endDate
	EndDate *time.Time

	// The number of times to repeat the access review. Required and must be positive if type is numbered.
	NumberOfOccurrences *int32

	// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
	StartDate *time.Time

	// The recurrence range type. The possible values are: endDate, noEnd, numbered.
	Type *AccessReviewRecurrenceRangeType
}

// AccessReviewRecurrenceSettings - Recurrence Settings of an Access Review Schedule Definition.
type AccessReviewRecurrenceSettings struct {
	// Access Review schedule definition recurrence pattern.
	Pattern *AccessReviewRecurrencePattern

	// Access Review schedule definition recurrence range.
	Range *AccessReviewRecurrenceRange
}

// AccessReviewReviewer - Descriptor for what needs to be reviewed
type AccessReviewReviewer struct {
	// The id of the reviewer(user/servicePrincipal)
	PrincipalID *string

	// READ-ONLY; The identity type : user/servicePrincipal
	PrincipalType *AccessReviewReviewerType
}

// AccessReviewScheduleDefinition - Access Review Schedule Definition.
type AccessReviewScheduleDefinition struct {
	// Access Review properties.
	Properties *AccessReviewScheduleDefinitionProperties

	// READ-ONLY; The access review schedule definition id.
	ID *string

	// READ-ONLY; The access review schedule definition unique id.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// AccessReviewScheduleDefinitionListResult - List of Access Review Schedule Definitions.
type AccessReviewScheduleDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Access Review Schedule Definition list.
	Value []*AccessReviewScheduleDefinition
}

// AccessReviewScheduleDefinitionProperties - Access Review.
type AccessReviewScheduleDefinitionProperties struct {
	// This is the collection of backup reviewers.
	BackupReviewers []*AccessReviewReviewer

	// The description provided by the access review creator and visible to admins.
	DescriptionForAdmins *string

	// The description provided by the access review creator to be shown to reviewers.
	DescriptionForReviewers *string

	// The display name for the schedule definition.
	DisplayName *string

	// This is the collection of instances returned when one does an expand on it.
	Instances []*AccessReviewInstance

	// This is the collection of reviewers.
	Reviewers []*AccessReviewReviewer

	// Access Review Settings.
	Settings *AccessReviewScheduleSettings

	// READ-ONLY; The user or other identity who created this review.
	CreatedBy *AccessReviewActorIdentity

	// READ-ONLY; This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned.
	// However, in some cases, the reviewers may not be assigned and instead be chosen
	// dynamically. For example managers review or self review.
	ReviewersType *AccessReviewScheduleDefinitionReviewersType

	// READ-ONLY; This is used to define what to include in scope of the review. The scope definition includes the resourceId
	// and roleDefinitionId.
	Scope *AccessReviewScope

	// READ-ONLY; This read-only field specifies the status of an accessReview.
	Status *AccessReviewScheduleDefinitionStatus
}

// AccessReviewScheduleDefinitionsAssignedForMyApprovalClientListOptions contains the optional parameters for the AccessReviewScheduleDefinitionsAssignedForMyApprovalClient.NewListPager
// method.
type AccessReviewScheduleDefinitionsAssignedForMyApprovalClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// AccessReviewScheduleDefinitionsClientCreateOrUpdateByIDOptions contains the optional parameters for the AccessReviewScheduleDefinitionsClient.CreateOrUpdateByID
// method.
type AccessReviewScheduleDefinitionsClientCreateOrUpdateByIDOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewScheduleDefinitionsClientDeleteByIDOptions contains the optional parameters for the AccessReviewScheduleDefinitionsClient.DeleteByID
// method.
type AccessReviewScheduleDefinitionsClientDeleteByIDOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewScheduleDefinitionsClientGetByIDOptions contains the optional parameters for the AccessReviewScheduleDefinitionsClient.GetByID
// method.
type AccessReviewScheduleDefinitionsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewScheduleDefinitionsClientListOptions contains the optional parameters for the AccessReviewScheduleDefinitionsClient.NewListPager
// method.
type AccessReviewScheduleDefinitionsClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// AccessReviewScheduleDefinitionsClientStopOptions contains the optional parameters for the AccessReviewScheduleDefinitionsClient.Stop
// method.
type AccessReviewScheduleDefinitionsClientStopOptions struct {
	// placeholder for future optional parameters
}

// AccessReviewScheduleSettings - Settings of an Access Review.
type AccessReviewScheduleSettings struct {
	// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled.
	// If not enabled, a user must, after the review completes, apply the access review.
	AutoApplyDecisionsEnabled *bool

	// This specifies the behavior for the autoReview feature when an access review completes.
	DefaultDecision *DefaultDecisionType

	// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
	DefaultDecisionEnabled *bool

	// The duration in days for an instance.
	InstanceDurationInDays *int32

	// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
	JustificationRequiredOnApproval *bool

	// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
	MailNotificationsEnabled *bool

	// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review)
	// by default. However, in some scenarios, customers want to change how far back
	// to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration.
	// The value should be in ISO 8601 format
	// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string:
	// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	RecommendationLookBackDuration *string

	// Flag to indicate whether showing recommendations to reviewers is enabled.
	RecommendationsEnabled *bool

	// Access Review Settings.
	Recurrence *AccessReviewRecurrenceSettings

	// Flag to indicate whether sending reminder emails to reviewers are enabled.
	ReminderNotificationsEnabled *bool
}

// AccessReviewScope - Descriptor for what needs to be reviewed
type AccessReviewScope struct {
	// This is used to indicate the resource id(s) to exclude
	ExcludeResourceID *string

	// This is used to indicate the role definition id(s) to exclude
	ExcludeRoleDefinitionID *string

	// Flag to indicate whether to expand nested memberships or not.
	ExpandNestedMemberships *bool

	// Duration users are inactive for. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This
	// code can be used to convert TimeSpan to a valid interval string:
	// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	InactiveDuration *string

	// Flag to indicate whether to expand nested memberships or not.
	IncludeAccessBelowResource *bool

	// Flag to indicate whether to expand nested memberships or not.
	IncludeInheritedAccess *bool

	// READ-ONLY; The role assignment state eligible/active to review
	AssignmentState *AccessReviewScopeAssignmentState

	// READ-ONLY; The identity type user/servicePrincipal to review
	PrincipalType *AccessReviewScopePrincipalType

	// READ-ONLY; ResourceId in which this review is getting created
	ResourceID *string

	// READ-ONLY; This is used to indicate the role being reviewed
	RoleDefinitionID *string
}

// Alert - The alert.
type Alert struct {
	// Alert properties.
	Properties *AlertProperties

	// READ-ONLY; The alert ID.
	ID *string

	// READ-ONLY; The alert name.
	Name *string

	// READ-ONLY; The alert type.
	Type *string
}

// AlertConfiguration - Alert configuration.
type AlertConfiguration struct {
	// Alert configuration properties.
	Properties AlertConfigurationPropertiesClassification

	// READ-ONLY; The alert configuration ID.
	ID *string

	// READ-ONLY; The alert configuration name.
	Name *string

	// READ-ONLY; The alert configuration type.
	Type *string
}

// AlertConfigurationListResult - Alert configuration list operation result.
type AlertConfigurationListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Alert configuration list
	Value []*AlertConfiguration
}

// AlertConfigurationPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetAlertConfigurationProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AlertConfigurationProperties, *AzureRolesAssignedOutsidePimAlertConfigurationProperties, *DuplicateRoleCreatedAlertConfigurationProperties,
// - *TooManyOwnersAssignedToResourceAlertConfigurationProperties, *TooManyPermanentOwnersAssignedToResourceAlertConfigurationProperties
type AlertConfigurationPropertiesClassification interface {
	// GetAlertConfigurationProperties returns the AlertConfigurationProperties content of the underlying type.
	GetAlertConfigurationProperties() *AlertConfigurationProperties
}

// AlertConfigurationProperties - Alert configuration properties.
type AlertConfigurationProperties struct {
	// REQUIRED; The alert configuration type.
	AlertConfigurationType *string

	// True if the alert is enabled, false will disable the scanning for the specific alert.
	IsEnabled *bool

	// READ-ONLY; The alert definition.
	AlertDefinition *AlertDefinition

	// READ-ONLY; The alert definition ID.
	AlertDefinitionID *string

	// READ-ONLY; The alert scope.
	Scope *string
}

// GetAlertConfigurationProperties implements the AlertConfigurationPropertiesClassification interface for type AlertConfigurationProperties.
func (a *AlertConfigurationProperties) GetAlertConfigurationProperties() *AlertConfigurationProperties {
	return a
}

// AlertConfigurationsClientGetOptions contains the optional parameters for the AlertConfigurationsClient.Get method.
type AlertConfigurationsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AlertConfigurationsClientListForScopeOptions contains the optional parameters for the AlertConfigurationsClient.NewListForScopePager
// method.
type AlertConfigurationsClientListForScopeOptions struct {
	// placeholder for future optional parameters
}

// AlertConfigurationsClientUpdateOptions contains the optional parameters for the AlertConfigurationsClient.Update method.
type AlertConfigurationsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// AlertDefinition - Alert definition
type AlertDefinition struct {
	// Alert definition properties.
	Properties *AlertDefinitionProperties

	// READ-ONLY; The alert definition ID.
	ID *string

	// READ-ONLY; The alert definition name.
	Name *string

	// READ-ONLY; The alert definition type.
	Type *string
}

// AlertDefinitionListResult - Alert definition list operation result.
type AlertDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Alert definition list
	Value []*AlertDefinition
}

// AlertDefinitionProperties - Alert definition properties.
type AlertDefinitionProperties struct {
	// READ-ONLY; The alert description.
	Description *string

	// READ-ONLY; The alert display name.
	DisplayName *string

	// READ-ONLY; The ways to prevent the alert.
	HowToPrevent *string

	// READ-ONLY; True if the alert configuration can be configured; false, otherwise.
	IsConfigurable *bool

	// READ-ONLY; True if the alert can be remediated; false, otherwise.
	IsRemediatable *bool

	// READ-ONLY; The methods to mitigate the alert.
	MitigationSteps *string

	// READ-ONLY; The alert scope.
	Scope *string

	// READ-ONLY; Security impact of the alert.
	SecurityImpact *string

	// READ-ONLY; Severity level of the alert.
	SeverityLevel *SeverityLevel
}

// AlertDefinitionsClientGetOptions contains the optional parameters for the AlertDefinitionsClient.Get method.
type AlertDefinitionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AlertDefinitionsClientListForScopeOptions contains the optional parameters for the AlertDefinitionsClient.NewListForScopePager
// method.
type AlertDefinitionsClientListForScopeOptions struct {
	// placeholder for future optional parameters
}

// AlertIncident - Alert incident
type AlertIncident struct {
	// Alert incident properties.
	Properties AlertIncidentPropertiesClassification

	// READ-ONLY; The alert incident ID.
	ID *string

	// READ-ONLY; The alert incident name.
	Name *string

	// READ-ONLY; The alert incident type.
	Type *string
}

// AlertIncidentListResult - Alert incident list operation result.
type AlertIncidentListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Alert incident list
	Value []*AlertIncident
}

// AlertIncidentPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetAlertIncidentProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AlertIncidentProperties, *AzureRolesAssignedOutsidePimAlertIncidentProperties, *DuplicateRoleCreatedAlertIncidentProperties,
// - *TooManyOwnersAssignedToResourceAlertIncidentProperties, *TooManyPermanentOwnersAssignedToResourceAlertIncidentProperties
type AlertIncidentPropertiesClassification interface {
	// GetAlertIncidentProperties returns the AlertIncidentProperties content of the underlying type.
	GetAlertIncidentProperties() *AlertIncidentProperties
}

// AlertIncidentProperties - Alert incident properties
type AlertIncidentProperties struct {
	// REQUIRED; The alert incident type.
	AlertIncidentType *string
}

// GetAlertIncidentProperties implements the AlertIncidentPropertiesClassification interface for type AlertIncidentProperties.
func (a *AlertIncidentProperties) GetAlertIncidentProperties() *AlertIncidentProperties { return a }

// AlertIncidentsClientGetOptions contains the optional parameters for the AlertIncidentsClient.Get method.
type AlertIncidentsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AlertIncidentsClientListForScopeOptions contains the optional parameters for the AlertIncidentsClient.NewListForScopePager
// method.
type AlertIncidentsClientListForScopeOptions struct {
	// placeholder for future optional parameters
}

// AlertIncidentsClientRemediateOptions contains the optional parameters for the AlertIncidentsClient.Remediate method.
type AlertIncidentsClientRemediateOptions struct {
	// placeholder for future optional parameters
}

// AlertListResult - Alert list operation result.
type AlertListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// Alert list
	Value []*Alert
}

// AlertOperationClientGetOptions contains the optional parameters for the AlertOperationClient.Get method.
type AlertOperationClientGetOptions struct {
	// placeholder for future optional parameters
}

// AlertOperationResult - Alert operation result
type AlertOperationResult struct {
	// READ-ONLY; The created date of the alert operation.
	CreatedDateTime *time.Time

	// READ-ONLY; The id of the alert operation.
	ID *string

	// READ-ONLY; The last action date of the alert operation.
	LastActionDateTime *time.Time

	// READ-ONLY; The location of the alert associated with the operation.
	ResourceLocation *string

	// READ-ONLY; The status of the alert operation.
	Status *string

	// READ-ONLY; The status detail of the alert operation.
	StatusDetail *string
}

// AlertProperties - Alert properties.
type AlertProperties struct {
	// False by default; true if the alert is active.
	IsActive *bool

	// READ-ONLY; The alert configuration.
	AlertConfiguration *AlertConfiguration

	// READ-ONLY; The alert definition.
	AlertDefinition *AlertDefinition

	// READ-ONLY; The alert incidents.
	AlertIncidents []*AlertIncident

	// READ-ONLY; The number of generated incidents of the alert.
	IncidentCount *int32

	// READ-ONLY; The date time when the alert configuration was updated or new incidents were generated.
	LastModifiedDateTime *time.Time

	// READ-ONLY; The date time when the alert was last scanned.
	LastScannedDateTime *time.Time

	// READ-ONLY; The alert scope.
	Scope *string
}

// AlertsClientBeginRefreshAllOptions contains the optional parameters for the AlertsClient.BeginRefreshAll method.
type AlertsClientBeginRefreshAllOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// AlertsClientBeginRefreshOptions contains the optional parameters for the AlertsClient.BeginRefresh method.
type AlertsClientBeginRefreshOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// AlertsClientGetOptions contains the optional parameters for the AlertsClient.Get method.
type AlertsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AlertsClientListForScopeOptions contains the optional parameters for the AlertsClient.NewListForScopePager method.
type AlertsClientListForScopeOptions struct {
	// placeholder for future optional parameters
}

// AlertsClientUpdateOptions contains the optional parameters for the AlertsClient.Update method.
type AlertsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// AzureRolesAssignedOutsidePimAlertConfigurationProperties - The Azure roles assigned outside PIM alert configuration properties.
type AzureRolesAssignedOutsidePimAlertConfigurationProperties struct {
	// REQUIRED; The alert configuration type.
	AlertConfigurationType *string

	// True if the alert is enabled, false will disable the scanning for the specific alert.
	IsEnabled *bool

	// READ-ONLY; The alert definition.
	AlertDefinition *AlertDefinition

	// READ-ONLY; The alert definition ID.
	AlertDefinitionID *string

	// READ-ONLY; The alert scope.
	Scope *string
}

// GetAlertConfigurationProperties implements the AlertConfigurationPropertiesClassification interface for type AzureRolesAssignedOutsidePimAlertConfigurationProperties.
func (a *AzureRolesAssignedOutsidePimAlertConfigurationProperties) GetAlertConfigurationProperties() *AlertConfigurationProperties {
	return &AlertConfigurationProperties{
		AlertDefinitionID:      a.AlertDefinitionID,
		Scope:                  a.Scope,
		IsEnabled:              a.IsEnabled,
		AlertConfigurationType: a.AlertConfigurationType,
		AlertDefinition:        a.AlertDefinition,
	}
}

// AzureRolesAssignedOutsidePimAlertIncidentProperties - Azure roles assigned outside PIM alert incident properties.
type AzureRolesAssignedOutsidePimAlertIncidentProperties struct {
	// REQUIRED; The alert incident type.
	AlertIncidentType *string

	// READ-ONLY; The assignee display name.
	AssigneeDisplayName *string

	// READ-ONLY; The assignee ID.
	AssigneeID *string

	// READ-ONLY; The assignee user principal name.
	AssigneeUserPrincipalName *string

	// READ-ONLY; The date the assignment was activated.
	AssignmentActivatedDate *time.Time

	// READ-ONLY; The requestor display name.
	RequestorDisplayName *string

	// READ-ONLY; The requestor ID.
	RequestorID *string

	// READ-ONLY; The requestor user principal name.
	RequestorUserPrincipalName *string

	// READ-ONLY; The role definition ID.
	RoleDefinitionID *string

	// READ-ONLY; The role display name.
	RoleDisplayName *string

	// READ-ONLY; The role template ID.
	RoleTemplateID *string
}

// GetAlertIncidentProperties implements the AlertIncidentPropertiesClassification interface for type AzureRolesAssignedOutsidePimAlertIncidentProperties.
func (a *AzureRolesAssignedOutsidePimAlertIncidentProperties) GetAlertIncidentProperties() *AlertIncidentProperties {
	return &AlertIncidentProperties{
		AlertIncidentType: a.AlertIncidentType,
	}
}

// DuplicateRoleCreatedAlertConfigurationProperties - The duplicate role created alert configuration.
type DuplicateRoleCreatedAlertConfigurationProperties struct {
	// REQUIRED; The alert configuration type.
	AlertConfigurationType *string

	// True if the alert is enabled, false will disable the scanning for the specific alert.
	IsEnabled *bool

	// READ-ONLY; The alert definition.
	AlertDefinition *AlertDefinition

	// READ-ONLY; The alert definition ID.
	AlertDefinitionID *string

	// READ-ONLY; The alert scope.
	Scope *string
}

// GetAlertConfigurationProperties implements the AlertConfigurationPropertiesClassification interface for type DuplicateRoleCreatedAlertConfigurationProperties.
func (d *DuplicateRoleCreatedAlertConfigurationProperties) GetAlertConfigurationProperties() *AlertConfigurationProperties {
	return &AlertConfigurationProperties{
		AlertDefinitionID:      d.AlertDefinitionID,
		Scope:                  d.Scope,
		IsEnabled:              d.IsEnabled,
		AlertConfigurationType: d.AlertConfigurationType,
		AlertDefinition:        d.AlertDefinition,
	}
}

// DuplicateRoleCreatedAlertIncidentProperties - Duplicate role created alert incident properties.
type DuplicateRoleCreatedAlertIncidentProperties struct {
	// REQUIRED; The alert incident type.
	AlertIncidentType *string

	// READ-ONLY; The duplicate roles.
	DuplicateRoles *string

	// READ-ONLY; The reason for the incident.
	Reason *string

	// READ-ONLY; The role name.
	RoleName *string
}

// GetAlertIncidentProperties implements the AlertIncidentPropertiesClassification interface for type DuplicateRoleCreatedAlertIncidentProperties.
func (d *DuplicateRoleCreatedAlertIncidentProperties) GetAlertIncidentProperties() *AlertIncidentProperties {
	return &AlertIncidentProperties{
		AlertIncidentType: d.AlertIncidentType,
	}
}

// ErrorDefinition - Error description and code explaining why an operation failed.
type ErrorDefinition struct {
	// Error of the list gateway status.
	Error *ErrorDefinitionProperties
}

// ErrorDefinitionProperties - Error description and code explaining why an operation failed.
type ErrorDefinitionProperties struct {
	// Error code of list gateway.
	Code *string

	// READ-ONLY; Description of the error.
	Message *string
}

// Operation - The definition of a Microsoft.Authorization operation.
type Operation struct {
	// Display of the operation
	Display *OperationDisplay

	// Indicates whether the operation is a data action
	IsDataAction *bool

	// Name of the operation
	Name *string

	// Origin of the operation
	Origin *string
}

// OperationDisplay - The display information for a Microsoft.Authorization operation.
type OperationDisplay struct {
	// READ-ONLY; The description for the operation.
	Description *string

	// READ-ONLY; The operation that users can perform.
	Operation *string

	// READ-ONLY; The resource provider name: Microsoft.Authorization.
	Provider *string

	// READ-ONLY; The resource on which the operation is performed.
	Resource *string
}

// OperationListResult - The result of a request to list Microsoft.Authorization operations.
type OperationListResult struct {
	// The URI that can be used to request the next set of paged results.
	NextLink *string

	// The collection value.
	Value []*Operation
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.NewListPager method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// RecordAllDecisionsProperties - Record All Decisions payload.
type RecordAllDecisionsProperties struct {
	// The decision to make. Approvers can take action of Approve/Deny
	Decision *RecordAllDecisionsResult

	// Justification provided by approvers for their action
	Justification *string

	// READ-ONLY; The id of principal which needs to be approved/denied.
	PrincipalID *string

	// READ-ONLY; The id of resource which needs to be approved/denied.
	ResourceID *string
}

// ScopeAccessReviewDefaultSettingsClientGetOptions contains the optional parameters for the ScopeAccessReviewDefaultSettingsClient.Get
// method.
type ScopeAccessReviewDefaultSettingsClientGetOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewDefaultSettingsClientPutOptions contains the optional parameters for the ScopeAccessReviewDefaultSettingsClient.Put
// method.
type ScopeAccessReviewDefaultSettingsClientPutOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewHistoryDefinitionClientCreateOptions contains the optional parameters for the ScopeAccessReviewHistoryDefinitionClient.Create
// method.
type ScopeAccessReviewHistoryDefinitionClientCreateOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewHistoryDefinitionClientDeleteByIDOptions contains the optional parameters for the ScopeAccessReviewHistoryDefinitionClient.DeleteByID
// method.
type ScopeAccessReviewHistoryDefinitionClientDeleteByIDOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewHistoryDefinitionInstanceClientGenerateDownloadURIOptions contains the optional parameters for the ScopeAccessReviewHistoryDefinitionInstanceClient.GenerateDownloadURI
// method.
type ScopeAccessReviewHistoryDefinitionInstanceClientGenerateDownloadURIOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewHistoryDefinitionInstancesClientListOptions contains the optional parameters for the ScopeAccessReviewHistoryDefinitionInstancesClient.NewListPager
// method.
type ScopeAccessReviewHistoryDefinitionInstancesClientListOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewHistoryDefinitionsClientGetByIDOptions contains the optional parameters for the ScopeAccessReviewHistoryDefinitionsClient.GetByID
// method.
type ScopeAccessReviewHistoryDefinitionsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewHistoryDefinitionsClientListOptions contains the optional parameters for the ScopeAccessReviewHistoryDefinitionsClient.NewListPager
// method.
type ScopeAccessReviewHistoryDefinitionsClientListOptions struct {
	// The filter to apply on the operation. Only standard filters on definition name and created date are supported
	Filter *string
}

// ScopeAccessReviewInstanceClientApplyDecisionsOptions contains the optional parameters for the ScopeAccessReviewInstanceClient.ApplyDecisions
// method.
type ScopeAccessReviewInstanceClientApplyDecisionsOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewInstanceClientRecordAllDecisionsOptions contains the optional parameters for the ScopeAccessReviewInstanceClient.RecordAllDecisions
// method.
type ScopeAccessReviewInstanceClientRecordAllDecisionsOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewInstanceClientResetDecisionsOptions contains the optional parameters for the ScopeAccessReviewInstanceClient.ResetDecisions
// method.
type ScopeAccessReviewInstanceClientResetDecisionsOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewInstanceClientSendRemindersOptions contains the optional parameters for the ScopeAccessReviewInstanceClient.SendReminders
// method.
type ScopeAccessReviewInstanceClientSendRemindersOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewInstanceClientStopOptions contains the optional parameters for the ScopeAccessReviewInstanceClient.Stop
// method.
type ScopeAccessReviewInstanceClientStopOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewInstanceContactedReviewersClientListOptions contains the optional parameters for the ScopeAccessReviewInstanceContactedReviewersClient.NewListPager
// method.
type ScopeAccessReviewInstanceContactedReviewersClientListOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewInstanceDecisionsClientListOptions contains the optional parameters for the ScopeAccessReviewInstanceDecisionsClient.NewListPager
// method.
type ScopeAccessReviewInstanceDecisionsClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// ScopeAccessReviewInstancesClientCreateOptions contains the optional parameters for the ScopeAccessReviewInstancesClient.Create
// method.
type ScopeAccessReviewInstancesClientCreateOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewInstancesClientGetByIDOptions contains the optional parameters for the ScopeAccessReviewInstancesClient.GetByID
// method.
type ScopeAccessReviewInstancesClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewInstancesClientListOptions contains the optional parameters for the ScopeAccessReviewInstancesClient.NewListPager
// method.
type ScopeAccessReviewInstancesClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// ScopeAccessReviewScheduleDefinitionsClientCreateOrUpdateByIDOptions contains the optional parameters for the ScopeAccessReviewScheduleDefinitionsClient.CreateOrUpdateByID
// method.
type ScopeAccessReviewScheduleDefinitionsClientCreateOrUpdateByIDOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewScheduleDefinitionsClientDeleteByIDOptions contains the optional parameters for the ScopeAccessReviewScheduleDefinitionsClient.DeleteByID
// method.
type ScopeAccessReviewScheduleDefinitionsClientDeleteByIDOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewScheduleDefinitionsClientGetByIDOptions contains the optional parameters for the ScopeAccessReviewScheduleDefinitionsClient.GetByID
// method.
type ScopeAccessReviewScheduleDefinitionsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// ScopeAccessReviewScheduleDefinitionsClientListOptions contains the optional parameters for the ScopeAccessReviewScheduleDefinitionsClient.NewListPager
// method.
type ScopeAccessReviewScheduleDefinitionsClientListOptions struct {
	// The filter to apply on the operation. Other than standard filters, one custom filter option is supported : 'assignedToMeToReview()'.
	// When one specified $filter=assignedToMeToReview(), only items that
	// are assigned to the calling user to review are returned
	Filter *string
}

// ScopeAccessReviewScheduleDefinitionsClientStopOptions contains the optional parameters for the ScopeAccessReviewScheduleDefinitionsClient.Stop
// method.
type ScopeAccessReviewScheduleDefinitionsClientStopOptions struct {
	// placeholder for future optional parameters
}

// TenantLevelAccessReviewInstanceContactedReviewersClientListOptions contains the optional parameters for the TenantLevelAccessReviewInstanceContactedReviewersClient.NewListPager
// method.
type TenantLevelAccessReviewInstanceContactedReviewersClientListOptions struct {
	// placeholder for future optional parameters
}

// TooManyOwnersAssignedToResourceAlertConfigurationProperties - Too many owners assigned to resource alert configuration
// properties.
type TooManyOwnersAssignedToResourceAlertConfigurationProperties struct {
	// REQUIRED; The alert configuration type.
	AlertConfigurationType *string

	// True if the alert is enabled, false will disable the scanning for the specific alert.
	IsEnabled *bool

	// The threshold number of owners.
	ThresholdNumberOfOwners *int32

	// The threshold percentage of owners out of all role members.
	ThresholdPercentageOfOwnersOutOfAllRoleMembers *int32

	// READ-ONLY; The alert definition.
	AlertDefinition *AlertDefinition

	// READ-ONLY; The alert definition ID.
	AlertDefinitionID *string

	// READ-ONLY; The alert scope.
	Scope *string
}

// GetAlertConfigurationProperties implements the AlertConfigurationPropertiesClassification interface for type TooManyOwnersAssignedToResourceAlertConfigurationProperties.
func (t *TooManyOwnersAssignedToResourceAlertConfigurationProperties) GetAlertConfigurationProperties() *AlertConfigurationProperties {
	return &AlertConfigurationProperties{
		AlertDefinitionID:      t.AlertDefinitionID,
		Scope:                  t.Scope,
		IsEnabled:              t.IsEnabled,
		AlertConfigurationType: t.AlertConfigurationType,
		AlertDefinition:        t.AlertDefinition,
	}
}

// TooManyOwnersAssignedToResourceAlertIncidentProperties - Too many owners assigned to resource alert incident properties.
type TooManyOwnersAssignedToResourceAlertIncidentProperties struct {
	// REQUIRED; The alert incident type.
	AlertIncidentType *string

	// READ-ONLY; The assignee name.
	AssigneeName *string

	// READ-ONLY; The assignee type.
	AssigneeType *string
}

// GetAlertIncidentProperties implements the AlertIncidentPropertiesClassification interface for type TooManyOwnersAssignedToResourceAlertIncidentProperties.
func (t *TooManyOwnersAssignedToResourceAlertIncidentProperties) GetAlertIncidentProperties() *AlertIncidentProperties {
	return &AlertIncidentProperties{
		AlertIncidentType: t.AlertIncidentType,
	}
}

// TooManyPermanentOwnersAssignedToResourceAlertConfigurationProperties - Too many permanent owners assigned to resource alert
// configuration properties.
type TooManyPermanentOwnersAssignedToResourceAlertConfigurationProperties struct {
	// REQUIRED; The alert configuration type.
	AlertConfigurationType *string

	// True if the alert is enabled, false will disable the scanning for the specific alert.
	IsEnabled *bool

	// The threshold number of permanent owners.
	ThresholdNumberOfPermanentOwners *int32

	// The threshold percentage of permanent owners out of all owners.
	ThresholdPercentageOfPermanentOwnersOutOfAllOwners *int32

	// READ-ONLY; The alert definition.
	AlertDefinition *AlertDefinition

	// READ-ONLY; The alert definition ID.
	AlertDefinitionID *string

	// READ-ONLY; The alert scope.
	Scope *string
}

// GetAlertConfigurationProperties implements the AlertConfigurationPropertiesClassification interface for type TooManyPermanentOwnersAssignedToResourceAlertConfigurationProperties.
func (t *TooManyPermanentOwnersAssignedToResourceAlertConfigurationProperties) GetAlertConfigurationProperties() *AlertConfigurationProperties {
	return &AlertConfigurationProperties{
		AlertDefinitionID:      t.AlertDefinitionID,
		Scope:                  t.Scope,
		IsEnabled:              t.IsEnabled,
		AlertConfigurationType: t.AlertConfigurationType,
		AlertDefinition:        t.AlertDefinition,
	}
}

// TooManyPermanentOwnersAssignedToResourceAlertIncidentProperties - Too many permanent owners assigned to resource alert
// incident properties.
type TooManyPermanentOwnersAssignedToResourceAlertIncidentProperties struct {
	// REQUIRED; The alert incident type.
	AlertIncidentType *string

	// READ-ONLY; The assignee name.
	AssigneeName *string

	// READ-ONLY; The assignee type.
	AssigneeType *string
}

// GetAlertIncidentProperties implements the AlertIncidentPropertiesClassification interface for type TooManyPermanentOwnersAssignedToResourceAlertIncidentProperties.
func (t *TooManyPermanentOwnersAssignedToResourceAlertIncidentProperties) GetAlertIncidentProperties() *AlertIncidentProperties {
	return &AlertIncidentProperties{
		AlertIncidentType: t.AlertIncidentType,
	}
}
