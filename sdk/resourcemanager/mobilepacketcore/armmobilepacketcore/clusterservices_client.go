// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armmobilepacketcore

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ClusterServicesClient contains the methods for the ClusterServices group.
// Don't use this type directly, use NewClusterServicesClient() instead.
type ClusterServicesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewClusterServicesClient creates a new instance of ClusterServicesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewClusterServicesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ClusterServicesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ClusterServicesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a ClusterServiceResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterServiceName - The name of the Cluster Service
//   - resource - Resource create parameters.
//   - options - ClusterServicesClientCreateOrUpdateOptions contains the optional parameters for the ClusterServicesClient.CreateOrUpdate
//     method.
func (client *ClusterServicesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, clusterServiceName string, resource ClusterServiceResource, options *ClusterServicesClientCreateOrUpdateOptions) (ClusterServicesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "ClusterServicesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, clusterServiceName, resource, options)
	if err != nil {
		return ClusterServicesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClusterServicesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return ClusterServicesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ClusterServicesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, clusterServiceName string, resource ClusterServiceResource, _ *ClusterServicesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/clusterServices/{clusterServiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterServiceName == "" {
		return nil, errors.New("parameter clusterServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterServiceName}", url.PathEscape(clusterServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ClusterServicesClient) createOrUpdateHandleResponse(resp *http.Response) (ClusterServicesClientCreateOrUpdateResponse, error) {
	result := ClusterServicesClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return ClusterServicesClientCreateOrUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClusterServiceResource); err != nil {
		return ClusterServicesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete a ClusterServiceResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterServiceName - The name of the Cluster Service
//   - options - ClusterServicesClientBeginDeleteOptions contains the optional parameters for the ClusterServicesClient.BeginDelete
//     method.
func (client *ClusterServicesClient) BeginDelete(ctx context.Context, resourceGroupName string, clusterServiceName string, options *ClusterServicesClientBeginDeleteOptions) (*runtime.Poller[ClusterServicesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, clusterServiceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ClusterServicesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ClusterServicesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a ClusterServiceResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-15-preview
func (client *ClusterServicesClient) deleteOperation(ctx context.Context, resourceGroupName string, clusterServiceName string, options *ClusterServicesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "ClusterServicesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, clusterServiceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ClusterServicesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, clusterServiceName string, _ *ClusterServicesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/clusterServices/{clusterServiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterServiceName == "" {
		return nil, errors.New("parameter clusterServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterServiceName}", url.PathEscape(clusterServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a ClusterServiceResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterServiceName - The name of the Cluster Service
//   - options - ClusterServicesClientGetOptions contains the optional parameters for the ClusterServicesClient.Get method.
func (client *ClusterServicesClient) Get(ctx context.Context, resourceGroupName string, clusterServiceName string, options *ClusterServicesClientGetOptions) (ClusterServicesClientGetResponse, error) {
	var err error
	const operationName = "ClusterServicesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, clusterServiceName, options)
	if err != nil {
		return ClusterServicesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClusterServicesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ClusterServicesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ClusterServicesClient) getCreateRequest(ctx context.Context, resourceGroupName string, clusterServiceName string, _ *ClusterServicesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/clusterServices/{clusterServiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterServiceName == "" {
		return nil, errors.New("parameter clusterServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterServiceName}", url.PathEscape(clusterServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ClusterServicesClient) getHandleResponse(resp *http.Response) (ClusterServicesClientGetResponse, error) {
	result := ClusterServicesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClusterServiceResource); err != nil {
		return ClusterServicesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List all Cluster Services by Resource Group.
//
// Generated from API version 2023-10-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - ClusterServicesClientListByResourceGroupOptions contains the optional parameters for the ClusterServicesClient.NewListByResourceGroupPager
//     method.
func (client *ClusterServicesClient) NewListByResourceGroupPager(resourceGroupName string, options *ClusterServicesClientListByResourceGroupOptions) *runtime.Pager[ClusterServicesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[ClusterServicesClientListByResourceGroupResponse]{
		More: func(page ClusterServicesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ClusterServicesClientListByResourceGroupResponse) (ClusterServicesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ClusterServicesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return ClusterServicesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *ClusterServicesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *ClusterServicesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/clusterServices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *ClusterServicesClient) listByResourceGroupHandleResponse(resp *http.Response) (ClusterServicesClientListByResourceGroupResponse, error) {
	result := ClusterServicesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClusterServiceResourceListResult); err != nil {
		return ClusterServicesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List all Cluster Services by Subscription ID.
//
// Generated from API version 2023-10-15-preview
//   - options - ClusterServicesClientListBySubscriptionOptions contains the optional parameters for the ClusterServicesClient.NewListBySubscriptionPager
//     method.
func (client *ClusterServicesClient) NewListBySubscriptionPager(options *ClusterServicesClientListBySubscriptionOptions) *runtime.Pager[ClusterServicesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[ClusterServicesClientListBySubscriptionResponse]{
		More: func(page ClusterServicesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ClusterServicesClientListBySubscriptionResponse) (ClusterServicesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ClusterServicesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ClusterServicesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *ClusterServicesClient) listBySubscriptionCreateRequest(ctx context.Context, _ *ClusterServicesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MobilePacketCore/clusterServices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *ClusterServicesClient) listBySubscriptionHandleResponse(resp *http.Response) (ClusterServicesClientListBySubscriptionResponse, error) {
	result := ClusterServicesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClusterServiceResourceListResult); err != nil {
		return ClusterServicesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// UpdateTags - Update a ClusterServiceResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterServiceName - The name of the Cluster Service
//   - properties - The resource properties to be updated.
//   - options - ClusterServicesClientUpdateTagsOptions contains the optional parameters for the ClusterServicesClient.UpdateTags
//     method.
func (client *ClusterServicesClient) UpdateTags(ctx context.Context, resourceGroupName string, clusterServiceName string, properties ClusterServiceResourceTagsUpdate, options *ClusterServicesClientUpdateTagsOptions) (ClusterServicesClientUpdateTagsResponse, error) {
	var err error
	const operationName = "ClusterServicesClient.UpdateTags"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateTagsCreateRequest(ctx, resourceGroupName, clusterServiceName, properties, options)
	if err != nil {
		return ClusterServicesClientUpdateTagsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClusterServicesClientUpdateTagsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ClusterServicesClientUpdateTagsResponse{}, err
	}
	resp, err := client.updateTagsHandleResponse(httpResp)
	return resp, err
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *ClusterServicesClient) updateTagsCreateRequest(ctx context.Context, resourceGroupName string, clusterServiceName string, properties ClusterServiceResourceTagsUpdate, _ *ClusterServicesClientUpdateTagsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/clusterServices/{clusterServiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterServiceName == "" {
		return nil, errors.New("parameter clusterServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterServiceName}", url.PathEscape(clusterServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *ClusterServicesClient) updateTagsHandleResponse(resp *http.Response) (ClusterServicesClientUpdateTagsResponse, error) {
	result := ClusterServicesClientUpdateTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClusterServiceResource); err != nil {
		return ClusterServicesClientUpdateTagsResponse{}, err
	}
	return result, nil
}
