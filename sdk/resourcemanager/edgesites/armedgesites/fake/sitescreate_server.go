//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgesites/armedgesites"
	"net/http"
	"net/url"
	"regexp"
)

// SitesCreateServer is a fake server for instances of the armedgesites.SitesCreateClient type.
type SitesCreateServer struct {
	// BeginAtSubscription is the fake for method SitesCreateClient.BeginAtSubscription
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginAtSubscription func(ctx context.Context, site armedgesites.Site, options *armedgesites.SitesCreateClientBeginAtSubscriptionOptions) (resp azfake.PollerResponder[armedgesites.SitesCreateClientAtSubscriptionResponse], errResp azfake.ErrorResponder)

	// BeginByResourceGroup is the fake for method SitesCreateClient.BeginByResourceGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginByResourceGroup func(ctx context.Context, resourceGroupName string, site armedgesites.Site, options *armedgesites.SitesCreateClientBeginByResourceGroupOptions) (resp azfake.PollerResponder[armedgesites.SitesCreateClientByResourceGroupResponse], errResp azfake.ErrorResponder)
}

// NewSitesCreateServerTransport creates a new instance of SitesCreateServerTransport with the provided implementation.
// The returned SitesCreateServerTransport instance is connected to an instance of armedgesites.SitesCreateClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSitesCreateServerTransport(srv *SitesCreateServer) *SitesCreateServerTransport {
	return &SitesCreateServerTransport{
		srv:                  srv,
		beginAtSubscription:  newTracker[azfake.PollerResponder[armedgesites.SitesCreateClientAtSubscriptionResponse]](),
		beginByResourceGroup: newTracker[azfake.PollerResponder[armedgesites.SitesCreateClientByResourceGroupResponse]](),
	}
}

// SitesCreateServerTransport connects instances of armedgesites.SitesCreateClient to instances of SitesCreateServer.
// Don't use this type directly, use NewSitesCreateServerTransport instead.
type SitesCreateServerTransport struct {
	srv                  *SitesCreateServer
	beginAtSubscription  *tracker[azfake.PollerResponder[armedgesites.SitesCreateClientAtSubscriptionResponse]]
	beginByResourceGroup *tracker[azfake.PollerResponder[armedgesites.SitesCreateClientByResourceGroupResponse]]
}

// Do implements the policy.Transporter interface for SitesCreateServerTransport.
func (s *SitesCreateServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SitesCreateClient.BeginAtSubscription":
		resp, err = s.dispatchBeginAtSubscription(req)
	case "SitesCreateClient.BeginByResourceGroup":
		resp, err = s.dispatchBeginByResourceGroup(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SitesCreateServerTransport) dispatchBeginAtSubscription(req *http.Request) (*http.Response, error) {
	if s.srv.BeginAtSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginAtSubscription not implemented")}
	}
	beginAtSubscription := s.beginAtSubscription.get(req)
	if beginAtSubscription == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armedgesites.Site](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginAtSubscription(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginAtSubscription = &respr
		s.beginAtSubscription.add(req, beginAtSubscription)
	}

	resp, err := server.PollerResponderNext(beginAtSubscription, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		s.beginAtSubscription.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginAtSubscription) {
		s.beginAtSubscription.remove(req)
	}

	return resp, nil
}

func (s *SitesCreateServerTransport) dispatchBeginByResourceGroup(req *http.Request) (*http.Response, error) {
	if s.srv.BeginByResourceGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginByResourceGroup not implemented")}
	}
	beginByResourceGroup := s.beginByResourceGroup.get(req)
	if beginByResourceGroup == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armedgesites.Site](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginByResourceGroup(req.Context(), resourceGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginByResourceGroup = &respr
		s.beginByResourceGroup.add(req, beginByResourceGroup)
	}

	resp, err := server.PollerResponderNext(beginByResourceGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		s.beginByResourceGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginByResourceGroup) {
		s.beginByResourceGroup.remove(req)
	}

	return resp, nil
}
