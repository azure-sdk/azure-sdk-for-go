// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import "time"

// AccessPolicyEntry - An identity that have access to the key vault. All identities in the array must use the same tenant
// ID as the key vault's tenant ID.
type AccessPolicyEntry struct {
	// REQUIRED; The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
	// The object ID must be unique for the list of access policies.
	ObjectID *string

	// REQUIRED; Permissions the identity has for keys, secrets and certificates.
	Permissions *Permissions

	// REQUIRED; The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantID *string

	// Application ID of the client making request on behalf of a principal
	ApplicationID *string
}

// CheckMhsmNameAvailabilityParameters - The parameters used to check the availability of the managed hsm name.
type CheckMhsmNameAvailabilityParameters struct {
	// REQUIRED; The managed hsm name.
	Name *string
}

// CheckMhsmNameAvailabilityResult - The CheckMhsmNameAvailability operation response.
type CheckMhsmNameAvailabilityResult struct {
	// READ-ONLY; An error message explaining the Reason value in more detail.
	Message *string

	// READ-ONLY; A boolean value that indicates whether the name is available for you to use. If true, the name is available.
	// If false, the name has already been taken or is invalid and cannot be used.
	NameAvailable *bool

	// READ-ONLY; The reason that a managed hsm name could not be used. The reason element is only returned if NameAvailable is
	// false.
	Reason *Reason
}

// CheckNameAvailabilityResult - The CheckNameAvailability operation response.
type CheckNameAvailabilityResult struct {
	// READ-ONLY; An error message explaining the Reason value in more detail.
	Message *string

	// READ-ONLY; A boolean value that indicates whether the name is available for you to use. If true, the name is available.
	// If false, the name has already been taken or is invalid and cannot be used.
	NameAvailable *bool

	// READ-ONLY; The reason that a vault name could not be used. The Reason element is only returned if NameAvailable is false.
	Reason *KeyVaultNameUnavailableReason
}

// DeletedManagedHsm - Concrete proxy resource types can be created by aliasing this type using a specific property type.
type DeletedManagedHsm struct {
	// Properties of the deleted managed HSM
	Properties *DeletedManagedHsmProperties

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DeletedManagedHsmListResult - The response of a DeletedManagedHsm list operation.
type DeletedManagedHsmListResult struct {
	// REQUIRED; The DeletedManagedHsm items on this page
	Value []*DeletedManagedHsm

	// The link to the next page of items
	NextLink *string
}

// DeletedManagedHsmProperties - Properties of the deleted managed HSM.
type DeletedManagedHsmProperties struct {
	// READ-ONLY; The deleted date.
	DeletionDate *time.Time

	// READ-ONLY; The location of the original managed HSM.
	Location *string

	// READ-ONLY; The resource id of the original managed HSM.
	MhsmID *string

	// READ-ONLY; Purge protection status of the original managed HSM.
	PurgeProtectionEnabled *bool

	// READ-ONLY; The scheduled purged date.
	ScheduledPurgeDate *time.Time

	// READ-ONLY; Tags of the original managed HSM.
	Tags map[string]*string
}

// DeletedVault - Deleted vault information with extended details.
type DeletedVault struct {
	// Properties of the vault
	Properties *DeletedVaultProperties

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DeletedVaultListResult - The response of a DeletedVault list operation.
type DeletedVaultListResult struct {
	// REQUIRED; The DeletedVault items on this page
	Value []*DeletedVault

	// The link to the next page of items
	NextLink *string
}

// DeletedVaultProperties - Properties of the deleted vault.
type DeletedVaultProperties struct {
	// READ-ONLY; The deleted date.
	DeletionDate *time.Time

	// READ-ONLY; The location of the original vault.
	Location *string

	// READ-ONLY; Purge protection status of the original vault.
	PurgeProtectionEnabled *bool

	// READ-ONLY; The scheduled purged date.
	ScheduledPurgeDate *time.Time

	// READ-ONLY; Tags of the original vault.
	Tags map[string]*string

	// READ-ONLY; The resource id of the original vault.
	VaultID *string
}

// IPRule - A rule governing the accessibility of a vault from a specific ip address or ip range.
type IPRule struct {
	// REQUIRED; An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses
	// that start with 124.56.78).
	Value *string
}

// ManagedHSMSecurityDomainProperties - The security domain properties of the managed hsm.
type ManagedHSMSecurityDomainProperties struct {
	// READ-ONLY; Activation Status
	ActivationStatus *ActivationStatus

	// READ-ONLY; Activation Status Message.
	ActivationStatusMessage *string
}

// ManagedHsm - Resource information with extended details.
type ManagedHsm struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Properties of the managed HSM
	Properties *ManagedHsmProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ManagedHsmListResult - The response of a ManagedHsm list operation.
type ManagedHsmListResult struct {
	// REQUIRED; The ManagedHsm items on this page
	Value []*ManagedHsm

	// The link to the next page of items
	NextLink *string
}

// ManagedHsmProperties - Properties of the managed HSM Pool
type ManagedHsmProperties struct {
	// The create mode to indicate whether the resource is being created or is being recovered from a deleted resource.
	CreateMode *CreateMode

	// Property specifying whether protection against purge is enabled for this managed HSM pool. Setting this property to true
	// activates protection against purge for this managed HSM pool and its content -
	// only the Managed HSM service may initiate a hard, irrecoverable deletion. Enabling this functionality is irreversible.
	EnablePurgeProtection *bool

	// Property to specify whether the 'soft delete' functionality is enabled for this managed HSM pool. Soft delete is enabled
	// by default for all managed HSMs and is immutable.
	EnableSoftDelete *bool

	// Array of initial administrators object ids for this managed hsm pool.
	InitialAdminObjectIDs []*string

	// Rules governing the accessibility of the key vault from specific network locations.
	NetworkACLs *MhsmNetworkRuleSet

	// Control permission to the managed HSM from public networks.
	PublicNetworkAccess *PublicNetworkAccess

	// List of all regions associated with the managed hsm pool.
	Regions []*MhsmGeoReplicatedRegion

	// Soft deleted data retention days. When you delete an HSM or a key, it will remain recoverable for the configured retention
	// period or for a default period of 90 days. It accepts values between 7 and
	// 90.
	SoftDeleteRetentionInDays *int32

	// The Azure Active Directory tenant ID that should be used for authenticating requests to the managed HSM pool.
	TenantID *string

	// READ-ONLY; The URI of the managed hsm pool for performing operations on keys.
	HsmURI *string

	// READ-ONLY; List of private endpoint connections associated with the managed hsm pool.
	PrivateEndpointConnections []*MhsmPrivateEndpointConnectionItem

	// READ-ONLY; Provisioning state.
	ProvisioningState *ManagedHsmProvisioningState

	// READ-ONLY; The scheduled purge date in UTC.
	ScheduledPurgeDate *time.Time

	// READ-ONLY; Managed HSM security domain properties.
	SecurityDomainProperties *ManagedHSMSecurityDomainProperties

	// READ-ONLY; Resource Status Message.
	StatusMessage *string
}

// ManagedHsmSKU - SKU details
type ManagedHsmSKU struct {
	// REQUIRED; SKU Family of the managed HSM Pool
	Family *ManagedHsmSKUFamily

	// REQUIRED; SKU of the managed HSM Pool
	Name *ManagedHsmSKUName
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType

	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
	// resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	// The dictionary values can be empty objects ({}) in
	// requests.
	UserAssignedIdentities map[string]*UserAssignedIdentity

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

// MhsmGeoReplicatedRegion - A region that this managed HSM Pool has been extended to.
type MhsmGeoReplicatedRegion struct {
	// A boolean value that indicates whether the region is the primary region or a secondary region.
	IsPrimary *bool

	// Name of the geo replicated region.
	Name *string

	// READ-ONLY; Provisioning state of the geo replicated region.
	ProvisioningState *GeoReplicationRegionProvisioningState
}

// MhsmNetworkRuleSet - A set of rules governing the network accessibility of a managed hsm pool.
type MhsmNetworkRuleSet struct {
	// Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'. If not specified the default is 'AzureServices'.
	Bypass *NetworkRuleBypassOptions

	// The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property
	// has been evaluated.
	DefaultAction *NetworkRuleAction

	// The list of IP address rules.
	IPRules []*MhsmipRule

	// The list of virtual network rules.
	VirtualNetworkRules []*MhsmVirtualNetworkRule
}

// MhsmPrivateEndpoint - Private endpoint object properties.
type MhsmPrivateEndpoint struct {
	// READ-ONLY; Full identifier of the private endpoint resource.
	ID *string
}

// MhsmPrivateEndpointConnection - Private endpoint connection resource.
type MhsmPrivateEndpointConnection struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Modified whenever there is a change in the state of private endpoint connection.
	Etag *string

	// Resource properties.
	Properties *MhsmPrivateEndpointConnectionProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// MhsmPrivateEndpointConnectionItem - Private endpoint connection item.
type MhsmPrivateEndpointConnectionItem struct {
	// Modified whenever there is a change in the state of private endpoint connection.
	Etag *string

	// Id of private endpoint connection.
	ID *string

	// Private endpoint connection properties.
	Properties *MhsmPrivateEndpointConnectionProperties
}

// MhsmPrivateEndpointConnectionListResult - The response of a MhsmPrivateEndpointConnection list operation.
type MhsmPrivateEndpointConnectionListResult struct {
	// REQUIRED; The MhsmPrivateEndpointConnection items on this page
	Value []*MhsmPrivateEndpointConnection

	// The link to the next page of items
	NextLink *string
}

// MhsmPrivateEndpointConnectionProperties - Properties of the private endpoint connection resource.
type MhsmPrivateEndpointConnectionProperties struct {
	// Properties of the private endpoint object.
	PrivateEndpoint *MhsmPrivateEndpoint

	// Approval state of the private link connection.
	PrivateLinkServiceConnectionState *MhsmPrivateLinkServiceConnectionState

	// READ-ONLY; Provisioning state of the private endpoint connection.
	ProvisioningState *ManagedHsmPrivateEndpointConnectionProvisioningState
}

// MhsmPrivateLinkResource - A private link resource
type MhsmPrivateLinkResource struct {
	// Managed service identity (system assigned and/or user assigned identities)
	Identity *ManagedServiceIdentity

	// The supported Azure location where the managed HSM Pool should be created.
	Location *string

	// Resource properties.
	Properties *MhsmPrivateLinkResourceProperties

	// SKU details
	SKU *ManagedHsmSKU

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; The Azure Resource Manager resource ID for the managed HSM Pool.
	ID *string

	// READ-ONLY; The name of the managed HSM Pool.
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the key vault resource.
	SystemData *SystemData

	// READ-ONLY; The resource type of the managed HSM Pool.
	Type *string
}

// MhsmPrivateLinkResourceListResult - A list of private link resources
type MhsmPrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []*MhsmPrivateLinkResource
}

// MhsmPrivateLinkResourceProperties - Properties of a private link resource.
type MhsmPrivateLinkResourceProperties struct {
	// Required DNS zone names of the the private link resource.
	RequiredZoneNames []*string

	// READ-ONLY; Group identifier of private link resource.
	GroupID *string

	// READ-ONLY; Required member names of private link resource.
	RequiredMembers []*string
}

// MhsmPrivateLinkServiceConnectionState - An object that represents the approval state of the private link connection.
type MhsmPrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *ActionsRequired

	// The reason for approval or rejection.
	Description *string

	// Indicates whether the connection has been approved, rejected or removed by the key vault owner.
	Status *ManagedHsmPrivateEndpointServiceConnectionStatus
}

// MhsmRegionsListResult - List of regions associated with a managed HSM Pools
type MhsmRegionsListResult struct {
	// REQUIRED; The MhsmGeoReplicatedRegion items on this page
	Value []*MhsmGeoReplicatedRegion

	// The link to the next page of items
	NextLink *string
}

// MhsmVirtualNetworkRule - A rule governing the accessibility of a managed hsm pool from a specific virtual network.
type MhsmVirtualNetworkRule struct {
	// REQUIRED; Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
	ID *string
}

// MhsmipRule - A rule governing the accessibility of a managed HSM pool from a specific IP address or IP range.
type MhsmipRule struct {
	// REQUIRED; An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses
	// that start with 124.56.78).
	Value *string
}

// NetworkRuleSet - A set of rules governing the network accessibility of a vault.
type NetworkRuleSet struct {
	// Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'. If not specified the default is 'AzureServices'.
	Bypass *KeyVaultNetworkRuleBypassOption

	// The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property
	// has been evaluated.
	DefaultAction *KeyVaultNetworkRuleAction

	// The list of IP address rules.
	IPRules []*IPRule

	// The list of virtual network rules.
	VirtualNetworkRules []*VirtualNetworkRule
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// Permissions the identity has for keys, secrets, certificates and storage.
type Permissions struct {
	// Permissions to certificates
	Certificates []*CertificatePermissions

	// Permissions to keys
	Keys []*KeyPermissions

	// Permissions to secrets
	Secrets []*SecretPermissions

	// Permissions to storage accounts
	Storage []*StoragePermissions
}

// PrivateEndpoint - Private endpoint object properties.
type PrivateEndpoint struct {
	// READ-ONLY; Full identifier of the private endpoint resource.
	ID *string
}

// PrivateEndpointConnection - Private endpoint connection resource.
type PrivateEndpointConnection struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Modified whenever there is a change in the state of private endpoint connection.
	Etag *string

	// Resource properties.
	Properties *PrivateEndpointConnectionProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PrivateEndpointConnectionItem - Private endpoint connection item.
type PrivateEndpointConnectionItem struct {
	// Modified whenever there is a change in the state of private endpoint connection.
	Etag *string

	// Id of private endpoint connection.
	ID *string

	// Private endpoint connection properties.
	Properties *PrivateEndpointConnectionProperties
}

// PrivateEndpointConnectionListResult - The response of a PrivateEndpointConnection list operation.
type PrivateEndpointConnectionListResult struct {
	// REQUIRED; The PrivateEndpointConnection items on this page
	Value []*PrivateEndpointConnection

	// The link to the next page of items
	NextLink *string
}

// PrivateEndpointConnectionProperties - Properties of the private endpoint connection resource.
type PrivateEndpointConnectionProperties struct {
	// Properties of the private endpoint object.
	PrivateEndpoint *PrivateEndpoint

	// Approval state of the private link connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState

	// READ-ONLY; Provisioning state of the private endpoint connection.
	ProvisioningState *PrivateEndpointConnectionProvisioningState
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	// Resource properties.
	Properties *PrivateLinkResourceProperties

	// READ-ONLY; Fully qualified identifier of the key vault resource.
	ID *string

	// READ-ONLY; Azure location of the key vault resource.
	Location *string

	// READ-ONLY; Name of the key vault resource.
	Name *string

	// READ-ONLY; Tags assigned to the key vault resource.
	Tags map[string]*string

	// READ-ONLY; Resource type of the key vault resource.
	Type *string
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []*PrivateLinkResource
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// Required DNS zone names of the the private link resource.
	RequiredZoneNames []*string

	// READ-ONLY; Group identifier of private link resource.
	GroupID *string

	// READ-ONLY; Required member names of private link resource.
	RequiredMembers []*string
}

// PrivateLinkServiceConnectionState - An object that represents the approval state of the private link connection.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *KeyVaultActionsRequiredMessage

	// The reason for approval or rejection.
	Description *string

	// Indicates whether the connection has been approved, rejected or removed by the key vault owner.
	Status *PrivateEndpointServiceConnectionStatus
}

// SKU details
type SKU struct {
	// REQUIRED; SKU family name
	Family *SKUFamily

	// REQUIRED; SKU name to specify whether the key vault is a standard vault or a premium vault.
	Name *SKUName
}

// Secret - Resource information with extended details.
type Secret struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Properties of the secret
	Properties *SecretProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SecretAttributes - The secret management attributes.
type SecretAttributes struct {
	// Determines whether the object is enabled.
	Enabled *bool

	// Expiry date in seconds since 1970-01-01T00:00:00Z.
	Exp *time.Time

	// Not before date in seconds since 1970-01-01T00:00:00Z.
	Nbf *time.Time

	// READ-ONLY; Creation time in seconds since 1970-01-01T00:00:00Z.
	Created *time.Time

	// READ-ONLY; Last updated time in seconds since 1970-01-01T00:00:00Z.
	Updated *time.Time
}

// SecretListResult - The response of a Secret list operation.
type SecretListResult struct {
	// REQUIRED; The Secret items on this page
	Value []*Secret

	// The link to the next page of items
	NextLink *string
}

// SecretPatchParameters - Parameters for patching a secret
type SecretPatchParameters struct {
	// Properties of the secret
	Properties *SecretPatchProperties

	// The tags that will be assigned to the secret.
	Tags map[string]*string
}

// SecretPatchProperties - Properties of the secret
type SecretPatchProperties struct {
	// The attributes of the secret.
	Attributes *SecretAttributes

	// The content type of the secret.
	ContentType *string

	// The value of the secret.
	Value *string
}

// SecretProperties - Properties of the secret
type SecretProperties struct {
	// The attributes of the secret.
	Attributes *SecretAttributes

	// The content type of the secret.
	ContentType *string

	// The value of the secret. NOTE: 'value' will never be returned from the service, as APIs using this model are is intended
	// for internal use in ARM deployments. Users should use the data-plane REST
	// service for interaction with vault secrets.
	Value *string

	// READ-ONLY; The URI to retrieve the current version of the secret.
	SecretURI *string

	// READ-ONLY; The URI to retrieve the specific version of the secret.
	SecretURIWithVersion *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}

// Vault - Resource information with extended details.
type Vault struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Properties of the vault
	Properties *VaultProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VaultAccessPolicyParameters - Parameters for updating the access policy in a vault
type VaultAccessPolicyParameters struct {
	// REQUIRED; Properties of the access policy
	Properties *VaultAccessPolicyProperties

	// READ-ONLY; The resource id of the access policy.
	ID *string

	// READ-ONLY; The resource type of the access policy.
	Location *string

	// READ-ONLY; The resource name of the access policy.
	Name *string

	// READ-ONLY; The resource name of the access policy.
	Type *string
}

// VaultAccessPolicyProperties - Properties of the vault access policy
type VaultAccessPolicyProperties struct {
	// REQUIRED; An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same
	// tenant ID as the key vault's tenant ID.
	AccessPolicies []*AccessPolicyEntry
}

// VaultCheckNameAvailabilityParameters - The parameters used to check the availability of the vault name.
type VaultCheckNameAvailabilityParameters struct {
	// REQUIRED; The vault name.
	Name *string

	// CONSTANT; The type of resource, Microsoft.KeyVault/vaults
	// Field has constant value "Microsoft.KeyVault/vaults", any specified value is ignored.
	Type *string
}

// VaultListResult - The response of a Vault list operation.
type VaultListResult struct {
	// REQUIRED; The Vault items on this page
	Value []*Vault

	// The link to the next page of items
	NextLink *string
}

// VaultPatchParameters - Parameters for creating or updating a vault
type VaultPatchParameters struct {
	// Properties of the vault
	Properties *VaultPatchProperties

	// The tags that will be assigned to the key vault.
	Tags map[string]*string
}

// VaultPatchProperties - Properties of the vault
type VaultPatchProperties struct {
	// An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant
	// ID as the key vault's tenant ID.
	AccessPolicies []*AccessPolicyEntry

	// The vault's create mode to indicate whether the vault need to be recovered or not.
	CreateMode *KeyVaultPatchMode

	// Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates
	// protection against purge for this vault and its content - only the Key Vault
	// service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling
	// this functionality is irreversible - that is, the property does not accept
	// false as its value.
	EnablePurgeProtection *bool

	// Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC)
	// for authorization of data actions, and the access policies specified in vault
	// properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any
	// policy stored on Azure Resource Manager will be ignored. If null or not
	// specified, the value of this property will not change.
	EnableRbacAuthorization *bool

	// Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot
	// be reverted to false.
	EnableSoftDelete *bool

	// Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key
	// vault.
	EnabledForDeployment *bool

	// Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption *bool

	// Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	EnabledForTemplateDeployment *bool

	// A collection of rules governing the accessibility of the vault from specific network locations.
	NetworkACLs *NetworkRuleSet

	// Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except
	// private endpoint traffic and that that originates from trusted services will be
	// blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor
	// the rules.
	PublicNetworkAccess *string

	// SKU details
	SKU *SKU

	// softDelete data retention days. It accepts >=7 and <=90.
	SoftDeleteRetentionInDays *int32

	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantID *string
}

// VaultProperties - Properties of the vault
type VaultProperties struct {
	// REQUIRED; SKU details
	SKU *SKU

	// REQUIRED; The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantID *string

	// An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant
	// ID as the key vault's tenant ID. When createMode is set to recover, access
	// policies are not required. Otherwise, access policies are required.
	AccessPolicies []*AccessPolicyEntry

	// The vault's create mode to indicate whether the vault need to be recovered or not.
	CreateMode *KeyVaultCreateMode

	// Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates
	// protection against purge for this vault and its content - only the Key Vault
	// service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling
	// this functionality is irreversible - that is, the property does not accept
	// false as its value.
	EnablePurgeProtection *bool

	// Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC)
	// for authorization of data actions, and the access policies specified in vault
	// properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any
	// policy stored on Azure Resource Manager will be ignored. If null or not
	// specified, the vault is created with the default value of false. Note that management actions are always authorized with
	// RBAC.
	EnableRbacAuthorization *bool

	// Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true
	// or false) when creating new key vault, it will be set to true by default.
	// Once set to true, it cannot be reverted to false.
	EnableSoftDelete *bool

	// Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key
	// vault.
	EnabledForDeployment *bool

	// Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption *bool

	// Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	EnabledForTemplateDeployment *bool

	// Rules governing the accessibility of the key vault from specific network locations.
	NetworkACLs *NetworkRuleSet

	// Provisioning state of the vault.
	ProvisioningState *KeyVaultProvisioningState

	// Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except
	// private endpoint traffic and that that originates from trusted services will be
	// blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor
	// the rules.
	PublicNetworkAccess *string

	// softDelete data retention days. It accepts >=7 and <=90.
	SoftDeleteRetentionInDays *int32

	// The URI of the vault for performing operations on keys and secrets.
	VaultURI *string

	// READ-ONLY; The resource id of HSM Pool.
	HsmPoolResourceID *string

	// READ-ONLY; List of private endpoint connections associated with the key vault.
	PrivateEndpointConnections []*PrivateEndpointConnectionItem
}

// VirtualNetworkRule - A rule governing the accessibility of a vault from a specific virtual network.
type VirtualNetworkRule struct {
	// REQUIRED; Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
	ID *string

	// Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.
	IgnoreMissingVnetServiceEndpoint *bool
}
