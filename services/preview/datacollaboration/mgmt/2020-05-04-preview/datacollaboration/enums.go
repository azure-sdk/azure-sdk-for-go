package datacollaboration

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// AdapterType enumerates the values for adapter type.
type AdapterType string

const (
	// Custom ...
	Custom AdapterType = "Custom"
	// Standard ...
	Standard AdapterType = "Standard"
)

// PossibleAdapterTypeValues returns an array of possible values for the AdapterType const type.
func PossibleAdapterTypeValues() []AdapterType {
	return []AdapterType{Custom, Standard}
}

// ContractStatus enumerates the values for contract status.
type ContractStatus string

const (
	// Active ...
	Active ContractStatus = "Active"
	// Draft ...
	Draft ContractStatus = "Draft"
)

// PossibleContractStatusValues returns an array of possible values for the ContractStatus const type.
func PossibleContractStatusValues() []ContractStatus {
	return []ContractStatus{Active, Draft}
}

// CreatedByType enumerates the values for created by type.
type CreatedByType string

const (
	// Application ...
	Application CreatedByType = "Application"
	// Key ...
	Key CreatedByType = "Key"
	// ManagedIdentity ...
	ManagedIdentity CreatedByType = "ManagedIdentity"
	// User ...
	User CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns an array of possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{Application, Key, ManagedIdentity, User}
}

// DataAccessType enumerates the values for data access type.
type DataAccessType string

const (
	// ReadOnly ...
	ReadOnly DataAccessType = "ReadOnly"
	// WriteOnly ...
	WriteOnly DataAccessType = "WriteOnly"
)

// PossibleDataAccessTypeValues returns an array of possible values for the DataAccessType const type.
func PossibleDataAccessTypeValues() []DataAccessType {
	return []DataAccessType{ReadOnly, WriteOnly}
}

// DataMovementExecutionStage enumerates the values for data movement execution stage.
type DataMovementExecutionStage string

const (
	// Input ...
	Input DataMovementExecutionStage = "Input"
	// Output ...
	Output DataMovementExecutionStage = "Output"
)

// PossibleDataMovementExecutionStageValues returns an array of possible values for the DataMovementExecutionStage const type.
func PossibleDataMovementExecutionStageValues() []DataMovementExecutionStage {
	return []DataMovementExecutionStage{Input, Output}
}

// DataProcessingStrategy enumerates the values for data processing strategy.
type DataProcessingStrategy string

const (
	// CopyBased ...
	CopyBased DataProcessingStrategy = "CopyBased"
	// InPlace ...
	InPlace DataProcessingStrategy = "InPlace"
)

// PossibleDataProcessingStrategyValues returns an array of possible values for the DataProcessingStrategy const type.
func PossibleDataProcessingStrategyValues() []DataProcessingStrategy {
	return []DataProcessingStrategy{CopyBased, InPlace}
}

// DataSetCategoryType enumerates the values for data set category type.
type DataSetCategoryType string

const (
	// Production ...
	Production DataSetCategoryType = "Production"
	// Sample ...
	Sample DataSetCategoryType = "Sample"
)

// PossibleDataSetCategoryTypeValues returns an array of possible values for the DataSetCategoryType const type.
func PossibleDataSetCategoryTypeValues() []DataSetCategoryType {
	return []DataSetCategoryType{Production, Sample}
}

// ExecutionStatus enumerates the values for execution status.
type ExecutionStatus string

const (
	// Canceling ...
	Canceling ExecutionStatus = "Canceling"
	// Cancelled ...
	Cancelled ExecutionStatus = "Cancelled"
	// Failed ...
	Failed ExecutionStatus = "Failed"
	// Incomplete ...
	Incomplete ExecutionStatus = "Incomplete"
	// InProgress ...
	InProgress ExecutionStatus = "InProgress"
	// Preparing ...
	Preparing ExecutionStatus = "Preparing"
	// Queued ...
	Queued ExecutionStatus = "Queued"
	// Succeeded ...
	Succeeded ExecutionStatus = "Succeeded"
	// Unknown ...
	Unknown ExecutionStatus = "Unknown"
	// Waiting ...
	Waiting ExecutionStatus = "Waiting"
)

// PossibleExecutionStatusValues returns an array of possible values for the ExecutionStatus const type.
func PossibleExecutionStatusValues() []ExecutionStatus {
	return []ExecutionStatus{Canceling, Cancelled, Failed, Incomplete, InProgress, Preparing, Queued, Succeeded, Unknown, Waiting}
}

// ExecutorNodeSize enumerates the values for executor node size.
type ExecutorNodeSize string

const (
	// Large ...
	Large ExecutorNodeSize = "Large"
	// Medium ...
	Medium ExecutorNodeSize = "Medium"
	// None ...
	None ExecutorNodeSize = "None"
	// Small ...
	Small ExecutorNodeSize = "Small"
	// XLarge ...
	XLarge ExecutorNodeSize = "XLarge"
	// XXLarge ...
	XXLarge ExecutorNodeSize = "XXLarge"
	// XXXLarge ...
	XXXLarge ExecutorNodeSize = "XXXLarge"
)

// PossibleExecutorNodeSizeValues returns an array of possible values for the ExecutorNodeSize const type.
func PossibleExecutorNodeSizeValues() []ExecutorNodeSize {
	return []ExecutorNodeSize{Large, Medium, None, Small, XLarge, XXLarge, XXXLarge}
}

// Family enumerates the values for family.
type Family string

const (
	// Compute ...
	Compute Family = "Compute"
	// Storage ...
	Storage Family = "Storage"
)

// PossibleFamilyValues returns an array of possible values for the Family const type.
func PossibleFamilyValues() []Family {
	return []Family{Compute, Storage}
}

// GroupID enumerates the values for group id.
type GroupID string

const (
	// Blob ...
	Blob GroupID = "blob"
	// BlobSecondary ...
	BlobSecondary GroupID = "blob_secondary"
	// Dfs ...
	Dfs GroupID = "dfs"
	// DfsSecondary ...
	DfsSecondary GroupID = "dfs_secondary"
)

// PossibleGroupIDValues returns an array of possible values for the GroupID const type.
func PossibleGroupIDValues() []GroupID {
	return []GroupID{Blob, BlobSecondary, Dfs, DfsSecondary}
}

// InvitationStatus enumerates the values for invitation status.
type InvitationStatus string

const (
	// Accepted ...
	Accepted InvitationStatus = "Accepted"
	// Pending ...
	Pending InvitationStatus = "Pending"
	// Rejected ...
	Rejected InvitationStatus = "Rejected"
)

// PossibleInvitationStatusValues returns an array of possible values for the InvitationStatus const type.
func PossibleInvitationStatusValues() []InvitationStatus {
	return []InvitationStatus{Accepted, Pending, Rejected}
}

// Kind enumerates the values for kind.
type Kind string

const (
	// KindBoundDataDescriptor ...
	KindBoundDataDescriptor Kind = "BoundDataDescriptor"
	// KindDataAsset ...
	KindDataAsset Kind = "DataAsset"
	// KindScriptOutput ...
	KindScriptOutput Kind = "ScriptOutput"
)

// PossibleKindValues returns an array of possible values for the Kind const type.
func PossibleKindValues() []Kind {
	return []Kind{KindBoundDataDescriptor, KindDataAsset, KindScriptOutput}
}

// KindBasicConstrainedResource enumerates the values for kind basic constrained resource.
type KindBasicConstrainedResource string

const (
	// KindConstrainedResource ...
	KindConstrainedResource KindBasicConstrainedResource = "ConstrainedResource"
	// KindSynapseSparkPool ...
	KindSynapseSparkPool KindBasicConstrainedResource = "SynapseSparkPool"
)

// PossibleKindBasicConstrainedResourceValues returns an array of possible values for the KindBasicConstrainedResource const type.
func PossibleKindBasicConstrainedResourceValues() []KindBasicConstrainedResource {
	return []KindBasicConstrainedResource{KindConstrainedResource, KindSynapseSparkPool}
}

// KindBasicConstraint enumerates the values for kind basic constraint.
type KindBasicConstraint string

const (
	// KindConstraint ...
	KindConstraint KindBasicConstraint = "Constraint"
	// KindLocation ...
	KindLocation KindBasicConstraint = "Location"
	// KindScript ...
	KindScript KindBasicConstraint = "Script"
	// KindScriptParameter ...
	KindScriptParameter KindBasicConstraint = "ScriptParameter"
)

// PossibleKindBasicConstraintValues returns an array of possible values for the KindBasicConstraint const type.
func PossibleKindBasicConstraintValues() []KindBasicConstraint {
	return []KindBasicConstraint{KindConstraint, KindLocation, KindScript, KindScriptParameter}
}

// KindBasicDataSet enumerates the values for kind basic data set.
type KindBasicDataSet string

const (
	// KindAdlsGen2File ...
	KindAdlsGen2File KindBasicDataSet = "AdlsGen2File"
	// KindAdlsGen2FileSystem ...
	KindAdlsGen2FileSystem KindBasicDataSet = "AdlsGen2FileSystem"
	// KindAdlsGen2Folder ...
	KindAdlsGen2Folder KindBasicDataSet = "AdlsGen2Folder"
	// KindBlob ...
	KindBlob KindBasicDataSet = "Blob"
	// KindBlobFolder ...
	KindBlobFolder KindBasicDataSet = "BlobFolder"
	// KindContainer ...
	KindContainer KindBasicDataSet = "Container"
	// KindDataSet ...
	KindDataSet KindBasicDataSet = "DataSet"
)

// PossibleKindBasicDataSetValues returns an array of possible values for the KindBasicDataSet const type.
func PossibleKindBasicDataSetValues() []KindBasicDataSet {
	return []KindBasicDataSet{KindAdlsGen2File, KindAdlsGen2FileSystem, KindAdlsGen2Folder, KindBlob, KindBlobFolder, KindContainer, KindDataSet}
}

// KindBasicDiagnosticsLog enumerates the values for kind basic diagnostics log.
type KindBasicDiagnosticsLog string

const (
	// KindConsoleLog ...
	KindConsoleLog KindBasicDiagnosticsLog = "ConsoleLog"
	// KindDiagnosticsLog ...
	KindDiagnosticsLog KindBasicDiagnosticsLog = "DiagnosticsLog"
	// KindEventLog ...
	KindEventLog KindBasicDiagnosticsLog = "EventLog"
)

// PossibleKindBasicDiagnosticsLogValues returns an array of possible values for the KindBasicDiagnosticsLog const type.
func PossibleKindBasicDiagnosticsLogValues() []KindBasicDiagnosticsLog {
	return []KindBasicDiagnosticsLog{KindConsoleLog, KindDiagnosticsLog, KindEventLog}
}

// KindBasicPipelineStep enumerates the values for kind basic pipeline step.
type KindBasicPipelineStep string

const (
	// KindPipelineStep ...
	KindPipelineStep KindBasicPipelineStep = "PipelineStep"
	// KindSynapseSpark ...
	KindSynapseSpark KindBasicPipelineStep = "SynapseSpark"
)

// PossibleKindBasicPipelineStepValues returns an array of possible values for the KindBasicPipelineStep const type.
func PossibleKindBasicPipelineStepValues() []KindBasicPipelineStep {
	return []KindBasicPipelineStep{KindPipelineStep, KindSynapseSpark}
}

// KindBasicPipelineSubstep enumerates the values for kind basic pipeline substep.
type KindBasicPipelineSubstep string

const (
	// KindBasicPipelineSubstepKindDataMovement ...
	KindBasicPipelineSubstepKindDataMovement KindBasicPipelineSubstep = "DataMovement"
	// KindBasicPipelineSubstepKindDiagnosticsLog ...
	KindBasicPipelineSubstepKindDiagnosticsLog KindBasicPipelineSubstep = "DiagnosticsLog"
	// KindBasicPipelineSubstepKindPipelineSubstep ...
	KindBasicPipelineSubstepKindPipelineSubstep KindBasicPipelineSubstep = "PipelineSubstep"
	// KindBasicPipelineSubstepKindScriptExecution ...
	KindBasicPipelineSubstepKindScriptExecution KindBasicPipelineSubstep = "ScriptExecution"
)

// PossibleKindBasicPipelineSubstepValues returns an array of possible values for the KindBasicPipelineSubstep const type.
func PossibleKindBasicPipelineSubstepValues() []KindBasicPipelineSubstep {
	return []KindBasicPipelineSubstep{KindBasicPipelineSubstepKindDataMovement, KindBasicPipelineSubstepKindDiagnosticsLog, KindBasicPipelineSubstepKindPipelineSubstep, KindBasicPipelineSubstepKindScriptExecution}
}

// KindBasicPolicy enumerates the values for kind basic policy.
type KindBasicPolicy string

const (
	// KindDiagnosticLevel ...
	KindDiagnosticLevel KindBasicPolicy = "DiagnosticLevel"
	// KindOutput ...
	KindOutput KindBasicPolicy = "Output"
	// KindPolicy ...
	KindPolicy KindBasicPolicy = "Policy"
)

// PossibleKindBasicPolicyValues returns an array of possible values for the KindBasicPolicy const type.
func PossibleKindBasicPolicyValues() []KindBasicPolicy {
	return []KindBasicPolicy{KindDiagnosticLevel, KindOutput, KindPolicy}
}

// KindBasicResourceReference enumerates the values for kind basic resource reference.
type KindBasicResourceReference string

const (
	// KindBasicResourceReferenceKindDataAsset ...
	KindBasicResourceReferenceKindDataAsset KindBasicResourceReference = "DataAsset"
	// KindBasicResourceReferenceKindDataAssetReference ...
	KindBasicResourceReferenceKindDataAssetReference KindBasicResourceReference = "DataAssetReference"
	// KindBasicResourceReferenceKindResourceReference ...
	KindBasicResourceReferenceKindResourceReference KindBasicResourceReference = "ResourceReference"
	// KindBasicResourceReferenceKindScript ...
	KindBasicResourceReferenceKindScript KindBasicResourceReference = "Script"
	// KindBasicResourceReferenceKindScriptReference ...
	KindBasicResourceReferenceKindScriptReference KindBasicResourceReference = "ScriptReference"
)

// PossibleKindBasicResourceReferenceValues returns an array of possible values for the KindBasicResourceReference const type.
func PossibleKindBasicResourceReferenceValues() []KindBasicResourceReference {
	return []KindBasicResourceReference{KindBasicResourceReferenceKindDataAsset, KindBasicResourceReferenceKindDataAssetReference, KindBasicResourceReferenceKindResourceReference, KindBasicResourceReferenceKindScript, KindBasicResourceReferenceKindScriptReference}
}

// KindBasicScript enumerates the values for kind basic script.
type KindBasicScript string

const (
	// KindBasicScriptKindScript ...
	KindBasicScriptKindScript KindBasicScript = "Script"
	// KindBasicScriptKindSynapseSpark ...
	KindBasicScriptKindSynapseSpark KindBasicScript = "SynapseSpark"
)

// PossibleKindBasicScriptValues returns an array of possible values for the KindBasicScript const type.
func PossibleKindBasicScriptValues() []KindBasicScript {
	return []KindBasicScript{KindBasicScriptKindScript, KindBasicScriptKindSynapseSpark}
}

// KindBasicSubstepReference enumerates the values for kind basic substep reference.
type KindBasicSubstepReference string

const (
	// KindDataMovement ...
	KindDataMovement KindBasicSubstepReference = "DataMovement"
	// KindScriptExecution ...
	KindScriptExecution KindBasicSubstepReference = "ScriptExecution"
	// KindSubstepReference ...
	KindSubstepReference KindBasicSubstepReference = "SubstepReference"
)

// PossibleKindBasicSubstepReferenceValues returns an array of possible values for the KindBasicSubstepReference const type.
func PossibleKindBasicSubstepReferenceValues() []KindBasicSubstepReference {
	return []KindBasicSubstepReference{KindDataMovement, KindScriptExecution, KindSubstepReference}
}

// LastModifiedByType enumerates the values for last modified by type.
type LastModifiedByType string

const (
	// LastModifiedByTypeApplication ...
	LastModifiedByTypeApplication LastModifiedByType = "Application"
	// LastModifiedByTypeKey ...
	LastModifiedByTypeKey LastModifiedByType = "Key"
	// LastModifiedByTypeManagedIdentity ...
	LastModifiedByTypeManagedIdentity LastModifiedByType = "ManagedIdentity"
	// LastModifiedByTypeUser ...
	LastModifiedByTypeUser LastModifiedByType = "User"
)

// PossibleLastModifiedByTypeValues returns an array of possible values for the LastModifiedByType const type.
func PossibleLastModifiedByTypeValues() []LastModifiedByType {
	return []LastModifiedByType{LastModifiedByTypeApplication, LastModifiedByTypeKey, LastModifiedByTypeManagedIdentity, LastModifiedByTypeUser}
}

// LogLevel enumerates the values for log level.
type LogLevel string

const (
	// LogLevelCritical ...
	LogLevelCritical LogLevel = "Critical"
	// LogLevelError ...
	LogLevelError LogLevel = "Error"
	// LogLevelInformation ...
	LogLevelInformation LogLevel = "Information"
	// LogLevelVerbose ...
	LogLevelVerbose LogLevel = "Verbose"
	// LogLevelWarning ...
	LogLevelWarning LogLevel = "Warning"
)

// PossibleLogLevelValues returns an array of possible values for the LogLevel const type.
func PossibleLogLevelValues() []LogLevel {
	return []LogLevel{LogLevelCritical, LogLevelError, LogLevelInformation, LogLevelVerbose, LogLevelWarning}
}

// NodeSize enumerates the values for node size.
type NodeSize string

const (
	// NodeSizeLarge ...
	NodeSizeLarge NodeSize = "Large"
	// NodeSizeMedium ...
	NodeSizeMedium NodeSize = "Medium"
	// NodeSizeNone ...
	NodeSizeNone NodeSize = "None"
	// NodeSizeSmall ...
	NodeSizeSmall NodeSize = "Small"
	// NodeSizeXLarge ...
	NodeSizeXLarge NodeSize = "XLarge"
	// NodeSizeXXLarge ...
	NodeSizeXXLarge NodeSize = "XXLarge"
	// NodeSizeXXXLarge ...
	NodeSizeXXXLarge NodeSize = "XXXLarge"
)

// PossibleNodeSizeValues returns an array of possible values for the NodeSize const type.
func PossibleNodeSizeValues() []NodeSize {
	return []NodeSize{NodeSizeLarge, NodeSizeMedium, NodeSizeNone, NodeSizeSmall, NodeSizeXLarge, NodeSizeXXLarge, NodeSizeXXXLarge}
}

// NodeSizeFamily enumerates the values for node size family.
type NodeSizeFamily string

const (
	// NodeSizeFamilyMemoryOptimized ...
	NodeSizeFamilyMemoryOptimized NodeSizeFamily = "MemoryOptimized"
	// NodeSizeFamilyNone ...
	NodeSizeFamilyNone NodeSizeFamily = "None"
)

// PossibleNodeSizeFamilyValues returns an array of possible values for the NodeSizeFamily const type.
func PossibleNodeSizeFamilyValues() []NodeSizeFamily {
	return []NodeSizeFamily{NodeSizeFamilyMemoryOptimized, NodeSizeFamilyNone}
}

// ParameterType enumerates the values for parameter type.
type ParameterType string

const (
	// Boolean ...
	Boolean ParameterType = "Boolean"
	// DateTime ...
	DateTime ParameterType = "DateTime"
	// Float ...
	Float ParameterType = "Float"
	// Integer ...
	Integer ParameterType = "Integer"
	// String ...
	String ParameterType = "String"
)

// PossibleParameterTypeValues returns an array of possible values for the ParameterType const type.
func PossibleParameterTypeValues() []ParameterType {
	return []ParameterType{Boolean, DateTime, Float, Integer, String}
}

// ParameterTypeBasicPipelineRunParameterAssignment enumerates the values for parameter type basic pipeline run
// parameter assignment.
type ParameterTypeBasicPipelineRunParameterAssignment string

const (
	// ParameterTypeBoolean ...
	ParameterTypeBoolean ParameterTypeBasicPipelineRunParameterAssignment = "Boolean"
	// ParameterTypeDateTime ...
	ParameterTypeDateTime ParameterTypeBasicPipelineRunParameterAssignment = "DateTime"
	// ParameterTypeFloat ...
	ParameterTypeFloat ParameterTypeBasicPipelineRunParameterAssignment = "Float"
	// ParameterTypeInteger ...
	ParameterTypeInteger ParameterTypeBasicPipelineRunParameterAssignment = "Integer"
	// ParameterTypePipelineRunParameterAssignment ...
	ParameterTypePipelineRunParameterAssignment ParameterTypeBasicPipelineRunParameterAssignment = "PipelineRunParameterAssignment"
	// ParameterTypeString ...
	ParameterTypeString ParameterTypeBasicPipelineRunParameterAssignment = "String"
)

// PossibleParameterTypeBasicPipelineRunParameterAssignmentValues returns an array of possible values for the ParameterTypeBasicPipelineRunParameterAssignment const type.
func PossibleParameterTypeBasicPipelineRunParameterAssignmentValues() []ParameterTypeBasicPipelineRunParameterAssignment {
	return []ParameterTypeBasicPipelineRunParameterAssignment{ParameterTypeBoolean, ParameterTypeDateTime, ParameterTypeFloat, ParameterTypeInteger, ParameterTypePipelineRunParameterAssignment, ParameterTypeString}
}

// ParameterTypeBasicScriptParameter enumerates the values for parameter type basic script parameter.
type ParameterTypeBasicScriptParameter string

const (
	// ParameterTypeBasicScriptParameterParameterTypeBoolean ...
	ParameterTypeBasicScriptParameterParameterTypeBoolean ParameterTypeBasicScriptParameter = "Boolean"
	// ParameterTypeBasicScriptParameterParameterTypeDateTime ...
	ParameterTypeBasicScriptParameterParameterTypeDateTime ParameterTypeBasicScriptParameter = "DateTime"
	// ParameterTypeBasicScriptParameterParameterTypeFloat ...
	ParameterTypeBasicScriptParameterParameterTypeFloat ParameterTypeBasicScriptParameter = "Float"
	// ParameterTypeBasicScriptParameterParameterTypeInteger ...
	ParameterTypeBasicScriptParameterParameterTypeInteger ParameterTypeBasicScriptParameter = "Integer"
	// ParameterTypeBasicScriptParameterParameterTypeScriptParameter ...
	ParameterTypeBasicScriptParameterParameterTypeScriptParameter ParameterTypeBasicScriptParameter = "ScriptParameter"
	// ParameterTypeBasicScriptParameterParameterTypeString ...
	ParameterTypeBasicScriptParameterParameterTypeString ParameterTypeBasicScriptParameter = "String"
)

// PossibleParameterTypeBasicScriptParameterValues returns an array of possible values for the ParameterTypeBasicScriptParameter const type.
func PossibleParameterTypeBasicScriptParameterValues() []ParameterTypeBasicScriptParameter {
	return []ParameterTypeBasicScriptParameter{ParameterTypeBasicScriptParameterParameterTypeBoolean, ParameterTypeBasicScriptParameterParameterTypeDateTime, ParameterTypeBasicScriptParameterParameterTypeFloat, ParameterTypeBasicScriptParameterParameterTypeInteger, ParameterTypeBasicScriptParameterParameterTypeScriptParameter, ParameterTypeBasicScriptParameterParameterTypeString}
}

// PipelineRunMode enumerates the values for pipeline run mode.
type PipelineRunMode string

const (
	// PipelineRunModeProduction ...
	PipelineRunModeProduction PipelineRunMode = "Production"
	// PipelineRunModeTest ...
	PipelineRunModeTest PipelineRunMode = "Test"
)

// PossiblePipelineRunModeValues returns an array of possible values for the PipelineRunMode const type.
func PossiblePipelineRunModeValues() []PipelineRunMode {
	return []PipelineRunMode{PipelineRunModeProduction, PipelineRunModeTest}
}

// PipelineRunStatus enumerates the values for pipeline run status.
type PipelineRunStatus string

const (
	// PipelineRunStatusCanceling ...
	PipelineRunStatusCanceling PipelineRunStatus = "Canceling"
	// PipelineRunStatusCancelled ...
	PipelineRunStatusCancelled PipelineRunStatus = "Cancelled"
	// PipelineRunStatusFailed ...
	PipelineRunStatusFailed PipelineRunStatus = "Failed"
	// PipelineRunStatusIncomplete ...
	PipelineRunStatusIncomplete PipelineRunStatus = "Incomplete"
	// PipelineRunStatusInProgress ...
	PipelineRunStatusInProgress PipelineRunStatus = "InProgress"
	// PipelineRunStatusPreparing ...
	PipelineRunStatusPreparing PipelineRunStatus = "Preparing"
	// PipelineRunStatusQueued ...
	PipelineRunStatusQueued PipelineRunStatus = "Queued"
	// PipelineRunStatusSucceeded ...
	PipelineRunStatusSucceeded PipelineRunStatus = "Succeeded"
	// PipelineRunStatusUnknown ...
	PipelineRunStatusUnknown PipelineRunStatus = "Unknown"
	// PipelineRunStatusWaiting ...
	PipelineRunStatusWaiting PipelineRunStatus = "Waiting"
)

// PossiblePipelineRunStatusValues returns an array of possible values for the PipelineRunStatus const type.
func PossiblePipelineRunStatusValues() []PipelineRunStatus {
	return []PipelineRunStatus{PipelineRunStatusCanceling, PipelineRunStatusCancelled, PipelineRunStatusFailed, PipelineRunStatusIncomplete, PipelineRunStatusInProgress, PipelineRunStatusPreparing, PipelineRunStatusQueued, PipelineRunStatusSucceeded, PipelineRunStatusUnknown, PipelineRunStatusWaiting}
}

// PipelineStepRunStatus enumerates the values for pipeline step run status.
type PipelineStepRunStatus string

const (
	// PipelineStepRunStatusCanceling ...
	PipelineStepRunStatusCanceling PipelineStepRunStatus = "Canceling"
	// PipelineStepRunStatusCancelled ...
	PipelineStepRunStatusCancelled PipelineStepRunStatus = "Cancelled"
	// PipelineStepRunStatusFailed ...
	PipelineStepRunStatusFailed PipelineStepRunStatus = "Failed"
	// PipelineStepRunStatusIncomplete ...
	PipelineStepRunStatusIncomplete PipelineStepRunStatus = "Incomplete"
	// PipelineStepRunStatusInProgress ...
	PipelineStepRunStatusInProgress PipelineStepRunStatus = "InProgress"
	// PipelineStepRunStatusPreparing ...
	PipelineStepRunStatusPreparing PipelineStepRunStatus = "Preparing"
	// PipelineStepRunStatusQueued ...
	PipelineStepRunStatusQueued PipelineStepRunStatus = "Queued"
	// PipelineStepRunStatusSucceeded ...
	PipelineStepRunStatusSucceeded PipelineStepRunStatus = "Succeeded"
	// PipelineStepRunStatusUnknown ...
	PipelineStepRunStatusUnknown PipelineStepRunStatus = "Unknown"
	// PipelineStepRunStatusWaiting ...
	PipelineStepRunStatusWaiting PipelineStepRunStatus = "Waiting"
)

// PossiblePipelineStepRunStatusValues returns an array of possible values for the PipelineStepRunStatus const type.
func PossiblePipelineStepRunStatusValues() []PipelineStepRunStatus {
	return []PipelineStepRunStatus{PipelineStepRunStatusCanceling, PipelineStepRunStatusCancelled, PipelineStepRunStatusFailed, PipelineStepRunStatusIncomplete, PipelineStepRunStatusInProgress, PipelineStepRunStatusPreparing, PipelineStepRunStatusQueued, PipelineStepRunStatusSucceeded, PipelineStepRunStatusUnknown, PipelineStepRunStatusWaiting}
}

// PlaceholderState enumerates the values for placeholder state.
type PlaceholderState string

const (
	// PlaceholderStateAssigned ...
	PlaceholderStateAssigned PlaceholderState = "Assigned"
	// PlaceholderStateNone ...
	PlaceholderStateNone PlaceholderState = "None"
	// PlaceholderStateUnassigned ...
	PlaceholderStateUnassigned PlaceholderState = "Unassigned"
)

// PossiblePlaceholderStateValues returns an array of possible values for the PlaceholderState const type.
func PossiblePlaceholderStateValues() []PlaceholderState {
	return []PlaceholderState{PlaceholderStateAssigned, PlaceholderStateNone, PlaceholderStateUnassigned}
}

// PrivateEndpointStatus enumerates the values for private endpoint status.
type PrivateEndpointStatus string

const (
	// PrivateEndpointStatusApproved ...
	PrivateEndpointStatusApproved PrivateEndpointStatus = "Approved"
	// PrivateEndpointStatusDisconnected ...
	PrivateEndpointStatusDisconnected PrivateEndpointStatus = "Disconnected"
	// PrivateEndpointStatusPending ...
	PrivateEndpointStatusPending PrivateEndpointStatus = "Pending"
	// PrivateEndpointStatusRejected ...
	PrivateEndpointStatusRejected PrivateEndpointStatus = "Rejected"
)

// PossiblePrivateEndpointStatusValues returns an array of possible values for the PrivateEndpointStatus const type.
func PossiblePrivateEndpointStatusValues() []PrivateEndpointStatus {
	return []PrivateEndpointStatus{PrivateEndpointStatusApproved, PrivateEndpointStatusDisconnected, PrivateEndpointStatusPending, PrivateEndpointStatusRejected}
}

// ProposalApprovalStatus enumerates the values for proposal approval status.
type ProposalApprovalStatus string

const (
	// ProposalApprovalStatusApproved ...
	ProposalApprovalStatusApproved ProposalApprovalStatus = "Approved"
	// ProposalApprovalStatusExpired ...
	ProposalApprovalStatusExpired ProposalApprovalStatus = "Expired"
	// ProposalApprovalStatusPending ...
	ProposalApprovalStatusPending ProposalApprovalStatus = "Pending"
)

// PossibleProposalApprovalStatusValues returns an array of possible values for the ProposalApprovalStatus const type.
func PossibleProposalApprovalStatusValues() []ProposalApprovalStatus {
	return []ProposalApprovalStatus{ProposalApprovalStatusApproved, ProposalApprovalStatusExpired, ProposalApprovalStatusPending}
}

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCreating ...
	ProvisioningStateCreating ProvisioningState = "Creating"
	// ProvisioningStateDeleting ...
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateMoving ...
	ProvisioningStateMoving ProvisioningState = "Moving"
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	// ProvisioningStateUpdating ...
	ProvisioningStateUpdating ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{ProvisioningStateCreating, ProvisioningStateDeleting, ProvisioningStateFailed, ProvisioningStateMoving, ProvisioningStateSucceeded, ProvisioningStateUpdating}
}

// Purpose enumerates the values for purpose.
type Purpose string

const (
	// Body ...
	Body Purpose = "Body"
	// InputAdapter ...
	InputAdapter Purpose = "InputAdapter"
	// OutputAdapter ...
	OutputAdapter Purpose = "OutputAdapter"
)

// PossiblePurposeValues returns an array of possible values for the Purpose const type.
func PossiblePurposeValues() []Purpose {
	return []Purpose{Body, InputAdapter, OutputAdapter}
}

// ResolvedBy enumerates the values for resolved by.
type ResolvedBy string

const (
	// ResolvedByConstant ...
	ResolvedByConstant ResolvedBy = "Constant"
	// ResolvedByDefault ...
	ResolvedByDefault ResolvedBy = "Default"
	// ResolvedByPipelineRun ...
	ResolvedByPipelineRun ResolvedBy = "PipelineRun"
)

// PossibleResolvedByValues returns an array of possible values for the ResolvedBy const type.
func PossibleResolvedByValues() []ResolvedBy {
	return []ResolvedBy{ResolvedByConstant, ResolvedByDefault, ResolvedByPipelineRun}
}

// ResourceType enumerates the values for resource type.
type ResourceType string

const (
	// ResourceTypeDataAssetReference ...
	ResourceTypeDataAssetReference ResourceType = "DataAssetReference"
	// ResourceTypeScriptReference ...
	ResourceTypeScriptReference ResourceType = "ScriptReference"
	// ResourceTypeVirtualOutputReference ...
	ResourceTypeVirtualOutputReference ResourceType = "VirtualOutputReference"
)

// PossibleResourceTypeValues returns an array of possible values for the ResourceType const type.
func PossibleResourceTypeValues() []ResourceType {
	return []ResourceType{ResourceTypeDataAssetReference, ResourceTypeScriptReference, ResourceTypeVirtualOutputReference}
}

// ScriptKind enumerates the values for script kind.
type ScriptKind string

const (
	// SynapseSpark ...
	SynapseSpark ScriptKind = "SynapseSpark"
)

// PossibleScriptKindValues returns an array of possible values for the ScriptKind const type.
func PossibleScriptKindValues() []ScriptKind {
	return []ScriptKind{SynapseSpark}
}

// ScriptParameterValidationRuleType enumerates the values for script parameter validation rule type.
type ScriptParameterValidationRuleType string

const (
	// ScriptParameterValidationRuleTypeDateTimeOptionsSet ...
	ScriptParameterValidationRuleTypeDateTimeOptionsSet ScriptParameterValidationRuleType = "DateTimeOptionsSet"
	// ScriptParameterValidationRuleTypeDateTimeRange ...
	ScriptParameterValidationRuleTypeDateTimeRange ScriptParameterValidationRuleType = "DateTimeRange"
	// ScriptParameterValidationRuleTypeFloatOptionsSet ...
	ScriptParameterValidationRuleTypeFloatOptionsSet ScriptParameterValidationRuleType = "FloatOptionsSet"
	// ScriptParameterValidationRuleTypeFloatRange ...
	ScriptParameterValidationRuleTypeFloatRange ScriptParameterValidationRuleType = "FloatRange"
	// ScriptParameterValidationRuleTypeIntegerOptionsSet ...
	ScriptParameterValidationRuleTypeIntegerOptionsSet ScriptParameterValidationRuleType = "IntegerOptionsSet"
	// ScriptParameterValidationRuleTypeIntegerRange ...
	ScriptParameterValidationRuleTypeIntegerRange ScriptParameterValidationRuleType = "IntegerRange"
	// ScriptParameterValidationRuleTypeRegularExpression ...
	ScriptParameterValidationRuleTypeRegularExpression ScriptParameterValidationRuleType = "RegularExpression"
	// ScriptParameterValidationRuleTypeScriptParameterValidationRule ...
	ScriptParameterValidationRuleTypeScriptParameterValidationRule ScriptParameterValidationRuleType = "ScriptParameterValidationRule"
	// ScriptParameterValidationRuleTypeStringLengthRange ...
	ScriptParameterValidationRuleTypeStringLengthRange ScriptParameterValidationRuleType = "StringLengthRange"
	// ScriptParameterValidationRuleTypeStringOptionsSet ...
	ScriptParameterValidationRuleTypeStringOptionsSet ScriptParameterValidationRuleType = "StringOptionsSet"
)

// PossibleScriptParameterValidationRuleTypeValues returns an array of possible values for the ScriptParameterValidationRuleType const type.
func PossibleScriptParameterValidationRuleTypeValues() []ScriptParameterValidationRuleType {
	return []ScriptParameterValidationRuleType{ScriptParameterValidationRuleTypeDateTimeOptionsSet, ScriptParameterValidationRuleTypeDateTimeRange, ScriptParameterValidationRuleTypeFloatOptionsSet, ScriptParameterValidationRuleTypeFloatRange, ScriptParameterValidationRuleTypeIntegerOptionsSet, ScriptParameterValidationRuleTypeIntegerRange, ScriptParameterValidationRuleTypeRegularExpression, ScriptParameterValidationRuleTypeScriptParameterValidationRule, ScriptParameterValidationRuleTypeStringLengthRange, ScriptParameterValidationRuleTypeStringOptionsSet}
}

// ScriptVisibility enumerates the values for script visibility.
type ScriptVisibility string

const (
	// HiddenContent ...
	HiddenContent ScriptVisibility = "HiddenContent"
	// ShowAll ...
	ShowAll ScriptVisibility = "ShowAll"
)

// PossibleScriptVisibilityValues returns an array of possible values for the ScriptVisibility const type.
func PossibleScriptVisibilityValues() []ScriptVisibility {
	return []ScriptVisibility{HiddenContent, ShowAll}
}

// Status enumerates the values for status.
type Status string

const (
	// StatusAccepted ...
	StatusAccepted Status = "Accepted"
	// StatusCanceled ...
	StatusCanceled Status = "Canceled"
	// StatusFailed ...
	StatusFailed Status = "Failed"
	// StatusInProgress ...
	StatusInProgress Status = "InProgress"
	// StatusSucceeded ...
	StatusSucceeded Status = "Succeeded"
	// StatusTransientFailure ...
	StatusTransientFailure Status = "TransientFailure"
)

// PossibleStatusValues returns an array of possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{StatusAccepted, StatusCanceled, StatusFailed, StatusInProgress, StatusSucceeded, StatusTransientFailure}
}

// Type enumerates the values for type.
type Type string

const (
	// SystemAssigned ...
	SystemAssigned Type = "SystemAssigned"
)

// PossibleTypeValues returns an array of possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{SystemAssigned}
}

// Visibility enumerates the values for visibility.
type Visibility string

const (
	// VisibilityHiddenContent ...
	VisibilityHiddenContent Visibility = "HiddenContent"
	// VisibilityShowAll ...
	VisibilityShowAll Visibility = "ShowAll"
)

// PossibleVisibilityValues returns an array of possible values for the Visibility const type.
func PossibleVisibilityValues() []Visibility {
	return []Visibility{VisibilityHiddenContent, VisibilityShowAll}
}
