//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package sapmonitors

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloads/sapmonitors"
	moduleVersion = "v0.1.0"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// AppServicePlanTier - The App Service plan tier.
type AppServicePlanTier string

const (
	// AppServicePlanTierElasticPremium - Elastic Premium plan
	AppServicePlanTierElasticPremium AppServicePlanTier = "ElasticPremium"
	// AppServicePlanTierPremiumV3 - Dedicated Premium V3 plan
	AppServicePlanTierPremiumV3 AppServicePlanTier = "PremiumV3"
)

// PossibleAppServicePlanTierValues returns the possible values for the AppServicePlanTier const type.
func PossibleAppServicePlanTierValues() []AppServicePlanTier {
	return []AppServicePlanTier{
		AppServicePlanTierElasticPremium,
		AppServicePlanTierPremiumV3,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// ManagedServiceIdentityType - Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                       ManagedServiceIdentityType = "None"
	ManagedServiceIdentityTypeSystemAssigned             ManagedServiceIdentityType = "SystemAssigned"
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned,UserAssigned"
	ManagedServiceIdentityTypeUserAssigned               ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns the possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{
		ManagedServiceIdentityTypeNone,
		ManagedServiceIdentityTypeSystemAssigned,
		ManagedServiceIdentityTypeSystemAssignedUserAssigned,
		ManagedServiceIdentityTypeUserAssigned,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// RoutingPreference - Sets the routing preference of the SAP monitor.
type RoutingPreference string

const (
	// RoutingPreferenceDefault - Default routing preference. Only RFC1918 traffic is routed to the customer VNET.
	RoutingPreferenceDefault RoutingPreference = "Default"
	// RoutingPreferenceRouteAll - Route all traffic to the customer VNET.
	RoutingPreferenceRouteAll RoutingPreference = "RouteAll"
)

// PossibleRoutingPreferenceValues returns the possible values for the RoutingPreference const type.
func PossibleRoutingPreferenceValues() []RoutingPreference {
	return []RoutingPreference{
		RoutingPreferenceDefault,
		RoutingPreferenceRouteAll,
	}
}

// SSLPreference - Gets or sets certificate preference if secure communication is enabled.
type SSLPreference string

const (
	// SSLPreferenceDisabled - Secure communication is disabled.
	SSLPreferenceDisabled SSLPreference = "Disabled"
	// SSLPreferenceRootCertificate - Secure communication is enabled with root certificate.
	SSLPreferenceRootCertificate SSLPreference = "RootCertificate"
	// SSLPreferenceServerCertificate - Secure communication is enabled with server certificate.
	SSLPreferenceServerCertificate SSLPreference = "ServerCertificate"
)

// PossibleSSLPreferenceValues returns the possible values for the SSLPreference const type.
func PossibleSSLPreferenceValues() []SSLPreference {
	return []SSLPreference{
		SSLPreferenceDisabled,
		SSLPreferenceRootCertificate,
		SSLPreferenceServerCertificate,
	}
}

// SapLandscapeMonitorProvisioningState - State of provisioning of the SAP monitor.
type SapLandscapeMonitorProvisioningState string

const (
	// SapLandscapeMonitorProvisioningStateAccepted - The resource request has been accepted.
	SapLandscapeMonitorProvisioningStateAccepted SapLandscapeMonitorProvisioningState = "Accepted"
	// SapLandscapeMonitorProvisioningStateCanceled - The resource operation was canceled.
	SapLandscapeMonitorProvisioningStateCanceled SapLandscapeMonitorProvisioningState = "Canceled"
	// SapLandscapeMonitorProvisioningStateCreated - The resource has been created.
	SapLandscapeMonitorProvisioningStateCreated SapLandscapeMonitorProvisioningState = "Created"
	// SapLandscapeMonitorProvisioningStateFailed - The resource operation has failed.
	SapLandscapeMonitorProvisioningStateFailed SapLandscapeMonitorProvisioningState = "Failed"
	// SapLandscapeMonitorProvisioningStateSucceeded - The resource operation has succeeded.
	SapLandscapeMonitorProvisioningStateSucceeded SapLandscapeMonitorProvisioningState = "Succeeded"
)

// PossibleSapLandscapeMonitorProvisioningStateValues returns the possible values for the SapLandscapeMonitorProvisioningState const type.
func PossibleSapLandscapeMonitorProvisioningStateValues() []SapLandscapeMonitorProvisioningState {
	return []SapLandscapeMonitorProvisioningState{
		SapLandscapeMonitorProvisioningStateAccepted,
		SapLandscapeMonitorProvisioningStateCanceled,
		SapLandscapeMonitorProvisioningStateCreated,
		SapLandscapeMonitorProvisioningStateFailed,
		SapLandscapeMonitorProvisioningStateSucceeded,
	}
}

// WorkloadMonitorProvisioningState - State of provisioning of the SAP monitor.
type WorkloadMonitorProvisioningState string

const (
	// WorkloadMonitorProvisioningStateAccepted - The resource request has been accepted.
	WorkloadMonitorProvisioningStateAccepted WorkloadMonitorProvisioningState = "Accepted"
	// WorkloadMonitorProvisioningStateCanceled - The resource operation was canceled.
	WorkloadMonitorProvisioningStateCanceled WorkloadMonitorProvisioningState = "Canceled"
	// WorkloadMonitorProvisioningStateCreating - The resource is being created.
	WorkloadMonitorProvisioningStateCreating WorkloadMonitorProvisioningState = "Creating"
	// WorkloadMonitorProvisioningStateDeleting - The resource is being deleted.
	WorkloadMonitorProvisioningStateDeleting WorkloadMonitorProvisioningState = "Deleting"
	// WorkloadMonitorProvisioningStateFailed - The resource creation failed.
	WorkloadMonitorProvisioningStateFailed WorkloadMonitorProvisioningState = "Failed"
	// WorkloadMonitorProvisioningStateMigrating - The resource is being migrated.
	WorkloadMonitorProvisioningStateMigrating WorkloadMonitorProvisioningState = "Migrating"
	// WorkloadMonitorProvisioningStateSucceeded - The resource creation has succeeded.
	WorkloadMonitorProvisioningStateSucceeded WorkloadMonitorProvisioningState = "Succeeded"
	// WorkloadMonitorProvisioningStateUpdating - The resource is being updated.
	WorkloadMonitorProvisioningStateUpdating WorkloadMonitorProvisioningState = "Updating"
)

// PossibleWorkloadMonitorProvisioningStateValues returns the possible values for the WorkloadMonitorProvisioningState const type.
func PossibleWorkloadMonitorProvisioningStateValues() []WorkloadMonitorProvisioningState {
	return []WorkloadMonitorProvisioningState{
		WorkloadMonitorProvisioningStateAccepted,
		WorkloadMonitorProvisioningStateCanceled,
		WorkloadMonitorProvisioningStateCreating,
		WorkloadMonitorProvisioningStateDeleting,
		WorkloadMonitorProvisioningStateFailed,
		WorkloadMonitorProvisioningStateMigrating,
		WorkloadMonitorProvisioningStateSucceeded,
		WorkloadMonitorProvisioningStateUpdating,
	}
}

// WorkloadProviderInstanceHealthState - State of health of the provider instance
type WorkloadProviderInstanceHealthState string

const (
	// WorkloadProviderInstanceHealthStateDegraded - The resource health status is Degraded
	WorkloadProviderInstanceHealthStateDegraded WorkloadProviderInstanceHealthState = "Degraded"
	// WorkloadProviderInstanceHealthStateHealthy - The resource health status is Healthy
	WorkloadProviderInstanceHealthStateHealthy WorkloadProviderInstanceHealthState = "Healthy"
	// WorkloadProviderInstanceHealthStateUnavailable - The resource health status is Unavailable
	WorkloadProviderInstanceHealthStateUnavailable WorkloadProviderInstanceHealthState = "Unavailable"
	// WorkloadProviderInstanceHealthStateUnknown - The resource health status is Unknown
	WorkloadProviderInstanceHealthStateUnknown WorkloadProviderInstanceHealthState = "Unknown"
)

// PossibleWorkloadProviderInstanceHealthStateValues returns the possible values for the WorkloadProviderInstanceHealthState const type.
func PossibleWorkloadProviderInstanceHealthStateValues() []WorkloadProviderInstanceHealthState {
	return []WorkloadProviderInstanceHealthState{
		WorkloadProviderInstanceHealthStateDegraded,
		WorkloadProviderInstanceHealthStateHealthy,
		WorkloadProviderInstanceHealthStateUnavailable,
		WorkloadProviderInstanceHealthStateUnknown,
	}
}
