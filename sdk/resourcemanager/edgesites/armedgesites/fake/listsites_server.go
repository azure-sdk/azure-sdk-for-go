//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgesites/armedgesites"
	"net/http"
	"net/url"
	"regexp"
)

// ListSitesServer is a fake server for instances of the armedgesites.ListSitesClient type.
type ListSitesServer struct {
	// NewByResourceGroupPager is the fake for method ListSitesClient.NewByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewByResourceGroupPager func(resourceGroupName string, options *armedgesites.ListSitesClientByResourceGroupOptions) (resp azfake.PagerResponder[armedgesites.ListSitesClientByResourceGroupResponse])

	// NewBySubscriptionPager is the fake for method ListSitesClient.NewBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewBySubscriptionPager func(options *armedgesites.ListSitesClientBySubscriptionOptions) (resp azfake.PagerResponder[armedgesites.ListSitesClientBySubscriptionResponse])
}

// NewListSitesServerTransport creates a new instance of ListSitesServerTransport with the provided implementation.
// The returned ListSitesServerTransport instance is connected to an instance of armedgesites.ListSitesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewListSitesServerTransport(srv *ListSitesServer) *ListSitesServerTransport {
	return &ListSitesServerTransport{
		srv:                     srv,
		newByResourceGroupPager: newTracker[azfake.PagerResponder[armedgesites.ListSitesClientByResourceGroupResponse]](),
		newBySubscriptionPager:  newTracker[azfake.PagerResponder[armedgesites.ListSitesClientBySubscriptionResponse]](),
	}
}

// ListSitesServerTransport connects instances of armedgesites.ListSitesClient to instances of ListSitesServer.
// Don't use this type directly, use NewListSitesServerTransport instead.
type ListSitesServerTransport struct {
	srv                     *ListSitesServer
	newByResourceGroupPager *tracker[azfake.PagerResponder[armedgesites.ListSitesClientByResourceGroupResponse]]
	newBySubscriptionPager  *tracker[azfake.PagerResponder[armedgesites.ListSitesClientBySubscriptionResponse]]
}

// Do implements the policy.Transporter interface for ListSitesServerTransport.
func (l *ListSitesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ListSitesClient.NewByResourceGroupPager":
		resp, err = l.dispatchNewByResourceGroupPager(req)
	case "ListSitesClient.NewBySubscriptionPager":
		resp, err = l.dispatchNewBySubscriptionPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (l *ListSitesServerTransport) dispatchNewByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewByResourceGroupPager not implemented")}
	}
	newByResourceGroupPager := l.newByResourceGroupPager.get(req)
	if newByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := l.srv.NewByResourceGroupPager(resourceGroupNameParam, nil)
		newByResourceGroupPager = &resp
		l.newByResourceGroupPager.add(req, newByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newByResourceGroupPager, req, func(page *armedgesites.ListSitesClientByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newByResourceGroupPager) {
		l.newByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (l *ListSitesServerTransport) dispatchNewBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewBySubscriptionPager not implemented")}
	}
	newBySubscriptionPager := l.newBySubscriptionPager.get(req)
	if newBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := l.srv.NewBySubscriptionPager(nil)
		newBySubscriptionPager = &resp
		l.newBySubscriptionPager.add(req, newBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newBySubscriptionPager, req, func(page *armedgesites.ListSitesClientBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newBySubscriptionPager) {
		l.newBySubscriptionPager.remove(req)
	}
	return resp, nil
}
