//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsights/armsecurityinsights/v2"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// ThreatIntelligenceServer is a fake server for instances of the armsecurityinsights.ThreatIntelligenceClient type.
type ThreatIntelligenceServer struct {
	// Count is the fake for method ThreatIntelligenceClient.Count
	// HTTP status codes to indicate success: http.StatusOK
	Count func(ctx context.Context, resourceGroupName string, workspaceName string, tiType armsecurityinsights.TiType, options *armsecurityinsights.ThreatIntelligenceClientCountOptions) (resp azfake.Responder[armsecurityinsights.ThreatIntelligenceClientCountResponse], errResp azfake.ErrorResponder)

	// NewQueryPager is the fake for method ThreatIntelligenceClient.NewQueryPager
	// HTTP status codes to indicate success: http.StatusOK
	NewQueryPager func(resourceGroupName string, workspaceName string, tiType armsecurityinsights.TiType, options *armsecurityinsights.ThreatIntelligenceClientQueryOptions) (resp azfake.PagerResponder[armsecurityinsights.ThreatIntelligenceClientQueryResponse])
}

// NewThreatIntelligenceServerTransport creates a new instance of ThreatIntelligenceServerTransport with the provided implementation.
// The returned ThreatIntelligenceServerTransport instance is connected to an instance of armsecurityinsights.ThreatIntelligenceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewThreatIntelligenceServerTransport(srv *ThreatIntelligenceServer) *ThreatIntelligenceServerTransport {
	return &ThreatIntelligenceServerTransport{
		srv:           srv,
		newQueryPager: newTracker[azfake.PagerResponder[armsecurityinsights.ThreatIntelligenceClientQueryResponse]](),
	}
}

// ThreatIntelligenceServerTransport connects instances of armsecurityinsights.ThreatIntelligenceClient to instances of ThreatIntelligenceServer.
// Don't use this type directly, use NewThreatIntelligenceServerTransport instead.
type ThreatIntelligenceServerTransport struct {
	srv           *ThreatIntelligenceServer
	newQueryPager *tracker[azfake.PagerResponder[armsecurityinsights.ThreatIntelligenceClientQueryResponse]]
}

// Do implements the policy.Transporter interface for ThreatIntelligenceServerTransport.
func (t *ThreatIntelligenceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ThreatIntelligenceClient.Count":
		resp, err = t.dispatchCount(req)
	case "ThreatIntelligenceClient.NewQueryPager":
		resp, err = t.dispatchNewQueryPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (t *ThreatIntelligenceServerTransport) dispatchCount(req *http.Request) (*http.Response, error) {
	if t.srv.Count == nil {
		return nil, &nonRetriableError{errors.New("fake for method Count not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/threatIntelligence/(?P<tiType>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/count`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armsecurityinsights.CountQuery](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	tiTypeParam, err := parseWithCast(matches[regex.SubexpIndex("tiType")], func(v string) (armsecurityinsights.TiType, error) {
		p, unescapeErr := url.PathUnescape(v)
		if unescapeErr != nil {
			return "", unescapeErr
		}
		return armsecurityinsights.TiType(p), nil
	})
	if err != nil {
		return nil, err
	}
	var options *armsecurityinsights.ThreatIntelligenceClientCountOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armsecurityinsights.ThreatIntelligenceClientCountOptions{
			Query: &body,
		}
	}
	respr, errRespr := t.srv.Count(req.Context(), resourceGroupNameParam, workspaceNameParam, tiTypeParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ThreatIntelligenceCount, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *ThreatIntelligenceServerTransport) dispatchNewQueryPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewQueryPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewQueryPager not implemented")}
	}
	newQueryPager := t.newQueryPager.get(req)
	if newQueryPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/threatIntelligence/(?P<tiType>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/query`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armsecurityinsights.Query](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		tiTypeParam, err := parseWithCast(matches[regex.SubexpIndex("tiType")], func(v string) (armsecurityinsights.TiType, error) {
			p, unescapeErr := url.PathUnescape(v)
			if unescapeErr != nil {
				return "", unescapeErr
			}
			return armsecurityinsights.TiType(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armsecurityinsights.ThreatIntelligenceClientQueryOptions
		if !reflect.ValueOf(body).IsZero() {
			options = &armsecurityinsights.ThreatIntelligenceClientQueryOptions{
				Query: &body,
			}
		}
		resp := t.srv.NewQueryPager(resourceGroupNameParam, workspaceNameParam, tiTypeParam, options)
		newQueryPager = &resp
		t.newQueryPager.add(req, newQueryPager)
		server.PagerResponderInjectNextLinks(newQueryPager, req, func(page *armsecurityinsights.ThreatIntelligenceClientQueryResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newQueryPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newQueryPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newQueryPager) {
		t.newQueryPager.remove(req)
	}
	return resp, nil
}
