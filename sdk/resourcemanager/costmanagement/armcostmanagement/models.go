//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcostmanagement

import "time"

// AllSavingsBenefitDetails - The properties of the benefit plan recommendation details for a saving.
type AllSavingsBenefitDetails struct {
	// READ-ONLY; Estimated average utilization percentage at this commitment.
	AverageUtilizationPercentage *float64 `json:"averageUtilizationPercentage,omitempty" azure:"ro"`

	// READ-ONLY; The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
	BenefitCost *float64 `json:"benefitCost,omitempty" azure:"ro"`

	// READ-ONLY; The commitment amount for the benefit.
	CommitmentAmount *float64 `json:"commitmentAmount,omitempty" azure:"ro"`

	// READ-ONLY; Expected coverage at this commitment.
	CoveragePercentage *float64 `json:"coveragePercentage,omitempty" azure:"ro"`

	// READ-ONLY; The difference between total cost and benefit cost.
	OverageCost *float64 `json:"overageCost,omitempty" azure:"ro"`

	// READ-ONLY; The amount saved by purchasing the recommended quantity of benefit.
	SavingsAmount *float64 `json:"savingsAmount,omitempty" azure:"ro"`

	// READ-ONLY; The savings in percentage by purchasing the recommended quantity of benefit.
	SavingsPercentage *float64 `json:"savingsPercentage,omitempty" azure:"ro"`

	// READ-ONLY; The cost of the suggested commitment.
	TotalCost *float64 `json:"totalCost,omitempty" azure:"ro"`

	// READ-ONLY; Wastage cost at this commitment.
	WastageCost *float64 `json:"wastageCost,omitempty" azure:"ro"`
}

// AllSavingsList - Result of listing benefit recommendations.
type AllSavingsList struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of benefit recommendations.
	Value []*AllSavingsBenefitDetails `json:"value,omitempty" azure:"ro"`
}

// BenefitRecommendationClientGetOptions contains the optional parameters for the BenefitRecommendationClient.Get method.
type BenefitRecommendationClientGetOptions struct {
	// placeholder for future optional parameters
}

// BenefitRecommendationModel - benefit plan recommendation details.
type BenefitRecommendationModel struct {
	// Reservation or SavingsPlan.
	Kind *BenefitPlanKind `json:"kind,omitempty"`

	// The properties of the benefit plan recommendation.
	Properties BenefitRecommendationPropertiesClassification `json:"properties,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// BenefitRecommendationPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetBenefitRecommendationProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *BenefitRecommendationProperties, *SharedScopeBenefitRecommendationProperties, *SingleScopeBenefitRecommendationProperties
type BenefitRecommendationPropertiesClassification interface {
	// GetBenefitRecommendationProperties returns the BenefitRecommendationProperties content of the underlying type.
	GetBenefitRecommendationProperties() *BenefitRecommendationProperties
}

// BenefitRecommendationProperties - The properties of the benefit plan recommendation.
type BenefitRecommendationProperties struct {
	// REQUIRED; Scope of the benefit, ex: Single or Shared.
	Scope *Scope `json:"scope,omitempty"`

	// The details of the proposed recommendation.
	RecommendationDetails *AllSavingsBenefitDetails `json:"recommendationDetails,omitempty"`

	// The additional details about the usage which are considered while computing benefit recommendations.
	Usage *RecommendationUsageDetails `json:"usage,omitempty"`

	// READ-ONLY; The list of all benefit recommendations.
	AllRecommendationDetails *AllSavingsList `json:"allRecommendationDetails,omitempty" azure:"ro"`

	// READ-ONLY; ARM SKU name ex: StandardD1V2 for Reservations and ComputeSavingsPlan for SavingsPlan.
	ArmSKUName *string `json:"armSkuName,omitempty" azure:"ro"`

	// READ-ONLY; Grain of the proposed commitment amount, ex: hourly, monthly etc.
	CommitmentGranularity *string `json:"commitmentGranularity,omitempty" azure:"ro"`

	// READ-ONLY; The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
	CostWithoutBenefit *float64 `json:"costWithoutBenefit,omitempty" azure:"ro"`

	// READ-ONLY; An ISO 4217 currency code identifier for the costs and savings amounts.
	CurrencyCode *string `json:"currencyCode,omitempty" azure:"ro"`

	// READ-ONLY; The first usage date used for looking back for computing the recommendation.
	FirstConsumptionDate *string `json:"firstConsumptionDate,omitempty" azure:"ro"`

	// READ-ONLY; The last usage date used for looking back for computing the recommendation.
	LastConsumptionDate *string `json:"lastConsumptionDate,omitempty" azure:"ro"`

	// READ-ONLY; The number of days of usage used to look back for computing the recommendation.
	LookBackPeriod *string `json:"lookBackPeriod,omitempty" azure:"ro"`

	// READ-ONLY; Term period of the benefit, ex: P1Y or P3Y.
	Term *string `json:"term,omitempty" azure:"ro"`

	// READ-ONLY; The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
	TotalHours *int32 `json:"totalHours,omitempty" azure:"ro"`
}

// GetBenefitRecommendationProperties implements the BenefitRecommendationPropertiesClassification interface for type BenefitRecommendationProperties.
func (b *BenefitRecommendationProperties) GetBenefitRecommendationProperties() *BenefitRecommendationProperties {
	return b
}

// BenefitRecommendationsClientListOptions contains the optional parameters for the BenefitRecommendationsClient.List method.
type BenefitRecommendationsClientListOptions struct {
	// May be used to expand the properties by: properties/usage, properties/allRecommendationDetails
	Expand *string
	// Can be used to filter benefitRecommendations by: properties/scope with allowed values ['Single', 'Shared'] and default
	// value 'Shared'; and properties/lookBackPeriod with allowed values ['Last7Days',
	// 'Last30Days', 'Last60Days'] and default value 'Last60Days'; properties/term with allowed values ['P1Y', 'P3Y'] and default
	// value 'P3Y'; kind with default value 'SavingsPlan'; properties/armSkuName
	// with allowed values ['Compute', 'SQL'] - if mentioned kind SavingsPlan is applied implicitly; properties/subscriptionId
	Filter *string
	// May be used to order the recommendations by: properties/armSkuName. This implicitly filters the results by the corresponding
	// benefit type.
	Orderby *string
}

// BenefitRecommendationsListResult - Result of listing benefit recommendations.
type BenefitRecommendationsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of benefit recommendations.
	Value []*BenefitRecommendationModel `json:"value,omitempty" azure:"ro"`
}

// BenefitUtilizationResource - The Resource model definition.
type BenefitUtilizationResource struct {
	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// BenefitUtilizationSummariesClientListByBillingAccountIDOptions contains the optional parameters for the BenefitUtilizationSummariesClient.ListByBillingAccountID
// method.
type BenefitUtilizationSummariesClientListByBillingAccountIDOptions struct {
	// Supports filtering by benefitType, benefitId, benefitOrderId and usageDate. benefitType is defaulted to savingsPlan.
	Filter *string
	// Daily or monthly grain.
	Grain *string
}

// BenefitUtilizationSummariesClientListByBillingProfileIDOptions contains the optional parameters for the BenefitUtilizationSummariesClient.ListByBillingProfileID
// method.
type BenefitUtilizationSummariesClientListByBillingProfileIDOptions struct {
	// Supports filtering by benefitType, benefitId, benefitOrderId and usageDate. benefitType is defaulted to savingsPlan.
	Filter *string
	// Daily or monthly grain.
	Grain *string
}

// BenefitUtilizationSummariesClientListBySavingsPlanIDOptions contains the optional parameters for the BenefitUtilizationSummariesClient.ListBySavingsPlanID
// method.
type BenefitUtilizationSummariesClientListBySavingsPlanIDOptions struct {
	// Supports filtering by usageDate.
	Filter *string
	// Daily or monthly grain.
	Grain *string
}

// BenefitUtilizationSummariesClientListBySavingsPlanOrderOptions contains the optional parameters for the BenefitUtilizationSummariesClient.ListBySavingsPlanOrder
// method.
type BenefitUtilizationSummariesClientListBySavingsPlanOrderOptions struct {
	// Supports filtering by usageDate.
	Filter *string
	// Daily or monthly grain.
	Grain *string
}

// BenefitUtilizationSummariesListResult - Result of listing benefit utilization summaries.
type BenefitUtilizationSummariesListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of benefit utilization summaries.
	Value []BenefitUtilizationSummaryClassification `json:"value,omitempty" azure:"ro"`
}

// BenefitUtilizationSummaryClassification provides polymorphic access to related types.
// Call the interface's GetBenefitUtilizationSummary() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *BenefitUtilizationSummary, *IncludedQuantityUtilizationSummary, *SavingsPlanUtilizationSummary
type BenefitUtilizationSummaryClassification interface {
	// GetBenefitUtilizationSummary returns the BenefitUtilizationSummary content of the underlying type.
	GetBenefitUtilizationSummary() *BenefitUtilizationSummary
}

// BenefitUtilizationSummary - Benefit utilization summary resource.
type BenefitUtilizationSummary struct {
	// REQUIRED; Reservation, SavingsPlan or IncludedQuantity.
	Kind *BenefitUtilizationSummaryKind `json:"kind,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// GetBenefitUtilizationSummary implements the BenefitUtilizationSummaryClassification interface for type BenefitUtilizationSummary.
func (b *BenefitUtilizationSummary) GetBenefitUtilizationSummary() *BenefitUtilizationSummary {
	return b
}

// BenefitUtilizationSummaryProperties - The properties of a benefit utilization summary.
type BenefitUtilizationSummaryProperties struct {
	// READ-ONLY; ARM SKU name ex: StandardD1V2 for Reservations and ComputeSavingsPlan for SavingsPlan.
	ArmSKUName *string `json:"armSkuName,omitempty" azure:"ro"`

	// READ-ONLY; The benefit Id is the identifier of a benefit within a benefit order.
	BenefitID *string `json:"benefitId,omitempty" azure:"ro"`

	// READ-ONLY; The benefit order Id is the identifier for a benefit purchase. Each benefit order Id represents a single purchase
	// transaction. For example: A reservation order contains reservations. The reservation
	// order specifies the VM size and region for the reservations.
	BenefitOrderID *string `json:"benefitOrderId,omitempty" azure:"ro"`

	// READ-ONLY; The benefit type ex: reservation, savings plan
	BenefitType *string `json:"benefitType,omitempty" azure:"ro"`

	// READ-ONLY; Date corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.
	UsageDate *time.Time `json:"usageDate,omitempty" azure:"ro"`
}

// BlobInfo - The blob information generated by this operation.
type BlobInfo struct {
	// Link to the blob to download file.
	BlobLink *string `json:"blobLink,omitempty"`

	// Bytes in the blob.
	ByteCount *int64 `json:"byteCount,omitempty"`
}

// CostDetailsOperationResults - The result of the long running operation for cost details Api.
type CostDetailsOperationResults struct {
	// The details of the error.
	Error *ErrorDetails `json:"error,omitempty"`

	// The id of the long running operation.
	ID *string `json:"id,omitempty"`

	// The manifest of the report generated by the operation.
	Manifest *ReportManifest `json:"manifest,omitempty"`

	// The name of the long running operation.
	Name *string `json:"name,omitempty"`

	// The status of the cost details operation
	Status *CostDetailsStatusType `json:"status,omitempty"`

	// The type of the long running operation.
	Type *string `json:"type,omitempty"`

	// The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.
	ValidTill *time.Time `json:"validTill,omitempty"`
}

// CostDetailsTimePeriod - The start and end date for pulling data for the cost detailed report. API only allows data to be
// pulled for 1 month or less and no older than 13 months.
type CostDetailsTimePeriod struct {
	// REQUIRED; The end date to pull data to. example format 2020-03-15
	End *string `json:"end,omitempty"`

	// REQUIRED; The start date to pull data from. example format 2020-03-15
	Start *string `json:"start,omitempty"`
}

// ErrorDetails - The details of the error.
type ErrorDetails struct {
	// READ-ONLY; Error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Error message indicating why the operation failed.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// ErrorResponse - Error response indicates that the service is not able to process the incoming request. The reason is provided
// in the error message.
// Some Error responses:
// * 429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the "x-ms-ratelimit-microsoft.consumption-retry-after"
// header.
//
// * 503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time specified in the "Retry-After"
// header.
type ErrorResponse struct {
	// The details of the error.
	Error *ErrorDetails `json:"error,omitempty"`
}

// GenerateCostDetailsReportClientBeginCreateOperationOptions contains the optional parameters for the GenerateCostDetailsReportClient.BeginCreateOperation
// method.
type GenerateCostDetailsReportClientBeginCreateOperationOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// GenerateCostDetailsReportClientBeginGetOperationResultsOptions contains the optional parameters for the GenerateCostDetailsReportClient.BeginGetOperationResults
// method.
type GenerateCostDetailsReportClientBeginGetOperationResultsOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// GenerateCostDetailsReportErrorResponse - Error response indicates that the service is not able to process the incoming
// request. The reason is provided in the error message.
// Some Error responses:
// * 400 Bad Request - Invalid Request Payload. Request payload provided is not in a json format or had an invalid member
// not accepted in the request payload.
//
// * 400 Bad Request - Invalid request payload: can only have either timePeriod or invoiceId or billingPeriod. API only allows
// data to be pulled for either timePeriod or invoiceId or billingPeriod.
// Customer should provide only one of these parameters.
//
// * 400 Bad Request - Start date must be after . API only allows data to be pulled no older than 13 months from now.
//
// * 400 Bad Request - The maximum allowed date range is 1 months. API only allows data to be pulled for 1 month or less.
//
// * 429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the "retry-after" header.
//
// * 503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time specified in the "Retry-After"
// header.
type GenerateCostDetailsReportErrorResponse struct {
	// The details of the error.
	Error *ErrorDetails `json:"error,omitempty"`
}

// GenerateCostDetailsReportRequestDefinition - The definition of a cost detailed report.
type GenerateCostDetailsReportRequestDefinition struct {
	// This parameter can be used only by Enterprise Agreement customers. Use the YearMonth(e.g. 202008) format. This parameter
	// cannot be used alongside either the invoiceId or timePeriod parameters. If a
	// timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current month's
	// cost.
	BillingPeriod *string `json:"billingPeriod,omitempty"`

	// This parameter can only be used by Microsoft Customer Agreement customers. Additionally, it can only be used at the Billing
	// Profile or Customer scope. This parameter cannot be used alongside either
	// the billingPeriod or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided in the
	// request body the API will return the current month's cost.
	InvoiceID *string `json:"invoiceId,omitempty"`

	// The type of the detailed report. By default ActualCost is provided
	Metric *CostDetailsMetricType `json:"metric,omitempty"`

	// The specific date range of cost details requested for the report. This parameter cannot be used alongside either the invoiceId
	// or billingPeriod parameters. If a timePeriod, invoiceId or billingPeriod
	// parameter is not provided in the request body the API will return the current month's cost. API only allows data to be
	// pulled for 1 month or less and no older than 13 months. If no timePeriod or
	// billingPeriod or invoiceId is provided the API defaults to the open month time period
	TimePeriod *CostDetailsTimePeriod `json:"timePeriod,omitempty"`
}

// IncludedQuantityUtilizationSummary - Included Quantity utilization summary resource.
type IncludedQuantityUtilizationSummary struct {
	// REQUIRED; Reservation, SavingsPlan or IncludedQuantity.
	Kind *BenefitUtilizationSummaryKind `json:"kind,omitempty"`

	// Included Quantity utilization summary properties.
	Properties *IncludedQuantityUtilizationSummaryProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// GetBenefitUtilizationSummary implements the BenefitUtilizationSummaryClassification interface for type IncludedQuantityUtilizationSummary.
func (i *IncludedQuantityUtilizationSummary) GetBenefitUtilizationSummary() *BenefitUtilizationSummary {
	return &BenefitUtilizationSummary{
		Kind: i.Kind,
		ID:   i.ID,
		Name: i.Name,
		Type: i.Type,
	}
}

// IncludedQuantityUtilizationSummaryProperties - Included Quantity utilization summary properties.
type IncludedQuantityUtilizationSummaryProperties struct {
	// READ-ONLY; ARM SKU name ex: StandardD1V2 for Reservations and ComputeSavingsPlan for SavingsPlan.
	ArmSKUName *string `json:"armSkuName,omitempty" azure:"ro"`

	// READ-ONLY; The benefit Id is the identifier of a benefit within a benefit order.
	BenefitID *string `json:"benefitId,omitempty" azure:"ro"`

	// READ-ONLY; The benefit order Id is the identifier for a benefit purchase. Each benefit order Id represents a single purchase
	// transaction. For example: A reservation order contains reservations. The reservation
	// order specifies the VM size and region for the reservations.
	BenefitOrderID *string `json:"benefitOrderId,omitempty" azure:"ro"`

	// READ-ONLY; The benefit type ex: reservation, savings plan
	BenefitType *string `json:"benefitType,omitempty" azure:"ro"`

	// READ-ONLY; Date corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.
	UsageDate *time.Time `json:"usageDate,omitempty" azure:"ro"`

	// READ-ONLY; This is the utilized percentage for the benefit Id.
	UtilizationPercentage *float64 `json:"utilizationPercentage,omitempty" azure:"ro"`
}

// ProxyResource - The Resource model definition.
type ProxyResource struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating
	// the latest version or not.
	ETag *string `json:"eTag,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RecommendationUsageDetails - The additional details about the usage which are considered while computing benefit recommendations.
type RecommendationUsageDetails struct {
	// READ-ONLY; current cost without benefit i.e. charges at the specified grain.
	Charges []*float64 `json:"charges,omitempty" azure:"ro"`

	// READ-ONLY; The grain of the usage. ex: hourly, monthly etc.
	UsageGrain *string `json:"usageGrain,omitempty" azure:"ro"`
}

// ReportManifest - The manifest of the report generated by the operation.
type ReportManifest struct {
	// The total number of blobs.
	BlobCount *int32 `json:"blobCount,omitempty"`

	// List of blob information generated by this operation.
	Blobs []*BlobInfo `json:"blobs,omitempty"`

	// The total number of bytes in all blobs.
	ByteCount *int64 `json:"byteCount,omitempty"`

	// Is the data in compressed format.
	CompressData *bool `json:"compressData,omitempty"`

	// The data format of the report
	DataFormat *CostDetailsDataFormat `json:"dataFormat,omitempty"`

	// The Manifest version.
	ManifestVersion *string `json:"manifestVersion,omitempty"`

	// The context of the Cost Details request.
	RequestContext *RequestContext `json:"requestContext,omitempty"`
}

// RequestContext - The context of the Cost Details request.
type RequestContext struct {
	// The request payload body provided in Cost Details call
	RequestBody *GenerateCostDetailsReportRequestDefinition `json:"requestBody,omitempty"`

	// The request scope of the request.
	RequestScope *string `json:"requestScope,omitempty"`
}

// Resource - The Resource model definition.
type Resource struct {
	// Reservation or SavingsPlan.
	Kind *BenefitPlanKind `json:"kind,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SavingsPlanUtilizationSummary - Savings plan utilization summary resource.
type SavingsPlanUtilizationSummary struct {
	// REQUIRED; Reservation, SavingsPlan or IncludedQuantity.
	Kind *BenefitUtilizationSummaryKind `json:"kind,omitempty"`

	// Savings Plan utilization summary properties.
	Properties *SavingsPlanUtilizationSummaryProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// GetBenefitUtilizationSummary implements the BenefitUtilizationSummaryClassification interface for type SavingsPlanUtilizationSummary.
func (s *SavingsPlanUtilizationSummary) GetBenefitUtilizationSummary() *BenefitUtilizationSummary {
	return &BenefitUtilizationSummary{
		Kind: s.Kind,
		ID:   s.ID,
		Name: s.Name,
		Type: s.Type,
	}
}

// SavingsPlanUtilizationSummaryProperties - Savings Plan utilization summary properties.
type SavingsPlanUtilizationSummaryProperties struct {
	// READ-ONLY; ARM SKU name ex: StandardD1V2 for Reservations and ComputeSavingsPlan for SavingsPlan.
	ArmSKUName *string `json:"armSkuName,omitempty" azure:"ro"`

	// READ-ONLY; This is the average utilization percentage for the benefit Id.
	AvgUtilizationPercentage *float64 `json:"avgUtilizationPercentage,omitempty" azure:"ro"`

	// READ-ONLY; The benefit Id is the identifier of a benefit within a benefit order.
	BenefitID *string `json:"benefitId,omitempty" azure:"ro"`

	// READ-ONLY; The benefit order Id is the identifier for a benefit purchase. Each benefit order Id represents a single purchase
	// transaction. For example: A reservation order contains reservations. The reservation
	// order specifies the VM size and region for the reservations.
	BenefitOrderID *string `json:"benefitOrderId,omitempty" azure:"ro"`

	// READ-ONLY; The benefit type ex: reservation, savings plan
	BenefitType *string `json:"benefitType,omitempty" azure:"ro"`

	// READ-ONLY; This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to
	// 12/10/2017 and on that for hour 4, utilization was 100%, this field will return 100% for
	// that day.
	MaxUtilizationPercentage *float64 `json:"maxUtilizationPercentage,omitempty" azure:"ro"`

	// READ-ONLY; This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to
	// 12/10/2017 and on that for hour 4, utilization was 10%, this field will return 10% for that
	// day
	MinUtilizationPercentage *float64 `json:"minUtilizationPercentage,omitempty" azure:"ro"`

	// READ-ONLY; Date corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.
	UsageDate *time.Time `json:"usageDate,omitempty" azure:"ro"`
}

// SharedScopeBenefitRecommendationProperties - The properties of the benefit plan recommendation when scope is 'Shared'.
type SharedScopeBenefitRecommendationProperties struct {
	// REQUIRED; Scope of the benefit, ex: Single or Shared.
	Scope *Scope `json:"scope,omitempty"`

	// The details of the proposed recommendation.
	RecommendationDetails *AllSavingsBenefitDetails `json:"recommendationDetails,omitempty"`

	// The additional details about the usage which are considered while computing benefit recommendations.
	Usage *RecommendationUsageDetails `json:"usage,omitempty"`

	// READ-ONLY; The list of all benefit recommendations.
	AllRecommendationDetails *AllSavingsList `json:"allRecommendationDetails,omitempty" azure:"ro"`

	// READ-ONLY; ARM SKU name ex: StandardD1V2 for Reservations and ComputeSavingsPlan for SavingsPlan.
	ArmSKUName *string `json:"armSkuName,omitempty" azure:"ro"`

	// READ-ONLY; Grain of the proposed commitment amount, ex: hourly, monthly etc.
	CommitmentGranularity *string `json:"commitmentGranularity,omitempty" azure:"ro"`

	// READ-ONLY; The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
	CostWithoutBenefit *float64 `json:"costWithoutBenefit,omitempty" azure:"ro"`

	// READ-ONLY; An ISO 4217 currency code identifier for the costs and savings amounts.
	CurrencyCode *string `json:"currencyCode,omitempty" azure:"ro"`

	// READ-ONLY; The first usage date used for looking back for computing the recommendation.
	FirstConsumptionDate *string `json:"firstConsumptionDate,omitempty" azure:"ro"`

	// READ-ONLY; The last usage date used for looking back for computing the recommendation.
	LastConsumptionDate *string `json:"lastConsumptionDate,omitempty" azure:"ro"`

	// READ-ONLY; The number of days of usage used to look back for computing the recommendation.
	LookBackPeriod *string `json:"lookBackPeriod,omitempty" azure:"ro"`

	// READ-ONLY; Term period of the benefit, ex: P1Y or P3Y.
	Term *string `json:"term,omitempty" azure:"ro"`

	// READ-ONLY; The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
	TotalHours *int32 `json:"totalHours,omitempty" azure:"ro"`
}

// GetBenefitRecommendationProperties implements the BenefitRecommendationPropertiesClassification interface for type SharedScopeBenefitRecommendationProperties.
func (s *SharedScopeBenefitRecommendationProperties) GetBenefitRecommendationProperties() *BenefitRecommendationProperties {
	return &BenefitRecommendationProperties{
		FirstConsumptionDate:     s.FirstConsumptionDate,
		LastConsumptionDate:      s.LastConsumptionDate,
		LookBackPeriod:           s.LookBackPeriod,
		TotalHours:               s.TotalHours,
		Usage:                    s.Usage,
		ArmSKUName:               s.ArmSKUName,
		Term:                     s.Term,
		CommitmentGranularity:    s.CommitmentGranularity,
		CurrencyCode:             s.CurrencyCode,
		CostWithoutBenefit:       s.CostWithoutBenefit,
		RecommendationDetails:    s.RecommendationDetails,
		AllRecommendationDetails: s.AllRecommendationDetails,
		Scope:                    s.Scope,
	}
}

// SingleScopeBenefitRecommendationProperties - The properties of the benefit plan recommendation when scope is 'Single'.
type SingleScopeBenefitRecommendationProperties struct {
	// REQUIRED; Scope of the benefit, ex: Single or Shared.
	Scope *Scope `json:"scope,omitempty"`

	// The details of the proposed recommendation.
	RecommendationDetails *AllSavingsBenefitDetails `json:"recommendationDetails,omitempty"`

	// The additional details about the usage which are considered while computing benefit recommendations.
	Usage *RecommendationUsageDetails `json:"usage,omitempty"`

	// READ-ONLY; The list of all benefit recommendations.
	AllRecommendationDetails *AllSavingsList `json:"allRecommendationDetails,omitempty" azure:"ro"`

	// READ-ONLY; ARM SKU name ex: StandardD1V2 for Reservations and ComputeSavingsPlan for SavingsPlan.
	ArmSKUName *string `json:"armSkuName,omitempty" azure:"ro"`

	// READ-ONLY; Grain of the proposed commitment amount, ex: hourly, monthly etc.
	CommitmentGranularity *string `json:"commitmentGranularity,omitempty" azure:"ro"`

	// READ-ONLY; The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
	CostWithoutBenefit *float64 `json:"costWithoutBenefit,omitempty" azure:"ro"`

	// READ-ONLY; An ISO 4217 currency code identifier for the costs and savings amounts.
	CurrencyCode *string `json:"currencyCode,omitempty" azure:"ro"`

	// READ-ONLY; The first usage date used for looking back for computing the recommendation.
	FirstConsumptionDate *string `json:"firstConsumptionDate,omitempty" azure:"ro"`

	// READ-ONLY; The last usage date used for looking back for computing the recommendation.
	LastConsumptionDate *string `json:"lastConsumptionDate,omitempty" azure:"ro"`

	// READ-ONLY; The number of days of usage used to look back for computing the recommendation.
	LookBackPeriod *string `json:"lookBackPeriod,omitempty" azure:"ro"`

	// READ-ONLY; The resourceGroup that this single scope recommendation is for. Applicable only if recommendation is for 'Single'
	// scope and 'ResourceGroup' request scope.
	ResourceGroup *string `json:"resourceGroup,omitempty" azure:"ro"`

	// READ-ONLY; The subscription id that this single scope recommendation is for. Applicable only if recommendation is for 'Single'
	// scope.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`

	// READ-ONLY; Term period of the benefit, ex: P1Y or P3Y.
	Term *string `json:"term,omitempty" azure:"ro"`

	// READ-ONLY; The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
	TotalHours *int32 `json:"totalHours,omitempty" azure:"ro"`
}

// GetBenefitRecommendationProperties implements the BenefitRecommendationPropertiesClassification interface for type SingleScopeBenefitRecommendationProperties.
func (s *SingleScopeBenefitRecommendationProperties) GetBenefitRecommendationProperties() *BenefitRecommendationProperties {
	return &BenefitRecommendationProperties{
		FirstConsumptionDate:     s.FirstConsumptionDate,
		LastConsumptionDate:      s.LastConsumptionDate,
		LookBackPeriod:           s.LookBackPeriod,
		TotalHours:               s.TotalHours,
		Usage:                    s.Usage,
		ArmSKUName:               s.ArmSKUName,
		Term:                     s.Term,
		CommitmentGranularity:    s.CommitmentGranularity,
		CurrencyCode:             s.CurrencyCode,
		CostWithoutBenefit:       s.CostWithoutBenefit,
		RecommendationDetails:    s.RecommendationDetails,
		AllRecommendationDetails: s.AllRecommendationDetails,
		Scope:                    s.Scope,
	}
}
