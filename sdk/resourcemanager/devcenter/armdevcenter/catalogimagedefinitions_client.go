// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevcenter

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// CatalogImageDefinitionsClient contains the methods for the DevCenterCatalogImageDefinitions group.
// Don't use this type directly, use NewCatalogImageDefinitionsClient() instead.
type CatalogImageDefinitionsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewCatalogImageDefinitionsClient creates a new instance of CatalogImageDefinitionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCatalogImageDefinitionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CatalogImageDefinitionsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CatalogImageDefinitionsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginBuildImage - Builds an image for the specified Image Definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - devCenterName - The name of the devcenter.
//   - catalogName - The name of the Catalog.
//   - imageDefinitionName - The name of the Image Definition.
//   - options - CatalogImageDefinitionsClientBeginBuildImageOptions contains the optional parameters for the CatalogImageDefinitionsClient.BeginBuildImage
//     method.
func (client *CatalogImageDefinitionsClient) BeginBuildImage(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, options *CatalogImageDefinitionsClientBeginBuildImageOptions) (*runtime.Poller[CatalogImageDefinitionsClientBuildImageResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.buildImage(ctx, resourceGroupName, devCenterName, catalogName, imageDefinitionName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CatalogImageDefinitionsClientBuildImageResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CatalogImageDefinitionsClientBuildImageResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// BuildImage - Builds an image for the specified Image Definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-01-preview
func (client *CatalogImageDefinitionsClient) buildImage(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, options *CatalogImageDefinitionsClientBeginBuildImageOptions) (*http.Response, error) {
	var err error
	const operationName = "CatalogImageDefinitionsClient.BeginBuildImage"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.buildImageCreateRequest(ctx, resourceGroupName, devCenterName, catalogName, imageDefinitionName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// buildImageCreateRequest creates the BuildImage request.
func (client *CatalogImageDefinitionsClient) buildImageCreateRequest(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, _ *CatalogImageDefinitionsClientBeginBuildImageOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}/buildImage"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if devCenterName == "" {
		return nil, errors.New("parameter devCenterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{devCenterName}", url.PathEscape(devCenterName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if imageDefinitionName == "" {
		return nil, errors.New("parameter imageDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{imageDefinitionName}", url.PathEscape(imageDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetByDevCenterCatalog - Gets an Image Definition from the catalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - devCenterName - The name of the devcenter.
//   - catalogName - The name of the Catalog.
//   - imageDefinitionName - The name of the Image Definition.
//   - options - CatalogImageDefinitionsClientGetByDevCenterCatalogOptions contains the optional parameters for the CatalogImageDefinitionsClient.GetByDevCenterCatalog
//     method.
func (client *CatalogImageDefinitionsClient) GetByDevCenterCatalog(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, options *CatalogImageDefinitionsClientGetByDevCenterCatalogOptions) (CatalogImageDefinitionsClientGetByDevCenterCatalogResponse, error) {
	var err error
	const operationName = "CatalogImageDefinitionsClient.GetByDevCenterCatalog"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getByDevCenterCatalogCreateRequest(ctx, resourceGroupName, devCenterName, catalogName, imageDefinitionName, options)
	if err != nil {
		return CatalogImageDefinitionsClientGetByDevCenterCatalogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CatalogImageDefinitionsClientGetByDevCenterCatalogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CatalogImageDefinitionsClientGetByDevCenterCatalogResponse{}, err
	}
	resp, err := client.getByDevCenterCatalogHandleResponse(httpResp)
	return resp, err
}

// getByDevCenterCatalogCreateRequest creates the GetByDevCenterCatalog request.
func (client *CatalogImageDefinitionsClient) getByDevCenterCatalogCreateRequest(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, _ *CatalogImageDefinitionsClientGetByDevCenterCatalogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if devCenterName == "" {
		return nil, errors.New("parameter devCenterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{devCenterName}", url.PathEscape(devCenterName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if imageDefinitionName == "" {
		return nil, errors.New("parameter imageDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{imageDefinitionName}", url.PathEscape(imageDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getByDevCenterCatalogHandleResponse handles the GetByDevCenterCatalog response.
func (client *CatalogImageDefinitionsClient) getByDevCenterCatalogHandleResponse(resp *http.Response) (CatalogImageDefinitionsClientGetByDevCenterCatalogResponse, error) {
	result := CatalogImageDefinitionsClientGetByDevCenterCatalogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImageDefinition); err != nil {
		return CatalogImageDefinitionsClientGetByDevCenterCatalogResponse{}, err
	}
	return result, nil
}

// GetErrorDetails - Gets Image Definition error details
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - devCenterName - The name of the devcenter.
//   - catalogName - The name of the Catalog.
//   - imageDefinitionName - The name of the Image Definition.
//   - options - CatalogImageDefinitionsClientGetErrorDetailsOptions contains the optional parameters for the CatalogImageDefinitionsClient.GetErrorDetails
//     method.
func (client *CatalogImageDefinitionsClient) GetErrorDetails(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, options *CatalogImageDefinitionsClientGetErrorDetailsOptions) (CatalogImageDefinitionsClientGetErrorDetailsResponse, error) {
	var err error
	const operationName = "CatalogImageDefinitionsClient.GetErrorDetails"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getErrorDetailsCreateRequest(ctx, resourceGroupName, devCenterName, catalogName, imageDefinitionName, options)
	if err != nil {
		return CatalogImageDefinitionsClientGetErrorDetailsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CatalogImageDefinitionsClientGetErrorDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CatalogImageDefinitionsClientGetErrorDetailsResponse{}, err
	}
	resp, err := client.getErrorDetailsHandleResponse(httpResp)
	return resp, err
}

// getErrorDetailsCreateRequest creates the GetErrorDetails request.
func (client *CatalogImageDefinitionsClient) getErrorDetailsCreateRequest(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, _ *CatalogImageDefinitionsClientGetErrorDetailsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}/getErrorDetails"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if devCenterName == "" {
		return nil, errors.New("parameter devCenterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{devCenterName}", url.PathEscape(devCenterName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if imageDefinitionName == "" {
		return nil, errors.New("parameter imageDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{imageDefinitionName}", url.PathEscape(imageDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getErrorDetailsHandleResponse handles the GetErrorDetails response.
func (client *CatalogImageDefinitionsClient) getErrorDetailsHandleResponse(resp *http.Response) (CatalogImageDefinitionsClientGetErrorDetailsResponse, error) {
	result := CatalogImageDefinitionsClientGetErrorDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CatalogResourceValidationErrorDetails); err != nil {
		return CatalogImageDefinitionsClientGetErrorDetailsResponse{}, err
	}
	return result, nil
}

// NewListByDevCenterCatalogPager - List Image Definitions in the catalog.
//
// Generated from API version 2025-04-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - devCenterName - The name of the devcenter.
//   - catalogName - The name of the Catalog.
//   - options - CatalogImageDefinitionsClientListByDevCenterCatalogOptions contains the optional parameters for the CatalogImageDefinitionsClient.NewListByDevCenterCatalogPager
//     method.
func (client *CatalogImageDefinitionsClient) NewListByDevCenterCatalogPager(resourceGroupName string, devCenterName string, catalogName string, options *CatalogImageDefinitionsClientListByDevCenterCatalogOptions) *runtime.Pager[CatalogImageDefinitionsClientListByDevCenterCatalogResponse] {
	return runtime.NewPager(runtime.PagingHandler[CatalogImageDefinitionsClientListByDevCenterCatalogResponse]{
		More: func(page CatalogImageDefinitionsClientListByDevCenterCatalogResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CatalogImageDefinitionsClientListByDevCenterCatalogResponse) (CatalogImageDefinitionsClientListByDevCenterCatalogResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CatalogImageDefinitionsClient.NewListByDevCenterCatalogPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByDevCenterCatalogCreateRequest(ctx, resourceGroupName, devCenterName, catalogName, options)
			}, nil)
			if err != nil {
				return CatalogImageDefinitionsClientListByDevCenterCatalogResponse{}, err
			}
			return client.listByDevCenterCatalogHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByDevCenterCatalogCreateRequest creates the ListByDevCenterCatalog request.
func (client *CatalogImageDefinitionsClient) listByDevCenterCatalogCreateRequest(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, options *CatalogImageDefinitionsClientListByDevCenterCatalogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if devCenterName == "" {
		return nil, errors.New("parameter devCenterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{devCenterName}", url.PathEscape(devCenterName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByDevCenterCatalogHandleResponse handles the ListByDevCenterCatalog response.
func (client *CatalogImageDefinitionsClient) listByDevCenterCatalogHandleResponse(resp *http.Response) (CatalogImageDefinitionsClientListByDevCenterCatalogResponse, error) {
	result := CatalogImageDefinitionsClientListByDevCenterCatalogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImageDefinitionListResult); err != nil {
		return CatalogImageDefinitionsClientListByDevCenterCatalogResponse{}, err
	}
	return result, nil
}
