// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// HypervMachinesControllerClient contains the methods for the HypervMachinesController group.
// Don't use this type directly, use NewHypervMachinesControllerClient() instead.
type HypervMachinesControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewHypervMachinesControllerClient creates a new instance of HypervMachinesControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHypervMachinesControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*HypervMachinesControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HypervMachinesControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get a HypervMachine
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - machineName - HypervMachine name
//   - options - HypervMachinesControllerClientGetOptions contains the optional parameters for the HypervMachinesControllerClient.Get
//     method.
func (client *HypervMachinesControllerClient) Get(ctx context.Context, resourceGroupName string, siteName string, machineName string, options *HypervMachinesControllerClientGetOptions) (HypervMachinesControllerClientGetResponse, error) {
	var err error
	const operationName = "HypervMachinesControllerClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, siteName, machineName, options)
	if err != nil {
		return HypervMachinesControllerClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervMachinesControllerClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervMachinesControllerClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *HypervMachinesControllerClient) getCreateRequest(ctx context.Context, resourceGroupName string, siteName string, machineName string, _ *HypervMachinesControllerClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/machines/{machineName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HypervMachinesControllerClient) getHandleResponse(resp *http.Response) (HypervMachinesControllerClientGetResponse, error) {
	result := HypervMachinesControllerClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervMachine); err != nil {
		return HypervMachinesControllerClientGetResponse{}, err
	}
	return result, nil
}

// NewListByHypervSitePager - List HypervMachine resources by HypervSite
//
// Generated from API version 2024-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - HypervMachinesControllerClientListByHypervSiteOptions contains the optional parameters for the HypervMachinesControllerClient.NewListByHypervSitePager
//     method.
func (client *HypervMachinesControllerClient) NewListByHypervSitePager(resourceGroupName string, siteName string, options *HypervMachinesControllerClientListByHypervSiteOptions) *runtime.Pager[HypervMachinesControllerClientListByHypervSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[HypervMachinesControllerClientListByHypervSiteResponse]{
		More: func(page HypervMachinesControllerClientListByHypervSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HypervMachinesControllerClientListByHypervSiteResponse) (HypervMachinesControllerClientListByHypervSiteResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "HypervMachinesControllerClient.NewListByHypervSitePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByHypervSiteCreateRequest(ctx, resourceGroupName, siteName, options)
			}, nil)
			if err != nil {
				return HypervMachinesControllerClientListByHypervSiteResponse{}, err
			}
			return client.listByHypervSiteHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByHypervSiteCreateRequest creates the ListByHypervSite request.
func (client *HypervMachinesControllerClient) listByHypervSiteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *HypervMachinesControllerClientListByHypervSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/machines"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-01-preview")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.TotalRecordCount != nil {
		reqQP.Set("totalRecordCount", strconv.FormatInt(int64(*options.TotalRecordCount), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByHypervSiteHandleResponse handles the ListByHypervSite response.
func (client *HypervMachinesControllerClient) listByHypervSiteHandleResponse(resp *http.Response) (HypervMachinesControllerClientListByHypervSiteResponse, error) {
	result := HypervMachinesControllerClientListByHypervSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervMachineListResult); err != nil {
		return HypervMachinesControllerClientListByHypervSiteResponse{}, err
	}
	return result, nil
}

// Update - Update a HypervMachine
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - machineName - HypervMachine name
//   - body - The resource properties to be updated.
//   - options - HypervMachinesControllerClientUpdateOptions contains the optional parameters for the HypervMachinesControllerClient.Update
//     method.
func (client *HypervMachinesControllerClient) Update(ctx context.Context, resourceGroupName string, siteName string, machineName string, body HypervMachineUpdate, options *HypervMachinesControllerClientUpdateOptions) (HypervMachinesControllerClientUpdateResponse, error) {
	var err error
	const operationName = "HypervMachinesControllerClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, siteName, machineName, body, options)
	if err != nil {
		return HypervMachinesControllerClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervMachinesControllerClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervMachinesControllerClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *HypervMachinesControllerClient) updateCreateRequest(ctx context.Context, resourceGroupName string, siteName string, machineName string, body HypervMachineUpdate, _ *HypervMachinesControllerClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/machines/{machineName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *HypervMachinesControllerClient) updateHandleResponse(resp *http.Response) (HypervMachinesControllerClientUpdateResponse, error) {
	result := HypervMachinesControllerClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervMachine); err != nil {
		return HypervMachinesControllerClientUpdateResponse{}, err
	}
	return result, nil
}

// BeginUpdateProperties - Method to update custom properties for HYPERV machines in a site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - metaData - The content of the action request
//   - options - HypervMachinesControllerClientBeginUpdatePropertiesOptions contains the optional parameters for the HypervMachinesControllerClient.BeginUpdateProperties
//     method.
func (client *HypervMachinesControllerClient) BeginUpdateProperties(ctx context.Context, resourceGroupName string, siteName string, metaData MachineMetadataCollection, options *HypervMachinesControllerClientBeginUpdatePropertiesOptions) (*runtime.Poller[HypervMachinesControllerClientUpdatePropertiesResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateProperties(ctx, resourceGroupName, siteName, metaData, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HypervMachinesControllerClientUpdatePropertiesResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[HypervMachinesControllerClientUpdatePropertiesResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// UpdateProperties - Method to update custom properties for HYPERV machines in a site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-01-preview
func (client *HypervMachinesControllerClient) updateProperties(ctx context.Context, resourceGroupName string, siteName string, metaData MachineMetadataCollection, options *HypervMachinesControllerClientBeginUpdatePropertiesOptions) (*http.Response, error) {
	var err error
	const operationName = "HypervMachinesControllerClient.BeginUpdateProperties"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updatePropertiesCreateRequest(ctx, resourceGroupName, siteName, metaData, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updatePropertiesCreateRequest creates the UpdateProperties request.
func (client *HypervMachinesControllerClient) updatePropertiesCreateRequest(ctx context.Context, resourceGroupName string, siteName string, metaData MachineMetadataCollection, _ *HypervMachinesControllerClientBeginUpdatePropertiesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/updateProperties"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, metaData); err != nil {
		return nil, err
	}
	return req, nil
}
