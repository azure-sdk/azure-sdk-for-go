// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/maintenance/armmaintenance"
	"net/http"
	"net/url"
	"regexp"
)

// ConfigurationAssignmentsForSubscriptionsServer is a fake server for instances of the armmaintenance.ConfigurationAssignmentsForSubscriptionsClient type.
type ConfigurationAssignmentsForSubscriptionsServer struct {
	// CreateOrUpdate is the fake for method ConfigurationAssignmentsForSubscriptionsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, configurationAssignmentName string, resource armmaintenance.ConfigurationAssignment, options *armmaintenance.ConfigurationAssignmentsForSubscriptionsClientCreateOrUpdateOptions) (resp azfake.Responder[armmaintenance.ConfigurationAssignmentsForSubscriptionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method ConfigurationAssignmentsForSubscriptionsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, configurationAssignmentName string, options *armmaintenance.ConfigurationAssignmentsForSubscriptionsClientDeleteOptions) (resp azfake.Responder[armmaintenance.ConfigurationAssignmentsForSubscriptionsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ConfigurationAssignmentsForSubscriptionsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, configurationAssignmentName string, options *armmaintenance.ConfigurationAssignmentsForSubscriptionsClientGetOptions) (resp azfake.Responder[armmaintenance.ConfigurationAssignmentsForSubscriptionsClientGetResponse], errResp azfake.ErrorResponder)

	// Update is the fake for method ConfigurationAssignmentsForSubscriptionsClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, configurationAssignmentName string, properties armmaintenance.ConfigurationAssignment, options *armmaintenance.ConfigurationAssignmentsForSubscriptionsClientUpdateOptions) (resp azfake.Responder[armmaintenance.ConfigurationAssignmentsForSubscriptionsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewConfigurationAssignmentsForSubscriptionsServerTransport creates a new instance of ConfigurationAssignmentsForSubscriptionsServerTransport with the provided implementation.
// The returned ConfigurationAssignmentsForSubscriptionsServerTransport instance is connected to an instance of armmaintenance.ConfigurationAssignmentsForSubscriptionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewConfigurationAssignmentsForSubscriptionsServerTransport(srv *ConfigurationAssignmentsForSubscriptionsServer) *ConfigurationAssignmentsForSubscriptionsServerTransport {
	return &ConfigurationAssignmentsForSubscriptionsServerTransport{srv: srv}
}

// ConfigurationAssignmentsForSubscriptionsServerTransport connects instances of armmaintenance.ConfigurationAssignmentsForSubscriptionsClient to instances of ConfigurationAssignmentsForSubscriptionsServer.
// Don't use this type directly, use NewConfigurationAssignmentsForSubscriptionsServerTransport instead.
type ConfigurationAssignmentsForSubscriptionsServerTransport struct {
	srv *ConfigurationAssignmentsForSubscriptionsServer
}

// Do implements the policy.Transporter interface for ConfigurationAssignmentsForSubscriptionsServerTransport.
func (c *ConfigurationAssignmentsForSubscriptionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *ConfigurationAssignmentsForSubscriptionsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if configurationAssignmentsForSubscriptionsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = configurationAssignmentsForSubscriptionsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ConfigurationAssignmentsForSubscriptionsClient.CreateOrUpdate":
				res.resp, res.err = c.dispatchCreateOrUpdate(req)
			case "ConfigurationAssignmentsForSubscriptionsClient.Delete":
				res.resp, res.err = c.dispatchDelete(req)
			case "ConfigurationAssignmentsForSubscriptionsClient.Get":
				res.resp, res.err = c.dispatchGet(req)
			case "ConfigurationAssignmentsForSubscriptionsClient.Update":
				res.resp, res.err = c.dispatchUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *ConfigurationAssignmentsForSubscriptionsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if c.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Maintenance/configurationAssignments/(?P<configurationAssignmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmaintenance.ConfigurationAssignment](req)
	if err != nil {
		return nil, err
	}
	configurationAssignmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configurationAssignmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.CreateOrUpdate(req.Context(), configurationAssignmentNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConfigurationAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConfigurationAssignmentsForSubscriptionsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if c.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Maintenance/configurationAssignments/(?P<configurationAssignmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	configurationAssignmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configurationAssignmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Delete(req.Context(), configurationAssignmentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConfigurationAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConfigurationAssignmentsForSubscriptionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Maintenance/configurationAssignments/(?P<configurationAssignmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	configurationAssignmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configurationAssignmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), configurationAssignmentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConfigurationAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConfigurationAssignmentsForSubscriptionsServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if c.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Maintenance/configurationAssignments/(?P<configurationAssignmentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmaintenance.ConfigurationAssignment](req)
	if err != nil {
		return nil, err
	}
	configurationAssignmentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configurationAssignmentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Update(req.Context(), configurationAssignmentNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConfigurationAssignment, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ConfigurationAssignmentsForSubscriptionsServerTransport
var configurationAssignmentsForSubscriptionsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
