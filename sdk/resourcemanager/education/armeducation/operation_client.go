//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armeducation

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// OperationClient contains the methods for the Operation group.
// Don't use this type directly, use NewOperationClient() instead.
type OperationClient struct {
	host string
	pl   runtime.Pipeline
}

// NewOperationClient creates a new instance of OperationClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewOperationClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*OperationClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &OperationClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// Status - Get operation status
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-01-preview
// operationID - Operation Id.
// options - OperationClientStatusOptions contains the optional parameters for the OperationClient.Status method.
func (client *OperationClient) Status(ctx context.Context, operationID string, options *OperationClientStatusOptions) (OperationClientStatusResponse, error) {
	req, err := client.statusCreateRequest(ctx, operationID, options)
	if err != nil {
		return OperationClientStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return OperationClientStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return OperationClientStatusResponse{}, runtime.NewResponseError(resp)
	}
	return client.statusHandleResponse(resp)
}

// statusCreateRequest creates the Status request.
func (client *OperationClient) statusCreateRequest(ctx context.Context, operationID string, options *OperationClientStatusOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Education/operationStatus/{operationId}"
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// statusHandleResponse handles the Status response.
func (client *OperationClient) statusHandleResponse(resp *http.Response) (OperationClientStatusResponse, error) {
	result := OperationClientStatusResponse{}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		result.RetryAfter = &val
	}
	return result, nil
}
