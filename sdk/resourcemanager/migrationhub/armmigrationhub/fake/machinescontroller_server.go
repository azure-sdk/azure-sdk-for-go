//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// MachinesControllerServer is a fake server for instances of the armmigrationhub.MachinesControllerClient type.
type MachinesControllerServer struct {
	// GetMachine is the fake for method MachinesControllerClient.GetMachine
	// HTTP status codes to indicate success: http.StatusOK
	GetMachine func(ctx context.Context, resourceGroupName string, migrateProjectName string, machineName string, options *armmigrationhub.MachinesControllerClientGetMachineOptions) (resp azfake.Responder[armmigrationhub.MachinesControllerClientGetMachineResponse], errResp azfake.ErrorResponder)

	// NewListMachinesPager is the fake for method MachinesControllerClient.NewListMachinesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMachinesPager func(resourceGroupName string, migrateProjectName string, options *armmigrationhub.MachinesControllerClientListMachinesOptions) (resp azfake.PagerResponder[armmigrationhub.MachinesControllerClientListMachinesResponse])
}

// NewMachinesControllerServerTransport creates a new instance of MachinesControllerServerTransport with the provided implementation.
// The returned MachinesControllerServerTransport instance is connected to an instance of armmigrationhub.MachinesControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMachinesControllerServerTransport(srv *MachinesControllerServer) *MachinesControllerServerTransport {
	return &MachinesControllerServerTransport{
		srv:                  srv,
		newListMachinesPager: newTracker[azfake.PagerResponder[armmigrationhub.MachinesControllerClientListMachinesResponse]](),
	}
}

// MachinesControllerServerTransport connects instances of armmigrationhub.MachinesControllerClient to instances of MachinesControllerServer.
// Don't use this type directly, use NewMachinesControllerServerTransport instead.
type MachinesControllerServerTransport struct {
	srv                  *MachinesControllerServer
	newListMachinesPager *tracker[azfake.PagerResponder[armmigrationhub.MachinesControllerClientListMachinesResponse]]
}

// Do implements the policy.Transporter interface for MachinesControllerServerTransport.
func (m *MachinesControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "MachinesControllerClient.GetMachine":
		resp, err = m.dispatchGetMachine(req)
	case "MachinesControllerClient.NewListMachinesPager":
		resp, err = m.dispatchNewListMachinesPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (m *MachinesControllerServerTransport) dispatchGetMachine(req *http.Request) (*http.Response, error) {
	if m.srv.GetMachine == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMachine not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/machines/(?P<machineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	machineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("machineName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.GetMachine(req.Context(), resourceGroupNameParam, migrateProjectNameParam, machineNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Machine, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MachinesControllerServerTransport) dispatchNewListMachinesPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListMachinesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMachinesPager not implemented")}
	}
	newListMachinesPager := m.newListMachinesPager.get(req)
	if newListMachinesPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/machines`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		pageSizeUnescaped, err := url.QueryUnescape(qp.Get("pageSize"))
		if err != nil {
			return nil, err
		}
		pageSizeParam, err := parseOptional(pageSizeUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armmigrationhub.MachinesControllerClientListMachinesOptions
		if continuationTokenParam != nil || pageSizeParam != nil {
			options = &armmigrationhub.MachinesControllerClientListMachinesOptions{
				ContinuationToken: continuationTokenParam,
				PageSize:          pageSizeParam,
			}
		}
		resp := m.srv.NewListMachinesPager(resourceGroupNameParam, migrateProjectNameParam, options)
		newListMachinesPager = &resp
		m.newListMachinesPager.add(req, newListMachinesPager)
		server.PagerResponderInjectNextLinks(newListMachinesPager, req, func(page *armmigrationhub.MachinesControllerClientListMachinesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListMachinesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListMachinesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMachinesPager) {
		m.newListMachinesPager.remove(req)
	}
	return resp, nil
}
