//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazureadexternalidentities

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ExternalTenantsClient contains the methods for the ExternalTenants group.
// Don't use this type directly, use NewExternalTenantsClient() instead.
type ExternalTenantsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewExternalTenantsClient creates a new instance of ExternalTenantsClient with the specified values.
//   - subscriptionID - Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewExternalTenantsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ExternalTenantsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ExternalTenantsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Initiates an async request to create both the External tenant and the corresponding Azure resource linked
// to a subscription. Note: Please check name availability before creating a new tenant
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial sub domain of the tenant.
//   - createExternalTenantRequestBody - Request body to create an External tenant
//   - options - ExternalTenantsClientBeginCreateOptions contains the optional parameters for the ExternalTenantsClient.BeginCreate
//     method.
func (client *ExternalTenantsClient) BeginCreate(ctx context.Context, resourceGroupName string, resourceName string, createExternalTenantRequestBody ExternalTenantResource, options *ExternalTenantsClientBeginCreateOptions) (*runtime.Poller[ExternalTenantsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, resourceName, createExternalTenantRequestBody, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExternalTenantsClientCreateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExternalTenantsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Initiates an async request to create both the External tenant and the corresponding Azure resource linked to a
// subscription. Note: Please check name availability before creating a new tenant
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
func (client *ExternalTenantsClient) create(ctx context.Context, resourceGroupName string, resourceName string, createExternalTenantRequestBody ExternalTenantResource, options *ExternalTenantsClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "ExternalTenantsClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, resourceName, createExternalTenantRequestBody, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *ExternalTenantsClient) createCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, createExternalTenantRequestBody ExternalTenantResource, options *ExternalTenantsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createExternalTenantRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Initiates an async operation to delete the External tenant and Azure resource. The resource deletion can
// only happen as the last step in the tenant deletion process [https://aka.ms/delete-ciam-tenant]
// .
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial sub domain of the tenant.
//   - options - ExternalTenantsClientBeginDeleteOptions contains the optional parameters for the ExternalTenantsClient.BeginDelete
//     method.
func (client *ExternalTenantsClient) BeginDelete(ctx context.Context, resourceGroupName string, resourceName string, options *ExternalTenantsClientBeginDeleteOptions) (*runtime.Poller[ExternalTenantsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, resourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExternalTenantsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExternalTenantsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Initiates an async operation to delete the External tenant and Azure resource. The resource deletion can only
// happen as the last step in the tenant deletion process [https://aka.ms/delete-ciam-tenant]
// .
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
func (client *ExternalTenantsClient) deleteOperation(ctx context.Context, resourceGroupName string, resourceName string, options *ExternalTenantsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "ExternalTenantsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ExternalTenantsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *ExternalTenantsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get the External tenant resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial sub domain of the tenant.
//   - options - ExternalTenantsClientGetOptions contains the optional parameters for the ExternalTenantsClient.Get method.
func (client *ExternalTenantsClient) Get(ctx context.Context, resourceGroupName string, resourceName string, options *ExternalTenantsClientGetOptions) (ExternalTenantsClientGetResponse, error) {
	var err error
	const operationName = "ExternalTenantsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return ExternalTenantsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExternalTenantsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExternalTenantsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ExternalTenantsClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *ExternalTenantsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ExternalTenantsClient) getHandleResponse(resp *http.Response) (ExternalTenantsClientGetResponse, error) {
	result := ExternalTenantsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExternalTenantResource); err != nil {
		return ExternalTenantsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Get all the External tenants resources in a resource group.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - ExternalTenantsClientListByResourceGroupOptions contains the optional parameters for the ExternalTenantsClient.NewListByResourceGroupPager
//     method.
func (client *ExternalTenantsClient) NewListByResourceGroupPager(resourceGroupName string, options *ExternalTenantsClientListByResourceGroupOptions) *runtime.Pager[ExternalTenantsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[ExternalTenantsClientListByResourceGroupResponse]{
		More: func(page ExternalTenantsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ExternalTenantsClientListByResourceGroupResponse) (ExternalTenantsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ExternalTenantsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return ExternalTenantsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *ExternalTenantsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *ExternalTenantsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *ExternalTenantsClient) listByResourceGroupHandleResponse(resp *http.Response) (ExternalTenantsClientListByResourceGroupResponse, error) {
	result := ExternalTenantsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExternalTenantResourceList); err != nil {
		return ExternalTenantsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get all the External tenant resources in a subscription.
//
// Generated from API version 2023-05-17-preview
//   - options - ExternalTenantsClientListBySubscriptionOptions contains the optional parameters for the ExternalTenantsClient.NewListBySubscriptionPager
//     method.
func (client *ExternalTenantsClient) NewListBySubscriptionPager(options *ExternalTenantsClientListBySubscriptionOptions) *runtime.Pager[ExternalTenantsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[ExternalTenantsClientListBySubscriptionResponse]{
		More: func(page ExternalTenantsClientListBySubscriptionResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *ExternalTenantsClientListBySubscriptionResponse) (ExternalTenantsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ExternalTenantsClient.NewListBySubscriptionPager")
			req, err := client.listBySubscriptionCreateRequest(ctx, options)
			if err != nil {
				return ExternalTenantsClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return ExternalTenantsClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ExternalTenantsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *ExternalTenantsClient) listBySubscriptionCreateRequest(ctx context.Context, options *ExternalTenantsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/ciamDirectories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *ExternalTenantsClient) listBySubscriptionHandleResponse(resp *http.Response) (ExternalTenantsClientListBySubscriptionResponse, error) {
	result := ExternalTenantsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExternalTenantResourceList); err != nil {
		return ExternalTenantsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update the External tenant resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial sub domain of the tenant.
//   - updateExternalTenantRequestBody - Request body to update External tenant resource.
//   - options - ExternalTenantsClientUpdateOptions contains the optional parameters for the ExternalTenantsClient.Update method.
func (client *ExternalTenantsClient) Update(ctx context.Context, resourceGroupName string, resourceName string, updateExternalTenantRequestBody ExternalTenantUpdateRequest, options *ExternalTenantsClientUpdateOptions) (ExternalTenantsClientUpdateResponse, error) {
	var err error
	const operationName = "ExternalTenantsClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, resourceName, updateExternalTenantRequestBody, options)
	if err != nil {
		return ExternalTenantsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExternalTenantsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExternalTenantsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *ExternalTenantsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, updateExternalTenantRequestBody ExternalTenantUpdateRequest, options *ExternalTenantsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateExternalTenantRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *ExternalTenantsClient) updateHandleResponse(resp *http.Response) (ExternalTenantsClientUpdateResponse, error) {
	result := ExternalTenantsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExternalTenantResource); err != nil {
		return ExternalTenantsClientUpdateResponse{}, err
	}
	return result, nil
}
