// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/help/armhelp"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// CheckNameAvailabilityOperationGroupServer is a fake server for instances of the armhelp.CheckNameAvailabilityOperationGroupClient type.
type CheckNameAvailabilityOperationGroupServer struct {
	// CheckAvailability is the fake for method CheckNameAvailabilityOperationGroupClient.CheckAvailability
	// HTTP status codes to indicate success: http.StatusOK
	CheckAvailability func(ctx context.Context, scope string, options *armhelp.CheckNameAvailabilityOperationGroupClientCheckAvailabilityOptions) (resp azfake.Responder[armhelp.CheckNameAvailabilityOperationGroupClientCheckAvailabilityResponse], errResp azfake.ErrorResponder)
}

// NewCheckNameAvailabilityOperationGroupServerTransport creates a new instance of CheckNameAvailabilityOperationGroupServerTransport with the provided implementation.
// The returned CheckNameAvailabilityOperationGroupServerTransport instance is connected to an instance of armhelp.CheckNameAvailabilityOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCheckNameAvailabilityOperationGroupServerTransport(srv *CheckNameAvailabilityOperationGroupServer) *CheckNameAvailabilityOperationGroupServerTransport {
	return &CheckNameAvailabilityOperationGroupServerTransport{srv: srv}
}

// CheckNameAvailabilityOperationGroupServerTransport connects instances of armhelp.CheckNameAvailabilityOperationGroupClient to instances of CheckNameAvailabilityOperationGroupServer.
// Don't use this type directly, use NewCheckNameAvailabilityOperationGroupServerTransport instead.
type CheckNameAvailabilityOperationGroupServerTransport struct {
	srv *CheckNameAvailabilityOperationGroupServer
}

// Do implements the policy.Transporter interface for CheckNameAvailabilityOperationGroupServerTransport.
func (c *CheckNameAvailabilityOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *CheckNameAvailabilityOperationGroupServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if checkNameAvailabilityOperationGroupServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = checkNameAvailabilityOperationGroupServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "CheckNameAvailabilityOperationGroupClient.CheckAvailability":
				res.resp, res.err = c.dispatchCheckAvailability(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *CheckNameAvailabilityOperationGroupServerTransport) dispatchCheckAvailability(req *http.Request) (*http.Response, error) {
	if c.srv.CheckAvailability == nil {
		return nil, &nonRetriableError{errors.New("fake for method CheckAvailability not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Help/checkNameAvailability`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armhelp.CheckNameAvailabilityRequest](req)
	if err != nil {
		return nil, err
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	var options *armhelp.CheckNameAvailabilityOperationGroupClientCheckAvailabilityOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armhelp.CheckNameAvailabilityOperationGroupClientCheckAvailabilityOptions{
			CheckNameAvailabilityRequest: &body,
		}
	}
	respr, errRespr := c.srv.CheckAvailability(req.Context(), scopeParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CheckNameAvailabilityResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to CheckNameAvailabilityOperationGroupServerTransport
var checkNameAvailabilityOperationGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
