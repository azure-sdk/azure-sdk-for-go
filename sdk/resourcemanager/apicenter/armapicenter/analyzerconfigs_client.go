// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapicenter

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AnalyzerConfigsClient contains the methods for the AnalyzerConfigs group.
// Don't use this type directly, use NewAnalyzerConfigsClient() instead.
type AnalyzerConfigsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAnalyzerConfigsClient creates a new instance of AnalyzerConfigsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAnalyzerConfigsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AnalyzerConfigsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AnalyzerConfigsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates new or updates existing API analyzer configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serviceName - The name of Azure API Center service.
//   - workspaceName - The name of the workspace.
//   - analyzerConfigName - The name of the configuration.
//   - resource - Resource create parameters.
//   - options - AnalyzerConfigsClientCreateOrUpdateOptions contains the optional parameters for the AnalyzerConfigsClient.CreateOrUpdate
//     method.
func (client *AnalyzerConfigsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, resource AnalyzerConfig, options *AnalyzerConfigsClientCreateOrUpdateOptions) (AnalyzerConfigsClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "AnalyzerConfigsClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, serviceName, workspaceName, analyzerConfigName, resource, options)
	if err != nil {
		return AnalyzerConfigsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AnalyzerConfigsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return AnalyzerConfigsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AnalyzerConfigsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, resource AnalyzerConfig, _ *AnalyzerConfigsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if analyzerConfigName == "" {
		return nil, errors.New("parameter analyzerConfigName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{analyzerConfigName}", url.PathEscape(analyzerConfigName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *AnalyzerConfigsClient) createOrUpdateHandleResponse(resp *http.Response) (AnalyzerConfigsClientCreateOrUpdateResponse, error) {
	result := AnalyzerConfigsClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.AnalyzerConfig); err != nil {
		return AnalyzerConfigsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Permanently deletes API analyzer configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serviceName - The name of Azure API Center service.
//   - workspaceName - The name of the workspace.
//   - analyzerConfigName - The name of the configuration.
//   - options - AnalyzerConfigsClientDeleteOptions contains the optional parameters for the AnalyzerConfigsClient.Delete method.
func (client *AnalyzerConfigsClient) Delete(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, options *AnalyzerConfigsClientDeleteOptions) (AnalyzerConfigsClientDeleteResponse, error) {
	var err error
	const operationName = "AnalyzerConfigsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, serviceName, workspaceName, analyzerConfigName, options)
	if err != nil {
		return AnalyzerConfigsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AnalyzerConfigsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return AnalyzerConfigsClientDeleteResponse{}, err
	}
	return AnalyzerConfigsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AnalyzerConfigsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, _ *AnalyzerConfigsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if analyzerConfigName == "" {
		return nil, errors.New("parameter analyzerConfigName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{analyzerConfigName}", url.PathEscape(analyzerConfigName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginExportRuleset - Exports the API analyzer ruleset.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serviceName - The name of Azure API Center service.
//   - workspaceName - The name of the workspace.
//   - analyzerConfigName - The name of the configuration.
//   - options - AnalyzerConfigsClientBeginExportRulesetOptions contains the optional parameters for the AnalyzerConfigsClient.BeginExportRuleset
//     method.
func (client *AnalyzerConfigsClient) BeginExportRuleset(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, options *AnalyzerConfigsClientBeginExportRulesetOptions) (*runtime.Poller[AnalyzerConfigsClientExportRulesetResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.exportRuleset(ctx, resourceGroupName, serviceName, workspaceName, analyzerConfigName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[AnalyzerConfigsClientExportRulesetResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[AnalyzerConfigsClientExportRulesetResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// ExportRuleset - Exports the API analyzer ruleset.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-15-preview
func (client *AnalyzerConfigsClient) exportRuleset(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, options *AnalyzerConfigsClientBeginExportRulesetOptions) (*http.Response, error) {
	var err error
	const operationName = "AnalyzerConfigsClient.BeginExportRuleset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.exportRulesetCreateRequest(ctx, resourceGroupName, serviceName, workspaceName, analyzerConfigName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// exportRulesetCreateRequest creates the ExportRuleset request.
func (client *AnalyzerConfigsClient) exportRulesetCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, _ *AnalyzerConfigsClientBeginExportRulesetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}/exportRuleset"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if analyzerConfigName == "" {
		return nil, errors.New("parameter analyzerConfigName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{analyzerConfigName}", url.PathEscape(analyzerConfigName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Returns details of the API analyzer configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serviceName - The name of Azure API Center service.
//   - workspaceName - The name of the workspace.
//   - analyzerConfigName - The name of the configuration.
//   - options - AnalyzerConfigsClientGetOptions contains the optional parameters for the AnalyzerConfigsClient.Get method.
func (client *AnalyzerConfigsClient) Get(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, options *AnalyzerConfigsClientGetOptions) (AnalyzerConfigsClientGetResponse, error) {
	var err error
	const operationName = "AnalyzerConfigsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, serviceName, workspaceName, analyzerConfigName, options)
	if err != nil {
		return AnalyzerConfigsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AnalyzerConfigsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AnalyzerConfigsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AnalyzerConfigsClient) getCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, _ *AnalyzerConfigsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if analyzerConfigName == "" {
		return nil, errors.New("parameter analyzerConfigName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{analyzerConfigName}", url.PathEscape(analyzerConfigName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AnalyzerConfigsClient) getHandleResponse(resp *http.Response) (AnalyzerConfigsClientGetResponse, error) {
	result := AnalyzerConfigsClientGetResponse{}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.AnalyzerConfig); err != nil {
		return AnalyzerConfigsClientGetResponse{}, err
	}
	return result, nil
}

// BeginImportRuleset - Imports the API analyzer ruleset.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serviceName - The name of Azure API Center service.
//   - workspaceName - The name of the workspace.
//   - analyzerConfigName - The name of the configuration.
//   - body - The content of the action request
//   - options - AnalyzerConfigsClientBeginImportRulesetOptions contains the optional parameters for the AnalyzerConfigsClient.BeginImportRuleset
//     method.
func (client *AnalyzerConfigsClient) BeginImportRuleset(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, body RulesetImportRequest, options *AnalyzerConfigsClientBeginImportRulesetOptions) (*runtime.Poller[AnalyzerConfigsClientImportRulesetResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.importRuleset(ctx, resourceGroupName, serviceName, workspaceName, analyzerConfigName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[AnalyzerConfigsClientImportRulesetResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[AnalyzerConfigsClientImportRulesetResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// ImportRuleset - Imports the API analyzer ruleset.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-15-preview
func (client *AnalyzerConfigsClient) importRuleset(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, body RulesetImportRequest, options *AnalyzerConfigsClientBeginImportRulesetOptions) (*http.Response, error) {
	var err error
	const operationName = "AnalyzerConfigsClient.BeginImportRuleset"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.importRulesetCreateRequest(ctx, resourceGroupName, serviceName, workspaceName, analyzerConfigName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// importRulesetCreateRequest creates the ImportRuleset request.
func (client *AnalyzerConfigsClient) importRulesetCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, analyzerConfigName string, body RulesetImportRequest, _ *AnalyzerConfigsClientBeginImportRulesetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}/importRuleset"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if analyzerConfigName == "" {
		return nil, errors.New("parameter analyzerConfigName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{analyzerConfigName}", url.PathEscape(analyzerConfigName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// NewListPager - Lists API analyzer configurations.
//
// Generated from API version 2024-12-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serviceName - The name of Azure API Center service.
//   - workspaceName - The name of the workspace.
//   - options - AnalyzerConfigsClientListOptions contains the optional parameters for the AnalyzerConfigsClient.NewListPager
//     method.
func (client *AnalyzerConfigsClient) NewListPager(resourceGroupName string, serviceName string, workspaceName string, options *AnalyzerConfigsClientListOptions) *runtime.Pager[AnalyzerConfigsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[AnalyzerConfigsClientListResponse]{
		More: func(page AnalyzerConfigsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AnalyzerConfigsClientListResponse) (AnalyzerConfigsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AnalyzerConfigsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, serviceName, workspaceName, options)
			}, nil)
			if err != nil {
				return AnalyzerConfigsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *AnalyzerConfigsClient) listCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, workspaceName string, options *AnalyzerConfigsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	reqQP.Set("api-version", "2024-12-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *AnalyzerConfigsClient) listHandleResponse(resp *http.Response) (AnalyzerConfigsClientListResponse, error) {
	result := AnalyzerConfigsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AnalyzerConfigListResult); err != nil {
		return AnalyzerConfigsClientListResponse{}, err
	}
	return result, nil
}
