//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsights

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// IndicatorClient contains the methods for the Indicator group.
// Don't use this type directly, use NewIndicatorClient() instead.
type IndicatorClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewIndicatorClient creates a new instance of IndicatorClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewIndicatorClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*IndicatorClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &IndicatorClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates an Indicator.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-04-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - indicatorID - Indicator ID
//   - indicator - The Indicator
//   - options - IndicatorClientCreateOrUpdateOptions contains the optional parameters for the IndicatorClient.CreateOrUpdate
//     method.
func (client *IndicatorClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, workspaceName string, indicatorID string, indicator Indicator, options *IndicatorClientCreateOrUpdateOptions) (IndicatorClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "IndicatorClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, workspaceName, indicatorID, indicator, options)
	if err != nil {
		return IndicatorClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndicatorClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return IndicatorClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *IndicatorClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, indicatorID string, indicator Indicator, options *IndicatorClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/stixIndicators/{indicatorId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if indicatorID == "" {
		return nil, errors.New("parameter indicatorID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indicatorId}", url.PathEscape(indicatorID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, indicator); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *IndicatorClient) createOrUpdateHandleResponse(resp *http.Response) (IndicatorClientCreateOrUpdateResponse, error) {
	result := IndicatorClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Indicator); err != nil {
		return IndicatorClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete an Indicator
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-04-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - indicatorID - Indicator ID
//   - options - IndicatorClientDeleteOptions contains the optional parameters for the IndicatorClient.Delete method.
func (client *IndicatorClient) Delete(ctx context.Context, resourceGroupName string, workspaceName string, indicatorID string, options *IndicatorClientDeleteOptions) (IndicatorClientDeleteResponse, error) {
	var err error
	const operationName = "IndicatorClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, workspaceName, indicatorID, options)
	if err != nil {
		return IndicatorClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndicatorClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return IndicatorClientDeleteResponse{}, err
	}
	return IndicatorClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *IndicatorClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, indicatorID string, options *IndicatorClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/stixIndicators/{indicatorId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if indicatorID == "" {
		return nil, errors.New("parameter indicatorID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indicatorId}", url.PathEscape(indicatorID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets an Indicator.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-04-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - indicatorID - Indicator ID
//   - options - IndicatorClientGetOptions contains the optional parameters for the IndicatorClient.Get method.
func (client *IndicatorClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, indicatorID string, options *IndicatorClientGetOptions) (IndicatorClientGetResponse, error) {
	var err error
	const operationName = "IndicatorClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, indicatorID, options)
	if err != nil {
		return IndicatorClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndicatorClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndicatorClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *IndicatorClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, indicatorID string, options *IndicatorClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/stixIndicators/{indicatorId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if indicatorID == "" {
		return nil, errors.New("parameter indicatorID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indicatorId}", url.PathEscape(indicatorID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *IndicatorClient) getHandleResponse(resp *http.Response) (IndicatorClientGetResponse, error) {
	result := IndicatorClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Indicator); err != nil {
		return IndicatorClientGetResponse{}, err
	}
	return result, nil
}
