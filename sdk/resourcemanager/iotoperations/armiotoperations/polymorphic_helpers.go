// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armiotoperations

import "encoding/json"

func unmarshalAkriConnectorTemplateAllocationClassification(rawMsg json.RawMessage) (AkriConnectorTemplateAllocationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AkriConnectorTemplateAllocationClassification
	switch m["policy"] {
	case string(AkriConnectorTemplateAllocationPolicyBucketized):
		b = &AkriConnectorTemplateBucketizedAllocation{}
	default:
		b = &AkriConnectorTemplateAllocation{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAkriConnectorTemplateHelmRegistrySettingsClassification(rawMsg json.RawMessage) (AkriConnectorTemplateHelmRegistrySettingsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AkriConnectorTemplateHelmRegistrySettingsClassification
	switch m["registrySettingsType"] {
	case string(AkriConnectorTemplateHelmRegistrySettingsTypeRegistryEndpointRef):
		b = &AkriConnectorTemplateHelmRegistryEndpointRef{}
	case string(AkriConnectorTemplateHelmRegistrySettingsTypeContainerRegistry):
		b = &AkriConnectorTemplateHelmContainerRegistry{}
	default:
		b = &AkriConnectorTemplateHelmRegistrySettings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAkriConnectorTemplateManagedConfigurationSettingsClassification(rawMsg json.RawMessage) (AkriConnectorTemplateManagedConfigurationSettingsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AkriConnectorTemplateManagedConfigurationSettingsClassification
	switch m["managedConfigurationType"] {
	case string(AkriConnectorTemplateManagedConfigurationTypeImageConfiguration):
		b = &AkriConnectorTemplateRuntimeImageConfiguration{}
	case string(AkriConnectorTemplateManagedConfigurationTypeStatefulSetConfiguration):
		b = &AkriConnectorTemplateRuntimeStatefulSetConfiguration{}
	default:
		b = &AkriConnectorTemplateManagedConfigurationSettings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAkriConnectorTemplateRuntimeConfigurationClassification(rawMsg json.RawMessage) (AkriConnectorTemplateRuntimeConfigurationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AkriConnectorTemplateRuntimeConfigurationClassification
	switch m["runtimeConfigurationType"] {
	case string(AkriConnectorTemplateRuntimeConfigurationTypeHelmConfiguration):
		b = &AkriConnectorTemplateHelmConfiguration{}
	case string(AkriConnectorTemplateRuntimeConfigurationTypeManagedConfiguration):
		b = &AkriConnectorTemplateManagedConfiguration{}
	default:
		b = &AkriConnectorTemplateRuntimeConfiguration{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAkriConnectorsMqttAuthenticationClassification(rawMsg json.RawMessage) (AkriConnectorsMqttAuthenticationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AkriConnectorsMqttAuthenticationClassification
	switch m["method"] {
	case string(AkriConnectorsMqttAuthenticationMethodServiceAccountToken):
		b = &AkriConnectorsServiceAccountAuthentication{}
	default:
		b = &AkriConnectorsMqttAuthentication{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAkriConnectorsRegistrySettingsClassification(rawMsg json.RawMessage) (AkriConnectorsRegistrySettingsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AkriConnectorsRegistrySettingsClassification
	switch m["registrySettingsType"] {
	case string(AkriConnectorsRegistrySettingsTypeRegistryEndpointRef):
		b = &AkriConnectorsRegistryEndpointRef{}
	case string(AkriConnectorsRegistrySettingsTypeContainerRegistry):
		b = &AkriConnectorsContainerRegistry{}
	default:
		b = &AkriConnectorsRegistrySettings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAkriConnectorsTagDigestSettingsClassification(rawMsg json.RawMessage) (AkriConnectorsTagDigestSettingsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AkriConnectorsTagDigestSettingsClassification
	switch m["tagDigestType"] {
	case string(AkriConnectorsTagDigestTypeTag):
		b = &AkriConnectorsTag{}
	case string(AkriConnectorsTagDigestTypeDigest):
		b = &AkriConnectorsDigest{}
	default:
		b = &AkriConnectorsTagDigestSettings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAkriDiscoveryHandlerScheduleClassification(rawMsg json.RawMessage) (AkriDiscoveryHandlerScheduleClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AkriDiscoveryHandlerScheduleClassification
	switch m["scheduleType"] {
	case string(AkriDiscoveryHandlerScheduleTypeCron):
		b = &AkriDiscoveryHandlerScheduleCron{}
	case string(AkriDiscoveryHandlerScheduleTypeRunOnce):
		b = &AkriDiscoveryHandlerScheduleRunOnce{}
	case string(AkriDiscoveryHandlerScheduleTypeContinuous):
		b = &AkriDiscoveryHandlerScheduleContinuous{}
	default:
		b = &AkriDiscoveryHandlerSchedule{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalBrokerRetainMessagesPolicyClassification(rawMsg json.RawMessage) (BrokerRetainMessagesPolicyClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b BrokerRetainMessagesPolicyClassification
	switch m["mode"] {
	case string(BrokerPersistencePolicyModeCustom):
		b = &BrokerRetainMessagesCustomPolicy{}
	default:
		b = &BrokerRetainMessagesPolicy{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalBrokerStateStorePolicyClassification(rawMsg json.RawMessage) (BrokerStateStorePolicyClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b BrokerStateStorePolicyClassification
	switch m["mode"] {
	case string(BrokerPersistencePolicyModeCustom):
		b = &BrokerStateStoreCustomPolicy{}
	default:
		b = &BrokerStateStorePolicy{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalBrokerSubscriberQueuePolicyClassification(rawMsg json.RawMessage) (BrokerSubscriberQueuePolicyClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b BrokerSubscriberQueuePolicyClassification
	switch m["mode"] {
	case string(BrokerPersistencePolicyModeCustom):
		b = &BrokerSubscriberQueueCustomPolicy{}
	default:
		b = &BrokerSubscriberQueuePolicy{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDataflowGraphNodeClassification(rawMsg json.RawMessage) (DataflowGraphNodeClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DataflowGraphNodeClassification
	switch m["type"] {
	case string(DataflowGraphNodeTypeSource):
		b = &DataflowGraphSourceNode{}
	case string(DataflowGraphNodeTypeGraph):
		b = &DataflowGraphGraphNode{}
	case string(DataflowGraphNodeTypeDestination):
		b = &DatafloGraphDestinationNode{}
	default:
		b = &DataflowGraphNode{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDataflowGraphNodeClassificationArray(rawMsg json.RawMessage) ([]DataflowGraphNodeClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]DataflowGraphNodeClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalDataflowGraphNodeClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalDataflowOpenTelemetryAuthenticationClassification(rawMsg json.RawMessage) (DataflowOpenTelemetryAuthenticationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DataflowOpenTelemetryAuthenticationClassification
	switch m["method"] {
	case string(DataflowOpenTelemetryAuthenticationMethodServiceAccountToken):
		b = &DataflowOpenTelemetryServiceAccountAuthentication{}
	case string(DataflowOpenTelemetryAuthenticationMethodX509Certificate):
		b = &DataflowOpenTelemetryX509CertificateAuthentication{}
	case string(DataflowOpenTelemetryAuthenticationMethodAnonymous):
		b = &DataflowOpenTelemetryAnonymousAuthentication{}
	default:
		b = &DataflowOpenTelemetryAuthentication{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalRegistryEndpointAuthenticationClassification(rawMsg json.RawMessage) (RegistryEndpointAuthenticationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RegistryEndpointAuthenticationClassification
	switch m["method"] {
	case string(RegistryEndpointAuthenticationMethodSystemAssignedManagedIdentity):
		b = &RegistryEndpointSystemAssignedIdentityAuthentication{}
	case string(RegistryEndpointAuthenticationMethodUserAssignedManagedIdentity):
		b = &RegistryEndpointUserAssignedIdentityAuthentication{}
	case string(RegistryEndpointAuthenticationMethodAnonymous):
		b = &RegistryEndpointAnonymousAuthentication{}
	case string(RegistryEndpointAuthenticationMethodArtifactPullSecret):
		b = &RegistryEndpointArtifactPullSecretAuthentication{}
	default:
		b = &RegistryEndpointAuthentication{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalRegistryEndpointTrustedSigningKeyClassification(rawMsg json.RawMessage) (RegistryEndpointTrustedSigningKeyClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RegistryEndpointTrustedSigningKeyClassification
	switch m["type"] {
	case string(RegistryEndpointTrustedSigningKeyTypeSecret):
		b = &RegistryEndpointTrustedSigningKeySecret{}
	case string(RegistryEndpointTrustedSigningKeyTypeConfigMap):
		b = &RegistryEndpointTrustedSigningKeyConfigMap{}
	default:
		b = &RegistryEndpointTrustedSigningKey{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
