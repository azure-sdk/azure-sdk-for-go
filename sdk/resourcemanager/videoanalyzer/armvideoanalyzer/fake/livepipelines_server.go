//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/videoanalyzer/armvideoanalyzer"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// LivePipelinesServer is a fake server for instances of the armvideoanalyzer.LivePipelinesClient type.
type LivePipelinesServer struct {
	// BeginActivate is the fake for method LivePipelinesClient.BeginActivate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginActivate func(ctx context.Context, resourceGroupName string, accountName string, livePipelineName string, options *armvideoanalyzer.LivePipelinesClientBeginActivateOptions) (resp azfake.PollerResponder[armvideoanalyzer.LivePipelinesClientActivateResponse], errResp azfake.ErrorResponder)

	// CreateOrUpdate is the fake for method LivePipelinesClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, accountName string, livePipelineName string, parameters armvideoanalyzer.LivePipeline, options *armvideoanalyzer.LivePipelinesClientCreateOrUpdateOptions) (resp azfake.Responder[armvideoanalyzer.LivePipelinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDeactivate is the fake for method LivePipelinesClient.BeginDeactivate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginDeactivate func(ctx context.Context, resourceGroupName string, accountName string, livePipelineName string, options *armvideoanalyzer.LivePipelinesClientBeginDeactivateOptions) (resp azfake.PollerResponder[armvideoanalyzer.LivePipelinesClientDeactivateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method LivePipelinesClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, accountName string, livePipelineName string, options *armvideoanalyzer.LivePipelinesClientDeleteOptions) (resp azfake.Responder[armvideoanalyzer.LivePipelinesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method LivePipelinesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, accountName string, livePipelineName string, options *armvideoanalyzer.LivePipelinesClientGetOptions) (resp azfake.Responder[armvideoanalyzer.LivePipelinesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method LivePipelinesClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, accountName string, options *armvideoanalyzer.LivePipelinesClientListOptions) (resp azfake.PagerResponder[armvideoanalyzer.LivePipelinesClientListResponse])

	// Update is the fake for method LivePipelinesClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, accountName string, livePipelineName string, parameters armvideoanalyzer.LivePipelineUpdate, options *armvideoanalyzer.LivePipelinesClientUpdateOptions) (resp azfake.Responder[armvideoanalyzer.LivePipelinesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewLivePipelinesServerTransport creates a new instance of LivePipelinesServerTransport with the provided implementation.
// The returned LivePipelinesServerTransport instance is connected to an instance of armvideoanalyzer.LivePipelinesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLivePipelinesServerTransport(srv *LivePipelinesServer) *LivePipelinesServerTransport {
	return &LivePipelinesServerTransport{
		srv:             srv,
		beginActivate:   newTracker[azfake.PollerResponder[armvideoanalyzer.LivePipelinesClientActivateResponse]](),
		beginDeactivate: newTracker[azfake.PollerResponder[armvideoanalyzer.LivePipelinesClientDeactivateResponse]](),
		newListPager:    newTracker[azfake.PagerResponder[armvideoanalyzer.LivePipelinesClientListResponse]](),
	}
}

// LivePipelinesServerTransport connects instances of armvideoanalyzer.LivePipelinesClient to instances of LivePipelinesServer.
// Don't use this type directly, use NewLivePipelinesServerTransport instead.
type LivePipelinesServerTransport struct {
	srv             *LivePipelinesServer
	beginActivate   *tracker[azfake.PollerResponder[armvideoanalyzer.LivePipelinesClientActivateResponse]]
	beginDeactivate *tracker[azfake.PollerResponder[armvideoanalyzer.LivePipelinesClientDeactivateResponse]]
	newListPager    *tracker[azfake.PagerResponder[armvideoanalyzer.LivePipelinesClientListResponse]]
}

// Do implements the policy.Transporter interface for LivePipelinesServerTransport.
func (l *LivePipelinesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "LivePipelinesClient.BeginActivate":
		resp, err = l.dispatchBeginActivate(req)
	case "LivePipelinesClient.CreateOrUpdate":
		resp, err = l.dispatchCreateOrUpdate(req)
	case "LivePipelinesClient.BeginDeactivate":
		resp, err = l.dispatchBeginDeactivate(req)
	case "LivePipelinesClient.Delete":
		resp, err = l.dispatchDelete(req)
	case "LivePipelinesClient.Get":
		resp, err = l.dispatchGet(req)
	case "LivePipelinesClient.NewListPager":
		resp, err = l.dispatchNewListPager(req)
	case "LivePipelinesClient.Update":
		resp, err = l.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (l *LivePipelinesServerTransport) dispatchBeginActivate(req *http.Request) (*http.Response, error) {
	if l.srv.BeginActivate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginActivate not implemented")}
	}
	beginActivate := l.beginActivate.get(req)
	if beginActivate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/livePipelines/(?P<livePipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/activate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		livePipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("livePipelineName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginActivate(req.Context(), resourceGroupNameParam, accountNameParam, livePipelineNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginActivate = &respr
		l.beginActivate.add(req, beginActivate)
	}

	resp, err := server.PollerResponderNext(beginActivate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		l.beginActivate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginActivate) {
		l.beginActivate.remove(req)
	}

	return resp, nil
}

func (l *LivePipelinesServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if l.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/livePipelines/(?P<livePipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armvideoanalyzer.LivePipeline](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	livePipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("livePipelineName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, accountNameParam, livePipelineNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LivePipeline, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LivePipelinesServerTransport) dispatchBeginDeactivate(req *http.Request) (*http.Response, error) {
	if l.srv.BeginDeactivate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeactivate not implemented")}
	}
	beginDeactivate := l.beginDeactivate.get(req)
	if beginDeactivate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/livePipelines/(?P<livePipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deactivate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		livePipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("livePipelineName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginDeactivate(req.Context(), resourceGroupNameParam, accountNameParam, livePipelineNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeactivate = &respr
		l.beginDeactivate.add(req, beginDeactivate)
	}

	resp, err := server.PollerResponderNext(beginDeactivate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		l.beginDeactivate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeactivate) {
		l.beginDeactivate.remove(req)
	}

	return resp, nil
}

func (l *LivePipelinesServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if l.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/livePipelines/(?P<livePipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	livePipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("livePipelineName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.Delete(req.Context(), resourceGroupNameParam, accountNameParam, livePipelineNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LivePipelinesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if l.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/livePipelines/(?P<livePipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	livePipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("livePipelineName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.Get(req.Context(), resourceGroupNameParam, accountNameParam, livePipelineNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LivePipeline, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LivePipelinesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := l.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/livePipelines`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		topUnescaped, err := url.QueryUnescape(qp.Get("$top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armvideoanalyzer.LivePipelinesClientListOptions
		if filterParam != nil || topParam != nil {
			options = &armvideoanalyzer.LivePipelinesClientListOptions{
				Filter: filterParam,
				Top:    topParam,
			}
		}
		resp := l.srv.NewListPager(resourceGroupNameParam, accountNameParam, options)
		newListPager = &resp
		l.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armvideoanalyzer.LivePipelinesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		l.newListPager.remove(req)
	}
	return resp, nil
}

func (l *LivePipelinesServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if l.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/livePipelines/(?P<livePipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armvideoanalyzer.LivePipelineUpdate](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	livePipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("livePipelineName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.Update(req.Context(), resourceGroupNameParam, accountNameParam, livePipelineNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LivePipeline, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
