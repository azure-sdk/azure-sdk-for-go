// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicy

import "time"

// Assignment - The policy assignment.
type Assignment struct {
	// The managed identity associated with the policy assignment.
	Identity *Identity

	// The location of the policy assignment. Only required when utilizing managed identity.
	Location *string

	// Properties for the policy assignment.
	Properties *AssignmentProperties

	// READ-ONLY; The ID of the policy assignment.
	ID *string

	// READ-ONLY; The name of the policy assignment.
	Name *string

	// READ-ONLY; The system metadata relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the policy assignment.
	Type *string
}

// AssignmentListResult - List of policy assignments.
type AssignmentListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// An array of policy assignments.
	Value []*Assignment
}

// AssignmentProperties - The policy assignment properties.
type AssignmentProperties struct {
	// The type of policy assignment. Possible values are NotSpecified, System, SystemHidden, and Custom. Immutable.
	AssignmentType *AssignmentType

	// The version of the policy definition to use.
	DefinitionVersion *string

	// This message will be part of response in case of policy violation.
	Description *string

	// The display name of the policy assignment.
	DisplayName *string

	// The policy assignment enforcement mode. Possible values are Default, DoNotEnforce, and Enroll
	EnforcementMode *EnforcementMode

	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata any

	// The messages that describe why a resource is non-compliant with the policy.
	NonComplianceMessages []*NonComplianceMessage

	// The policy's excluded scopes.
	NotScopes []*string

	// The policy property value override.
	Overrides []*Override

	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters map[string]*ParameterValuesValue

	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionID *string

	// The resource selector list to filter policies by resource properties.
	ResourceSelectors []*ResourceSelector

	// READ-ONLY; The effective version of the policy definition in use. This is only present if requested via the $expand query
	// parameter.
	EffectiveDefinitionVersion *string

	// READ-ONLY; The instance ID of the policy assignment. This ID only and always changes when the assignment is deleted and
	// recreated.
	InstanceID *string

	// READ-ONLY; The latest version of the policy definition available. This is only present if requested via the $expand query
	// parameter.
	LatestDefinitionVersion *string

	// READ-ONLY; The scope for the policy assignment.
	Scope *string
}

// AssignmentUpdate - The policy assignment for Patch request.
type AssignmentUpdate struct {
	// The managed identity associated with the policy assignment.
	Identity *Identity

	// The location of the policy assignment. Only required when utilizing managed identity.
	Location *string

	// The policy assignment properties for Patch request.
	Properties *AssignmentUpdateProperties
}

// AssignmentUpdateProperties - The policy assignment properties for Patch request.
type AssignmentUpdateProperties struct {
	// The policy property value override.
	Overrides []*Override

	// The resource selector list to filter policies by resource properties.
	ResourceSelectors []*ResourceSelector
}

// Definition - The policy definition.
type Definition struct {
	// The policy definition properties.
	Properties *DefinitionProperties

	// READ-ONLY; The ID of the policy definition.
	ID *string

	// READ-ONLY; The name of the policy definition.
	Name *string

	// READ-ONLY; The system metadata relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource (Microsoft.Authorization/policyDefinitions).
	Type *string
}

// DefinitionGroup - The policy definition group.
type DefinitionGroup struct {
	// REQUIRED; The name of the group.
	Name *string

	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataID *string

	// The group's category.
	Category *string

	// The group's description.
	Description *string

	// The group's display name.
	DisplayName *string
}

// DefinitionListResult - List of policy definitions.
type DefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// An array of policy definitions.
	Value []*Definition
}

// DefinitionProperties - The policy definition properties.
type DefinitionProperties struct {
	// The policy definition description.
	Description *string

	// The display name of the policy definition.
	DisplayName *string

	// The details of the source of external evaluation results required by the policy during enforcement evaluation.
	ExternalEvaluationEnforcementSettings *ExternalEvaluationEnforcementSettings

	// The policy definition metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata any

	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string

	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters map[string]*ParameterDefinitionsValue

	// The policy rule.
	PolicyRule any

	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *PolicyType

	// The policy definition version in #.#.# format.
	Version *string

	// A list of available versions for this policy definition.
	Versions []*string
}

// DefinitionReference - The policy definition reference.
type DefinitionReference struct {
	// REQUIRED; The ID of the policy definition or policy set definition.
	PolicyDefinitionID *string

	// The version of the policy definition to use.
	DefinitionVersion *string

	// The name of the groups that this policy definition reference belongs to.
	GroupNames []*string

	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]*ParameterValuesValue

	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceID *string

	// READ-ONLY; The effective version of the policy definition in use. This is only present if requested via the $expand query
	// parameter.
	EffectiveDefinitionVersion *string

	// READ-ONLY; The latest version of the policy definition available. This is only present if requested via the $expand query
	// parameter.
	LatestDefinitionVersion *string
}

// DefinitionVersion - The ID of the policy definition version.
type DefinitionVersion struct {
	// The policy definition version properties.
	Properties *DefinitionVersionProperties

	// READ-ONLY; The ID of the policy definition version.
	ID *string

	// READ-ONLY; The name of the policy definition version.
	Name *string

	// READ-ONLY; The system metadata relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource (Microsoft.Authorization/policyDefinitions/versions).
	Type *string
}

// DefinitionVersionListResult - List of policy definition versions.
type DefinitionVersionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// An array of policy definitions versions.
	Value []*DefinitionVersion
}

// DefinitionVersionProperties - The policy definition properties.
type DefinitionVersionProperties struct {
	// The policy definition description.
	Description *string

	// The display name of the policy definition.
	DisplayName *string

	// The details of the source of external evaluation results required by the policy during enforcement evaluation.
	ExternalEvaluationEnforcementSettings *ExternalEvaluationEnforcementSettings

	// The policy definition metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata any

	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string

	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters map[string]*ParameterDefinitionsValue

	// The policy rule.
	PolicyRule any

	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *PolicyType

	// The policy definition version in #.#.# format.
	Version *string
}

// ExternalEvaluationEndpointInvocationResult - The external evaluation endpoint invocation results.
type ExternalEvaluationEndpointInvocationResult struct {
	// The set of claims that will be attached to the policy token as an attestation for the result of the endpoint invocation.
	Claims any

	// The expiration of the results.
	Expiration *time.Time

	// The status message with additional details about the invocation result.
	Message *string

	// The details of the policy requiring the external endpoint invocation.
	PolicyInfo *LogInfo

	// The result of the external endpoint. Possible values are Succeeded and Failed.
	Result *ExternalEndpointResult

	// The date and time after which a failed endpoint invocation can be retried.
	RetryAfter *time.Time
}

// ExternalEvaluationEndpointSettings - The settings of an external endpoint providing evaluation results.
type ExternalEvaluationEndpointSettings struct {
	// The details of the endpoint.
	Details any

	// The kind of the endpoint.
	Kind *string
}

// ExternalEvaluationEnforcementSettings - The details of the source of external evaluation results required by the policy
// during enforcement evaluation.
type ExternalEvaluationEnforcementSettings struct {
	// The settings of an external endpoint providing evaluation results.
	EndpointSettings *ExternalEvaluationEndpointSettings

	// What to do when evaluating an enforcement policy that requires an external evaluation and the token is missing. Possible
	// values are Audit and Deny.
	MissingTokenAction *string

	// The lifespan of the endpoint invocation result after which it's no longer valid. Value is expected to follow the ISO 8601
	// duration format.
	ResultLifespan *string

	// An array of the role definition Ids the assignment's MSI will need in order to invoke the endpoint.
	RoleDefinitionIDs []*string
}

// Identity for the resource. Policy assignments support a maximum of one identity. That is either a system assigned identity
// or a single user assigned identity.
type Identity struct {
	// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
	Type *ResourceIdentityType

	// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the
	// form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*UserAssignedIdentitiesValue

	// READ-ONLY; The principal ID of the resource identity. This property will only be provided for a system assigned identity
	PrincipalID *string

	// READ-ONLY; The tenant ID of the resource identity. This property will only be provided for a system assigned identity
	TenantID *string
}

// LogInfo - The policy log info.
type LogInfo struct {
	// The management group ancestors.
	Ancestors *string

	// The policy compliance reason code.
	ComplianceReasonCode *string

	// The policy assignment display name.
	PolicyAssignmentDisplayName *string

	// The policy assignment Id.
	PolicyAssignmentID *string

	// The policy assignment name.
	PolicyAssignmentName *string

	// The policy assignment scope.
	PolicyAssignmentScope *string

	// The policy assignment version.
	PolicyAssignmentVersion *string

	// The policy definition display name.
	PolicyDefinitionDisplayName *string

	// The policy definition action.
	PolicyDefinitionEffect *string

	// An array of policy definition group names.
	PolicyDefinitionGroupNames []*string

	// The policy definition Id.
	PolicyDefinitionID *string

	// The policy definition name.
	PolicyDefinitionName *string

	// The policy definition instance Id inside a policy set.
	PolicyDefinitionReferenceID *string

	// The policy definition version.
	PolicyDefinitionVersion *string

	// An array of policy exemption Ids.
	PolicyExemptionIDs []*string

	// The policy set definition category.
	PolicySetDefinitionCategory *string

	// The policy set definition display name.
	PolicySetDefinitionDisplayName *string

	// The policy set definition Id.
	PolicySetDefinitionID *string

	// The policy set definition name.
	PolicySetDefinitionName *string

	// The policy set definition version.
	PolicySetDefinitionVersion *string

	// The resource location.
	ResourceLocation *string
}

// NonComplianceMessage - A message that describes why a resource is non-compliant with the policy. This is shown in 'deny'
// error messages and on resource's non-compliant compliance results.
type NonComplianceMessage struct {
	// REQUIRED; A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages
	// and on resource's non-compliant compliance results.
	Message *string

	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable
	// if the policy assignment assigns a policy set definition. If this is not provided
	// the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceID *string
}

// Override - The policy property value override.
type Override struct {
	// The override kind.
	Kind *OverrideKind

	// The list of the selector expressions.
	Selectors []*Selector

	// The value to override the policy property.
	Value *string
}

// ParameterDefinitionsValue - The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValue struct {
	// The allowed values for the parameter.
	AllowedValues []any

	// The default value for the parameter if no value is provided.
	DefaultValue any

	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueMetadata

	// Provides validation of parameter inputs during assignment using a self-defined JSON schema. This property is only supported
	// for object-type parameters and follows the Json.NET Schema 2019-09
	// implementation. You can learn more about using schemas at https://json-schema.org/ and test draft schemas at https://www.jsonschemavalidator.net/.
	Schema any

	// The data type of the parameter.
	Type *ParameterType
}

// ParameterDefinitionsValueMetadata - General metadata for the parameter.
type ParameterDefinitionsValueMetadata struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during
	// policy assignment. This property is useful in case you wish to assign
	// permissions outside the assignment scope.
	AssignPermissions *bool

	// The description of the parameter.
	Description *string

	// The display name for the parameter.
	DisplayName *string

	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose
	// from.
	StrongType *string
}

// ParameterValuesValue - The value of a parameter.
type ParameterValuesValue struct {
	// The value of the parameter.
	Value any
}

// ResourceSelector - The resource selector to filter policies by resource properties.
type ResourceSelector struct {
	// The name of the resource selector.
	Name *string

	// The list of the selector expressions.
	Selectors []*Selector
}

// Selector - The selector expression.
type Selector struct {
	// The list of values to filter in.
	In []*string

	// The selector kind.
	Kind *SelectorKind

	// The list of values to filter out.
	NotIn []*string
}

// SetDefinition - The policy set definition.
type SetDefinition struct {
	// The policy set definition properties.
	Properties *SetDefinitionProperties

	// READ-ONLY; The ID of the policy set definition.
	ID *string

	// READ-ONLY; The name of the policy set definition.
	Name *string

	// READ-ONLY; The system metadata relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource (Microsoft.Authorization/policySetDefinitions).
	Type *string
}

// SetDefinitionListResult - List of policy set definitions.
type SetDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// An array of policy set definitions.
	Value []*SetDefinition
}

// SetDefinitionProperties - The policy set definition properties.
type SetDefinitionProperties struct {
	// REQUIRED; An array of policy definition references.
	PolicyDefinitions []*DefinitionReference

	// The policy set definition description.
	Description *string

	// The display name of the policy set definition.
	DisplayName *string

	// The policy set definition metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata any

	// The policy set definition parameters that can be used in policy definition references.
	Parameters map[string]*ParameterDefinitionsValue

	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []*DefinitionGroup

	// The type of policy set definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *PolicyType

	// The policy set definition version in #.#.# format.
	Version *string

	// A list of available versions for this policy set definition.
	Versions []*string
}

// SetDefinitionVersion - The policy set definition version.
type SetDefinitionVersion struct {
	// The policy set definition version properties.
	Properties *SetDefinitionVersionProperties

	// READ-ONLY; The ID of the policy set definition version.
	ID *string

	// READ-ONLY; The name of the policy set definition version.
	Name *string

	// READ-ONLY; The system metadata relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource (Microsoft.Authorization/policySetDefinitions/versions).
	Type *string
}

// SetDefinitionVersionListResult - List of policy set definition versions.
type SetDefinitionVersionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string

	// An array of policy set definition versions.
	Value []*SetDefinitionVersion
}

// SetDefinitionVersionProperties - The policy set definition properties.
type SetDefinitionVersionProperties struct {
	// REQUIRED; An array of policy definition references.
	PolicyDefinitions []*DefinitionReference

	// The policy set definition description.
	Description *string

	// The display name of the policy set definition.
	DisplayName *string

	// The policy set definition metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata any

	// The policy set definition parameters that can be used in policy definition references.
	Parameters map[string]*ParameterDefinitionsValue

	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []*DefinitionGroup

	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *PolicyType

	// The policy set definition version in #.#.# format.
	Version *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TokenOperation - The resource operation to acquire a token for.
type TokenOperation struct {
	// The payload of the resource operation.
	Content any

	// The http method of the resource operation.
	HTTPMethod *string

	// The request URI of the resource operation.
	URI *string
}

// TokenRequest - The policy token request properties.
type TokenRequest struct {
	// The change reference.
	ChangeReference *string

	// The resource operation to acquire a token for.
	Operation *TokenOperation
}

// TokenResponse - The policy token response properties.
type TokenResponse struct {
	// The change reference associated with the operation for which the token is acquired.
	ChangeReference *string

	// The expiration of the policy token.
	Expiration *time.Time

	// Status message with additional details about the token acquisition operation result.
	Message *string

	// The result of the completed token acquisition operation. Possible values are Succeeded and Failed.
	Result *PolicyTokenResult

	// An array of external evaluation endpoint invocation results.
	Results []*ExternalEvaluationEndpointInvocationResult

	// The date and time after which the client can try to acquire a token again in the case of retry-able failures.
	RetryAfter *time.Time

	// The issued policy token.
	Token *string

	// The unique Id assigned to the policy token.
	TokenID *string
}

type UserAssignedIdentitiesValue struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string
}
