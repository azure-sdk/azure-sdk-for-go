//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appcontainers/armappcontainers/v3"
	"net/http"
	"net/url"
	"regexp"
)

// ContainerAppsSessionPoolSessionsServer is a fake server for instances of the armappcontainers.ContainerAppsSessionPoolSessionsClient type.
type ContainerAppsSessionPoolSessionsServer struct {
	// NewGenerateSessionsPager is the fake for method ContainerAppsSessionPoolSessionsClient.NewGenerateSessionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGenerateSessionsPager func(resourceGroupName string, sessionPoolName string, sessionEnvelope armappcontainers.Session, options *armappcontainers.ContainerAppsSessionPoolSessionsClientGenerateSessionsOptions) (resp azfake.PagerResponder[armappcontainers.ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse])

	// Get is the fake for method ContainerAppsSessionPoolSessionsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, sessionPoolName string, name string, options *armappcontainers.ContainerAppsSessionPoolSessionsClientGetOptions) (resp azfake.Responder[armappcontainers.ContainerAppsSessionPoolSessionsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListBySessionPoolPager is the fake for method ContainerAppsSessionPoolSessionsClient.NewListBySessionPoolPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySessionPoolPager func(resourceGroupName string, sessionPoolName string, options *armappcontainers.ContainerAppsSessionPoolSessionsClientListBySessionPoolOptions) (resp azfake.PagerResponder[armappcontainers.ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse])

	// UpdateEnvironmentVariables is the fake for method ContainerAppsSessionPoolSessionsClient.UpdateEnvironmentVariables
	// HTTP status codes to indicate success: http.StatusOK
	UpdateEnvironmentVariables func(ctx context.Context, resourceGroupName string, sessionPoolName string, name string, environmentVariables armappcontainers.EnvironmentVariableCollection, options *armappcontainers.ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesOptions) (resp azfake.Responder[armappcontainers.ContainerAppsSessionPoolSessionsClientUpdateEnvironmentVariablesResponse], errResp azfake.ErrorResponder)
}

// NewContainerAppsSessionPoolSessionsServerTransport creates a new instance of ContainerAppsSessionPoolSessionsServerTransport with the provided implementation.
// The returned ContainerAppsSessionPoolSessionsServerTransport instance is connected to an instance of armappcontainers.ContainerAppsSessionPoolSessionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewContainerAppsSessionPoolSessionsServerTransport(srv *ContainerAppsSessionPoolSessionsServer) *ContainerAppsSessionPoolSessionsServerTransport {
	return &ContainerAppsSessionPoolSessionsServerTransport{
		srv:                       srv,
		newGenerateSessionsPager:  newTracker[azfake.PagerResponder[armappcontainers.ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse]](),
		newListBySessionPoolPager: newTracker[azfake.PagerResponder[armappcontainers.ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse]](),
	}
}

// ContainerAppsSessionPoolSessionsServerTransport connects instances of armappcontainers.ContainerAppsSessionPoolSessionsClient to instances of ContainerAppsSessionPoolSessionsServer.
// Don't use this type directly, use NewContainerAppsSessionPoolSessionsServerTransport instead.
type ContainerAppsSessionPoolSessionsServerTransport struct {
	srv                       *ContainerAppsSessionPoolSessionsServer
	newGenerateSessionsPager  *tracker[azfake.PagerResponder[armappcontainers.ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse]]
	newListBySessionPoolPager *tracker[azfake.PagerResponder[armappcontainers.ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse]]
}

// Do implements the policy.Transporter interface for ContainerAppsSessionPoolSessionsServerTransport.
func (c *ContainerAppsSessionPoolSessionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ContainerAppsSessionPoolSessionsClient.NewGenerateSessionsPager":
		resp, err = c.dispatchNewGenerateSessionsPager(req)
	case "ContainerAppsSessionPoolSessionsClient.Get":
		resp, err = c.dispatchGet(req)
	case "ContainerAppsSessionPoolSessionsClient.NewListBySessionPoolPager":
		resp, err = c.dispatchNewListBySessionPoolPager(req)
	case "ContainerAppsSessionPoolSessionsClient.UpdateEnvironmentVariables":
		resp, err = c.dispatchUpdateEnvironmentVariables(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *ContainerAppsSessionPoolSessionsServerTransport) dispatchNewGenerateSessionsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewGenerateSessionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGenerateSessionsPager not implemented")}
	}
	newGenerateSessionsPager := c.newGenerateSessionsPager.get(req)
	if newGenerateSessionsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/sessionPools/(?P<sessionPoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/generateSessions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armappcontainers.Session](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sessionPoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sessionPoolName")])
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewGenerateSessionsPager(resourceGroupNameParam, sessionPoolNameParam, body, nil)
		newGenerateSessionsPager = &resp
		c.newGenerateSessionsPager.add(req, newGenerateSessionsPager)
		server.PagerResponderInjectNextLinks(newGenerateSessionsPager, req, func(page *armappcontainers.ContainerAppsSessionPoolSessionsClientGenerateSessionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGenerateSessionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newGenerateSessionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGenerateSessionsPager) {
		c.newGenerateSessionsPager.remove(req)
	}
	return resp, nil
}

func (c *ContainerAppsSessionPoolSessionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/sessionPools/(?P<sessionPoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sessions/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sessionPoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sessionPoolName")])
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), resourceGroupNameParam, sessionPoolNameParam, nameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Session, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ContainerAppsSessionPoolSessionsServerTransport) dispatchNewListBySessionPoolPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListBySessionPoolPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySessionPoolPager not implemented")}
	}
	newListBySessionPoolPager := c.newListBySessionPoolPager.get(req)
	if newListBySessionPoolPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/sessionPools/(?P<sessionPoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sessions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sessionPoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sessionPoolName")])
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListBySessionPoolPager(resourceGroupNameParam, sessionPoolNameParam, nil)
		newListBySessionPoolPager = &resp
		c.newListBySessionPoolPager.add(req, newListBySessionPoolPager)
		server.PagerResponderInjectNextLinks(newListBySessionPoolPager, req, func(page *armappcontainers.ContainerAppsSessionPoolSessionsClientListBySessionPoolResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySessionPoolPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListBySessionPoolPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySessionPoolPager) {
		c.newListBySessionPoolPager.remove(req)
	}
	return resp, nil
}

func (c *ContainerAppsSessionPoolSessionsServerTransport) dispatchUpdateEnvironmentVariables(req *http.Request) (*http.Response, error) {
	if c.srv.UpdateEnvironmentVariables == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateEnvironmentVariables not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/sessionPools/(?P<sessionPoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sessions/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateEnvironmentVariables`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armappcontainers.EnvironmentVariableCollection](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sessionPoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sessionPoolName")])
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.UpdateEnvironmentVariables(req.Context(), resourceGroupNameParam, sessionPoolNameParam, nameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
