// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// SpeechToTextServer is a fake server for instances of the azspeechtotexttranscription.SpeechToTextClient type.
type SpeechToTextServer struct {
	// SpeechToTextBatchTranscriptionServer contains the fakes for client SpeechToTextBatchTranscriptionClient
	SpeechToTextBatchTranscriptionServer SpeechToTextBatchTranscriptionServer

	// SpeechToTextFastTranscriptionServer contains the fakes for client SpeechToTextFastTranscriptionClient
	SpeechToTextFastTranscriptionServer SpeechToTextFastTranscriptionServer
}

// NewSpeechToTextServerTransport creates a new instance of SpeechToTextServerTransport with the provided implementation.
// The returned SpeechToTextServerTransport instance is connected to an instance of azspeechtotexttranscription.SpeechToTextClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSpeechToTextServerTransport(srv *SpeechToTextServer) *SpeechToTextServerTransport {
	return &SpeechToTextServerTransport{srv: srv}
}

// SpeechToTextServerTransport connects instances of azspeechtotexttranscription.SpeechToTextClient to instances of SpeechToTextServer.
// Don't use this type directly, use NewSpeechToTextServerTransport instead.
type SpeechToTextServerTransport struct {
	srv                                    *SpeechToTextServer
	trMu                                   sync.Mutex
	trSpeechToTextBatchTranscriptionServer *SpeechToTextBatchTranscriptionServerTransport
	trSpeechToTextFastTranscriptionServer  *SpeechToTextFastTranscriptionServerTransport
}

// Do implements the policy.Transporter interface for SpeechToTextServerTransport.
func (s *SpeechToTextServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (s *SpeechToTextServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "SpeechToTextBatchTranscriptionClient":
		initServer(&s.trMu, &s.trSpeechToTextBatchTranscriptionServer, func() *SpeechToTextBatchTranscriptionServerTransport {
			return NewSpeechToTextBatchTranscriptionServerTransport(&s.srv.SpeechToTextBatchTranscriptionServer)
		})
		resp, err = s.trSpeechToTextBatchTranscriptionServer.Do(req)
	case "SpeechToTextFastTranscriptionClient":
		initServer(&s.trMu, &s.trSpeechToTextFastTranscriptionServer, func() *SpeechToTextFastTranscriptionServerTransport {
			return NewSpeechToTextFastTranscriptionServerTransport(&s.srv.SpeechToTextFastTranscriptionServer)
		})
		resp, err = s.trSpeechToTextFastTranscriptionServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to SpeechToTextServerTransport
var speechToTextServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
