//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmessagingconnectors

import "time"

// BitCoinSourceConnectorProperties - Configuration for BitCoinSourceConnector
type BitCoinSourceConnectorProperties struct {
	// REQUIRED; connectionString of the EventHub.
	EventHubConfig *EventHubConfig

	// REQUIRED; Max Tasks count of the Connector.
	MaxTasks *int32

	// REQUIRED; Type of the Connector.
	ValueConverter *ConverterType

	// READ-ONLY; State of the MessagingConnector
	ConnectorState *ConnectorState

	// READ-ONLY; Type of the Connector.
	ConnectorType *ConnectorType

	// READ-ONLY; Direction of the Connector.
	ConnectorDirection *Direction

	// READ-ONLY; State of provisioning of the MessagingConnector ARM Resource
	ProvisioningState *ConnectorProvisioningState
}

// GetConnectorProperties implements the ConnectorPropertiesClassification interface for type BitCoinSourceConnectorProperties.
func (b *BitCoinSourceConnectorProperties) GetConnectorProperties() *ConnectorProperties {
	return &ConnectorProperties{
		ConnectorDirection: b.ConnectorDirection,
		ConnectorState:     b.ConnectorState,
		ConnectorType:      b.ConnectorType,
		EventHubConfig:     b.EventHubConfig,
		MaxTasks:           b.MaxTasks,
		ProvisioningState:  b.ProvisioningState,
		ValueConverter:     b.ValueConverter,
	}
}

// ConfluentSourceConnectorProperties - Configuration for ConfluentSourceConnector
type ConfluentSourceConnectorProperties struct {
	// REQUIRED; AutoOffsetReset policy of the Confluent consume.
	AutoOffsetReset *string

	// REQUIRED; bootstrapServers of the Confluent server.
	BootstrapServers *string

	// REQUIRED; ConsumerGroup of the Confluent.
	ConsumerGroup *string

	// REQUIRED; connectionString of the EventHub.
	EventHubConfig *EventHubConfig

	// REQUIRED; Max Tasks count of the Connector.
	MaxTasks *int32

	// REQUIRED; Password of the Confluent.
	Password *string

	// REQUIRED; Topic of the Confluent.
	Topic *string

	// REQUIRED; User of the Confluent.
	User *string

	// REQUIRED; Type of the Connector.
	ValueConverter *ConverterType

	// READ-ONLY; State of the MessagingConnector
	ConnectorState *ConnectorState

	// READ-ONLY; Type of the Connector.
	ConnectorType *ConnectorType

	// READ-ONLY; Direction of the Connector.
	ConnectorDirection *Direction

	// READ-ONLY; State of provisioning of the MessagingConnector ARM Resource
	ProvisioningState *ConnectorProvisioningState
}

// GetConnectorProperties implements the ConnectorPropertiesClassification interface for type ConfluentSourceConnectorProperties.
func (c *ConfluentSourceConnectorProperties) GetConnectorProperties() *ConnectorProperties {
	return &ConnectorProperties{
		ConnectorDirection: c.ConnectorDirection,
		ConnectorState:     c.ConnectorState,
		ConnectorType:      c.ConnectorType,
		EventHubConfig:     c.EventHubConfig,
		MaxTasks:           c.MaxTasks,
		ProvisioningState:  c.ProvisioningState,
		ValueConverter:     c.ValueConverter,
	}
}

// ConnectorInstance - A Connector resource Azure
type ConnectorInstance struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties ConnectorPropertiesClassification

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ConnectorInstanceListResult - The response of a ConnectorInstance list operation.
type ConnectorInstanceListResult struct {
	// REQUIRED; The ConnectorInstance items on this page
	Value []*ConnectorInstance

	// The link to the next page of items
	NextLink *string
}

// ConnectorInstanceTagsUpdate - The type used for updating tags in ConnectorInstance resources.
type ConnectorInstanceTagsUpdate struct {
	// Resource tags.
	Tags map[string]*string
}

// ConnectorProperties - Basic info for Connector
type ConnectorProperties struct {
	// REQUIRED; connectionString of the EventHub.
	EventHubConfig *EventHubConfig

	// REQUIRED; Max Tasks count of the Connector.
	MaxTasks *int32

	// REQUIRED; Type of the Connector.
	ValueConverter *ConverterType

	// READ-ONLY; State of the MessagingConnector
	ConnectorState *ConnectorState

	// READ-ONLY; Type of the Connector.
	ConnectorType *ConnectorType

	// READ-ONLY; Direction of the Connector.
	ConnectorDirection *Direction

	// READ-ONLY; State of provisioning of the MessagingConnector ARM Resource
	ProvisioningState *ConnectorProvisioningState
}

// GetConnectorProperties implements the ConnectorPropertiesClassification interface for type ConnectorProperties.
func (c *ConnectorProperties) GetConnectorProperties() *ConnectorProperties { return c }

// CosmosDbSourceConnectorProperties - Configuration for CosmosDbSourceConnector
type CosmosDbSourceConnectorProperties struct {
	// REQUIRED; Container for CosmosDB server.
	Container *string

	// REQUIRED; Endpoint of CosmosDB.
	CosmosEndpoint *string

	// REQUIRED; DatabaseName for CosmosDB server.
	DatabaseName *string

	// REQUIRED; connectionString of the EventHub.
	EventHubConfig *EventHubConfig

	// REQUIRED; masterKey for CosmosDB server.
	MasterKey *string

	// REQUIRED; Max Tasks count of the Connector.
	MaxTasks *int32

	// REQUIRED; useLatestOffset policy
	OffsetPolicy *OffsetPolicyForCosmosDB

	// REQUIRED; PollIntervalInMs policy.
	PollIntervalInMs *int32

	// REQUIRED; Type of the Connector.
	ValueConverter *ConverterType

	// READ-ONLY; State of the MessagingConnector
	ConnectorState *ConnectorState

	// READ-ONLY; Type of the Connector.
	ConnectorType *ConnectorType

	// READ-ONLY; Direction of the Connector.
	ConnectorDirection *Direction

	// READ-ONLY; State of provisioning of the MessagingConnector ARM Resource
	ProvisioningState *ConnectorProvisioningState
}

// GetConnectorProperties implements the ConnectorPropertiesClassification interface for type CosmosDbSourceConnectorProperties.
func (c *CosmosDbSourceConnectorProperties) GetConnectorProperties() *ConnectorProperties {
	return &ConnectorProperties{
		ConnectorDirection: c.ConnectorDirection,
		ConnectorState:     c.ConnectorState,
		ConnectorType:      c.ConnectorType,
		EventHubConfig:     c.EventHubConfig,
		MaxTasks:           c.MaxTasks,
		ProvisioningState:  c.ProvisioningState,
		ValueConverter:     c.ValueConverter,
	}
}

// EventHubConfig - Basic info for EventHub
type EventHubConfig struct {
	// REQUIRED; connectionString of the EventHub.
	ConnectionString *string

	// REQUIRED; name of the EventHub.
	EventHubName *string

	// REQUIRED; namespace of the EventHub.
	NamespaceHostName *string
}

// GooglePubSubSourceConnectorProperties - Configuration for GooglePubSubSourceConnector
type GooglePubSubSourceConnectorProperties struct {
	// REQUIRED; AccountKey for pubsub server.
	AccountKey *string

	// REQUIRED; connectionString of the EventHub.
	EventHubConfig *EventHubConfig

	// REQUIRED; Max Tasks count of the Connector.
	MaxTasks *int32

	// REQUIRED; ProjectId for pubsub server.
	ProjectID *string

	// REQUIRED; SubscriptionName for pubsub server.
	SubscriptionName *string

	// REQUIRED; Type of the Connector.
	ValueConverter *ConverterType

	// READ-ONLY; State of the MessagingConnector
	ConnectorState *ConnectorState

	// READ-ONLY; Type of the Connector.
	ConnectorType *ConnectorType

	// READ-ONLY; Direction of the Connector.
	ConnectorDirection *Direction

	// READ-ONLY; State of provisioning of the MessagingConnector ARM Resource
	ProvisioningState *ConnectorProvisioningState
}

// GetConnectorProperties implements the ConnectorPropertiesClassification interface for type GooglePubSubSourceConnectorProperties.
func (g *GooglePubSubSourceConnectorProperties) GetConnectorProperties() *ConnectorProperties {
	return &ConnectorProperties{
		ConnectorDirection: g.ConnectorDirection,
		ConnectorState:     g.ConnectorState,
		ConnectorType:      g.ConnectorType,
		EventHubConfig:     g.EventHubConfig,
		MaxTasks:           g.MaxTasks,
		ProvisioningState:  g.ProvisioningState,
		ValueConverter:     g.ValueConverter,
	}
}

// KinesisSourceConnectorProperties - Configuration for KinesisSourceConnector
type KinesisSourceConnectorProperties struct {
	// REQUIRED; AccessKeyId for AWS Kinesis Server.
	AwsAccessKeyID *string

	// REQUIRED; Region of AWS Kinesis Server.
	AwsKinesisRegion *string

	// REQUIRED; StreamName in AWS Kinesis Server.
	AwsKinesisStreamName *string

	// REQUIRED; SecretAccessKey for AWS Kinesis Server.
	AwsSecretAccessKey *string

	// REQUIRED; connectionString of the EventHub.
	EventHubConfig *EventHubConfig

	// REQUIRED; Max Tasks count of the Connector.
	MaxTasks *int32

	// REQUIRED; Type of the Connector.
	ValueConverter *ConverterType

	// READ-ONLY; State of the MessagingConnector
	ConnectorState *ConnectorState

	// READ-ONLY; Type of the Connector.
	ConnectorType *ConnectorType

	// READ-ONLY; Direction of the Connector.
	ConnectorDirection *Direction

	// READ-ONLY; State of provisioning of the MessagingConnector ARM Resource
	ProvisioningState *ConnectorProvisioningState
}

// GetConnectorProperties implements the ConnectorPropertiesClassification interface for type KinesisSourceConnectorProperties.
func (k *KinesisSourceConnectorProperties) GetConnectorProperties() *ConnectorProperties {
	return &ConnectorProperties{
		ConnectorDirection: k.ConnectorDirection,
		ConnectorState:     k.ConnectorState,
		ConnectorType:      k.ConnectorType,
		EventHubConfig:     k.EventHubConfig,
		MaxTasks:           k.MaxTasks,
		ProvisioningState:  k.ProvisioningState,
		ValueConverter:     k.ValueConverter,
	}
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// PostgreSQLSourceConnectorProperties - Configuration for PostgreSqlSourceConnector
type PostgreSQLSourceConnectorProperties struct {
	// REQUIRED; DatabaseName for PostgreSql Server.
	DatabaseName *string

	// REQUIRED; connectionString of the EventHub.
	EventHubConfig *EventHubConfig

	// REQUIRED; HostName for PostgreSql Server.
	HostName *string

	// REQUIRED; Max Tasks count of the Connector.
	MaxTasks *int32

	// REQUIRED; Password for PostgreSql Server.
	Password *string

	// REQUIRED; Port for PostgreSql Server.
	Port *int32

	// REQUIRED; ReplicationSlotName for PostgreSql Server.
	ReplicationSlotName *string

	// REQUIRED; Username for PostgreSql Server.
	Username *string

	// REQUIRED; Type of the Connector.
	ValueConverter *ConverterType

	// READ-ONLY; State of the MessagingConnector
	ConnectorState *ConnectorState

	// READ-ONLY; Type of the Connector.
	ConnectorType *ConnectorType

	// READ-ONLY; Direction of the Connector.
	ConnectorDirection *Direction

	// READ-ONLY; State of provisioning of the MessagingConnector ARM Resource
	ProvisioningState *ConnectorProvisioningState
}

// GetConnectorProperties implements the ConnectorPropertiesClassification interface for type PostgreSQLSourceConnectorProperties.
func (p *PostgreSQLSourceConnectorProperties) GetConnectorProperties() *ConnectorProperties {
	return &ConnectorProperties{
		ConnectorDirection: p.ConnectorDirection,
		ConnectorState:     p.ConnectorState,
		ConnectorType:      p.ConnectorType,
		EventHubConfig:     p.EventHubConfig,
		MaxTasks:           p.MaxTasks,
		ProvisioningState:  p.ProvisioningState,
		ValueConverter:     p.ValueConverter,
	}
}

// SQLServerSourceConnectorProperties - Configuration for SqlServerSqlSourceConnector
type SQLServerSourceConnectorProperties struct {
	// REQUIRED; DatabaseName for SqlServer.
	DatabaseName *string

	// REQUIRED; connectionString of the EventHub.
	EventHubConfig *EventHubConfig

	// REQUIRED; HostName for SqlServer.
	HostName *string

	// REQUIRED; Max Tasks count of the Connector.
	MaxTasks *int32

	// REQUIRED; Password for SqlServer.
	Password *string

	// REQUIRED; Port for SqlServer.
	Port *int32

	// REQUIRED; Username for SqlServer.
	Username *string

	// REQUIRED; Type of the Connector.
	ValueConverter *ConverterType

	// READ-ONLY; State of the MessagingConnector
	ConnectorState *ConnectorState

	// READ-ONLY; Type of the Connector.
	ConnectorType *ConnectorType

	// READ-ONLY; Direction of the Connector.
	ConnectorDirection *Direction

	// READ-ONLY; State of provisioning of the MessagingConnector ARM Resource
	ProvisioningState *ConnectorProvisioningState
}

// GetConnectorProperties implements the ConnectorPropertiesClassification interface for type SQLServerSourceConnectorProperties.
func (s *SQLServerSourceConnectorProperties) GetConnectorProperties() *ConnectorProperties {
	return &ConnectorProperties{
		ConnectorDirection: s.ConnectorDirection,
		ConnectorState:     s.ConnectorState,
		ConnectorType:      s.ConnectorType,
		EventHubConfig:     s.EventHubConfig,
		MaxTasks:           s.MaxTasks,
		ProvisioningState:  s.ProvisioningState,
		ValueConverter:     s.ValueConverter,
	}
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}
