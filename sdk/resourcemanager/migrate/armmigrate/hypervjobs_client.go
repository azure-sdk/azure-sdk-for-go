//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HyperVJobsClient contains the methods for the HyperVJobs group.
// Don't use this type directly, use NewHyperVJobsClient() instead.
type HyperVJobsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewHyperVJobsClient creates a new instance of HyperVJobsClient with the specified values.
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHyperVJobsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*HyperVJobsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &HyperVJobsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// NewGetAllJobsInSitePager - Method to get all jobs in a site.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - HyperVJobsClientGetAllJobsInSiteOptions contains the optional parameters for the HyperVJobsClient.NewGetAllJobsInSitePager
//     method.
func (client *HyperVJobsClient) NewGetAllJobsInSitePager(resourceGroupName string, siteName string, options *HyperVJobsClientGetAllJobsInSiteOptions) *runtime.Pager[HyperVJobsClientGetAllJobsInSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[HyperVJobsClientGetAllJobsInSiteResponse]{
		More: func(page HyperVJobsClientGetAllJobsInSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HyperVJobsClientGetAllJobsInSiteResponse) (HyperVJobsClientGetAllJobsInSiteResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getAllJobsInSiteCreateRequest(ctx, resourceGroupName, siteName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HyperVJobsClientGetAllJobsInSiteResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return HyperVJobsClientGetAllJobsInSiteResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HyperVJobsClientGetAllJobsInSiteResponse{}, runtime.NewResponseError(resp)
			}
			return client.getAllJobsInSiteHandleResponse(resp)
		},
	})
}

// getAllJobsInSiteCreateRequest creates the GetAllJobsInSite request.
func (client *HyperVJobsClient) getAllJobsInSiteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *HyperVJobsClientGetAllJobsInSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/jobs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAllJobsInSiteHandleResponse handles the GetAllJobsInSite response.
func (client *HyperVJobsClient) getAllJobsInSiteHandleResponse(resp *http.Response) (HyperVJobsClientGetAllJobsInSiteResponse, error) {
	result := HyperVJobsClientGetAllJobsInSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HyperVJobCollection); err != nil {
		return HyperVJobsClientGetAllJobsInSiteResponse{}, err
	}
	return result, nil
}

// GetJob - Method to get job.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - jobName - Job ARM name.
//   - options - HyperVJobsClientGetJobOptions contains the optional parameters for the HyperVJobsClient.GetJob method.
func (client *HyperVJobsClient) GetJob(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *HyperVJobsClientGetJobOptions) (HyperVJobsClientGetJobResponse, error) {
	req, err := client.getJobCreateRequest(ctx, resourceGroupName, siteName, jobName, options)
	if err != nil {
		return HyperVJobsClientGetJobResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HyperVJobsClientGetJobResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HyperVJobsClientGetJobResponse{}, runtime.NewResponseError(resp)
	}
	return client.getJobHandleResponse(resp)
}

// getJobCreateRequest creates the GetJob request.
func (client *HyperVJobsClient) getJobCreateRequest(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *HyperVJobsClientGetJobOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/jobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if jobName == "" {
		return nil, errors.New("parameter jobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", url.PathEscape(jobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getJobHandleResponse handles the GetJob response.
func (client *HyperVJobsClient) getJobHandleResponse(resp *http.Response) (HyperVJobsClientGetJobResponse, error) {
	result := HyperVJobsClientGetJobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HyperVJob); err != nil {
		return HyperVJobsClientGetJobResponse{}, err
	}
	return result, nil
}
