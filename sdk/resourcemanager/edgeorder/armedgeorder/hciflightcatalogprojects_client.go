//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armedgeorder

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HciFlightCatalogProjectsClient contains the methods for the HciFlightCatalogProjects group.
// Don't use this type directly, use NewHciFlightCatalogProjectsClient() instead.
type HciFlightCatalogProjectsClient struct {
	internal *arm.Client
}

// NewHciFlightCatalogProjectsClient creates a new instance of HciFlightCatalogProjectsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHciFlightCatalogProjectsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*HciFlightCatalogProjectsClient, error) {
	cl, err := arm.NewClient(moduleName+".HciFlightCatalogProjectsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HciFlightCatalogProjectsClient{
		internal: cl,
	}
	return client, nil
}

// NewListPager - List project resources.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - location - The name of Azure region.
//   - options - HciFlightCatalogProjectsClientListOptions contains the optional parameters for the HciFlightCatalogProjectsClient.NewListPager
//     method.
func (client *HciFlightCatalogProjectsClient) NewListPager(catalogName string, location string, options *HciFlightCatalogProjectsClientListOptions) *runtime.Pager[HciFlightCatalogProjectsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[HciFlightCatalogProjectsClientListResponse]{
		More: func(page HciFlightCatalogProjectsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HciFlightCatalogProjectsClientListResponse) (HciFlightCatalogProjectsClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, catalogName, location, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HciFlightCatalogProjectsClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return HciFlightCatalogProjectsClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HciFlightCatalogProjectsClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *HciFlightCatalogProjectsClient) listCreateRequest(ctx context.Context, catalogName string, location string, options *HciFlightCatalogProjectsClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *HciFlightCatalogProjectsClient) listHandleResponse(resp *http.Response) (HciFlightCatalogProjectsClientListResponse, error) {
	result := HciFlightCatalogProjectsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProjectResourceList); err != nil {
		return HciFlightCatalogProjectsClientListResponse{}, err
	}
	return result, nil
}
