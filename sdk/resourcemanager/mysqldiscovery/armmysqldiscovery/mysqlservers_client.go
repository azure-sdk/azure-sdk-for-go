//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmysqldiscovery

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MysqlServersClient contains the methods for the MysqlServers group.
// Don't use this type directly, use NewMysqlServersClient() instead.
type MysqlServersClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewMysqlServersClient creates a new instance of MysqlServersClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewMysqlServersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MysqlServersClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &MysqlServersClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Puts the MysqlServers resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - The name of Site
//   - serverName - The name of Server
//   - resource - The machines to add to the assessment
//   - options - MysqlServersClientCreateOrUpdateOptions contains the optional parameters for the MysqlServersClient.CreateOrUpdate
//     method.
func (client *MysqlServersClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, siteName string, serverName string, resource MysqlServer, options *MysqlServersClientCreateOrUpdateOptions) (MysqlServersClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "MysqlServersClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, siteName, serverName, resource, options)
	if err != nil {
		return MysqlServersClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MysqlServersClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return MysqlServersClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *MysqlServersClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, siteName string, serverName string, resource MysqlServer, options *MysqlServersClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *MysqlServersClient) createOrUpdateHandleResponse(resp *http.Response) (MysqlServersClientCreateOrUpdateResponse, error) {
	result := MysqlServersClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MysqlServer); err != nil {
		return MysqlServersClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the MysqlServers resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - The name of Site
//   - serverName - The name of Server
//   - options - MysqlServersClientDeleteOptions contains the optional parameters for the MysqlServersClient.Delete method.
func (client *MysqlServersClient) Delete(ctx context.Context, resourceGroupName string, siteName string, serverName string, options *MysqlServersClientDeleteOptions) (MysqlServersClientDeleteResponse, error) {
	var err error
	const operationName = "MysqlServersClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, siteName, serverName, options)
	if err != nil {
		return MysqlServersClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MysqlServersClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return MysqlServersClientDeleteResponse{}, err
	}
	return MysqlServersClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *MysqlServersClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, serverName string, options *MysqlServersClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the MysqlServers resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - The name of Site
//   - serverName - The name of Server
//   - options - MysqlServersClientGetOptions contains the optional parameters for the MysqlServersClient.Get method.
func (client *MysqlServersClient) Get(ctx context.Context, resourceGroupName string, siteName string, serverName string, options *MysqlServersClientGetOptions) (MysqlServersClientGetResponse, error) {
	var err error
	const operationName = "MysqlServersClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, siteName, serverName, options)
	if err != nil {
		return MysqlServersClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MysqlServersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MysqlServersClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *MysqlServersClient) getCreateRequest(ctx context.Context, resourceGroupName string, siteName string, serverName string, options *MysqlServersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MysqlServersClient) getHandleResponse(resp *http.Response) (MysqlServersClientGetResponse, error) {
	result := MysqlServersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MysqlServer); err != nil {
		return MysqlServersClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySitePager - Lists the MysqlServers resource in MysqlSites.
//
// Generated from API version 2024-09-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - The name of Site
//   - options - MysqlServersClientListBySiteOptions contains the optional parameters for the MysqlServersClient.NewListBySitePager
//     method.
func (client *MysqlServersClient) NewListBySitePager(resourceGroupName string, siteName string, options *MysqlServersClientListBySiteOptions) *runtime.Pager[MysqlServersClientListBySiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[MysqlServersClientListBySiteResponse]{
		More: func(page MysqlServersClientListBySiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MysqlServersClientListBySiteResponse) (MysqlServersClientListBySiteResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "MysqlServersClient.NewListBySitePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySiteCreateRequest(ctx, resourceGroupName, siteName, options)
			}, nil)
			if err != nil {
				return MysqlServersClientListBySiteResponse{}, err
			}
			return client.listBySiteHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySiteCreateRequest creates the ListBySite request.
func (client *MysqlServersClient) listBySiteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *MysqlServersClientListBySiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySiteHandleResponse handles the ListBySite response.
func (client *MysqlServersClient) listBySiteHandleResponse(resp *http.Response) (MysqlServersClientListBySiteResponse, error) {
	result := MysqlServersClientListBySiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MysqlServerList); err != nil {
		return MysqlServersClientListBySiteResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Patch the MysqlServers resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-30-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - The name of Site
//   - serverName - The name of Server
//   - properties - Clouds patch payload.
//   - options - MysqlServersClientBeginUpdateOptions contains the optional parameters for the MysqlServersClient.BeginUpdate
//     method.
func (client *MysqlServersClient) BeginUpdate(ctx context.Context, resourceGroupName string, siteName string, serverName string, properties MysqlServerResourcePatch, options *MysqlServersClientBeginUpdateOptions) (*runtime.Poller[MysqlServersClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, siteName, serverName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MysqlServersClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MysqlServersClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Patch the MysqlServers resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-30-preview
func (client *MysqlServersClient) update(ctx context.Context, resourceGroupName string, siteName string, serverName string, properties MysqlServerResourcePatch, options *MysqlServersClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "MysqlServersClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, siteName, serverName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *MysqlServersClient) updateCreateRequest(ctx context.Context, resourceGroupName string, siteName string, serverName string, properties MysqlServerResourcePatch, options *MysqlServersClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MySQLDiscovery/MySQLSites/{siteName}/MySQLServers/{serverName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-30-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
