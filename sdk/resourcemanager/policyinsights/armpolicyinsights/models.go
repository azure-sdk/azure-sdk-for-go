//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicyinsights

import "time"

// ErrorDefinition - Error definition.
type ErrorDefinition struct {
	// READ-ONLY; Additional scenario specific error details.
	AdditionalInfo []*TypedErrorInfo

	// READ-ONLY; Service specific error code which serves as the substatus for the HTTP error code.
	Code *string

	// READ-ONLY; Internal error details.
	Details []*ErrorDefinition

	// READ-ONLY; Description of the error.
	Message *string

	// READ-ONLY; The target of the error.
	Target *string
}

// ErrorResponse - Error response.
type ErrorResponse struct {
	// The error details.
	Error *ErrorDefinition
}

// Remediation - The remediation definition.
type Remediation struct {
	// Properties for the remediation.
	Properties *RemediationProperties

	// READ-ONLY; The ID of the remediation.
	ID *string

	// READ-ONLY; The name of the remediation.
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the remediation.
	Type *string
}

// RemediationDeployment - Details of a single deployment created by the remediation.
type RemediationDeployment struct {
	// READ-ONLY; The time at which the remediation was created.
	CreatedOn *time.Time

	// READ-ONLY; Resource ID of the template deployment that will remediate the resource.
	DeploymentID *string

	// READ-ONLY; Error encountered while remediated the resource.
	Error *ErrorDefinition

	// READ-ONLY; The time at which the remediation deployment was last updated.
	LastUpdatedOn *time.Time

	// READ-ONLY; Resource ID of the resource that is being remediated by the deployment.
	RemediatedResourceID *string

	// READ-ONLY; Location of the resource that is being remediated.
	ResourceLocation *string

	// READ-ONLY; Status of the remediation deployment.
	Status *string
}

// RemediationDeploymentSummary - The deployment status summary for all deployments created by the remediation.
type RemediationDeploymentSummary struct {
	// READ-ONLY; The number of deployments required by the remediation that have failed.
	FailedDeployments *int32

	// READ-ONLY; The number of deployments required by the remediation that have succeeded.
	SuccessfulDeployments *int32

	// READ-ONLY; The number of deployments required by the remediation.
	TotalDeployments *int32
}

// RemediationDeploymentsListResult - List of deployments for a remediation.
type RemediationDeploymentsListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string

	// READ-ONLY; Array of deployments for the remediation.
	Value []*RemediationDeployment
}

// RemediationFilters - The filters that will be applied to determine which resources to remediate.
type RemediationFilters struct {
	// The resource locations that will be remediated.
	Locations []*string

	// The IDs of the resources that will be remediated. Can specify at most 100 IDs. This filter cannot be used when ReEvaluateCompliance
	// is set to ReEvaluateCompliance, and cannot be empty if provided.
	ResourceIDs []*string
}

// RemediationListResult - List of remediations.
type RemediationListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string

	// READ-ONLY; Array of remediation definitions.
	Value []*Remediation
}

// RemediationProperties - The remediation properties.
type RemediationProperties struct {
	// The remediation failure threshold settings
	FailureThreshold *RemediationPropertiesFailureThreshold

	// The filters that will be applied to determine which resources to remediate.
	Filters *RemediationFilters

	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation.
	// If not provided, the default parallel deployments value is used.
	ParallelDeployments *int32

	// The resource ID of the policy assignment that should be remediated.
	PolicyAssignmentID *string

	// The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment
	// being remediated assigns a policy set definition.
	PolicyDefinitionReferenceID *string

	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource
	// count is used.
	ResourceCount *int32

	// The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
	ResourceDiscoveryMode *ResourceDiscoveryMode

	// READ-ONLY; The remediation correlation Id. Can be used to find events related to the remediation in the activity log.
	CorrelationID *string

	// READ-ONLY; The time at which the remediation was created.
	CreatedOn *time.Time

	// READ-ONLY; The deployment status summary for all deployments created by the remediation.
	DeploymentStatus *RemediationDeploymentSummary

	// READ-ONLY; The time at which the remediation was last updated.
	LastUpdatedOn *time.Time

	// READ-ONLY; The status of the remediation. This refers to the entire remediation task, not individual deployments. Allowed
	// values are Evaluating, Canceled, Cancelling, Failed, Complete, or Succeeded.
	ProvisioningState *string

	// READ-ONLY; The remediation status message. Provides additional details regarding the state of the remediation.
	StatusMessage *string
}

// RemediationPropertiesFailureThreshold - The remediation failure threshold settings
type RemediationPropertiesFailureThreshold struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage
	// of failed remediation operations (i.e. failed deployments) exceeds this
	// threshold.
	Percentage *float32
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TypedErrorInfo - Scenario specific error details.
type TypedErrorInfo struct {
	// READ-ONLY; The scenario specific error details.
	Info any

	// READ-ONLY; The type of included error details.
	Type *string
}
