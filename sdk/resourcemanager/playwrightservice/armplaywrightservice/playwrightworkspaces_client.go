// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armplaywrightservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PlaywrightWorkspacesClient contains the methods for the PlaywrightWorkspaces group.
// Don't use this type directly, use NewPlaywrightWorkspacesClient() instead.
type PlaywrightWorkspacesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPlaywrightWorkspacesClient creates a new instance of PlaywrightWorkspacesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPlaywrightWorkspacesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PlaywrightWorkspacesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PlaywrightWorkspacesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CheckNameAvailability - Implements global CheckNameAvailability operations
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - body - The CheckAvailability request
//   - options - PlaywrightWorkspacesClientCheckNameAvailabilityOptions contains the optional parameters for the PlaywrightWorkspacesClient.CheckNameAvailability
//     method.
func (client *PlaywrightWorkspacesClient) CheckNameAvailability(ctx context.Context, body CheckNameAvailabilityRequest, options *PlaywrightWorkspacesClientCheckNameAvailabilityOptions) (PlaywrightWorkspacesClientCheckNameAvailabilityResponse, error) {
	var err error
	const operationName = "PlaywrightWorkspacesClient.CheckNameAvailability"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.checkNameAvailabilityCreateRequest(ctx, body, options)
	if err != nil {
		return PlaywrightWorkspacesClientCheckNameAvailabilityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PlaywrightWorkspacesClientCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PlaywrightWorkspacesClientCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.checkNameAvailabilityHandleResponse(httpResp)
	return resp, err
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *PlaywrightWorkspacesClient) checkNameAvailabilityCreateRequest(ctx context.Context, body CheckNameAvailabilityRequest, _ *PlaywrightWorkspacesClientCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/checkNameAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *PlaywrightWorkspacesClient) checkNameAvailabilityHandleResponse(resp *http.Response) (PlaywrightWorkspacesClientCheckNameAvailabilityResponse, error) {
	result := PlaywrightWorkspacesClientCheckNameAvailabilityResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityResponse); err != nil {
		return PlaywrightWorkspacesClientCheckNameAvailabilityResponse{}, err
	}
	return result, nil
}

// BeginCreateOrUpdate - Create a PlaywrightWorkspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - playwrightWorkspaceName - The name of the PlaywrightWorkspace
//   - resource - Resource create parameters.
//   - options - PlaywrightWorkspacesClientBeginCreateOrUpdateOptions contains the optional parameters for the PlaywrightWorkspacesClient.BeginCreateOrUpdate
//     method.
func (client *PlaywrightWorkspacesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, resource PlaywrightWorkspace, options *PlaywrightWorkspacesClientBeginCreateOrUpdateOptions) (*runtime.Poller[PlaywrightWorkspacesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, playwrightWorkspaceName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PlaywrightWorkspacesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PlaywrightWorkspacesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a PlaywrightWorkspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
func (client *PlaywrightWorkspacesClient) createOrUpdate(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, resource PlaywrightWorkspace, options *PlaywrightWorkspacesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "PlaywrightWorkspacesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, playwrightWorkspaceName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PlaywrightWorkspacesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, resource PlaywrightWorkspace, _ *PlaywrightWorkspacesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if playwrightWorkspaceName == "" {
		return nil, errors.New("parameter playwrightWorkspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{playwrightWorkspaceName}", url.PathEscape(playwrightWorkspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a PlaywrightWorkspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - playwrightWorkspaceName - The name of the PlaywrightWorkspace
//   - options - PlaywrightWorkspacesClientBeginDeleteOptions contains the optional parameters for the PlaywrightWorkspacesClient.BeginDelete
//     method.
func (client *PlaywrightWorkspacesClient) BeginDelete(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, options *PlaywrightWorkspacesClientBeginDeleteOptions) (*runtime.Poller[PlaywrightWorkspacesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, playwrightWorkspaceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PlaywrightWorkspacesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PlaywrightWorkspacesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a PlaywrightWorkspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
func (client *PlaywrightWorkspacesClient) deleteOperation(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, options *PlaywrightWorkspacesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "PlaywrightWorkspacesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, playwrightWorkspaceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PlaywrightWorkspacesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, _ *PlaywrightWorkspacesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if playwrightWorkspaceName == "" {
		return nil, errors.New("parameter playwrightWorkspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{playwrightWorkspaceName}", url.PathEscape(playwrightWorkspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a PlaywrightWorkspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - playwrightWorkspaceName - The name of the PlaywrightWorkspace
//   - options - PlaywrightWorkspacesClientGetOptions contains the optional parameters for the PlaywrightWorkspacesClient.Get
//     method.
func (client *PlaywrightWorkspacesClient) Get(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, options *PlaywrightWorkspacesClientGetOptions) (PlaywrightWorkspacesClientGetResponse, error) {
	var err error
	const operationName = "PlaywrightWorkspacesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, playwrightWorkspaceName, options)
	if err != nil {
		return PlaywrightWorkspacesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PlaywrightWorkspacesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PlaywrightWorkspacesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PlaywrightWorkspacesClient) getCreateRequest(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, _ *PlaywrightWorkspacesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if playwrightWorkspaceName == "" {
		return nil, errors.New("parameter playwrightWorkspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{playwrightWorkspaceName}", url.PathEscape(playwrightWorkspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PlaywrightWorkspacesClient) getHandleResponse(resp *http.Response) (PlaywrightWorkspacesClientGetResponse, error) {
	result := PlaywrightWorkspacesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlaywrightWorkspace); err != nil {
		return PlaywrightWorkspacesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List PlaywrightWorkspace resources by resource group
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - PlaywrightWorkspacesClientListByResourceGroupOptions contains the optional parameters for the PlaywrightWorkspacesClient.NewListByResourceGroupPager
//     method.
func (client *PlaywrightWorkspacesClient) NewListByResourceGroupPager(resourceGroupName string, options *PlaywrightWorkspacesClientListByResourceGroupOptions) *runtime.Pager[PlaywrightWorkspacesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[PlaywrightWorkspacesClientListByResourceGroupResponse]{
		More: func(page PlaywrightWorkspacesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PlaywrightWorkspacesClientListByResourceGroupResponse) (PlaywrightWorkspacesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PlaywrightWorkspacesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return PlaywrightWorkspacesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *PlaywrightWorkspacesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *PlaywrightWorkspacesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *PlaywrightWorkspacesClient) listByResourceGroupHandleResponse(resp *http.Response) (PlaywrightWorkspacesClientListByResourceGroupResponse, error) {
	result := PlaywrightWorkspacesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlaywrightWorkspaceListResult); err != nil {
		return PlaywrightWorkspacesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List PlaywrightWorkspace resources by subscription ID
//
// Generated from API version 2025-07-01-preview
//   - options - PlaywrightWorkspacesClientListBySubscriptionOptions contains the optional parameters for the PlaywrightWorkspacesClient.NewListBySubscriptionPager
//     method.
func (client *PlaywrightWorkspacesClient) NewListBySubscriptionPager(options *PlaywrightWorkspacesClientListBySubscriptionOptions) *runtime.Pager[PlaywrightWorkspacesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[PlaywrightWorkspacesClientListBySubscriptionResponse]{
		More: func(page PlaywrightWorkspacesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PlaywrightWorkspacesClientListBySubscriptionResponse) (PlaywrightWorkspacesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PlaywrightWorkspacesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PlaywrightWorkspacesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *PlaywrightWorkspacesClient) listBySubscriptionCreateRequest(ctx context.Context, _ *PlaywrightWorkspacesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/playwrightWorkspaces"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *PlaywrightWorkspacesClient) listBySubscriptionHandleResponse(resp *http.Response) (PlaywrightWorkspacesClientListBySubscriptionResponse, error) {
	result := PlaywrightWorkspacesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlaywrightWorkspaceListResult); err != nil {
		return PlaywrightWorkspacesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update a PlaywrightWorkspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - playwrightWorkspaceName - The name of the PlaywrightWorkspace
//   - properties - The resource properties to be updated.
//   - options - PlaywrightWorkspacesClientUpdateOptions contains the optional parameters for the PlaywrightWorkspacesClient.Update
//     method.
func (client *PlaywrightWorkspacesClient) Update(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, properties PlaywrightWorkspaceUpdate, options *PlaywrightWorkspacesClientUpdateOptions) (PlaywrightWorkspacesClientUpdateResponse, error) {
	var err error
	const operationName = "PlaywrightWorkspacesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, playwrightWorkspaceName, properties, options)
	if err != nil {
		return PlaywrightWorkspacesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PlaywrightWorkspacesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PlaywrightWorkspacesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *PlaywrightWorkspacesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, properties PlaywrightWorkspaceUpdate, _ *PlaywrightWorkspacesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if playwrightWorkspaceName == "" {
		return nil, errors.New("parameter playwrightWorkspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{playwrightWorkspaceName}", url.PathEscape(playwrightWorkspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *PlaywrightWorkspacesClient) updateHandleResponse(resp *http.Response) (PlaywrightWorkspacesClientUpdateResponse, error) {
	result := PlaywrightWorkspacesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlaywrightWorkspace); err != nil {
		return PlaywrightWorkspacesClientUpdateResponse{}, err
	}
	return result, nil
}
