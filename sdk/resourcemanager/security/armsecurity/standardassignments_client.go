// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// StandardAssignmentsClient contains the methods for the StandardAssignments group.
// Don't use this type directly, use NewStandardAssignmentsClient() instead.
type StandardAssignmentsClient struct {
	internal *arm.Client
}

// NewStandardAssignmentsClient creates a new instance of StandardAssignmentsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewStandardAssignmentsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*StandardAssignmentsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &StandardAssignmentsClient{
		internal: cl,
	}
	return client, nil
}

// Create - This operation creates or updates a standard assignment with the given scope and name. standard assignments apply
// to all resources contained within their scope. For example, when you assign a policy
// at resource group scope, that policy applies to all resources in the group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-01
//   - resourceID - The identifier of the resource.
//   - standardAssignmentName - The standard assignments assignment key - unique key for the standard assignment
//   - standardAssignment - Custom standard assignment over a pre-defined scope
//   - options - StandardAssignmentsClientCreateOptions contains the optional parameters for the StandardAssignmentsClient.Create
//     method.
func (client *StandardAssignmentsClient) Create(ctx context.Context, resourceID string, standardAssignmentName string, standardAssignment StandardAssignment, options *StandardAssignmentsClientCreateOptions) (StandardAssignmentsClientCreateResponse, error) {
	var err error
	const operationName = "StandardAssignmentsClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceID, standardAssignmentName, standardAssignment, options)
	if err != nil {
		return StandardAssignmentsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandardAssignmentsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return StandardAssignmentsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *StandardAssignmentsClient) createCreateRequest(ctx context.Context, resourceID string, standardAssignmentName string, standardAssignment StandardAssignment, _ *StandardAssignmentsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	if standardAssignmentName == "" {
		return nil, errors.New("parameter standardAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standardAssignmentName}", url.PathEscape(standardAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, standardAssignment); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *StandardAssignmentsClient) createHandleResponse(resp *http.Response) (StandardAssignmentsClientCreateResponse, error) {
	result := StandardAssignmentsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StandardAssignment); err != nil {
		return StandardAssignmentsClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - This operation deletes a standard assignment, given its name and the scope it was created in. The scope of a standard
// assignment is the part of its ID preceding
// '/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}'.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-01
//   - resourceID - The identifier of the resource.
//   - standardAssignmentName - The standard assignments assignment key - unique key for the standard assignment
//   - options - StandardAssignmentsClientDeleteOptions contains the optional parameters for the StandardAssignmentsClient.Delete
//     method.
func (client *StandardAssignmentsClient) Delete(ctx context.Context, resourceID string, standardAssignmentName string, options *StandardAssignmentsClientDeleteOptions) (StandardAssignmentsClientDeleteResponse, error) {
	var err error
	const operationName = "StandardAssignmentsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceID, standardAssignmentName, options)
	if err != nil {
		return StandardAssignmentsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandardAssignmentsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return StandardAssignmentsClientDeleteResponse{}, err
	}
	return StandardAssignmentsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *StandardAssignmentsClient) deleteCreateRequest(ctx context.Context, resourceID string, standardAssignmentName string, _ *StandardAssignmentsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	if standardAssignmentName == "" {
		return nil, errors.New("parameter standardAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standardAssignmentName}", url.PathEscape(standardAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - This operation retrieves a single standard assignment, given its name and the scope it was created at.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-01
//   - resourceID - The identifier of the resource.
//   - standardAssignmentName - The standard assignments assignment key - unique key for the standard assignment
//   - options - StandardAssignmentsClientGetOptions contains the optional parameters for the StandardAssignmentsClient.Get method.
func (client *StandardAssignmentsClient) Get(ctx context.Context, resourceID string, standardAssignmentName string, options *StandardAssignmentsClientGetOptions) (StandardAssignmentsClientGetResponse, error) {
	var err error
	const operationName = "StandardAssignmentsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceID, standardAssignmentName, options)
	if err != nil {
		return StandardAssignmentsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandardAssignmentsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StandardAssignmentsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *StandardAssignmentsClient) getCreateRequest(ctx context.Context, resourceID string, standardAssignmentName string, _ *StandardAssignmentsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	if standardAssignmentName == "" {
		return nil, errors.New("parameter standardAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standardAssignmentName}", url.PathEscape(standardAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *StandardAssignmentsClient) getHandleResponse(resp *http.Response) (StandardAssignmentsClientGetResponse, error) {
	result := StandardAssignmentsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StandardAssignment); err != nil {
		return StandardAssignmentsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get a list of all relevant standard assignments over a scope
//
// Generated from API version 2024-08-01
//   - scope - The scope of the standard assignment. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - options - StandardAssignmentsClientListOptions contains the optional parameters for the StandardAssignmentsClient.NewListPager
//     method.
func (client *StandardAssignmentsClient) NewListPager(scope string, options *StandardAssignmentsClientListOptions) *runtime.Pager[StandardAssignmentsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[StandardAssignmentsClientListResponse]{
		More: func(page StandardAssignmentsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *StandardAssignmentsClientListResponse) (StandardAssignmentsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "StandardAssignmentsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, scope, options)
			}, nil)
			if err != nil {
				return StandardAssignmentsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *StandardAssignmentsClient) listCreateRequest(ctx context.Context, scope string, _ *StandardAssignmentsClientListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/standardAssignments"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *StandardAssignmentsClient) listHandleResponse(resp *http.Response) (StandardAssignmentsClientListResponse, error) {
	result := StandardAssignmentsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StandardAssignmentsList); err != nil {
		return StandardAssignmentsClientListResponse{}, err
	}
	return result, nil
}
