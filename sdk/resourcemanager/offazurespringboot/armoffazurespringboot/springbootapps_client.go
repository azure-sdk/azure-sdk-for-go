//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
// is regenerated.
// DO NOT EDIT.

package armoffazurespringboot

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SpringbootappsClient contains the methods for the Springbootapps group.
// Don't use this type directly, use NewSpringbootappsClient() instead.
type SpringbootappsClient struct {
	internal           *arm.Client
	siteName           string
	subscriptionID     string
	springbootappsName string
}

// NewSpringbootappsClient creates a new instance of SpringbootappsClient with the specified values.
//   - siteName - The springbootsites name.
//   - subscriptionID - The ID of the target subscription.
//   - springbootappsName - The springbootapps name.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSpringbootappsClient(siteName string, subscriptionID string, springbootappsName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SpringbootappsClient, error) {
	cl, err := arm.NewClient(moduleName+".SpringbootappsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SpringbootappsClient{
		siteName:           siteName,
		subscriptionID:     subscriptionID,
		springbootappsName: springbootappsName,
		internal:           cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a springbootapps resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - springbootapps - Create a springbootapps payload.
//   - options - SpringbootappsClientCreateOrUpdateOptions contains the optional parameters for the SpringbootappsClient.CreateOrUpdate
//     method.
func (client *SpringbootappsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, springbootapps SpringbootappsModel, options *SpringbootappsClientCreateOrUpdateOptions) (SpringbootappsClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, springbootapps, options)
	if err != nil {
		return SpringbootappsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpringbootappsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return SpringbootappsClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SpringbootappsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, springbootapps SpringbootappsModel, options *SpringbootappsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}"
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.springbootappsName == "" {
		return nil, errors.New("parameter client.springbootappsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{springbootappsName}", url.PathEscape(client.springbootappsName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, springbootapps)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SpringbootappsClient) createOrUpdateHandleResponse(resp *http.Response) (SpringbootappsClientCreateOrUpdateResponse, error) {
	result := SpringbootappsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SpringbootappsModel); err != nil {
		return SpringbootappsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a springbootapps resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SpringbootappsClientDeleteOptions contains the optional parameters for the SpringbootappsClient.Delete method.
func (client *SpringbootappsClient) Delete(ctx context.Context, resourceGroupName string, options *SpringbootappsClientDeleteOptions) (SpringbootappsClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return SpringbootappsClientDeleteResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpringbootappsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SpringbootappsClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return client.deleteHandleResponse(resp)
}

// deleteCreateRequest creates the Delete request.
func (client *SpringbootappsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, options *SpringbootappsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}"
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.springbootappsName == "" {
		return nil, errors.New("parameter client.springbootappsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{springbootappsName}", url.PathEscape(client.springbootappsName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *SpringbootappsClient) deleteHandleResponse(resp *http.Response) (SpringbootappsClientDeleteResponse, error) {
	result := SpringbootappsClientDeleteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SpringbootappsModel); err != nil {
		return SpringbootappsClientDeleteResponse{}, err
	}
	return result, nil
}

// Get - Get a springbootapps resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SpringbootappsClientGetOptions contains the optional parameters for the SpringbootappsClient.Get method.
func (client *SpringbootappsClient) Get(ctx context.Context, resourceGroupName string, options *SpringbootappsClientGetOptions) (SpringbootappsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return SpringbootappsClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpringbootappsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SpringbootappsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SpringbootappsClient) getCreateRequest(ctx context.Context, resourceGroupName string, options *SpringbootappsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}"
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.springbootappsName == "" {
		return nil, errors.New("parameter client.springbootappsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{springbootappsName}", url.PathEscape(client.springbootappsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SpringbootappsClient) getHandleResponse(resp *http.Response) (SpringbootappsClientGetResponse, error) {
	result := SpringbootappsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SpringbootappsModel); err != nil {
		return SpringbootappsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List springbootapps resource by resourceGroup
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SpringbootappsClientListByResourceGroupOptions contains the optional parameters for the SpringbootappsClient.NewListByResourceGroupPager
//     method.
func (client *SpringbootappsClient) NewListByResourceGroupPager(resourceGroupName string, options *SpringbootappsClientListByResourceGroupOptions) *runtime.Pager[SpringbootappsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[SpringbootappsClientListByResourceGroupResponse]{
		More: func(page SpringbootappsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SpringbootappsClientListByResourceGroupResponse) (SpringbootappsClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SpringbootappsClientListByResourceGroupResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return SpringbootappsClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SpringbootappsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *SpringbootappsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *SpringbootappsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps"
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *SpringbootappsClient) listByResourceGroupHandleResponse(resp *http.Response) (SpringbootappsClientListByResourceGroupResponse, error) {
	result := SpringbootappsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SpringbootappsListResult); err != nil {
		return SpringbootappsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List springbootapps resource by subscription
//
// Generated from API version 2023-01-01-preview
//   - options - SpringbootappsClientListBySubscriptionOptions contains the optional parameters for the SpringbootappsClient.NewListBySubscriptionPager
//     method.
func (client *SpringbootappsClient) NewListBySubscriptionPager(options *SpringbootappsClientListBySubscriptionOptions) *runtime.Pager[SpringbootappsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[SpringbootappsClientListBySubscriptionResponse]{
		More: func(page SpringbootappsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SpringbootappsClientListBySubscriptionResponse) (SpringbootappsClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SpringbootappsClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return SpringbootappsClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SpringbootappsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *SpringbootappsClient) listBySubscriptionCreateRequest(ctx context.Context, options *SpringbootappsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps"
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *SpringbootappsClient) listBySubscriptionHandleResponse(resp *http.Response) (SpringbootappsClientListBySubscriptionResponse, error) {
	result := SpringbootappsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SpringbootappsListResult); err != nil {
		return SpringbootappsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update a springbootapps resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - springbootapps - Update a springbootapps payload.
//   - options - SpringbootappsClientUpdateOptions contains the optional parameters for the SpringbootappsClient.Update method.
func (client *SpringbootappsClient) Update(ctx context.Context, resourceGroupName string, springbootapps SpringbootappsPatch, options *SpringbootappsClientUpdateOptions) (SpringbootappsClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, springbootapps, options)
	if err != nil {
		return SpringbootappsClientUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpringbootappsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return SpringbootappsClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *SpringbootappsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, springbootapps SpringbootappsPatch, options *SpringbootappsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}"
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.springbootappsName == "" {
		return nil, errors.New("parameter client.springbootappsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{springbootappsName}", url.PathEscape(client.springbootappsName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, springbootapps)
}

// updateHandleResponse handles the Update response.
func (client *SpringbootappsClient) updateHandleResponse(resp *http.Response) (SpringbootappsClientUpdateResponse, error) {
	result := SpringbootappsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SpringbootappsModel); err != nil {
		return SpringbootappsClientUpdateResponse{}, err
	}
	return result, nil
}
