//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicy

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
)

// ClientFactory is a client factory used to create any client in this module.
// Don't use this type directly, use NewClientFactory instead.
type ClientFactory struct {
	subscriptionID          string
	policyDefinitionName    string
	policyDefinitionVersion string
	policySetDefinitionName string
	credential              azcore.TokenCredential
	options                 *arm.ClientOptions
}

// NewClientFactory creates a new instance of ClientFactory with the specified values.
// The parameter values will be propagated to any client created from this factory.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - policyDefinitionName - The name of the policy definition.
//   - policyDefinitionVersion - The policy definition version. The format is x.y.z where x is the major version number, y is
//     the minor version number, and z is the patch number
//   - policySetDefinitionName - The name of the policy set definition.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewClientFactory(subscriptionID string, policyDefinitionName string, policyDefinitionVersion string, policySetDefinitionName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ClientFactory, error) {
	_, err := arm.NewClient(moduleName+".ClientFactory", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	return &ClientFactory{
		subscriptionID: subscriptionID, policyDefinitionName: policyDefinitionName, policyDefinitionVersion: policyDefinitionVersion, policySetDefinitionName: policySetDefinitionName, credential: credential,
		options: options.Clone(),
	}, nil
}

func (c *ClientFactory) NewAssignmentsClient() *AssignmentsClient {
	subClient, _ := NewAssignmentsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewDataPolicyManifestsClient() *DataPolicyManifestsClient {
	subClient, _ := NewDataPolicyManifestsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewDefinitionVersionsClient() *DefinitionVersionsClient {
	subClient, _ := NewDefinitionVersionsClient(c.subscriptionID, c.policyDefinitionName, c.policyDefinitionVersion, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewDefinitionsClient() *DefinitionsClient {
	subClient, _ := NewDefinitionsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewExemptionsClient() *ExemptionsClient {
	subClient, _ := NewExemptionsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewSetDefinitionVersionsClient() *SetDefinitionVersionsClient {
	subClient, _ := NewSetDefinitionVersionsClient(c.subscriptionID, c.policySetDefinitionName, c.policyDefinitionVersion, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewSetDefinitionsClient() *SetDefinitionsClient {
	subClient, _ := NewSetDefinitionsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewVariableValuesClient() *VariableValuesClient {
	subClient, _ := NewVariableValuesClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewVariablesClient() *VariablesClient {
	subClient, _ := NewVariablesClient(c.subscriptionID, c.credential, c.options)
	return subClient
}
