// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armmarketplace

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// RatingAndReviewsOperationsClient contains the methods for the RatingAndReviewsOperations group.
// Don't use this type directly, use NewRatingAndReviewsOperationsClient() instead.
type RatingAndReviewsOperationsClient struct {
	internal *arm.Client
}

// NewRatingAndReviewsOperationsClient creates a new instance of RatingAndReviewsOperationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewRatingAndReviewsOperationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*RatingAndReviewsOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &RatingAndReviewsOperationsClient{
		internal: cl,
	}
	return client, nil
}

// GetUserHasReview - Get whether the user has a review.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - uniqueProductID - Unique Product Id
//   - options - RatingAndReviewsOperationsClientGetUserHasReviewOptions contains the optional parameters for the RatingAndReviewsOperationsClient.GetUserHasReview
//     method.
func (client *RatingAndReviewsOperationsClient) GetUserHasReview(ctx context.Context, uniqueProductID string, options *RatingAndReviewsOperationsClientGetUserHasReviewOptions) (RatingAndReviewsOperationsClientGetUserHasReviewResponse, error) {
	var err error
	const operationName = "RatingAndReviewsOperationsClient.GetUserHasReview"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getUserHasReviewCreateRequest(ctx, uniqueProductID, options)
	if err != nil {
		return RatingAndReviewsOperationsClientGetUserHasReviewResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RatingAndReviewsOperationsClientGetUserHasReviewResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return RatingAndReviewsOperationsClientGetUserHasReviewResponse{}, err
	}
	resp, err := client.getUserHasReviewHandleResponse(httpResp)
	return resp, err
}

// getUserHasReviewCreateRequest creates the GetUserHasReview request.
func (client *RatingAndReviewsOperationsClient) getUserHasReviewCreateRequest(ctx context.Context, uniqueProductID string, _ *RatingAndReviewsOperationsClientGetUserHasReviewOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Marketplace/products/{uniqueProductId}/reviews/userhasreview"
	if uniqueProductID == "" {
		return nil, errors.New("parameter uniqueProductID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{uniqueProductId}", url.PathEscape(uniqueProductID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getUserHasReviewHandleResponse handles the GetUserHasReview response.
func (client *RatingAndReviewsOperationsClient) getUserHasReviewHandleResponse(resp *http.Response) (RatingAndReviewsOperationsClientGetUserHasReviewResponse, error) {
	result := RatingAndReviewsOperationsClientGetUserHasReviewResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UserHasReview); err != nil {
		return RatingAndReviewsOperationsClientGetUserHasReviewResponse{}, err
	}
	return result, nil
}
