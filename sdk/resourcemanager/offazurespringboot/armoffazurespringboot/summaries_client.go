//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
// is regenerated.
// DO NOT EDIT.

package armoffazurespringboot

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SummariesClient contains the methods for the Summaries group.
// Don't use this type directly, use NewSummariesClient() instead.
type SummariesClient struct {
	internal       *arm.Client
	subscriptionID string
	siteName       string
	summaryName    string
}

// NewSummariesClient creates a new instance of SummariesClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - siteName - The springbootsites name.
//   - summaryName - The name of summary
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSummariesClient(subscriptionID string, siteName string, summaryName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SummariesClient, error) {
	cl, err := arm.NewClient(moduleName+".SummariesClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SummariesClient{
		subscriptionID: subscriptionID,
		siteName:       siteName,
		summaryName:    summaryName,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Puts the Summaries resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - body - The Summary of discovered springbootsites
//   - options - SummariesClientCreateOrUpdateOptions contains the optional parameters for the SummariesClient.CreateOrUpdate
//     method.
func (client *SummariesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, body Summary, options *SummariesClientCreateOrUpdateOptions) (SummariesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, body, options)
	if err != nil {
		return SummariesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SummariesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SummariesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SummariesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, body Summary, options *SummariesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries/{summaryName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.summaryName == "" {
		return nil, errors.New("parameter client.summaryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{summaryName}", url.PathEscape(client.summaryName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SummariesClient) createOrUpdateHandleResponse(resp *http.Response) (SummariesClientCreateOrUpdateResponse, error) {
	result := SummariesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Summary); err != nil {
		return SummariesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the Summaries resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SummariesClientDeleteOptions contains the optional parameters for the SummariesClient.Delete method.
func (client *SummariesClient) Delete(ctx context.Context, resourceGroupName string, options *SummariesClientDeleteOptions) (SummariesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return SummariesClientDeleteResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SummariesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SummariesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return SummariesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SummariesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, options *SummariesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries/{summaryName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.summaryName == "" {
		return nil, errors.New("parameter client.summaryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{summaryName}", url.PathEscape(client.summaryName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the Summaries resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SummariesClientGetOptions contains the optional parameters for the SummariesClient.Get method.
func (client *SummariesClient) Get(ctx context.Context, resourceGroupName string, options *SummariesClientGetOptions) (SummariesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return SummariesClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SummariesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SummariesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SummariesClient) getCreateRequest(ctx context.Context, resourceGroupName string, options *SummariesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries/{summaryName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.summaryName == "" {
		return nil, errors.New("parameter client.summaryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{summaryName}", url.PathEscape(client.summaryName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SummariesClient) getHandleResponse(resp *http.Response) (SummariesClientGetResponse, error) {
	result := SummariesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Summary); err != nil {
		return SummariesClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySitePager - Lists the Summaries resource in springbootsites.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SummariesClientListBySiteOptions contains the optional parameters for the SummariesClient.NewListBySitePager
//     method.
func (client *SummariesClient) NewListBySitePager(resourceGroupName string, options *SummariesClientListBySiteOptions) *runtime.Pager[SummariesClientListBySiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[SummariesClientListBySiteResponse]{
		More: func(page SummariesClientListBySiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SummariesClientListBySiteResponse) (SummariesClientListBySiteResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySiteCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SummariesClientListBySiteResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return SummariesClientListBySiteResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SummariesClientListBySiteResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySiteHandleResponse(resp)
		},
	})
}

// listBySiteCreateRequest creates the ListBySite request.
func (client *SummariesClient) listBySiteCreateRequest(ctx context.Context, resourceGroupName string, options *SummariesClientListBySiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySiteHandleResponse handles the ListBySite response.
func (client *SummariesClient) listBySiteHandleResponse(resp *http.Response) (SummariesClientListBySiteResponse, error) {
	result := SummariesClientListBySiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SummaryList); err != nil {
		return SummariesClientListBySiteResponse{}, err
	}
	return result, nil
}

// Update - Patch the Summaries resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - body - Patch payload.
//   - options - SummariesClientUpdateOptions contains the optional parameters for the SummariesClient.Update method.
func (client *SummariesClient) Update(ctx context.Context, resourceGroupName string, body SummariesResourcePatch, options *SummariesClientUpdateOptions) (SummariesClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, body, options)
	if err != nil {
		return SummariesClientUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SummariesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return SummariesClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *SummariesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, body SummariesResourcePatch, options *SummariesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries/{summaryName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.siteName == "" {
		return nil, errors.New("parameter client.siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(client.siteName))
	if client.summaryName == "" {
		return nil, errors.New("parameter client.summaryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{summaryName}", url.PathEscape(client.summaryName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// updateHandleResponse handles the Update response.
func (client *SummariesClient) updateHandleResponse(resp *http.Response) (SummariesClientUpdateResponse, error) {
	result := SummariesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Summary); err != nil {
		return SummariesClientUpdateResponse{}, err
	}
	return result, nil
}
