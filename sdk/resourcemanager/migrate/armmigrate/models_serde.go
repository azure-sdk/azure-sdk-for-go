// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armmigrate

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AssessedDiskDataV3.
func (a AssessedDiskDataV3) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "gigabytesProvisioned", a.GigabytesProvisioned)
	populate(objectMap, "megabytesPerSecondOfRead", a.MegabytesPerSecondOfRead)
	populate(objectMap, "megabytesPerSecondOfWrite", a.MegabytesPerSecondOfWrite)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "numberOfReadOperationsPerSecond", a.NumberOfReadOperationsPerSecond)
	populate(objectMap, "numberOfWriteOperationsPerSecond", a.NumberOfWriteOperationsPerSecond)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessedDiskDataV3.
func (a *AssessedDiskDataV3) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "gigabytesProvisioned":
			err = unpopulate(val, "GigabytesProvisioned", &a.GigabytesProvisioned)
			delete(rawMsg, key)
		case "megabytesPerSecondOfRead":
			err = unpopulate(val, "MegabytesPerSecondOfRead", &a.MegabytesPerSecondOfRead)
			delete(rawMsg, key)
		case "megabytesPerSecondOfWrite":
			err = unpopulate(val, "MegabytesPerSecondOfWrite", &a.MegabytesPerSecondOfWrite)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &a.Name)
			delete(rawMsg, key)
		case "numberOfReadOperationsPerSecond":
			err = unpopulate(val, "NumberOfReadOperationsPerSecond", &a.NumberOfReadOperationsPerSecond)
			delete(rawMsg, key)
		case "numberOfWriteOperationsPerSecond":
			err = unpopulate(val, "NumberOfWriteOperationsPerSecond", &a.NumberOfWriteOperationsPerSecond)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AssessedMachineExtendedDetails.
func (a AssessedMachineExtendedDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "assessedMachineType", a.AssessedMachineType)
	populate(objectMap, "bootType", a.BootType)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "disks", a.Disks)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "errors", a.Errors)
	populate(objectMap, "hostProcessor", a.HostProcessor)
	populate(objectMap, "megabytesOfMemory", a.MegabytesOfMemory)
	populate(objectMap, "networkAdapters", a.NetworkAdapters)
	populate(objectMap, "numberOfCores", a.NumberOfCores)
	populate(objectMap, "operatingSystemArchitecture", a.OperatingSystemArchitecture)
	populate(objectMap, "operatingSystemName", a.OperatingSystemName)
	populate(objectMap, "operatingSystemType", a.OperatingSystemType)
	populate(objectMap, "operatingSystemVersion", a.OperatingSystemVersion)
	populate(objectMap, "percentageCoresUtilization", a.PercentageCoresUtilization)
	populate(objectMap, "percentageMemoryUtilization", a.PercentageMemoryUtilization)
	populate(objectMap, "productSupportStatus", a.ProductSupportStatus)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessedMachineExtendedDetails.
func (a *AssessedMachineExtendedDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "assessedMachineType":
			err = unpopulate(val, "AssessedMachineType", &a.AssessedMachineType)
			delete(rawMsg, key)
		case "bootType":
			err = unpopulate(val, "BootType", &a.BootType)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, "Description", &a.Description)
			delete(rawMsg, key)
		case "disks":
			err = unpopulate(val, "Disks", &a.Disks)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, "Errors", &a.Errors)
			delete(rawMsg, key)
		case "hostProcessor":
			err = unpopulate(val, "HostProcessor", &a.HostProcessor)
			delete(rawMsg, key)
		case "megabytesOfMemory":
			err = unpopulate(val, "MegabytesOfMemory", &a.MegabytesOfMemory)
			delete(rawMsg, key)
		case "networkAdapters":
			err = unpopulate(val, "NetworkAdapters", &a.NetworkAdapters)
			delete(rawMsg, key)
		case "numberOfCores":
			err = unpopulate(val, "NumberOfCores", &a.NumberOfCores)
			delete(rawMsg, key)
		case "operatingSystemArchitecture":
			err = unpopulate(val, "OperatingSystemArchitecture", &a.OperatingSystemArchitecture)
			delete(rawMsg, key)
		case "operatingSystemName":
			err = unpopulate(val, "OperatingSystemName", &a.OperatingSystemName)
			delete(rawMsg, key)
		case "operatingSystemType":
			err = unpopulate(val, "OperatingSystemType", &a.OperatingSystemType)
			delete(rawMsg, key)
		case "operatingSystemVersion":
			err = unpopulate(val, "OperatingSystemVersion", &a.OperatingSystemVersion)
			delete(rawMsg, key)
		case "percentageCoresUtilization":
			err = unpopulate(val, "PercentageCoresUtilization", &a.PercentageCoresUtilization)
			delete(rawMsg, key)
		case "percentageMemoryUtilization":
			err = unpopulate(val, "PercentageMemoryUtilization", &a.PercentageMemoryUtilization)
			delete(rawMsg, key)
		case "productSupportStatus":
			err = unpopulate(val, "ProductSupportStatus", &a.ProductSupportStatus)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AssessedMachineNetworkAdaptersV3.
func (a AssessedMachineNetworkAdaptersV3) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "ipAddresses", a.IPAddresses)
	populate(objectMap, "macAddress", a.MacAddress)
	populate(objectMap, "megabytesPerSecondRecieved", a.MegabytesPerSecondRecieved)
	populate(objectMap, "megabytesPerSecondTransmitted", a.MegabytesPerSecondTransmitted)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "netGigabytesTransmittedPerMonth", a.NetGigabytesTransmittedPerMonth)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessedMachineNetworkAdaptersV3.
func (a *AssessedMachineNetworkAdaptersV3) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "ipAddresses":
			err = unpopulate(val, "IPAddresses", &a.IPAddresses)
			delete(rawMsg, key)
		case "macAddress":
			err = unpopulate(val, "MacAddress", &a.MacAddress)
			delete(rawMsg, key)
		case "megabytesPerSecondRecieved":
			err = unpopulate(val, "MegabytesPerSecondRecieved", &a.MegabytesPerSecondRecieved)
			delete(rawMsg, key)
		case "megabytesPerSecondTransmitted":
			err = unpopulate(val, "MegabytesPerSecondTransmitted", &a.MegabytesPerSecondTransmitted)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &a.Name)
			delete(rawMsg, key)
		case "netGigabytesTransmittedPerMonth":
			err = unpopulate(val, "NetGigabytesTransmittedPerMonth", &a.NetGigabytesTransmittedPerMonth)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AssessedMachineV2.
func (a AssessedMachineV2) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", a.ID)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessedMachineV2.
func (a *AssessedMachineV2) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &a.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AssessedMachineV2ListResult.
func (a AssessedMachineV2ListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessedMachineV2ListResult.
func (a *AssessedMachineV2ListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &a.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &a.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AssessedMachineV2Properties.
func (a AssessedMachineV2Properties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdTimestamp", a.CreatedTimestamp)
	populate(objectMap, "extendedDetails", a.ExtendedDetails)
	populate(objectMap, "linkages", a.Linkages)
	populate(objectMap, "recommendations", a.Recommendations)
	populateDateTimeRFC3339(objectMap, "updatedTimestamp", a.UpdatedTimestamp)
	populate(objectMap, "workloadType", a.WorkloadType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessedMachineV2Properties.
func (a *AssessedMachineV2Properties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdTimestamp":
			err = unpopulateDateTimeRFC3339(val, "CreatedTimestamp", &a.CreatedTimestamp)
			delete(rawMsg, key)
		case "extendedDetails":
			err = unpopulate(val, "ExtendedDetails", &a.ExtendedDetails)
			delete(rawMsg, key)
		case "linkages":
			err = unpopulate(val, "Linkages", &a.Linkages)
			delete(rawMsg, key)
		case "recommendations":
			err = unpopulate(val, "Recommendations", &a.Recommendations)
			delete(rawMsg, key)
		case "updatedTimestamp":
			err = unpopulateDateTimeRFC3339(val, "UpdatedTimestamp", &a.UpdatedTimestamp)
			delete(rawMsg, key)
		case "workloadType":
			err = unpopulate(val, "WorkloadType", &a.WorkloadType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AssessmentDetails.
func (a AssessmentDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "confidenceRatingInPercentage", a.ConfidenceRatingInPercentage)
	populateDateTimeRFC3339(objectMap, "createdTimestamp", a.CreatedTimestamp)
	populateDateTimeRFC3339(objectMap, "pricesTimestamp", a.PricesTimestamp)
	populate(objectMap, "status", a.Status)
	populateDateTimeRFC3339(objectMap, "updatedTimestamp", a.UpdatedTimestamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessmentDetails.
func (a *AssessmentDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "confidenceRatingInPercentage":
			err = unpopulate(val, "ConfidenceRatingInPercentage", &a.ConfidenceRatingInPercentage)
			delete(rawMsg, key)
		case "createdTimestamp":
			err = unpopulateDateTimeRFC3339(val, "CreatedTimestamp", &a.CreatedTimestamp)
			delete(rawMsg, key)
		case "pricesTimestamp":
			err = unpopulateDateTimeRFC3339(val, "PricesTimestamp", &a.PricesTimestamp)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &a.Status)
			delete(rawMsg, key)
		case "updatedTimestamp":
			err = unpopulateDateTimeRFC3339(val, "UpdatedTimestamp", &a.UpdatedTimestamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BillingSettings.
func (b BillingSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "licensingProgram", b.LicensingProgram)
	populate(objectMap, "subscriptionId", b.SubscriptionID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BillingSettings.
func (b *BillingSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "licensingProgram":
			err = unpopulate(val, "LicensingProgram", &b.LicensingProgram)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, "SubscriptionID", &b.SubscriptionID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Configuration.
func (c Configuration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "azureTarget", c.AzureTarget)
	populate(objectMap, "sizingCriterion", c.SizingCriterion)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Configuration.
func (c *Configuration) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureTarget":
			err = unpopulate(val, "AzureTarget", &c.AzureTarget)
			delete(rawMsg, key)
		case "sizingCriterion":
			err = unpopulate(val, "SizingCriterion", &c.SizingCriterion)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CostDetailsCommon.
func (c CostDetailsCommon) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "costDetail", c.CostDetail)
	populate(objectMap, "savingOptions", c.SavingOptions)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CostDetailsCommon.
func (c *CostDetailsCommon) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "costDetail":
			err = unpopulate(val, "CostDetail", &c.CostDetail)
			delete(rawMsg, key)
		case "savingOptions":
			err = unpopulate(val, "SavingOptions", &c.SavingOptions)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DownloadURL.
func (d DownloadURL) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "assessmentReportUrl", d.AssessmentReportURL)
	populateDateTimeRFC3339(objectMap, "expirationTime", d.ExpirationTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DownloadURL.
func (d *DownloadURL) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "assessmentReportUrl":
			err = unpopulate(val, "AssessmentReportURL", &d.AssessmentReportURL)
			delete(rawMsg, key)
		case "expirationTime":
			err = unpopulateDateTimeRFC3339(val, "ExpirationTime", &d.ExpirationTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Error.
func (e Error) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "agentScenario", e.AgentScenario)
	populate(objectMap, "applianceName", e.ApplianceName)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "id", e.ID)
	populate(objectMap, "impactedAssessmentType", e.ImpactedAssessmentType)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "messageParameters", e.MessageParameters)
	populate(objectMap, "possibleCauses", e.PossibleCauses)
	populate(objectMap, "recommendedAction", e.RecommendedAction)
	populate(objectMap, "runAsAccountId", e.RunAsAccountID)
	populate(objectMap, "severity", e.Severity)
	populate(objectMap, "summaryMessage", e.SummaryMessage)
	populateDateTimeRFC3339(objectMap, "updatedTimeStamp", e.UpdatedTimeStamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Error.
func (e *Error) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "agentScenario":
			err = unpopulate(val, "AgentScenario", &e.AgentScenario)
			delete(rawMsg, key)
		case "applianceName":
			err = unpopulate(val, "ApplianceName", &e.ApplianceName)
			delete(rawMsg, key)
		case "code":
			err = unpopulate(val, "Code", &e.Code)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &e.ID)
			delete(rawMsg, key)
		case "impactedAssessmentType":
			err = unpopulate(val, "ImpactedAssessmentType", &e.ImpactedAssessmentType)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, "Message", &e.Message)
			delete(rawMsg, key)
		case "messageParameters":
			err = unpopulate(val, "MessageParameters", &e.MessageParameters)
			delete(rawMsg, key)
		case "possibleCauses":
			err = unpopulate(val, "PossibleCauses", &e.PossibleCauses)
			delete(rawMsg, key)
		case "recommendedAction":
			err = unpopulate(val, "RecommendedAction", &e.RecommendedAction)
			delete(rawMsg, key)
		case "runAsAccountId":
			err = unpopulate(val, "RunAsAccountID", &e.RunAsAccountID)
			delete(rawMsg, key)
		case "severity":
			err = unpopulate(val, "Severity", &e.Severity)
			delete(rawMsg, key)
		case "summaryMessage":
			err = unpopulate(val, "SummaryMessage", &e.SummaryMessage)
			delete(rawMsg, key)
		case "updatedTimeStamp":
			err = unpopulateDateTimeRFC3339(val, "UpdatedTimeStamp", &e.UpdatedTimeStamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Linkages.
func (l Linkages) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "armId", l.ArmID)
	populate(objectMap, "kind", l.Kind)
	populate(objectMap, "linkageType", l.LinkageType)
	populate(objectMap, "workloadName", l.WorkloadName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Linkages.
func (l *Linkages) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "armId":
			err = unpopulate(val, "ArmID", &l.ArmID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, "Kind", &l.Kind)
			delete(rawMsg, key)
		case "linkageType":
			err = unpopulate(val, "LinkageType", &l.LinkageType)
			delete(rawMsg, key)
		case "workloadName":
			err = unpopulate(val, "WorkloadName", &l.WorkloadName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineAssessmentOptionsOutboundEdgeGroup.
func (m MachineAssessmentOptionsOutboundEdgeGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "azureOfferCode", m.AzureOfferCode)
	populate(objectMap, "azureVmFamilies", m.AzureVMFamilies)
	populate(objectMap, "azureVmFamilyCategories", m.AzureVMFamilyCategories)
	populate(objectMap, "azureVmSecurityOptions", m.AzureVMSecurityOptions)
	populate(objectMap, "currencies", m.Currencies)
	populate(objectMap, "licensingProgram", m.LicensingProgram)
	populate(objectMap, "premiumDiskSupport", m.PremiumDiskSupport)
	populate(objectMap, "savingsOptions", m.SavingsOptions)
	populate(objectMap, "targetLocations", m.TargetLocations)
	populate(objectMap, "ultraDiskSupport", m.UltraDiskSupport)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineAssessmentOptionsOutboundEdgeGroup.
func (m *MachineAssessmentOptionsOutboundEdgeGroup) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureOfferCode":
			err = unpopulate(val, "AzureOfferCode", &m.AzureOfferCode)
			delete(rawMsg, key)
		case "azureVmFamilies":
			err = unpopulate(val, "AzureVMFamilies", &m.AzureVMFamilies)
			delete(rawMsg, key)
		case "azureVmFamilyCategories":
			err = unpopulate(val, "AzureVMFamilyCategories", &m.AzureVMFamilyCategories)
			delete(rawMsg, key)
		case "azureVmSecurityOptions":
			err = unpopulate(val, "AzureVMSecurityOptions", &m.AzureVMSecurityOptions)
			delete(rawMsg, key)
		case "currencies":
			err = unpopulate(val, "Currencies", &m.Currencies)
			delete(rawMsg, key)
		case "licensingProgram":
			err = unpopulate(val, "LicensingProgram", &m.LicensingProgram)
			delete(rawMsg, key)
		case "premiumDiskSupport":
			err = unpopulate(val, "PremiumDiskSupport", &m.PremiumDiskSupport)
			delete(rawMsg, key)
		case "savingsOptions":
			err = unpopulate(val, "SavingsOptions", &m.SavingsOptions)
			delete(rawMsg, key)
		case "targetLocations":
			err = unpopulate(val, "TargetLocations", &m.TargetLocations)
			delete(rawMsg, key)
		case "ultraDiskSupport":
			err = unpopulate(val, "UltraDiskSupport", &m.UltraDiskSupport)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineAssessmentRecommendation.
func (m MachineAssessmentRecommendation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "confidenceScore", m.ConfidenceScore)
	populate(objectMap, "configuration", m.Configuration)
	populate(objectMap, "migrationIssues", m.MigrationIssues)
	populate(objectMap, "migrationPlatform", m.MigrationPlatform)
	populate(objectMap, "migrationSuitability", m.MigrationSuitability)
	populate(objectMap, "recommendedFor", m.RecommendedFor)
	populate(objectMap, "recommendedVmSecurityType", m.RecommendedVMSecurityType)
	populate(objectMap, "skus", m.SKUs)
	populate(objectMap, "securitySuitability", m.SecuritySuitability)
	populate(objectMap, "totalCost", m.TotalCost)
	populate(objectMap, "totalSavings", m.TotalSavings)
	populate(objectMap, "vmSecuritySuitabilityResults", m.VMSecuritySuitabilityResults)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineAssessmentRecommendation.
func (m *MachineAssessmentRecommendation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "confidenceScore":
			err = unpopulate(val, "ConfidenceScore", &m.ConfidenceScore)
			delete(rawMsg, key)
		case "configuration":
			err = unpopulate(val, "Configuration", &m.Configuration)
			delete(rawMsg, key)
		case "migrationIssues":
			err = unpopulate(val, "MigrationIssues", &m.MigrationIssues)
			delete(rawMsg, key)
		case "migrationPlatform":
			err = unpopulate(val, "MigrationPlatform", &m.MigrationPlatform)
			delete(rawMsg, key)
		case "migrationSuitability":
			err = unpopulate(val, "MigrationSuitability", &m.MigrationSuitability)
			delete(rawMsg, key)
		case "recommendedFor":
			err = unpopulate(val, "RecommendedFor", &m.RecommendedFor)
			delete(rawMsg, key)
		case "recommendedVmSecurityType":
			err = unpopulate(val, "RecommendedVMSecurityType", &m.RecommendedVMSecurityType)
			delete(rawMsg, key)
		case "skus":
			err = unpopulate(val, "SKUs", &m.SKUs)
			delete(rawMsg, key)
		case "securitySuitability":
			err = unpopulate(val, "SecuritySuitability", &m.SecuritySuitability)
			delete(rawMsg, key)
		case "totalCost":
			err = unpopulate(val, "TotalCost", &m.TotalCost)
			delete(rawMsg, key)
		case "totalSavings":
			err = unpopulate(val, "TotalSavings", &m.TotalSavings)
			delete(rawMsg, key)
		case "vmSecuritySuitabilityResults":
			err = unpopulate(val, "VMSecuritySuitabilityResults", &m.VMSecuritySuitabilityResults)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineAssessmentSettings.
func (m MachineAssessmentSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "azureDiskTypes", m.AzureDiskTypes)
	populate(objectMap, "azureHybridUseBenefit", m.AzureHybridUseBenefit)
	populate(objectMap, "azureLocation", m.AzureLocation)
	populate(objectMap, "azurePricingTier", m.AzurePricingTier)
	populate(objectMap, "azureSecurityOfferingType", m.AzureSecurityOfferingType)
	populate(objectMap, "azureStorageRedundancy", m.AzureStorageRedundancy)
	populate(objectMap, "azureVmFamilies", m.AzureVMFamilies)
	populate(objectMap, "azureVmSecurityOptions", m.AzureVMSecurityOptions)
	populate(objectMap, "billingSettings", m.BillingSettings)
	populate(objectMap, "currency", m.Currency)
	populate(objectMap, "discountPercentage", m.DiscountPercentage)
	populate(objectMap, "environmentType", m.EnvironmentType)
	populate(objectMap, "linuxAzureHybridUseBenefit", m.LinuxAzureHybridUseBenefit)
	populate(objectMap, "performanceData", m.PerformanceData)
	populate(objectMap, "savingsSettings", m.SavingsSettings)
	populate(objectMap, "scalingFactor", m.ScalingFactor)
	populate(objectMap, "sizingCriterion", m.SizingCriterion)
	populate(objectMap, "vmUptime", m.VMUptime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineAssessmentSettings.
func (m *MachineAssessmentSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureDiskTypes":
			err = unpopulate(val, "AzureDiskTypes", &m.AzureDiskTypes)
			delete(rawMsg, key)
		case "azureHybridUseBenefit":
			err = unpopulate(val, "AzureHybridUseBenefit", &m.AzureHybridUseBenefit)
			delete(rawMsg, key)
		case "azureLocation":
			err = unpopulate(val, "AzureLocation", &m.AzureLocation)
			delete(rawMsg, key)
		case "azurePricingTier":
			err = unpopulate(val, "AzurePricingTier", &m.AzurePricingTier)
			delete(rawMsg, key)
		case "azureSecurityOfferingType":
			err = unpopulate(val, "AzureSecurityOfferingType", &m.AzureSecurityOfferingType)
			delete(rawMsg, key)
		case "azureStorageRedundancy":
			err = unpopulate(val, "AzureStorageRedundancy", &m.AzureStorageRedundancy)
			delete(rawMsg, key)
		case "azureVmFamilies":
			err = unpopulate(val, "AzureVMFamilies", &m.AzureVMFamilies)
			delete(rawMsg, key)
		case "azureVmSecurityOptions":
			err = unpopulate(val, "AzureVMSecurityOptions", &m.AzureVMSecurityOptions)
			delete(rawMsg, key)
		case "billingSettings":
			err = unpopulate(val, "BillingSettings", &m.BillingSettings)
			delete(rawMsg, key)
		case "currency":
			err = unpopulate(val, "Currency", &m.Currency)
			delete(rawMsg, key)
		case "discountPercentage":
			err = unpopulate(val, "DiscountPercentage", &m.DiscountPercentage)
			delete(rawMsg, key)
		case "environmentType":
			err = unpopulate(val, "EnvironmentType", &m.EnvironmentType)
			delete(rawMsg, key)
		case "linuxAzureHybridUseBenefit":
			err = unpopulate(val, "LinuxAzureHybridUseBenefit", &m.LinuxAzureHybridUseBenefit)
			delete(rawMsg, key)
		case "performanceData":
			err = unpopulate(val, "PerformanceData", &m.PerformanceData)
			delete(rawMsg, key)
		case "savingsSettings":
			err = unpopulate(val, "SavingsSettings", &m.SavingsSettings)
			delete(rawMsg, key)
		case "scalingFactor":
			err = unpopulate(val, "ScalingFactor", &m.ScalingFactor)
			delete(rawMsg, key)
		case "sizingCriterion":
			err = unpopulate(val, "SizingCriterion", &m.SizingCriterion)
			delete(rawMsg, key)
		case "vmUptime":
			err = unpopulate(val, "VMUptime", &m.VMUptime)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineAssessmentV2.
func (m MachineAssessmentV2) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineAssessmentV2.
func (m *MachineAssessmentV2) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &m.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &m.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &m.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &m.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &m.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineAssessmentV2ListResult.
func (m MachineAssessmentV2ListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineAssessmentV2ListResult.
func (m *MachineAssessmentV2ListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &m.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &m.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineAssessmentV2Properties.
func (m MachineAssessmentV2Properties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "details", m.Details)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "scope", m.Scope)
	populate(objectMap, "settings", m.Settings)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineAssessmentV2Properties.
func (m *MachineAssessmentV2Properties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "details":
			err = unpopulate(val, "Details", &m.Details)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &m.ProvisioningState)
			delete(rawMsg, key)
		case "scope":
			err = unpopulate(val, "Scope", &m.Scope)
			delete(rawMsg, key)
		case "settings":
			err = unpopulate(val, "Settings", &m.Settings)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineAssessmentV2Summary.
func (m MachineAssessmentV2Summary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineAssessmentV2Summary.
func (m *MachineAssessmentV2Summary) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &m.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &m.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &m.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &m.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &m.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineAssessmentV2SummaryListResult.
func (m MachineAssessmentV2SummaryListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineAssessmentV2SummaryListResult.
func (m *MachineAssessmentV2SummaryListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &m.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &m.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineGraphAssessmentOptions.
func (m MachineGraphAssessmentOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", m.ID)
	objectMap["name"] = "default"
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineGraphAssessmentOptions.
func (m *MachineGraphAssessmentOptions) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &m.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &m.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &m.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &m.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &m.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineGraphAssessmentOptionsListResult.
func (m MachineGraphAssessmentOptionsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineGraphAssessmentOptionsListResult.
func (m *MachineGraphAssessmentOptionsListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &m.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &m.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MachineGraphAssessmentOptionsProperties.
func (m MachineGraphAssessmentOptionsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "edges", m.Edges)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineGraphAssessmentOptionsProperties.
func (m *MachineGraphAssessmentOptionsProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "edges":
			err = unpopulate(val, "Edges", &m.Edges)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ManagementDetails.
func (m ManagementDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "readinessSummary", m.ReadinessSummary)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ManagementDetails.
func (m *ManagementDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &m.Name)
			delete(rawMsg, key)
		case "readinessSummary":
			err = unpopulate(val, "ReadinessSummary", &m.ReadinessSummary)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrationDetails.
func (m MigrationDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "migrationType", m.MigrationType)
	populate(objectMap, "readinessSummary", m.ReadinessSummary)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrationDetails.
func (m *MigrationDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "migrationType":
			err = unpopulate(val, "MigrationType", &m.MigrationType)
			delete(rawMsg, key)
		case "readinessSummary":
			err = unpopulate(val, "ReadinessSummary", &m.ReadinessSummary)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrationIssues.
func (m MigrationIssues) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "issueCategory", m.IssueCategory)
	populate(objectMap, "issueCode", m.IssueCode)
	populate(objectMap, "issueDescription", m.IssueDescription)
	populate(objectMap, "moreInformation", m.MoreInformation)
	populate(objectMap, "possibleCause", m.PossibleCause)
	populate(objectMap, "recommendedActions", m.RecommendedActions)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrationIssues.
func (m *MigrationIssues) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "issueCategory":
			err = unpopulate(val, "IssueCategory", &m.IssueCategory)
			delete(rawMsg, key)
		case "issueCode":
			err = unpopulate(val, "IssueCode", &m.IssueCode)
			delete(rawMsg, key)
		case "issueDescription":
			err = unpopulate(val, "IssueDescription", &m.IssueDescription)
			delete(rawMsg, key)
		case "moreInformation":
			err = unpopulate(val, "MoreInformation", &m.MoreInformation)
			delete(rawMsg, key)
		case "possibleCause":
			err = unpopulate(val, "PossibleCause", &m.PossibleCause)
			delete(rawMsg, key)
		case "recommendedActions":
			err = unpopulate(val, "RecommendedActions", &m.RecommendedActions)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrationSuitability.
func (m MigrationSuitability) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "readiness", m.Readiness)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrationSuitability.
func (m *MigrationSuitability) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "readiness":
			err = unpopulate(val, "Readiness", &m.Readiness)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MoreInformation.
func (m MoreInformation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "title", m.Title)
	populate(objectMap, "url", m.URL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MoreInformation.
func (m *MoreInformation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "title":
			err = unpopulate(val, "Title", &m.Title)
			delete(rawMsg, key)
		case "url":
			err = unpopulate(val, "URL", &m.URL)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type NameValuePair.
func (n NameValuePair) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", n.Name)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NameValuePair.
func (n *NameValuePair) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", n, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &n.Name)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &n.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", n, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type NameValuePairCloudSuitabilityCommon.
func (n NameValuePairCloudSuitabilityCommon) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", n.Name)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NameValuePairCloudSuitabilityCommon.
func (n *NameValuePairCloudSuitabilityCommon) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", n, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &n.Name)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &n.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", n, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type NameValuePairCostType.
func (n NameValuePairCostType) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", n.Name)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NameValuePairCostType.
func (n *NameValuePairCostType) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", n, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &n.Name)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &n.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", n, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type NameValuePairSavingsType.
func (n NameValuePairSavingsType) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", n.Name)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NameValuePairSavingsType.
func (n *NameValuePairSavingsType) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", n, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &n.Name)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &n.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", n, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "actionType", o.ActionType)
	populate(objectMap, "display", o.Display)
	populate(objectMap, "isDataAction", o.IsDataAction)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "origin", o.Origin)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Operation.
func (o *Operation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionType":
			err = unpopulate(val, "ActionType", &o.ActionType)
			delete(rawMsg, key)
		case "display":
			err = unpopulate(val, "Display", &o.Display)
			delete(rawMsg, key)
		case "isDataAction":
			err = unpopulate(val, "IsDataAction", &o.IsDataAction)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &o.Name)
			delete(rawMsg, key)
		case "origin":
			err = unpopulate(val, "Origin", &o.Origin)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationDisplay.
func (o OperationDisplay) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "description", o.Description)
	populate(objectMap, "operation", o.Operation)
	populate(objectMap, "provider", o.Provider)
	populate(objectMap, "resource", o.Resource)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationDisplay.
func (o *OperationDisplay) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, "Description", &o.Description)
			delete(rawMsg, key)
		case "operation":
			err = unpopulate(val, "Operation", &o.Operation)
			delete(rawMsg, key)
		case "provider":
			err = unpopulate(val, "Provider", &o.Provider)
			delete(rawMsg, key)
		case "resource":
			err = unpopulate(val, "Resource", &o.Resource)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationListResult.
func (o *OperationListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &o.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &o.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PerformanceData.
func (p PerformanceData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "percentile", p.Percentile)
	populateDateTimeRFC3339(objectMap, "perfDataEndTime", p.PerfDataEndTime)
	populateDateTimeRFC3339(objectMap, "perfDataStartTime", p.PerfDataStartTime)
	populate(objectMap, "timeRange", p.TimeRange)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PerformanceData.
func (p *PerformanceData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "percentile":
			err = unpopulate(val, "Percentile", &p.Percentile)
			delete(rawMsg, key)
		case "perfDataEndTime":
			err = unpopulateDateTimeRFC3339(val, "PerfDataEndTime", &p.PerfDataEndTime)
			delete(rawMsg, key)
		case "perfDataStartTime":
			err = unpopulateDateTimeRFC3339(val, "PerfDataStartTime", &p.PerfDataStartTime)
			delete(rawMsg, key)
		case "timeRange":
			err = unpopulate(val, "TimeRange", &p.TimeRange)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ProcessorInfo.
func (p ProcessorInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "numberOfCoresPerSocket", p.NumberOfCoresPerSocket)
	populate(objectMap, "numberOfSockets", p.NumberOfSockets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProcessorInfo.
func (p *ProcessorInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &p.Name)
			delete(rawMsg, key)
		case "numberOfCoresPerSocket":
			err = unpopulate(val, "NumberOfCoresPerSocket", &p.NumberOfCoresPerSocket)
			delete(rawMsg, key)
		case "numberOfSockets":
			err = unpopulate(val, "NumberOfSockets", &p.NumberOfSockets)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ProductSupportStatus.
func (p ProductSupportStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "currentEsuYear", p.CurrentEsuYear)
	populate(objectMap, "currentVersion", p.CurrentVersion)
	populate(objectMap, "esuStatus", p.EsuStatus)
	populate(objectMap, "eta", p.Eta)
	populateDateTimeRFC3339(objectMap, "extendedSecurityUpdateYear1EndDate", p.ExtendedSecurityUpdateYear1EndDate)
	populateDateTimeRFC3339(objectMap, "extendedSecurityUpdateYear2EndDate", p.ExtendedSecurityUpdateYear2EndDate)
	populateDateTimeRFC3339(objectMap, "extendedSecurityUpdateYear3EndDate", p.ExtendedSecurityUpdateYear3EndDate)
	populateDateTimeRFC3339(objectMap, "extendedSupportEndDate", p.ExtendedSupportEndDate)
	populateDateTimeRFC3339(objectMap, "mainstreamEndDate", p.MainstreamEndDate)
	populate(objectMap, "servicePackStatus", p.ServicePackStatus)
	populate(objectMap, "supportStatus", p.SupportStatus)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProductSupportStatus.
func (p *ProductSupportStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currentEsuYear":
			err = unpopulate(val, "CurrentEsuYear", &p.CurrentEsuYear)
			delete(rawMsg, key)
		case "currentVersion":
			err = unpopulate(val, "CurrentVersion", &p.CurrentVersion)
			delete(rawMsg, key)
		case "esuStatus":
			err = unpopulate(val, "EsuStatus", &p.EsuStatus)
			delete(rawMsg, key)
		case "eta":
			err = unpopulate(val, "Eta", &p.Eta)
			delete(rawMsg, key)
		case "extendedSecurityUpdateYear1EndDate":
			err = unpopulateDateTimeRFC3339(val, "ExtendedSecurityUpdateYear1EndDate", &p.ExtendedSecurityUpdateYear1EndDate)
			delete(rawMsg, key)
		case "extendedSecurityUpdateYear2EndDate":
			err = unpopulateDateTimeRFC3339(val, "ExtendedSecurityUpdateYear2EndDate", &p.ExtendedSecurityUpdateYear2EndDate)
			delete(rawMsg, key)
		case "extendedSecurityUpdateYear3EndDate":
			err = unpopulateDateTimeRFC3339(val, "ExtendedSecurityUpdateYear3EndDate", &p.ExtendedSecurityUpdateYear3EndDate)
			delete(rawMsg, key)
		case "extendedSupportEndDate":
			err = unpopulateDateTimeRFC3339(val, "ExtendedSupportEndDate", &p.ExtendedSupportEndDate)
			delete(rawMsg, key)
		case "mainstreamEndDate":
			err = unpopulateDateTimeRFC3339(val, "MainstreamEndDate", &p.MainstreamEndDate)
			delete(rawMsg, key)
		case "servicePackStatus":
			err = unpopulate(val, "ServicePackStatus", &p.ServicePackStatus)
			delete(rawMsg, key)
		case "supportStatus":
			err = unpopulate(val, "SupportStatus", &p.SupportStatus)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RecommendedFor.
func (r RecommendedFor) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "strategies", r.Strategies)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecommendedFor.
func (r *RecommendedFor) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "strategies":
			err = unpopulate(val, "Strategies", &r.Strategies)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SKUDetails.
func (s SKUDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "capabilities", s.Capabilities)
	populate(objectMap, "skuName", s.SKUName)
	populate(objectMap, "skuType", s.SKUType)
	populate(objectMap, "totalCost", s.TotalCost)
	populate(objectMap, "totalSavings", s.TotalSavings)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SKUDetails.
func (s *SKUDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "capabilities":
			err = unpopulate(val, "Capabilities", &s.Capabilities)
			delete(rawMsg, key)
		case "skuName":
			err = unpopulate(val, "SKUName", &s.SKUName)
			delete(rawMsg, key)
		case "skuType":
			err = unpopulate(val, "SKUType", &s.SKUType)
			delete(rawMsg, key)
		case "totalCost":
			err = unpopulate(val, "TotalCost", &s.TotalCost)
			delete(rawMsg, key)
		case "totalSavings":
			err = unpopulate(val, "TotalSavings", &s.TotalSavings)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SKUsMigrationSuitability.
func (s SKUsMigrationSuitability) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "details", s.Details)
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "resourceUri", s.ResourceURI)
	populate(objectMap, "sources", s.Sources)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SKUsMigrationSuitability.
func (s *SKUsMigrationSuitability) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "details":
			err = unpopulate(val, "Details", &s.Details)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &s.DisplayName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, "Kind", &s.Kind)
			delete(rawMsg, key)
		case "resourceUri":
			err = unpopulate(val, "ResourceURI", &s.ResourceURI)
			delete(rawMsg, key)
		case "sources":
			err = unpopulate(val, "Sources", &s.Sources)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SavingsDetailsCommon.
func (s SavingsDetailsCommon) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "savingOptions", s.SavingOptions)
	populate(objectMap, "savingsDetail", s.SavingsDetail)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SavingsDetailsCommon.
func (s *SavingsDetailsCommon) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "savingOptions":
			err = unpopulate(val, "SavingOptions", &s.SavingOptions)
			delete(rawMsg, key)
		case "savingsDetail":
			err = unpopulate(val, "SavingsDetail", &s.SavingsDetail)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SavingsSettings.
func (s SavingsSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "azureOfferCode", s.AzureOfferCode)
	populate(objectMap, "savingsOptions", s.SavingsOptions)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SavingsSettings.
func (s *SavingsSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureOfferCode":
			err = unpopulate(val, "AzureOfferCode", &s.AzureOfferCode)
			delete(rawMsg, key)
		case "savingsOptions":
			err = unpopulate(val, "SavingsOptions", &s.SavingsOptions)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Scope.
func (s Scope) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "azureResourceGraphQuery", s.AzureResourceGraphQuery)
	populate(objectMap, "scopeType", s.ScopeType)
	populate(objectMap, "serverGroupId", s.ServerGroupID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Scope.
func (s *Scope) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureResourceGraphQuery":
			err = unpopulate(val, "AzureResourceGraphQuery", &s.AzureResourceGraphQuery)
			delete(rawMsg, key)
		case "scopeType":
			err = unpopulate(val, "ScopeType", &s.ScopeType)
			delete(rawMsg, key)
		case "serverGroupId":
			err = unpopulate(val, "ServerGroupID", &s.ServerGroupID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SecuritySuitability.
func (s SecuritySuitability) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "readiness", s.Readiness)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SecuritySuitability.
func (s *SecuritySuitability) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "readiness":
			err = unpopulate(val, "Readiness", &s.Readiness)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SourceDetails.
func (s SourceDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "count", s.Count)
	populate(objectMap, "platform", s.Platform)
	populate(objectMap, "sourceName", s.SourceName)
	populate(objectMap, "sourceType", s.SourceType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceDetails.
func (s *SourceDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "count":
			err = unpopulate(val, "Count", &s.Count)
			delete(rawMsg, key)
		case "platform":
			err = unpopulate(val, "Platform", &s.Platform)
			delete(rawMsg, key)
		case "sourceName":
			err = unpopulate(val, "SourceName", &s.SourceName)
			delete(rawMsg, key)
		case "sourceType":
			err = unpopulate(val, "SourceType", &s.SourceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SourceRecommendationMigrationSuitability.
func (s SourceRecommendationMigrationSuitability) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "migrationSuitability", s.MigrationSuitability)
	populate(objectMap, "name", s.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceRecommendationMigrationSuitability.
func (s *SourceRecommendationMigrationSuitability) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "migrationSuitability":
			err = unpopulate(val, "MigrationSuitability", &s.MigrationSuitability)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &s.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SummaryProperties.
func (s SummaryProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "costComponents", s.CostComponents)
	populate(objectMap, "savingsComponents", s.SavingsComponents)
	populate(objectMap, "sources", s.Sources)
	populate(objectMap, "summaryName", s.SummaryName)
	populate(objectMap, "summaryType", s.SummaryType)
	populate(objectMap, "targetSourceMapping", s.TargetSourceMapping)
	populate(objectMap, "targets", s.Targets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SummaryProperties.
func (s *SummaryProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "costComponents":
			err = unpopulate(val, "CostComponents", &s.CostComponents)
			delete(rawMsg, key)
		case "savingsComponents":
			err = unpopulate(val, "SavingsComponents", &s.SavingsComponents)
			delete(rawMsg, key)
		case "sources":
			err = unpopulate(val, "Sources", &s.Sources)
			delete(rawMsg, key)
		case "summaryName":
			err = unpopulate(val, "SummaryName", &s.SummaryName)
			delete(rawMsg, key)
		case "summaryType":
			err = unpopulate(val, "SummaryType", &s.SummaryType)
			delete(rawMsg, key)
		case "targetSourceMapping":
			err = unpopulate(val, "TargetSourceMapping", &s.TargetSourceMapping)
			delete(rawMsg, key)
		case "targets":
			err = unpopulate(val, "Targets", &s.Targets)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TargetDetails.
func (t TargetDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "count", t.Count)
	populate(objectMap, "platform", t.Platform)
	populate(objectMap, "targetName", t.TargetName)
	populate(objectMap, "targetType", t.TargetType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TargetDetails.
func (t *TargetDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "count":
			err = unpopulate(val, "Count", &t.Count)
			delete(rawMsg, key)
		case "platform":
			err = unpopulate(val, "Platform", &t.Platform)
			delete(rawMsg, key)
		case "targetName":
			err = unpopulate(val, "TargetName", &t.TargetName)
			delete(rawMsg, key)
		case "targetType":
			err = unpopulate(val, "TargetType", &t.TargetType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TargetSourcePair.
func (t TargetSourcePair) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "confidenceScore", t.ConfidenceScore)
	populate(objectMap, "costDetails", t.CostDetails)
	populate(objectMap, "managementDetails", t.ManagementDetails)
	populate(objectMap, "migrationDetails", t.MigrationDetails)
	populate(objectMap, "savingsDetails", t.SavingsDetails)
	populate(objectMap, "sourceCount", t.SourceCount)
	populate(objectMap, "sourceRef", t.SourceRef)
	populate(objectMap, "targetCount", t.TargetCount)
	populate(objectMap, "targetRef", t.TargetRef)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TargetSourcePair.
func (t *TargetSourcePair) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "confidenceScore":
			err = unpopulate(val, "ConfidenceScore", &t.ConfidenceScore)
			delete(rawMsg, key)
		case "costDetails":
			err = unpopulate(val, "CostDetails", &t.CostDetails)
			delete(rawMsg, key)
		case "managementDetails":
			err = unpopulate(val, "ManagementDetails", &t.ManagementDetails)
			delete(rawMsg, key)
		case "migrationDetails":
			err = unpopulate(val, "MigrationDetails", &t.MigrationDetails)
			delete(rawMsg, key)
		case "savingsDetails":
			err = unpopulate(val, "SavingsDetails", &t.SavingsDetails)
			delete(rawMsg, key)
		case "sourceCount":
			err = unpopulate(val, "SourceCount", &t.SourceCount)
			delete(rawMsg, key)
		case "sourceRef":
			err = unpopulate(val, "SourceRef", &t.SourceRef)
			delete(rawMsg, key)
		case "targetCount":
			err = unpopulate(val, "TargetCount", &t.TargetCount)
			delete(rawMsg, key)
		case "targetRef":
			err = unpopulate(val, "TargetRef", &t.TargetRef)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type VMSecuritySuitability.
func (v VMSecuritySuitability) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "securitySuitability", v.SecuritySuitability)
	populate(objectMap, "securitySuitabilityDetails", v.SecuritySuitabilityDetails)
	populate(objectMap, "vmSecurityType", v.VMSecurityType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VMSecuritySuitability.
func (v *VMSecuritySuitability) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", v, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "securitySuitability":
			err = unpopulate(val, "SecuritySuitability", &v.SecuritySuitability)
			delete(rawMsg, key)
		case "securitySuitabilityDetails":
			err = unpopulate(val, "SecuritySuitabilityDetails", &v.SecuritySuitabilityDetails)
			delete(rawMsg, key)
		case "vmSecurityType":
			err = unpopulate(val, "VMSecurityType", &v.VMSecurityType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", v, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type VMUptime.
func (v VMUptime) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "daysPerMonth", v.DaysPerMonth)
	populate(objectMap, "hoursPerDay", v.HoursPerDay)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VMUptime.
func (v *VMUptime) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", v, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "daysPerMonth":
			err = unpopulate(val, "DaysPerMonth", &v.DaysPerMonth)
			delete(rawMsg, key)
		case "hoursPerDay":
			err = unpopulate(val, "HoursPerDay", &v.HoursPerDay)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", v, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
