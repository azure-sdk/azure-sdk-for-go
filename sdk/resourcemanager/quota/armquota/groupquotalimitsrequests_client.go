//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquota

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GroupQuotaLimitsRequestsClient contains the methods for the GroupQuotaLimitsRequests group.
// Don't use this type directly, use NewGroupQuotaLimitsRequestsClient() instead.
type GroupQuotaLimitsRequestsClient struct {
	internal *arm.Client
}

// NewGroupQuotaLimitsRequestsClient creates a new instance of GroupQuotaLimitsRequestsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGroupQuotaLimitsRequestsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*GroupQuotaLimitsRequestsClient, error) {
	cl, err := arm.NewClient(moduleName+".GroupQuotaLimitsRequestsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GroupQuotaLimitsRequestsClient{
		internal: cl,
	}
	return client, nil
}

// Get - Get API to check the status of a GroupQuota request by requestId. Use the polling API - OperationsStatus URI specified
// in Azure-AsyncOperation header field, with retry-after duration in seconds to
// check the intermediate status. This API provides the finals status with the request details and status.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - mgID - Management Group Id.
//   - resourceProviderScope - Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so
//     can be skipped in scope. For most of the resources require -
//     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}.
//     This
//     extension enables to specify resources for any all the RPs.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - requestID - Request Id.
//   - options - GroupQuotaLimitsRequestsClientGetOptions contains the optional parameters for the GroupQuotaLimitsRequestsClient.Get
//     method.
func (client *GroupQuotaLimitsRequestsClient) Get(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, requestID string, options *GroupQuotaLimitsRequestsClientGetOptions) (GroupQuotaLimitsRequestsClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, mgID, resourceProviderScope, groupQuotaName, requestID, options)
	if err != nil {
		return GroupQuotaLimitsRequestsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GroupQuotaLimitsRequestsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GroupQuotaLimitsRequestsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *GroupQuotaLimitsRequestsClient) getCreateRequest(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, requestID string, options *GroupQuotaLimitsRequestsClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}"
	if mgID == "" {
		return nil, errors.New("parameter mgID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mgId}", url.PathEscape(mgID))
	if resourceProviderScope == "" {
		return nil, errors.New("parameter resourceProviderScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderScope}", url.PathEscape(resourceProviderScope))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if requestID == "" {
		return nil, errors.New("parameter requestID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{requestId}", url.PathEscape(requestID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GroupQuotaLimitsRequestsClient) getHandleResponse(resp *http.Response) (GroupQuotaLimitsRequestsClientGetResponse, error) {
	result := GroupQuotaLimitsRequestsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubmittedResourceRequestStatus); err != nil {
		return GroupQuotaLimitsRequestsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained
// for 1 year.
//
// Generated from API version 2023-06-01-preview
//   - mgID - Management Group Id.
//   - resourceProviderScope - Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so
//     can be skipped in scope. For most of the resources require -
//     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}.
//     This
//     extension enables to specify resources for any all the RPs.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - options - GroupQuotaLimitsRequestsClientListOptions contains the optional parameters for the GroupQuotaLimitsRequestsClient.NewListPager
//     method.
func (client *GroupQuotaLimitsRequestsClient) NewListPager(mgID string, resourceProviderScope string, groupQuotaName string, options *GroupQuotaLimitsRequestsClientListOptions) *runtime.Pager[GroupQuotaLimitsRequestsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[GroupQuotaLimitsRequestsClientListResponse]{
		More: func(page GroupQuotaLimitsRequestsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GroupQuotaLimitsRequestsClientListResponse) (GroupQuotaLimitsRequestsClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, mgID, resourceProviderScope, groupQuotaName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return GroupQuotaLimitsRequestsClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return GroupQuotaLimitsRequestsClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return GroupQuotaLimitsRequestsClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *GroupQuotaLimitsRequestsClient) listCreateRequest(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, options *GroupQuotaLimitsRequestsClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests"
	if mgID == "" {
		return nil, errors.New("parameter mgID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mgId}", url.PathEscape(mgID))
	if resourceProviderScope == "" {
		return nil, errors.New("parameter resourceProviderScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderScope}", url.PathEscape(resourceProviderScope))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *GroupQuotaLimitsRequestsClient) listHandleResponse(resp *http.Response) (GroupQuotaLimitsRequestsClientListResponse, error) {
	result := GroupQuotaLimitsRequestsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubmittedResourceRequestStatusList); err != nil {
		return GroupQuotaLimitsRequestsClientListResponse{}, err
	}
	return result, nil
}
