//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CustomRecommendationsClient contains the methods for the CustomRecommendations group.
// Don't use this type directly, use NewCustomRecommendationsClient() instead.
type CustomRecommendationsClient struct {
	internal *arm.Client
}

// NewCustomRecommendationsClient creates a new instance of CustomRecommendationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCustomRecommendationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*CustomRecommendationsClient, error) {
	cl, err := arm.NewClient(moduleName+".CustomRecommendationsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CustomRecommendationsClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a custom recommendation over a given scope
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - scope - The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - customRecommendationName - Name of the Custom Recommendation.
//   - customRecommendationBody - Custom Recommendation body
//   - options - CustomRecommendationsClientCreateOrUpdateOptions contains the optional parameters for the CustomRecommendationsClient.CreateOrUpdate
//     method.
func (client *CustomRecommendationsClient) CreateOrUpdate(ctx context.Context, scope string, customRecommendationName string, customRecommendationBody CustomRecommendation, options *CustomRecommendationsClientCreateOrUpdateOptions) (CustomRecommendationsClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, scope, customRecommendationName, customRecommendationBody, options)
	if err != nil {
		return CustomRecommendationsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CustomRecommendationsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return CustomRecommendationsClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *CustomRecommendationsClient) createOrUpdateCreateRequest(ctx context.Context, scope string, customRecommendationName string, customRecommendationBody CustomRecommendation, options *CustomRecommendationsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if customRecommendationName == "" {
		return nil, errors.New("parameter customRecommendationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{customRecommendationName}", url.PathEscape(customRecommendationName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, customRecommendationBody)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *CustomRecommendationsClient) createOrUpdateHandleResponse(resp *http.Response) (CustomRecommendationsClientCreateOrUpdateResponse, error) {
	result := CustomRecommendationsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CustomRecommendation); err != nil {
		return CustomRecommendationsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete a custom recommendation over a given scope
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - scope - The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - customRecommendationName - Name of the Custom Recommendation.
//   - options - CustomRecommendationsClientBeginDeleteOptions contains the optional parameters for the CustomRecommendationsClient.BeginDelete
//     method.
func (client *CustomRecommendationsClient) BeginDelete(ctx context.Context, scope string, customRecommendationName string, options *CustomRecommendationsClientBeginDeleteOptions) (*runtime.Poller[CustomRecommendationsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, scope, customRecommendationName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CustomRecommendationsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CustomRecommendationsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a custom recommendation over a given scope
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
func (client *CustomRecommendationsClient) deleteOperation(ctx context.Context, scope string, customRecommendationName string, options *CustomRecommendationsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, scope, customRecommendationName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CustomRecommendationsClient) deleteCreateRequest(ctx context.Context, scope string, customRecommendationName string, options *CustomRecommendationsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if customRecommendationName == "" {
		return nil, errors.New("parameter customRecommendationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{customRecommendationName}", url.PathEscape(customRecommendationName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a specific custom recommendation for the requested scope by customRecommendationName
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - scope - The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - customRecommendationName - Name of the Custom Recommendation.
//   - options - CustomRecommendationsClientGetOptions contains the optional parameters for the CustomRecommendationsClient.Get
//     method.
func (client *CustomRecommendationsClient) Get(ctx context.Context, scope string, customRecommendationName string, options *CustomRecommendationsClientGetOptions) (CustomRecommendationsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, customRecommendationName, options)
	if err != nil {
		return CustomRecommendationsClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CustomRecommendationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CustomRecommendationsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CustomRecommendationsClient) getCreateRequest(ctx context.Context, scope string, customRecommendationName string, options *CustomRecommendationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if customRecommendationName == "" {
		return nil, errors.New("parameter customRecommendationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{customRecommendationName}", url.PathEscape(customRecommendationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CustomRecommendationsClient) getHandleResponse(resp *http.Response) (CustomRecommendationsClientGetResponse, error) {
	result := CustomRecommendationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CustomRecommendation); err != nil {
		return CustomRecommendationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get a list of all relevant custom recommendations over a scope
//
// Generated from API version 2023-05-01-preview
//   - scope - The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - options - CustomRecommendationsClientListOptions contains the optional parameters for the CustomRecommendationsClient.NewListPager
//     method.
func (client *CustomRecommendationsClient) NewListPager(scope string, options *CustomRecommendationsClientListOptions) *runtime.Pager[CustomRecommendationsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[CustomRecommendationsClientListResponse]{
		More: func(page CustomRecommendationsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CustomRecommendationsClientListResponse) (CustomRecommendationsClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, scope, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return CustomRecommendationsClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return CustomRecommendationsClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CustomRecommendationsClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *CustomRecommendationsClient) listCreateRequest(ctx context.Context, scope string, options *CustomRecommendationsClientListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/customRecommendations"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *CustomRecommendationsClient) listHandleResponse(resp *http.Response) (CustomRecommendationsClientListResponse, error) {
	result := CustomRecommendationsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CustomRecommendationsList); err != nil {
		return CustomRecommendationsClientListResponse{}, err
	}
	return result, nil
}
