//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armmigrationhub.ClientFactory type.
type ServerFactory struct {
	DatabaseInstancesControllerServer              DatabaseInstancesControllerServer
	DatabasesControllerServer                      DatabasesControllerServer
	EventsControllerServer                         EventsControllerServer
	MachinesControllerServer                       MachinesControllerServer
	MigrateProjectsControllerServer                MigrateProjectsControllerServer
	OperationsServer                               OperationsServer
	PrivateEndpointConnectionControllerServer      PrivateEndpointConnectionControllerServer
	PrivateEndpointConnectionProxyControllerServer PrivateEndpointConnectionProxyControllerServer
	PrivateEndpointConnectionsControllerServer     PrivateEndpointConnectionsControllerServer
	PrivateLinkResourceControllerServer            PrivateLinkResourceControllerServer
	ProjectsServer                                 ProjectsServer
	SolutionsControllerServer                      SolutionsControllerServer
	VirtualDesktopUserControllerServer             VirtualDesktopUserControllerServer
	WebServersControllerServer                     WebServersControllerServer
	WebSitesControllerServer                       WebSitesControllerServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armmigrationhub.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armmigrationhub.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                              *ServerFactory
	trMu                                             sync.Mutex
	trDatabaseInstancesControllerServer              *DatabaseInstancesControllerServerTransport
	trDatabasesControllerServer                      *DatabasesControllerServerTransport
	trEventsControllerServer                         *EventsControllerServerTransport
	trMachinesControllerServer                       *MachinesControllerServerTransport
	trMigrateProjectsControllerServer                *MigrateProjectsControllerServerTransport
	trOperationsServer                               *OperationsServerTransport
	trPrivateEndpointConnectionControllerServer      *PrivateEndpointConnectionControllerServerTransport
	trPrivateEndpointConnectionProxyControllerServer *PrivateEndpointConnectionProxyControllerServerTransport
	trPrivateEndpointConnectionsControllerServer     *PrivateEndpointConnectionsControllerServerTransport
	trPrivateLinkResourceControllerServer            *PrivateLinkResourceControllerServerTransport
	trProjectsServer                                 *ProjectsServerTransport
	trSolutionsControllerServer                      *SolutionsControllerServerTransport
	trVirtualDesktopUserControllerServer             *VirtualDesktopUserControllerServerTransport
	trWebServersControllerServer                     *WebServersControllerServerTransport
	trWebSitesControllerServer                       *WebSitesControllerServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "DatabaseInstancesControllerClient":
		initServer(s, &s.trDatabaseInstancesControllerServer, func() *DatabaseInstancesControllerServerTransport {
			return NewDatabaseInstancesControllerServerTransport(&s.srv.DatabaseInstancesControllerServer)
		})
		resp, err = s.trDatabaseInstancesControllerServer.Do(req)
	case "DatabasesControllerClient":
		initServer(s, &s.trDatabasesControllerServer, func() *DatabasesControllerServerTransport {
			return NewDatabasesControllerServerTransport(&s.srv.DatabasesControllerServer)
		})
		resp, err = s.trDatabasesControllerServer.Do(req)
	case "EventsControllerClient":
		initServer(s, &s.trEventsControllerServer, func() *EventsControllerServerTransport {
			return NewEventsControllerServerTransport(&s.srv.EventsControllerServer)
		})
		resp, err = s.trEventsControllerServer.Do(req)
	case "MachinesControllerClient":
		initServer(s, &s.trMachinesControllerServer, func() *MachinesControllerServerTransport {
			return NewMachinesControllerServerTransport(&s.srv.MachinesControllerServer)
		})
		resp, err = s.trMachinesControllerServer.Do(req)
	case "MigrateProjectsControllerClient":
		initServer(s, &s.trMigrateProjectsControllerServer, func() *MigrateProjectsControllerServerTransport {
			return NewMigrateProjectsControllerServerTransport(&s.srv.MigrateProjectsControllerServer)
		})
		resp, err = s.trMigrateProjectsControllerServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrivateEndpointConnectionControllerClient":
		initServer(s, &s.trPrivateEndpointConnectionControllerServer, func() *PrivateEndpointConnectionControllerServerTransport {
			return NewPrivateEndpointConnectionControllerServerTransport(&s.srv.PrivateEndpointConnectionControllerServer)
		})
		resp, err = s.trPrivateEndpointConnectionControllerServer.Do(req)
	case "PrivateEndpointConnectionProxyControllerClient":
		initServer(s, &s.trPrivateEndpointConnectionProxyControllerServer, func() *PrivateEndpointConnectionProxyControllerServerTransport {
			return NewPrivateEndpointConnectionProxyControllerServerTransport(&s.srv.PrivateEndpointConnectionProxyControllerServer)
		})
		resp, err = s.trPrivateEndpointConnectionProxyControllerServer.Do(req)
	case "PrivateEndpointConnectionsControllerClient":
		initServer(s, &s.trPrivateEndpointConnectionsControllerServer, func() *PrivateEndpointConnectionsControllerServerTransport {
			return NewPrivateEndpointConnectionsControllerServerTransport(&s.srv.PrivateEndpointConnectionsControllerServer)
		})
		resp, err = s.trPrivateEndpointConnectionsControllerServer.Do(req)
	case "PrivateLinkResourceControllerClient":
		initServer(s, &s.trPrivateLinkResourceControllerServer, func() *PrivateLinkResourceControllerServerTransport {
			return NewPrivateLinkResourceControllerServerTransport(&s.srv.PrivateLinkResourceControllerServer)
		})
		resp, err = s.trPrivateLinkResourceControllerServer.Do(req)
	case "ProjectsClient":
		initServer(s, &s.trProjectsServer, func() *ProjectsServerTransport { return NewProjectsServerTransport(&s.srv.ProjectsServer) })
		resp, err = s.trProjectsServer.Do(req)
	case "SolutionsControllerClient":
		initServer(s, &s.trSolutionsControllerServer, func() *SolutionsControllerServerTransport {
			return NewSolutionsControllerServerTransport(&s.srv.SolutionsControllerServer)
		})
		resp, err = s.trSolutionsControllerServer.Do(req)
	case "VirtualDesktopUserControllerClient":
		initServer(s, &s.trVirtualDesktopUserControllerServer, func() *VirtualDesktopUserControllerServerTransport {
			return NewVirtualDesktopUserControllerServerTransport(&s.srv.VirtualDesktopUserControllerServer)
		})
		resp, err = s.trVirtualDesktopUserControllerServer.Do(req)
	case "WebServersControllerClient":
		initServer(s, &s.trWebServersControllerServer, func() *WebServersControllerServerTransport {
			return NewWebServersControllerServerTransport(&s.srv.WebServersControllerServer)
		})
		resp, err = s.trWebServersControllerServer.Do(req)
	case "WebSitesControllerClient":
		initServer(s, &s.trWebSitesControllerServer, func() *WebSitesControllerServerTransport {
			return NewWebSitesControllerServerTransport(&s.srv.WebSitesControllerServer)
		})
		resp, err = s.trWebSitesControllerServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
