// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// NspAssociationReconcileClient contains the methods for the NspAssociationReconcile group.
// Don't use this type directly, use NewNspAssociationReconcileClient() instead.
type NspAssociationReconcileClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewNspAssociationReconcileClient creates a new instance of NspAssociationReconcileClient with the specified values.
//   - subscriptionID - The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription
//     ID forms part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNspAssociationReconcileClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*NspAssociationReconcileClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NspAssociationReconcileClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Post - Reconcile NSP association
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - associationName - The name of the NSP association.
//   - parameters - Parameters for NSP association reconcile
//   - options - NspAssociationReconcileClientPostOptions contains the optional parameters for the NspAssociationReconcileClient.Post
//     method.
func (client *NspAssociationReconcileClient) Post(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, associationName string, parameters any, options *NspAssociationReconcileClientPostOptions) (NspAssociationReconcileClientPostResponse, error) {
	var err error
	const operationName = "NspAssociationReconcileClient.Post"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, associationName, parameters, options)
	if err != nil {
		return NspAssociationReconcileClientPostResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NspAssociationReconcileClientPostResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NspAssociationReconcileClientPostResponse{}, err
	}
	resp, err := client.postHandleResponse(httpResp)
	return resp, err
}

// postCreateRequest creates the Post request.
func (client *NspAssociationReconcileClient) postCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, associationName string, parameters any, _ *NspAssociationReconcileClientPostOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/resourceAssociations/{associationName}/reconcile"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if associationName == "" {
		return nil, errors.New("parameter associationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{associationName}", url.PathEscape(associationName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// postHandleResponse handles the Post response.
func (client *NspAssociationReconcileClient) postHandleResponse(resp *http.Response) (NspAssociationReconcileClientPostResponse, error) {
	result := NspAssociationReconcileClientPostResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return NspAssociationReconcileClientPostResponse{}, err
	}
	return result, nil
}
