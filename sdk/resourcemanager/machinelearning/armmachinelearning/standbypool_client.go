//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearning

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// StandbyPoolClient contains the methods for the StandbyPool group.
// Don't use this type directly, use NewStandbyPoolClient() instead.
type StandbyPoolClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewStandbyPoolClient creates a new instance of StandbyPoolClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewStandbyPoolClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*StandbyPoolClient, error) {
	cl, err := arm.NewClient(moduleName+".StandbyPoolClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &StandbyPoolClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update a standby pool associated with the workspace.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - Azure Machine Learning Workspace Name
//   - standbyPoolName - Name of Standby Pool
//   - body - The parameters for creating or updating the standby pool.
//   - options - StandbyPoolClientCreateOrUpdateOptions contains the optional parameters for the StandbyPoolClient.CreateOrUpdate
//     method.
func (client *StandbyPoolClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, workspaceName string, standbyPoolName string, body StandbyPoolProperties, options *StandbyPoolClientCreateOrUpdateOptions) (StandbyPoolClientCreateOrUpdateResponse, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, workspaceName, standbyPoolName, body, options)
	if err != nil {
		return StandbyPoolClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandbyPoolClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StandbyPoolClientCreateOrUpdateResponse{}, err
	}
	return StandbyPoolClientCreateOrUpdateResponse{}, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *StandbyPoolClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, standbyPoolName string, body StandbyPoolProperties, options *StandbyPoolClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/standbypools/{standbyPoolName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if standbyPoolName == "" {
		return nil, errors.New("parameter standbyPoolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standbyPoolName}", url.PathEscape(standbyPoolName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Delete - Delete a standby pool associated with the workspace.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - Azure Machine Learning Workspace Name
//   - standbyPoolName - Name of Standby Pool
//   - options - StandbyPoolClientDeleteOptions contains the optional parameters for the StandbyPoolClient.Delete method.
func (client *StandbyPoolClient) Delete(ctx context.Context, resourceGroupName string, workspaceName string, standbyPoolName string, options *StandbyPoolClientDeleteOptions) (StandbyPoolClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, workspaceName, standbyPoolName, options)
	if err != nil {
		return StandbyPoolClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandbyPoolClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StandbyPoolClientDeleteResponse{}, err
	}
	return StandbyPoolClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *StandbyPoolClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, standbyPoolName string, options *StandbyPoolClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/standbypools/{standbyPoolName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if standbyPoolName == "" {
		return nil, errors.New("parameter standbyPoolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standbyPoolName}", url.PathEscape(standbyPoolName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a specific standby pool associated with the workspace.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - Azure Machine Learning Workspace Name
//   - standbyPoolName - Name of Standby Pool
//   - options - StandbyPoolClientGetOptions contains the optional parameters for the StandbyPoolClient.Get method.
func (client *StandbyPoolClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, standbyPoolName string, options *StandbyPoolClientGetOptions) (StandbyPoolClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, standbyPoolName, options)
	if err != nil {
		return StandbyPoolClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandbyPoolClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StandbyPoolClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *StandbyPoolClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, standbyPoolName string, options *StandbyPoolClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/standbypools/{standbyPoolName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if standbyPoolName == "" {
		return nil, errors.New("parameter standbyPoolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standbyPoolName}", url.PathEscape(standbyPoolName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *StandbyPoolClient) getHandleResponse(resp *http.Response) (StandbyPoolClientGetResponse, error) {
	result := StandbyPoolClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetStandbyPoolResponse); err != nil {
		return StandbyPoolClientGetResponse{}, err
	}
	return result, nil
}

// List - List all standby pools associated with the workspace.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - Azure Machine Learning Workspace Name
//   - options - StandbyPoolClientListOptions contains the optional parameters for the StandbyPoolClient.List method.
func (client *StandbyPoolClient) List(ctx context.Context, resourceGroupName string, workspaceName string, options *StandbyPoolClientListOptions) (StandbyPoolClientListResponse, error) {
	var err error
	req, err := client.listCreateRequest(ctx, resourceGroupName, workspaceName, options)
	if err != nil {
		return StandbyPoolClientListResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandbyPoolClientListResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StandbyPoolClientListResponse{}, err
	}
	return StandbyPoolClientListResponse{}, nil
}

// listCreateRequest creates the List request.
func (client *StandbyPoolClient) listCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, options *StandbyPoolClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/standbypools"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
