//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicesbackup

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicesbackup"
	moduleVersion = "v5.0.0"
)

// BackupManagementType - Backup management type to execute the current job.
type BackupManagementType string

const (
	BackupManagementTypeAzureBackupServer BackupManagementType = "AzureBackupServer"
	BackupManagementTypeAzureIaasVM       BackupManagementType = "AzureIaasVM"
	BackupManagementTypeAzureSQL          BackupManagementType = "AzureSql"
	BackupManagementTypeAzureStorage      BackupManagementType = "AzureStorage"
	BackupManagementTypeAzureWorkload     BackupManagementType = "AzureWorkload"
	BackupManagementTypeDPM               BackupManagementType = "DPM"
	BackupManagementTypeDefaultBackup     BackupManagementType = "DefaultBackup"
	BackupManagementTypeInvalid           BackupManagementType = "Invalid"
	BackupManagementTypeMAB               BackupManagementType = "MAB"
)

// PossibleBackupManagementTypeValues returns the possible values for the BackupManagementType const type.
func PossibleBackupManagementTypeValues() []BackupManagementType {
	return []BackupManagementType{
		BackupManagementTypeAzureBackupServer,
		BackupManagementTypeAzureIaasVM,
		BackupManagementTypeAzureSQL,
		BackupManagementTypeAzureStorage,
		BackupManagementTypeAzureWorkload,
		BackupManagementTypeDPM,
		BackupManagementTypeDefaultBackup,
		BackupManagementTypeInvalid,
		BackupManagementTypeMAB,
	}
}

// CopyOptions - Options to resolve copy conflicts.
type CopyOptions string

const (
	CopyOptionsCreateCopy     CopyOptions = "CreateCopy"
	CopyOptionsFailOnConflict CopyOptions = "FailOnConflict"
	CopyOptionsInvalid        CopyOptions = "Invalid"
	CopyOptionsOverwrite      CopyOptions = "Overwrite"
	CopyOptionsSkip           CopyOptions = "Skip"
)

// PossibleCopyOptionsValues returns the possible values for the CopyOptions const type.
func PossibleCopyOptionsValues() []CopyOptions {
	return []CopyOptions{
		CopyOptionsCreateCopy,
		CopyOptionsFailOnConflict,
		CopyOptionsInvalid,
		CopyOptionsOverwrite,
		CopyOptionsSkip,
	}
}

// CreateMode - Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
type CreateMode string

const (
	CreateModeDefault CreateMode = "Default"
	CreateModeInvalid CreateMode = "Invalid"
	CreateModeRecover CreateMode = "Recover"
)

// PossibleCreateModeValues returns the possible values for the CreateMode const type.
func PossibleCreateModeValues() []CreateMode {
	return []CreateMode{
		CreateModeDefault,
		CreateModeInvalid,
		CreateModeRecover,
	}
}

// DataSourceType - Type of workload this item represents.
type DataSourceType string

const (
	DataSourceTypeAzureFileShare    DataSourceType = "AzureFileShare"
	DataSourceTypeAzureSQLDb        DataSourceType = "AzureSqlDb"
	DataSourceTypeClient            DataSourceType = "Client"
	DataSourceTypeExchange          DataSourceType = "Exchange"
	DataSourceTypeFileFolder        DataSourceType = "FileFolder"
	DataSourceTypeGenericDataSource DataSourceType = "GenericDataSource"
	DataSourceTypeInvalid           DataSourceType = "Invalid"
	DataSourceTypeSAPAseDatabase    DataSourceType = "SAPAseDatabase"
	DataSourceTypeSAPHanaDatabase   DataSourceType = "SAPHanaDatabase"
	DataSourceTypeSQLDB             DataSourceType = "SQLDB"
	DataSourceTypeSQLDataBase       DataSourceType = "SQLDataBase"
	DataSourceTypeSharepoint        DataSourceType = "Sharepoint"
	DataSourceTypeSystemState       DataSourceType = "SystemState"
	DataSourceTypeVM                DataSourceType = "VM"
	DataSourceTypeVMwareVM          DataSourceType = "VMwareVM"
)

// PossibleDataSourceTypeValues returns the possible values for the DataSourceType const type.
func PossibleDataSourceTypeValues() []DataSourceType {
	return []DataSourceType{
		DataSourceTypeAzureFileShare,
		DataSourceTypeAzureSQLDb,
		DataSourceTypeClient,
		DataSourceTypeExchange,
		DataSourceTypeFileFolder,
		DataSourceTypeGenericDataSource,
		DataSourceTypeInvalid,
		DataSourceTypeSAPAseDatabase,
		DataSourceTypeSAPHanaDatabase,
		DataSourceTypeSQLDB,
		DataSourceTypeSQLDataBase,
		DataSourceTypeSharepoint,
		DataSourceTypeSystemState,
		DataSourceTypeVM,
		DataSourceTypeVMwareVM,
	}
}

// HealthState - Health State for the backed up item.
type HealthState string

const (
	HealthStateActionRequired  HealthState = "ActionRequired"
	HealthStateActionSuggested HealthState = "ActionSuggested"
	HealthStateInvalid         HealthState = "Invalid"
	HealthStatePassed          HealthState = "Passed"
)

// PossibleHealthStateValues returns the possible values for the HealthState const type.
func PossibleHealthStateValues() []HealthState {
	return []HealthState{
		HealthStateActionRequired,
		HealthStateActionSuggested,
		HealthStateInvalid,
		HealthStatePassed,
	}
}

// HealthStatus - backups running status for this backup item.
type HealthStatus string

const (
	HealthStatusActionRequired  HealthStatus = "ActionRequired"
	HealthStatusActionSuggested HealthStatus = "ActionSuggested"
	HealthStatusInvalid         HealthStatus = "Invalid"
	HealthStatusPassed          HealthStatus = "Passed"
)

// PossibleHealthStatusValues returns the possible values for the HealthStatus const type.
func PossibleHealthStatusValues() []HealthStatus {
	return []HealthStatus{
		HealthStatusActionRequired,
		HealthStatusActionSuggested,
		HealthStatusInvalid,
		HealthStatusPassed,
	}
}

// JobOperationType - Type of operation.
type JobOperationType string

const (
	JobOperationTypeBackup                   JobOperationType = "Backup"
	JobOperationTypeConfigureBackup          JobOperationType = "ConfigureBackup"
	JobOperationTypeCrossRegionRestore       JobOperationType = "CrossRegionRestore"
	JobOperationTypeDeleteBackupData         JobOperationType = "DeleteBackupData"
	JobOperationTypeDisableBackup            JobOperationType = "DisableBackup"
	JobOperationTypeInvalid                  JobOperationType = "Invalid"
	JobOperationTypeRegister                 JobOperationType = "Register"
	JobOperationTypeRestore                  JobOperationType = "Restore"
	JobOperationTypeUnRegister               JobOperationType = "UnRegister"
	JobOperationTypeUndelete                 JobOperationType = "Undelete"
	JobOperationTypeUpdateCustomerManagedKey JobOperationType = "UpdateCustomerManagedKey"
)

// PossibleJobOperationTypeValues returns the possible values for the JobOperationType const type.
func PossibleJobOperationTypeValues() []JobOperationType {
	return []JobOperationType{
		JobOperationTypeBackup,
		JobOperationTypeConfigureBackup,
		JobOperationTypeCrossRegionRestore,
		JobOperationTypeDeleteBackupData,
		JobOperationTypeDisableBackup,
		JobOperationTypeInvalid,
		JobOperationTypeRegister,
		JobOperationTypeRestore,
		JobOperationTypeUnRegister,
		JobOperationTypeUndelete,
		JobOperationTypeUpdateCustomerManagedKey,
	}
}

// JobStatus - Status of the job.
type JobStatus string

const (
	JobStatusCancelled             JobStatus = "Cancelled"
	JobStatusCancelling            JobStatus = "Cancelling"
	JobStatusCompleted             JobStatus = "Completed"
	JobStatusCompletedWithWarnings JobStatus = "CompletedWithWarnings"
	JobStatusFailed                JobStatus = "Failed"
	JobStatusInProgress            JobStatus = "InProgress"
	JobStatusInvalid               JobStatus = "Invalid"
)

// PossibleJobStatusValues returns the possible values for the JobStatus const type.
func PossibleJobStatusValues() []JobStatus {
	return []JobStatus{
		JobStatusCancelled,
		JobStatusCancelling,
		JobStatusCompleted,
		JobStatusCompletedWithWarnings,
		JobStatusFailed,
		JobStatusInProgress,
		JobStatusInvalid,
	}
}

type JobSupportedAction string

const (
	JobSupportedActionCancellable JobSupportedAction = "Cancellable"
	JobSupportedActionInvalid     JobSupportedAction = "Invalid"
	JobSupportedActionRetriable   JobSupportedAction = "Retriable"
)

// PossibleJobSupportedActionValues returns the possible values for the JobSupportedAction const type.
func PossibleJobSupportedActionValues() []JobSupportedAction {
	return []JobSupportedAction{
		JobSupportedActionCancellable,
		JobSupportedActionInvalid,
		JobSupportedActionRetriable,
	}
}

// LastBackupStatus - Last backup operation status. Possible values: Healthy, Unhealthy.
type LastBackupStatus string

const (
	LastBackupStatusHealthy   LastBackupStatus = "Healthy"
	LastBackupStatusIRPending LastBackupStatus = "IRPending"
	LastBackupStatusInvalid   LastBackupStatus = "Invalid"
	LastBackupStatusUnhealthy LastBackupStatus = "Unhealthy"
)

// PossibleLastBackupStatusValues returns the possible values for the LastBackupStatus const type.
func PossibleLastBackupStatusValues() []LastBackupStatus {
	return []LastBackupStatus{
		LastBackupStatusHealthy,
		LastBackupStatusIRPending,
		LastBackupStatusInvalid,
		LastBackupStatusUnhealthy,
	}
}

// MabServerType - Server type of MAB container.
type MabServerType string

const (
	MabServerTypeAzureBackupServerContainer MabServerType = "AzureBackupServerContainer"
	MabServerTypeAzureSQLContainer          MabServerType = "AzureSqlContainer"
	MabServerTypeCluster                    MabServerType = "Cluster"
	MabServerTypeDPMContainer               MabServerType = "DPMContainer"
	MabServerTypeGenericContainer           MabServerType = "GenericContainer"
	MabServerTypeIaasVMContainer            MabServerType = "IaasVMContainer"
	MabServerTypeIaasVMServiceContainer     MabServerType = "IaasVMServiceContainer"
	MabServerTypeInvalid                    MabServerType = "Invalid"
	MabServerTypeMABContainer               MabServerType = "MABContainer"
	MabServerTypeSQLAGWorkLoadContainer     MabServerType = "SQLAGWorkLoadContainer"
	MabServerTypeStorageContainer           MabServerType = "StorageContainer"
	MabServerTypeUnknown                    MabServerType = "Unknown"
	MabServerTypeVCenter                    MabServerType = "VCenter"
	MabServerTypeVMAppContainer             MabServerType = "VMAppContainer"
	MabServerTypeWindows                    MabServerType = "Windows"
)

// PossibleMabServerTypeValues returns the possible values for the MabServerType const type.
func PossibleMabServerTypeValues() []MabServerType {
	return []MabServerType{
		MabServerTypeAzureBackupServerContainer,
		MabServerTypeAzureSQLContainer,
		MabServerTypeCluster,
		MabServerTypeDPMContainer,
		MabServerTypeGenericContainer,
		MabServerTypeIaasVMContainer,
		MabServerTypeIaasVMServiceContainer,
		MabServerTypeInvalid,
		MabServerTypeMABContainer,
		MabServerTypeSQLAGWorkLoadContainer,
		MabServerTypeStorageContainer,
		MabServerTypeUnknown,
		MabServerTypeVCenter,
		MabServerTypeVMAppContainer,
		MabServerTypeWindows,
	}
}

// OperationStatusValues - Operation status.
type OperationStatusValues string

const (
	OperationStatusValuesCanceled   OperationStatusValues = "Canceled"
	OperationStatusValuesFailed     OperationStatusValues = "Failed"
	OperationStatusValuesInProgress OperationStatusValues = "InProgress"
	OperationStatusValuesInvalid    OperationStatusValues = "Invalid"
	OperationStatusValuesSucceeded  OperationStatusValues = "Succeeded"
)

// PossibleOperationStatusValuesValues returns the possible values for the OperationStatusValues const type.
func PossibleOperationStatusValuesValues() []OperationStatusValues {
	return []OperationStatusValues{
		OperationStatusValuesCanceled,
		OperationStatusValuesFailed,
		OperationStatusValuesInProgress,
		OperationStatusValuesInvalid,
		OperationStatusValuesSucceeded,
	}
}

// OverwriteOptions - Can Overwrite if Target DataBase already exists
type OverwriteOptions string

const (
	OverwriteOptionsFailOnConflict OverwriteOptions = "FailOnConflict"
	OverwriteOptionsInvalid        OverwriteOptions = "Invalid"
	OverwriteOptionsOverwrite      OverwriteOptions = "Overwrite"
)

// PossibleOverwriteOptionsValues returns the possible values for the OverwriteOptions const type.
func PossibleOverwriteOptionsValues() []OverwriteOptions {
	return []OverwriteOptions{
		OverwriteOptionsFailOnConflict,
		OverwriteOptionsInvalid,
		OverwriteOptionsOverwrite,
	}
}

// ProtectedItemHealthStatus - Health status of the backup item, evaluated based on last heartbeat received
type ProtectedItemHealthStatus string

const (
	ProtectedItemHealthStatusHealthy      ProtectedItemHealthStatus = "Healthy"
	ProtectedItemHealthStatusIRPending    ProtectedItemHealthStatus = "IRPending"
	ProtectedItemHealthStatusInvalid      ProtectedItemHealthStatus = "Invalid"
	ProtectedItemHealthStatusNotReachable ProtectedItemHealthStatus = "NotReachable"
	ProtectedItemHealthStatusUnhealthy    ProtectedItemHealthStatus = "Unhealthy"
)

// PossibleProtectedItemHealthStatusValues returns the possible values for the ProtectedItemHealthStatus const type.
func PossibleProtectedItemHealthStatusValues() []ProtectedItemHealthStatus {
	return []ProtectedItemHealthStatus{
		ProtectedItemHealthStatusHealthy,
		ProtectedItemHealthStatusIRPending,
		ProtectedItemHealthStatusInvalid,
		ProtectedItemHealthStatusNotReachable,
		ProtectedItemHealthStatusUnhealthy,
	}
}

// ProtectedItemState - Backup state of the backed up item.
type ProtectedItemState string

const (
	ProtectedItemStateIRPending         ProtectedItemState = "IRPending"
	ProtectedItemStateInvalid           ProtectedItemState = "Invalid"
	ProtectedItemStateProtected         ProtectedItemState = "Protected"
	ProtectedItemStateProtectionError   ProtectedItemState = "ProtectionError"
	ProtectedItemStateProtectionPaused  ProtectedItemState = "ProtectionPaused"
	ProtectedItemStateProtectionStopped ProtectedItemState = "ProtectionStopped"
)

// PossibleProtectedItemStateValues returns the possible values for the ProtectedItemState const type.
func PossibleProtectedItemStateValues() []ProtectedItemState {
	return []ProtectedItemState{
		ProtectedItemStateIRPending,
		ProtectedItemStateInvalid,
		ProtectedItemStateProtected,
		ProtectedItemStateProtectionError,
		ProtectedItemStateProtectionPaused,
		ProtectedItemStateProtectionStopped,
	}
}

// ProtectionState - Backup state of this backup item.
type ProtectionState string

const (
	ProtectionStateIRPending         ProtectionState = "IRPending"
	ProtectionStateInvalid           ProtectionState = "Invalid"
	ProtectionStateProtected         ProtectionState = "Protected"
	ProtectionStateProtectionError   ProtectionState = "ProtectionError"
	ProtectionStateProtectionPaused  ProtectionState = "ProtectionPaused"
	ProtectionStateProtectionStopped ProtectionState = "ProtectionStopped"
)

// PossibleProtectionStateValues returns the possible values for the ProtectionState const type.
func PossibleProtectionStateValues() []ProtectionState {
	return []ProtectionState{
		ProtectionStateIRPending,
		ProtectionStateInvalid,
		ProtectionStateProtected,
		ProtectionStateProtectionError,
		ProtectionStateProtectionPaused,
		ProtectionStateProtectionStopped,
	}
}

// RecoveryMode - Defines whether the current recovery mode is file restore or database restore
type RecoveryMode string

const (
	RecoveryModeFileRecovery     RecoveryMode = "FileRecovery"
	RecoveryModeInvalid          RecoveryMode = "Invalid"
	RecoveryModeWorkloadRecovery RecoveryMode = "WorkloadRecovery"
)

// PossibleRecoveryModeValues returns the possible values for the RecoveryMode const type.
func PossibleRecoveryModeValues() []RecoveryMode {
	return []RecoveryMode{
		RecoveryModeFileRecovery,
		RecoveryModeInvalid,
		RecoveryModeWorkloadRecovery,
	}
}

// RecoveryPointTierStatus - Recovery point tier status.
type RecoveryPointTierStatus string

const (
	RecoveryPointTierStatusDeleted    RecoveryPointTierStatus = "Deleted"
	RecoveryPointTierStatusDisabled   RecoveryPointTierStatus = "Disabled"
	RecoveryPointTierStatusInvalid    RecoveryPointTierStatus = "Invalid"
	RecoveryPointTierStatusRehydrated RecoveryPointTierStatus = "Rehydrated"
	RecoveryPointTierStatusValid      RecoveryPointTierStatus = "Valid"
)

// PossibleRecoveryPointTierStatusValues returns the possible values for the RecoveryPointTierStatus const type.
func PossibleRecoveryPointTierStatusValues() []RecoveryPointTierStatus {
	return []RecoveryPointTierStatus{
		RecoveryPointTierStatusDeleted,
		RecoveryPointTierStatusDisabled,
		RecoveryPointTierStatusInvalid,
		RecoveryPointTierStatusRehydrated,
		RecoveryPointTierStatusValid,
	}
}

// RecoveryPointTierType - Recovery point tier type.
type RecoveryPointTierType string

const (
	RecoveryPointTierTypeArchivedRP RecoveryPointTierType = "ArchivedRP"
	RecoveryPointTierTypeHardenedRP RecoveryPointTierType = "HardenedRP"
	RecoveryPointTierTypeInstantRP  RecoveryPointTierType = "InstantRP"
	RecoveryPointTierTypeInvalid    RecoveryPointTierType = "Invalid"
)

// PossibleRecoveryPointTierTypeValues returns the possible values for the RecoveryPointTierType const type.
func PossibleRecoveryPointTierTypeValues() []RecoveryPointTierType {
	return []RecoveryPointTierType{
		RecoveryPointTierTypeArchivedRP,
		RecoveryPointTierTypeHardenedRP,
		RecoveryPointTierTypeInstantRP,
		RecoveryPointTierTypeInvalid,
	}
}

// RecoveryType - Type of this recovery.
type RecoveryType string

const (
	RecoveryTypeAlternateLocation RecoveryType = "AlternateLocation"
	RecoveryTypeInvalid           RecoveryType = "Invalid"
	RecoveryTypeOffline           RecoveryType = "Offline"
	RecoveryTypeOriginalLocation  RecoveryType = "OriginalLocation"
	RecoveryTypeRestoreDisks      RecoveryType = "RestoreDisks"
)

// PossibleRecoveryTypeValues returns the possible values for the RecoveryType const type.
func PossibleRecoveryTypeValues() []RecoveryType {
	return []RecoveryType{
		RecoveryTypeAlternateLocation,
		RecoveryTypeInvalid,
		RecoveryTypeOffline,
		RecoveryTypeOriginalLocation,
		RecoveryTypeRestoreDisks,
	}
}

// ResourceHealthStatus - Resource Health Status
type ResourceHealthStatus string

const (
	ResourceHealthStatusHealthy             ResourceHealthStatus = "Healthy"
	ResourceHealthStatusInvalid             ResourceHealthStatus = "Invalid"
	ResourceHealthStatusPersistentDegraded  ResourceHealthStatus = "PersistentDegraded"
	ResourceHealthStatusPersistentUnhealthy ResourceHealthStatus = "PersistentUnhealthy"
	ResourceHealthStatusTransientDegraded   ResourceHealthStatus = "TransientDegraded"
	ResourceHealthStatusTransientUnhealthy  ResourceHealthStatus = "TransientUnhealthy"
)

// PossibleResourceHealthStatusValues returns the possible values for the ResourceHealthStatus const type.
func PossibleResourceHealthStatusValues() []ResourceHealthStatus {
	return []ResourceHealthStatus{
		ResourceHealthStatusHealthy,
		ResourceHealthStatusInvalid,
		ResourceHealthStatusPersistentDegraded,
		ResourceHealthStatusPersistentUnhealthy,
		ResourceHealthStatusTransientDegraded,
		ResourceHealthStatusTransientUnhealthy,
	}
}

// RestorePointQueryType - RestorePoint type
type RestorePointQueryType string

const (
	RestorePointQueryTypeAll                 RestorePointQueryType = "All"
	RestorePointQueryTypeDifferential        RestorePointQueryType = "Differential"
	RestorePointQueryTypeFull                RestorePointQueryType = "Full"
	RestorePointQueryTypeFullAndDifferential RestorePointQueryType = "FullAndDifferential"
	RestorePointQueryTypeIncremental         RestorePointQueryType = "Incremental"
	RestorePointQueryTypeInvalid             RestorePointQueryType = "Invalid"
	RestorePointQueryTypeLog                 RestorePointQueryType = "Log"
)

// PossibleRestorePointQueryTypeValues returns the possible values for the RestorePointQueryType const type.
func PossibleRestorePointQueryTypeValues() []RestorePointQueryType {
	return []RestorePointQueryType{
		RestorePointQueryTypeAll,
		RestorePointQueryTypeDifferential,
		RestorePointQueryTypeFull,
		RestorePointQueryTypeFullAndDifferential,
		RestorePointQueryTypeIncremental,
		RestorePointQueryTypeInvalid,
		RestorePointQueryTypeLog,
	}
}

// RestorePointType - Type of restore point
type RestorePointType string

const (
	RestorePointTypeDifferential RestorePointType = "Differential"
	RestorePointTypeFull         RestorePointType = "Full"
	RestorePointTypeIncremental  RestorePointType = "Incremental"
	RestorePointTypeInvalid      RestorePointType = "Invalid"
	RestorePointTypeLog          RestorePointType = "Log"
)

// PossibleRestorePointTypeValues returns the possible values for the RestorePointType const type.
func PossibleRestorePointTypeValues() []RestorePointType {
	return []RestorePointType{
		RestorePointTypeDifferential,
		RestorePointTypeFull,
		RestorePointTypeIncremental,
		RestorePointTypeInvalid,
		RestorePointTypeLog,
	}
}

// RestoreRequestType - Restore Type (FullShareRestore or ItemLevelRestore)
type RestoreRequestType string

const (
	RestoreRequestTypeFullShareRestore RestoreRequestType = "FullShareRestore"
	RestoreRequestTypeInvalid          RestoreRequestType = "Invalid"
	RestoreRequestTypeItemLevelRestore RestoreRequestType = "ItemLevelRestore"
)

// PossibleRestoreRequestTypeValues returns the possible values for the RestoreRequestType const type.
func PossibleRestoreRequestTypeValues() []RestoreRequestType {
	return []RestoreRequestType{
		RestoreRequestTypeFullShareRestore,
		RestoreRequestTypeInvalid,
		RestoreRequestTypeItemLevelRestore,
	}
}

// SQLDataDirectoryType - Type of data directory mapping
type SQLDataDirectoryType string

const (
	SQLDataDirectoryTypeData    SQLDataDirectoryType = "Data"
	SQLDataDirectoryTypeInvalid SQLDataDirectoryType = "Invalid"
	SQLDataDirectoryTypeLog     SQLDataDirectoryType = "Log"
)

// PossibleSQLDataDirectoryTypeValues returns the possible values for the SQLDataDirectoryType const type.
func PossibleSQLDataDirectoryTypeValues() []SQLDataDirectoryType {
	return []SQLDataDirectoryType{
		SQLDataDirectoryTypeData,
		SQLDataDirectoryTypeInvalid,
		SQLDataDirectoryTypeLog,
	}
}

// StorageType - Storage type
type StorageType string

const (
	StorageTypeGeoRedundant               StorageType = "GeoRedundant"
	StorageTypeInvalid                    StorageType = "Invalid"
	StorageTypeLocallyRedundant           StorageType = "LocallyRedundant"
	StorageTypeReadAccessGeoZoneRedundant StorageType = "ReadAccessGeoZoneRedundant"
	StorageTypeZoneRedundant              StorageType = "ZoneRedundant"
)

// PossibleStorageTypeValues returns the possible values for the StorageType const type.
func PossibleStorageTypeValues() []StorageType {
	return []StorageType{
		StorageTypeGeoRedundant,
		StorageTypeInvalid,
		StorageTypeLocallyRedundant,
		StorageTypeReadAccessGeoZoneRedundant,
		StorageTypeZoneRedundant,
	}
}

// StorageTypeState - Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always
// Locked.
type StorageTypeState string

const (
	StorageTypeStateInvalid  StorageTypeState = "Invalid"
	StorageTypeStateLocked   StorageTypeState = "Locked"
	StorageTypeStateUnlocked StorageTypeState = "Unlocked"
)

// PossibleStorageTypeStateValues returns the possible values for the StorageTypeState const type.
func PossibleStorageTypeStateValues() []StorageTypeState {
	return []StorageTypeState{
		StorageTypeStateInvalid,
		StorageTypeStateLocked,
		StorageTypeStateUnlocked,
	}
}

// Type - Backup management type for this container.
type Type string

const (
	TypeBackupProtectedItemCountSummary       Type = "BackupProtectedItemCountSummary"
	TypeBackupProtectionContainerCountSummary Type = "BackupProtectionContainerCountSummary"
	TypeInvalid                               Type = "Invalid"
)

// PossibleTypeValues returns the possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{
		TypeBackupProtectedItemCountSummary,
		TypeBackupProtectionContainerCountSummary,
		TypeInvalid,
	}
}

// UsagesUnit - Unit of the usage.
type UsagesUnit string

const (
	UsagesUnitBytes          UsagesUnit = "Bytes"
	UsagesUnitBytesPerSecond UsagesUnit = "BytesPerSecond"
	UsagesUnitCount          UsagesUnit = "Count"
	UsagesUnitCountPerSecond UsagesUnit = "CountPerSecond"
	UsagesUnitPercent        UsagesUnit = "Percent"
	UsagesUnitSeconds        UsagesUnit = "Seconds"
)

// PossibleUsagesUnitValues returns the possible values for the UsagesUnit const type.
func PossibleUsagesUnitValues() []UsagesUnit {
	return []UsagesUnit{
		UsagesUnitBytes,
		UsagesUnitBytesPerSecond,
		UsagesUnitCount,
		UsagesUnitCountPerSecond,
		UsagesUnitPercent,
		UsagesUnitSeconds,
	}
}

// WorkloadType - Workload type of backup item.
type WorkloadType string

const (
	WorkloadTypeAzureFileShare    WorkloadType = "AzureFileShare"
	WorkloadTypeAzureSQLDb        WorkloadType = "AzureSqlDb"
	WorkloadTypeClient            WorkloadType = "Client"
	WorkloadTypeExchange          WorkloadType = "Exchange"
	WorkloadTypeFileFolder        WorkloadType = "FileFolder"
	WorkloadTypeGenericDataSource WorkloadType = "GenericDataSource"
	WorkloadTypeInvalid           WorkloadType = "Invalid"
	WorkloadTypeSAPAseDatabase    WorkloadType = "SAPAseDatabase"
	WorkloadTypeSAPHanaDatabase   WorkloadType = "SAPHanaDatabase"
	WorkloadTypeSQLDB             WorkloadType = "SQLDB"
	WorkloadTypeSQLDataBase       WorkloadType = "SQLDataBase"
	WorkloadTypeSharepoint        WorkloadType = "Sharepoint"
	WorkloadTypeSystemState       WorkloadType = "SystemState"
	WorkloadTypeVM                WorkloadType = "VM"
	WorkloadTypeVMwareVM          WorkloadType = "VMwareVM"
)

// PossibleWorkloadTypeValues returns the possible values for the WorkloadType const type.
func PossibleWorkloadTypeValues() []WorkloadType {
	return []WorkloadType{
		WorkloadTypeAzureFileShare,
		WorkloadTypeAzureSQLDb,
		WorkloadTypeClient,
		WorkloadTypeExchange,
		WorkloadTypeFileFolder,
		WorkloadTypeGenericDataSource,
		WorkloadTypeInvalid,
		WorkloadTypeSAPAseDatabase,
		WorkloadTypeSAPHanaDatabase,
		WorkloadTypeSQLDB,
		WorkloadTypeSQLDataBase,
		WorkloadTypeSharepoint,
		WorkloadTypeSystemState,
		WorkloadTypeVM,
		WorkloadTypeVMwareVM,
	}
}
