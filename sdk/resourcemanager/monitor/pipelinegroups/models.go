// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package pipelinegroups

import "time"

// AzureMonitorWorkspaceLogsAPIConfig - Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsAPIConfig struct {
	// REQUIRED; Data collection endpoint ingestion url.
	DataCollectionEndpointURL *string

	// REQUIRED; Data Collection Rule (DCR) immutable id.
	DataCollectionRule *string

	// REQUIRED; The schema mapping for incoming data.
	Schema *SchemaMap

	// REQUIRED; Stream name in destination. Azure Monitor stream is related to the destination table.
	Stream *string
}

// AzureMonitorWorkspaceLogsExporter - Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporter struct {
	// REQUIRED; API configurations for Azure Monitor workspace exporter.
	API *AzureMonitorWorkspaceLogsAPIConfig

	// Cache configurations.
	Cache *CacheConfiguration

	// Concurrency configuration for the exporter.
	Concurrency *ConcurrencyConfiguration
}

// AzureResourceManagerCommonTypesExtendedLocation - The complex type of the extended location.
type AzureResourceManagerCommonTypesExtendedLocation struct {
	// REQUIRED; The name of the extended location.
	Name *string

	// REQUIRED; The type of the extended location.
	Type *ExtendedLocationType
}

// BatchProcessor - Batch processor.
type BatchProcessor struct {
	// Size of the batch.
	BatchSize *int32

	// Timeout in milliseconds.
	Timeout *int32
}

// CacheConfiguration - Cache configurations.
type CacheConfiguration struct {
	// Max storage usage in megabytes.
	MaxStorageUsage *int32

	// Retention period in minutes.
	RetentionPeriod *int32
}

// ConcurrencyConfiguration - Concurrent publishing configuration.
type ConcurrencyConfiguration struct {
	// Size of the queue for log batches.
	BatchQueueSize *int32

	// Number of parallel workers processing the log queues.
	WorkerCount *int32
}

// Exporter Info.
type Exporter struct {
	// REQUIRED; The name of exporter.
	Name *string

	// REQUIRED; The type of exporter.
	Type *ExporterType

	// Azure Monitor Workspace Logs specific configurations.
	AzureMonitorWorkspaceLogs *AzureMonitorWorkspaceLogsExporter

	// TCP based exporter. Used for pipelineGroup exporter.
	TCP *TCPExporter
}

// JSONArrayMapper - A component that allows parsing a value from sourceField as a json array, match a key to each parsed
// value from keys, and output the key-value map to destinationField field.
type JSONArrayMapper struct {
	// REQUIRED; Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for
	// every key.
	Keys []*string

	// Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys
	// array and the matching values are the parsed json array elements.
	DestinationField *JSONMapperDestinationField

	// Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json
	// array is expected to be the same as the length of keys.
	SourceField *JSONMapperSourceField
}

// JSONMapperDestinationField - JsonArrayMapper destination field used to describe the field to which the parsed output will
// be written.
type JSONMapperDestinationField struct {
	// Define the destination's element. The element is the body or the attributes of the message, to which the json array mapper
	// will write the output map.
	Destination *JSONMapperElement

	// Define a destination field name under the given element. Leaving this empty, means the root of the element. In case element=attributes
	// and fieldName is empty, the object's attributes themselves will
	// contain the key value output pairs.
	FieldName *string
}

// JSONMapperSourceField - JsonArrayMapper source field used to describe the field from which the json array will be read.
type JSONMapperSourceField struct {
	// Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading
	// the body of the message itself.
	FieldName *string
}

// NetworkingConfiguration - Networking configuration for the pipeline group instance.
type NetworkingConfiguration struct {
	// REQUIRED; External networking mode.
	ExternalNetworkingMode *ExternalNetworkingMode

	// REQUIRED; Networking routes configuration.
	Routes []*NetworkingRoute

	// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
	Host *string
}

// NetworkingRoute - Networking route configuration.
type NetworkingRoute struct {
	// REQUIRED; The name of the previously defined receiver.
	Receiver *string

	// Route path.
	Path *string

	// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
	Port *int32

	// Route subdomain.
	Subdomain *string
}

// OtlpReceiver - OTLP Receiver.
type OtlpReceiver struct {
	// REQUIRED; OTLP GRPC endpoint definition. Example: 0.0.0.0:.
	Endpoint *string
}

// PersistenceConfigurations - Persistence options to all pipelines in the instance.
type PersistenceConfigurations struct {
	// REQUIRED; The name of the mounted persistent volume.
	PersistentVolumeName *string
}

// PersistenceConfigurationsUpdate - Persistence options to all pipelines in the instance.
type PersistenceConfigurationsUpdate struct {
	// The name of the mounted persistent volume.
	PersistentVolumeName *string
}

// Pipeline Info.
type Pipeline struct {
	// REQUIRED; Reference to exporters configured for the pipeline.
	Exporters []*string

	// REQUIRED; Name of the pipeline.
	Name *string

	// REQUIRED; Reference to receivers configured for the pipeline.
	Receivers []*string

	// REQUIRED; The type of pipeline
	Type *PipelineType

	// Reference to processors configured for the pipeline.
	Processors []*string
}

// PipelineGroup - A pipeline group definition.
type PipelineGroup struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The complex type of the extended location.
	ExtendedLocation *AzureResourceManagerCommonTypesExtendedLocation

	// The resource-specific properties for this resource.
	Properties *PipelineGroupProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PipelineGroupListResult - The response of a PipelineGroup list operation.
type PipelineGroupListResult struct {
	// REQUIRED; The PipelineGroup items on this page
	Value []*PipelineGroup

	// The link to the next page of items
	NextLink *string
}

// PipelineGroupProperties - Properties that need to be specified to create a new pipeline group instance.
type PipelineGroupProperties struct {
	// REQUIRED; The exporters specified for a pipeline group instance.
	Exporters []*Exporter

	// REQUIRED; The processors specified for a pipeline group instance.
	Processors []*Processor

	// REQUIRED; The receivers specified for a pipeline group instance.
	Receivers []*Receiver

	// REQUIRED; The service section for a given pipeline group instance.
	Service *Service

	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations []*NetworkingConfiguration

	// Defines the amount of replicas of the pipeline group instance.
	Replicas *int32

	// READ-ONLY; The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
	ProvisioningState *ProvisioningState
}

// PipelineGroupPropertiesUpdate - Properties that need to be specified to create a new pipeline group instance.
type PipelineGroupPropertiesUpdate struct {
	// The exporters specified for a pipeline group instance.
	Exporters []*Exporter

	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations []*NetworkingConfiguration

	// The processors specified for a pipeline group instance.
	Processors []*Processor

	// The receivers specified for a pipeline group instance.
	Receivers []*Receiver

	// Defines the amount of replicas of the pipeline group instance.
	Replicas *int32

	// The service section for a given pipeline group instance.
	Service *ServiceUpdate
}

// PipelineGroupUpdate - A pipeline group definition.
type PipelineGroupUpdate struct {
	// The resource-specific properties for this resource.
	Properties *PipelineGroupPropertiesUpdate

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// Processor Info.
type Processor struct {
	// REQUIRED; The name of processor.
	Name *string

	// REQUIRED; The type of processor.
	Type *ProcessorType

	// Batch processor configurations.
	Batch *BatchProcessor
}

// Receiver Info.
type Receiver struct {
	// REQUIRED; The name of receiver.
	Name *string

	// REQUIRED; The type of receiver.
	Type *ReceiverType

	// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
	Otlp *OtlpReceiver

	// Syslog configurations. This field is mandatory for syslog type receivers.
	Syslog *SyslogReceiver

	// UDP receiver configurations. This field is mandatory for UDP receivers.
	UDP *UDPReceiver
}

// RecordMap - Record map for schema in azure monitor.
type RecordMap struct {
	// REQUIRED; Record Map Key.
	From *string

	// REQUIRED; Record Map Value.
	To *string
}

// ResourceMap - Resource map for schema in azure monitor.
type ResourceMap struct {
	// REQUIRED; Resource Map Key.
	From *string

	// REQUIRED; Resource Map Value.
	To *string
}

// SchemaMap - Schema map for azure monitor for logs.
type SchemaMap struct {
	// REQUIRED; Record Map.
	RecordMap []*RecordMap

	// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes
	// container can be linked to a resource that specifies the cluster,
	// namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the
	// host in the cloud and specific container or an application running in the
	// process.
	ResourceMap []*ResourceMap

	// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
	ScopeMap []*ScopeMap
}

// ScopeMap - Scope map for schema in azure monitor.
type ScopeMap struct {
	// REQUIRED; Scope Map Key.
	From *string

	// REQUIRED; Scope Map Value.
	To *string
}

// Service Info.
type Service struct {
	// REQUIRED; Pipelines belonging to a given pipeline group.
	Pipelines []*Pipeline

	// Persistence options to all pipelines in the instance.
	Persistence *PersistenceConfigurations
}

// ServiceUpdate - Service Info.
type ServiceUpdate struct {
	// Persistence options to all pipelines in the instance.
	Persistence *PersistenceConfigurationsUpdate

	// Pipelines belonging to a given pipeline group.
	Pipelines []*Pipeline
}

// SyslogReceiver - Base receiver using TCP as transport protocol.
type SyslogReceiver struct {
	// REQUIRED; Syslog receiver endpoint definition. Example: 0.0.0.0:.
	Endpoint *string

	// Protocol to parse syslog messages. Default rfc3164
	Protocol *SyslogProtocol
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TCPExporter - Base exporter using TCP as transport protocol.
type TCPExporter struct {
	// REQUIRED; TCP url to export.
	URL *string
}

// UDPReceiver - Receiver using UDP as transport protocol.
type UDPReceiver struct {
	// REQUIRED; TCP endpoint definition. Example: 0.0.0.0:.
	Endpoint *string

	// The encoding of the stream being received.
	Encoding *StreamEncodingType

	// Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a key to
	// each parsed value and output the key-value map to a given output field.
	JSONArrayMapper *JSONArrayMapper

	// Max read queue length.
	ReadQueueLength *int32
}
