//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armalertsmanagement

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// Client contains the methods for the AlertsManagementClient group.
// Don't use this type directly, use NewClient() instead.
type Client struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewClient creates a new instance of Client with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*Client, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &Client{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// NewPrometheusRuleGroupsListBySubscriptionPager - Retrieve Prometheus all rule group definitions in a subscription.
//
// Generated from API version 2023-03-01
//   - options - ClientPrometheusRuleGroupsListBySubscriptionOptions contains the optional parameters for the Client.NewPrometheusRuleGroupsListBySubscriptionPager
//     method.
func (client *Client) NewPrometheusRuleGroupsListBySubscriptionPager(options *ClientPrometheusRuleGroupsListBySubscriptionOptions) *runtime.Pager[ClientPrometheusRuleGroupsListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[ClientPrometheusRuleGroupsListBySubscriptionResponse]{
		More: func(page ClientPrometheusRuleGroupsListBySubscriptionResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *ClientPrometheusRuleGroupsListBySubscriptionResponse) (ClientPrometheusRuleGroupsListBySubscriptionResponse, error) {
			req, err := client.prometheusRuleGroupsListBySubscriptionCreateRequest(ctx, options)
			if err != nil {
				return ClientPrometheusRuleGroupsListBySubscriptionResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ClientPrometheusRuleGroupsListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ClientPrometheusRuleGroupsListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.prometheusRuleGroupsListBySubscriptionHandleResponse(resp)
		},
	})
}

// prometheusRuleGroupsListBySubscriptionCreateRequest creates the PrometheusRuleGroupsListBySubscription request.
func (client *Client) prometheusRuleGroupsListBySubscriptionCreateRequest(ctx context.Context, options *ClientPrometheusRuleGroupsListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/prometheusRuleGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// prometheusRuleGroupsListBySubscriptionHandleResponse handles the PrometheusRuleGroupsListBySubscription response.
func (client *Client) prometheusRuleGroupsListBySubscriptionHandleResponse(resp *http.Response) (ClientPrometheusRuleGroupsListBySubscriptionResponse, error) {
	result := ClientPrometheusRuleGroupsListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrometheusRuleGroupResourceCollection); err != nil {
		return ClientPrometheusRuleGroupsListBySubscriptionResponse{}, err
	}
	return result, nil
}
