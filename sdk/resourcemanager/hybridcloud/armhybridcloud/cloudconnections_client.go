//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armhybridcloud

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CloudConnectionsClient contains the methods for the CloudConnections group.
// Don't use this type directly, use NewCloudConnectionsClient() instead.
type CloudConnectionsClient struct {
	host                string
	subscriptionID      string
	cloudConnectionName string
	pl                  runtime.Pipeline
}

// NewCloudConnectionsClient creates a new instance of CloudConnectionsClient with the specified values.
// subscriptionID - The ID of the target subscription.
// cloudConnectionName - The name of the cloud connection resource
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewCloudConnectionsClient(subscriptionID string, cloudConnectionName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CloudConnectionsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &CloudConnectionsClient{
		subscriptionID:      subscriptionID,
		cloudConnectionName: cloudConnectionName,
		host:                ep,
		pl:                  pl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates a Cloud Connector resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// parameters - The parameters to provide for the created Cloud Connection.
// options - CloudConnectionsClientBeginCreateOrUpdateOptions contains the optional parameters for the CloudConnectionsClient.BeginCreateOrUpdate
// method.
func (client *CloudConnectionsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, parameters CloudConnection, options *CloudConnectionsClientBeginCreateOrUpdateOptions) (*runtime.Poller[CloudConnectionsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, parameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[CloudConnectionsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CloudConnectionsClientCreateOrUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// CreateOrUpdate - Creates or updates a Cloud Connector resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
func (client *CloudConnectionsClient) createOrUpdate(ctx context.Context, resourceGroupName string, parameters CloudConnection, options *CloudConnectionsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *CloudConnectionsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, parameters CloudConnection, options *CloudConnectionsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectionName == "" {
		return nil, errors.New("parameter client.cloudConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectionName}", url.PathEscape(client.cloudConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// BeginDelete - Deletes a specified Cloud Connection resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - CloudConnectionsClientBeginDeleteOptions contains the optional parameters for the CloudConnectionsClient.BeginDelete
// method.
func (client *CloudConnectionsClient) BeginDelete(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientBeginDeleteOptions) (*runtime.Poller[CloudConnectionsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[CloudConnectionsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CloudConnectionsClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Deletes a specified Cloud Connection resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
func (client *CloudConnectionsClient) deleteOperation(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CloudConnectionsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectionName == "" {
		return nil, errors.New("parameter client.cloudConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectionName}", url.PathEscape(client.cloudConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the specified Cloud Connection in a specified resource group
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - CloudConnectionsClientGetOptions contains the optional parameters for the CloudConnectionsClient.Get method.
func (client *CloudConnectionsClient) Get(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientGetOptions) (CloudConnectionsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return CloudConnectionsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CloudConnectionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CloudConnectionsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CloudConnectionsClient) getCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectionName == "" {
		return nil, errors.New("parameter client.cloudConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectionName}", url.PathEscape(client.cloudConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CloudConnectionsClient) getHandleResponse(resp *http.Response) (CloudConnectionsClientGetResponse, error) {
	result := CloudConnectionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnection); err != nil {
		return CloudConnectionsClientGetResponse{}, err
	}
	return result, nil
}

// UpdateTags - Updates the specified Cloud Connection tags.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// parameters - Parameters supplied to update Cloud Connection tags.
// options - CloudConnectionsClientUpdateTagsOptions contains the optional parameters for the CloudConnectionsClient.UpdateTags
// method.
func (client *CloudConnectionsClient) UpdateTags(ctx context.Context, resourceGroupName string, parameters CloudConnectionTagsObject, options *CloudConnectionsClientUpdateTagsOptions) (CloudConnectionsClientUpdateTagsResponse, error) {
	req, err := client.updateTagsCreateRequest(ctx, resourceGroupName, parameters, options)
	if err != nil {
		return CloudConnectionsClientUpdateTagsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CloudConnectionsClientUpdateTagsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CloudConnectionsClientUpdateTagsResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateTagsHandleResponse(resp)
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *CloudConnectionsClient) updateTagsCreateRequest(ctx context.Context, resourceGroupName string, parameters CloudConnectionTagsObject, options *CloudConnectionsClientUpdateTagsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectionName == "" {
		return nil, errors.New("parameter client.cloudConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectionName}", url.PathEscape(client.cloudConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *CloudConnectionsClient) updateTagsHandleResponse(resp *http.Response) (CloudConnectionsClientUpdateTagsResponse, error) {
	result := CloudConnectionsClientUpdateTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnection); err != nil {
		return CloudConnectionsClientUpdateTagsResponse{}, err
	}
	return result, nil
}
