//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsights/armsecurityinsights"
	"net/http"
	"net/url"
	"regexp"
)

// UpdateServer is a fake server for instances of the armsecurityinsights.UpdateClient type.
type UpdateServer struct {
	// BeginRecommendation is the fake for method UpdateClient.BeginRecommendation
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginRecommendation func(ctx context.Context, resourceGroupName string, workspaceName string, recommendationID string, recommendationPatch []*armsecurityinsights.RecommendationPatch, options *armsecurityinsights.UpdateClientBeginRecommendationOptions) (resp azfake.PollerResponder[armsecurityinsights.UpdateClientRecommendationResponse], errResp azfake.ErrorResponder)
}

// NewUpdateServerTransport creates a new instance of UpdateServerTransport with the provided implementation.
// The returned UpdateServerTransport instance is connected to an instance of armsecurityinsights.UpdateClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUpdateServerTransport(srv *UpdateServer) *UpdateServerTransport {
	return &UpdateServerTransport{
		srv:                 srv,
		beginRecommendation: newTracker[azfake.PollerResponder[armsecurityinsights.UpdateClientRecommendationResponse]](),
	}
}

// UpdateServerTransport connects instances of armsecurityinsights.UpdateClient to instances of UpdateServer.
// Don't use this type directly, use NewUpdateServerTransport instead.
type UpdateServerTransport struct {
	srv                 *UpdateServer
	beginRecommendation *tracker[azfake.PollerResponder[armsecurityinsights.UpdateClientRecommendationResponse]]
}

// Do implements the policy.Transporter interface for UpdateServerTransport.
func (u *UpdateServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "UpdateClient.BeginRecommendation":
		resp, err = u.dispatchBeginRecommendation(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (u *UpdateServerTransport) dispatchBeginRecommendation(req *http.Request) (*http.Response, error) {
	if u.srv.BeginRecommendation == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRecommendation not implemented")}
	}
	beginRecommendation := u.beginRecommendation.get(req)
	if beginRecommendation == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/recommendations/(?P<recommendationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[[]*armsecurityinsights.RecommendationPatch](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		recommendationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("recommendationId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := u.srv.BeginRecommendation(req.Context(), resourceGroupNameParam, workspaceNameParam, recommendationIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRecommendation = &respr
		u.beginRecommendation.add(req, beginRecommendation)
	}

	resp, err := server.PollerResponderNext(beginRecommendation, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		u.beginRecommendation.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRecommendation) {
		u.beginRecommendation.remove(req)
	}

	return resp, nil
}
