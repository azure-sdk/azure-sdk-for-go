// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/logic/armlogic/v2"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// TemplatesServer is a fake server for instances of the armlogic.TemplatesClient type.
type TemplatesServer struct {
	// CreateOrUpdate is the fake for method TemplatesClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, templateName string, resource armlogic.Template, options *armlogic.TemplatesClientCreateOrUpdateOptions) (resp azfake.Responder[armlogic.TemplatesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method TemplatesClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, templateName string, options *armlogic.TemplatesClientDeleteOptions) (resp azfake.Responder[armlogic.TemplatesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Disable is the fake for method TemplatesClient.Disable
	// HTTP status codes to indicate success: http.StatusOK
	Disable func(ctx context.Context, resourceGroupName string, templateName string, options *armlogic.TemplatesClientDisableOptions) (resp azfake.Responder[armlogic.TemplatesClientDisableResponse], errResp azfake.ErrorResponder)

	// Enable is the fake for method TemplatesClient.Enable
	// HTTP status codes to indicate success: http.StatusOK
	Enable func(ctx context.Context, resourceGroupName string, templateName string, options *armlogic.TemplatesClientEnableOptions) (resp azfake.Responder[armlogic.TemplatesClientEnableResponse], errResp azfake.ErrorResponder)

	// GenerateUpgradedDefinition is the fake for method TemplatesClient.GenerateUpgradedDefinition
	// HTTP status codes to indicate success: http.StatusOK
	GenerateUpgradedDefinition func(ctx context.Context, resourceGroupName string, templateName string, body armlogic.GenerateUpgradedDefinitionParameters, options *armlogic.TemplatesClientGenerateUpgradedDefinitionOptions) (resp azfake.Responder[armlogic.TemplatesClientGenerateUpgradedDefinitionResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method TemplatesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, templateName string, options *armlogic.TemplatesClientGetOptions) (resp azfake.Responder[armlogic.TemplatesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByResourceGroupPager is the fake for method TemplatesClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armlogic.TemplatesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armlogic.TemplatesClientListByResourceGroupResponse])

	// NewListBySubscriptionPager is the fake for method TemplatesClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armlogic.TemplatesClientListBySubscriptionOptions) (resp azfake.PagerResponder[armlogic.TemplatesClientListBySubscriptionResponse])

	// ListCallbackURL is the fake for method TemplatesClient.ListCallbackURL
	// HTTP status codes to indicate success: http.StatusOK
	ListCallbackURL func(ctx context.Context, resourceGroupName string, templateName string, body armlogic.GetCallbackURLParameters, options *armlogic.TemplatesClientListCallbackURLOptions) (resp azfake.Responder[armlogic.TemplatesClientListCallbackURLResponse], errResp azfake.ErrorResponder)

	// ListSwagger is the fake for method TemplatesClient.ListSwagger
	// HTTP status codes to indicate success: http.StatusOK
	ListSwagger func(ctx context.Context, resourceGroupName string, templateName string, options *armlogic.TemplatesClientListSwaggerOptions) (resp azfake.Responder[armlogic.TemplatesClientListSwaggerResponse], errResp azfake.ErrorResponder)

	// BeginMove is the fake for method TemplatesClient.BeginMove
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginMove func(ctx context.Context, resourceGroupName string, templateName string, body armlogic.WorkflowReference, options *armlogic.TemplatesClientBeginMoveOptions) (resp azfake.PollerResponder[armlogic.TemplatesClientMoveResponse], errResp azfake.ErrorResponder)

	// RegenerateAccessKey is the fake for method TemplatesClient.RegenerateAccessKey
	// HTTP status codes to indicate success: http.StatusOK
	RegenerateAccessKey func(ctx context.Context, resourceGroupName string, templateName string, body armlogic.RegenerateActionParameter, options *armlogic.TemplatesClientRegenerateAccessKeyOptions) (resp azfake.Responder[armlogic.TemplatesClientRegenerateAccessKeyResponse], errResp azfake.ErrorResponder)

	// Update is the fake for method TemplatesClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, templateName string, properties armlogic.TemplateUpdate, options *armlogic.TemplatesClientUpdateOptions) (resp azfake.Responder[armlogic.TemplatesClientUpdateResponse], errResp azfake.ErrorResponder)

	// ValidateByResourceGroup is the fake for method TemplatesClient.ValidateByResourceGroup
	// HTTP status codes to indicate success: http.StatusOK
	ValidateByResourceGroup func(ctx context.Context, resourceGroupName string, templateName string, body armlogic.Workflow, options *armlogic.TemplatesClientValidateByResourceGroupOptions) (resp azfake.Responder[armlogic.TemplatesClientValidateByResourceGroupResponse], errResp azfake.ErrorResponder)
}

// NewTemplatesServerTransport creates a new instance of TemplatesServerTransport with the provided implementation.
// The returned TemplatesServerTransport instance is connected to an instance of armlogic.TemplatesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTemplatesServerTransport(srv *TemplatesServer) *TemplatesServerTransport {
	return &TemplatesServerTransport{
		srv:                         srv,
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armlogic.TemplatesClientListByResourceGroupResponse]](),
		newListBySubscriptionPager:  newTracker[azfake.PagerResponder[armlogic.TemplatesClientListBySubscriptionResponse]](),
		beginMove:                   newTracker[azfake.PollerResponder[armlogic.TemplatesClientMoveResponse]](),
	}
}

// TemplatesServerTransport connects instances of armlogic.TemplatesClient to instances of TemplatesServer.
// Don't use this type directly, use NewTemplatesServerTransport instead.
type TemplatesServerTransport struct {
	srv                         *TemplatesServer
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armlogic.TemplatesClientListByResourceGroupResponse]]
	newListBySubscriptionPager  *tracker[azfake.PagerResponder[armlogic.TemplatesClientListBySubscriptionResponse]]
	beginMove                   *tracker[azfake.PollerResponder[armlogic.TemplatesClientMoveResponse]]
}

// Do implements the policy.Transporter interface for TemplatesServerTransport.
func (t *TemplatesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return t.dispatchToMethodFake(req, method)
}

func (t *TemplatesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if templatesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = templatesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "TemplatesClient.CreateOrUpdate":
				res.resp, res.err = t.dispatchCreateOrUpdate(req)
			case "TemplatesClient.Delete":
				res.resp, res.err = t.dispatchDelete(req)
			case "TemplatesClient.Disable":
				res.resp, res.err = t.dispatchDisable(req)
			case "TemplatesClient.Enable":
				res.resp, res.err = t.dispatchEnable(req)
			case "TemplatesClient.GenerateUpgradedDefinition":
				res.resp, res.err = t.dispatchGenerateUpgradedDefinition(req)
			case "TemplatesClient.Get":
				res.resp, res.err = t.dispatchGet(req)
			case "TemplatesClient.NewListByResourceGroupPager":
				res.resp, res.err = t.dispatchNewListByResourceGroupPager(req)
			case "TemplatesClient.NewListBySubscriptionPager":
				res.resp, res.err = t.dispatchNewListBySubscriptionPager(req)
			case "TemplatesClient.ListCallbackURL":
				res.resp, res.err = t.dispatchListCallbackURL(req)
			case "TemplatesClient.ListSwagger":
				res.resp, res.err = t.dispatchListSwagger(req)
			case "TemplatesClient.BeginMove":
				res.resp, res.err = t.dispatchBeginMove(req)
			case "TemplatesClient.RegenerateAccessKey":
				res.resp, res.err = t.dispatchRegenerateAccessKey(req)
			case "TemplatesClient.Update":
				res.resp, res.err = t.dispatchUpdate(req)
			case "TemplatesClient.ValidateByResourceGroup":
				res.resp, res.err = t.dispatchValidateByResourceGroup(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (t *TemplatesServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if t.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armlogic.Template](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, templateNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Template, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if t.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.Delete(req.Context(), resourceGroupNameParam, templateNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchDisable(req *http.Request) (*http.Response, error) {
	if t.srv.Disable == nil {
		return nil, &nonRetriableError{errors.New("fake for method Disable not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/disable`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.Disable(req.Context(), resourceGroupNameParam, templateNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchEnable(req *http.Request) (*http.Response, error) {
	if t.srv.Enable == nil {
		return nil, &nonRetriableError{errors.New("fake for method Enable not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enable`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.Enable(req.Context(), resourceGroupNameParam, templateNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchGenerateUpgradedDefinition(req *http.Request) (*http.Response, error) {
	if t.srv.GenerateUpgradedDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method GenerateUpgradedDefinition not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/generateUpgradedDefinition`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armlogic.GenerateUpgradedDefinitionParameters](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.GenerateUpgradedDefinition(req.Context(), resourceGroupNameParam, templateNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if t.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.Get(req.Context(), resourceGroupNameParam, templateNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Template, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := t.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		topUnescaped, err := url.QueryUnescape(qp.Get("$top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		var options *armlogic.TemplatesClientListByResourceGroupOptions
		if topParam != nil || filterParam != nil {
			options = &armlogic.TemplatesClientListByResourceGroupOptions{
				Top:    topParam,
				Filter: filterParam,
			}
		}
		resp := t.srv.NewListByResourceGroupPager(resourceGroupNameParam, options)
		newListByResourceGroupPager = &resp
		t.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armlogic.TemplatesClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		t.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := t.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		topUnescaped, err := url.QueryUnescape(qp.Get("$top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		var options *armlogic.TemplatesClientListBySubscriptionOptions
		if topParam != nil || filterParam != nil {
			options = &armlogic.TemplatesClientListBySubscriptionOptions{
				Top:    topParam,
				Filter: filterParam,
			}
		}
		resp := t.srv.NewListBySubscriptionPager(options)
		newListBySubscriptionPager = &resp
		t.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armlogic.TemplatesClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		t.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchListCallbackURL(req *http.Request) (*http.Response, error) {
	if t.srv.ListCallbackURL == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListCallbackURL not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listCallbackUrl`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armlogic.GetCallbackURLParameters](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.ListCallbackURL(req.Context(), resourceGroupNameParam, templateNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkflowTriggerCallbackURL, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchListSwagger(req *http.Request) (*http.Response, error) {
	if t.srv.ListSwagger == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListSwagger not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listSwagger`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.ListSwagger(req.Context(), resourceGroupNameParam, templateNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchBeginMove(req *http.Request) (*http.Response, error) {
	if t.srv.BeginMove == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginMove not implemented")}
	}
	beginMove := t.beginMove.get(req)
	if beginMove == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/move`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armlogic.WorkflowReference](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := t.srv.BeginMove(req.Context(), resourceGroupNameParam, templateNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginMove = &respr
		t.beginMove.add(req, beginMove)
	}

	resp, err := server.PollerResponderNext(beginMove, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		t.beginMove.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginMove) {
		t.beginMove.remove(req)
	}

	return resp, nil
}

func (t *TemplatesServerTransport) dispatchRegenerateAccessKey(req *http.Request) (*http.Response, error) {
	if t.srv.RegenerateAccessKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method RegenerateAccessKey not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/regenerateAccessKey`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armlogic.RegenerateActionParameter](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.RegenerateAccessKey(req.Context(), resourceGroupNameParam, templateNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if t.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armlogic.TemplateUpdate](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.Update(req.Context(), resourceGroupNameParam, templateNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Template, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TemplatesServerTransport) dispatchValidateByResourceGroup(req *http.Request) (*http.Response, error) {
	if t.srv.ValidateByResourceGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method ValidateByResourceGroup not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Logic/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armlogic.Workflow](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.ValidateByResourceGroup(req.Context(), resourceGroupNameParam, templateNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to TemplatesServerTransport
var templatesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
