// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devhub/armdevhub"
	"net/http"
	"net/url"
	"regexp"
)

// VersionedTemplateServer is a fake server for instances of the armdevhub.VersionedTemplateClient type.
type VersionedTemplateServer struct {
	// Generate is the fake for method VersionedTemplateClient.Generate
	// HTTP status codes to indicate success: http.StatusOK
	Generate func(ctx context.Context, templateName string, templateVersion string, parameters map[string]*string, options *armdevhub.VersionedTemplateClientGenerateOptions) (resp azfake.Responder[armdevhub.VersionedTemplateClientGenerateResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method VersionedTemplateClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, templateName string, templateVersion string, options *armdevhub.VersionedTemplateClientGetOptions) (resp azfake.Responder[armdevhub.VersionedTemplateClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method VersionedTemplateClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(templateName string, options *armdevhub.VersionedTemplateClientListOptions) (resp azfake.PagerResponder[armdevhub.VersionedTemplateClientListResponse])
}

// NewVersionedTemplateServerTransport creates a new instance of VersionedTemplateServerTransport with the provided implementation.
// The returned VersionedTemplateServerTransport instance is connected to an instance of armdevhub.VersionedTemplateClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVersionedTemplateServerTransport(srv *VersionedTemplateServer) *VersionedTemplateServerTransport {
	return &VersionedTemplateServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armdevhub.VersionedTemplateClientListResponse]](),
	}
}

// VersionedTemplateServerTransport connects instances of armdevhub.VersionedTemplateClient to instances of VersionedTemplateServer.
// Don't use this type directly, use NewVersionedTemplateServerTransport instead.
type VersionedTemplateServerTransport struct {
	srv          *VersionedTemplateServer
	newListPager *tracker[azfake.PagerResponder[armdevhub.VersionedTemplateClientListResponse]]
}

// Do implements the policy.Transporter interface for VersionedTemplateServerTransport.
func (v *VersionedTemplateServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return v.dispatchToMethodFake(req, method)
}

func (v *VersionedTemplateServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if versionedTemplateServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = versionedTemplateServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "VersionedTemplateClient.Generate":
				res.resp, res.err = v.dispatchGenerate(req)
			case "VersionedTemplateClient.Get":
				res.resp, res.err = v.dispatchGet(req)
			case "VersionedTemplateClient.NewListPager":
				res.resp, res.err = v.dispatchNewListPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (v *VersionedTemplateServerTransport) dispatchGenerate(req *http.Request) (*http.Response, error) {
	if v.srv.Generate == nil {
		return nil, &nonRetriableError{errors.New("fake for method Generate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevHub/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions/(?P<templateVersion>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/generate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*string](req)
	if err != nil {
		return nil, err
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	templateVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateVersion")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.Generate(req.Context(), templateNameParam, templateVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GenerateVersionedTemplateResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VersionedTemplateServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevHub/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions/(?P<templateVersion>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
	if err != nil {
		return nil, err
	}
	templateVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateVersion")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.Get(req.Context(), templateNameParam, templateVersionParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VersionedTemplate, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VersionedTemplateServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := v.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevHub/templates/(?P<templateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		templateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("templateName")])
		if err != nil {
			return nil, err
		}
		resp := v.srv.NewListPager(templateNameParam, nil)
		newListPager = &resp
		v.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armdevhub.VersionedTemplateClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		v.newListPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to VersionedTemplateServerTransport
var versionedTemplateServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
