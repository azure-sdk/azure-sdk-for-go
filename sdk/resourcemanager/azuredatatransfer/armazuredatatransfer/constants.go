// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazuredatatransfer

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azuredatatransfer/armazuredatatransfer"
	moduleVersion = "v0.1.0"
)

// APIMode - Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
type APIMode string

const (
	// APIModeEndpoint - The API flow will forward calls to a specified endpoint.
	APIModeEndpoint APIMode = "Endpoint"
	// APIModeSDK - The API flow will forward calls to a custom Software Development Kit implementation.
	APIModeSDK APIMode = "SDK"
)

// PossibleAPIModeValues returns the possible values for the APIMode const type.
func PossibleAPIModeValues() []APIMode {
	return []APIMode{
		APIModeEndpoint,
		APIModeSDK,
	}
}

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// ConnectionStatus - Status of the connection
type ConnectionStatus string

const (
	// ConnectionStatusAccepted - Creation of the connection has been accepted.
	ConnectionStatusAccepted ConnectionStatus = "Accepted"
	// ConnectionStatusApproved - This connection has been approved by the pipeline owner and is ready for use.
	ConnectionStatusApproved ConnectionStatus = "Approved"
	// ConnectionStatusInReview - This connection has been created but is under review by the pipeline owner.
	ConnectionStatusInReview ConnectionStatus = "InReview"
	// ConnectionStatusRejected - This connection has been rejected by the pipeline owner and cannot be used.
	ConnectionStatusRejected ConnectionStatus = "Rejected"
)

// PossibleConnectionStatusValues returns the possible values for the ConnectionStatus const type.
func PossibleConnectionStatusValues() []ConnectionStatus {
	return []ConnectionStatus{
		ConnectionStatusAccepted,
		ConnectionStatusApproved,
		ConnectionStatusInReview,
		ConnectionStatusRejected,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DataType - Transfer Storage Blobs or Tables
type DataType string

const (
	// DataTypeBlob - The flow uses Azure Storage blobs to send or receive data.
	DataTypeBlob DataType = "Blob"
	// DataTypeTable - The flow uses Azure Storage tables to send or receive data.
	DataTypeTable DataType = "Table"
)

// PossibleDataTypeValues returns the possible values for the DataType const type.
func PossibleDataTypeValues() []DataType {
	return []DataType{
		DataTypeBlob,
		DataTypeTable,
	}
}

// Direction - Direction of data movement
type Direction string

const (
	// DirectionReceive - The direction is on the receiving side side of a pipeline, connection, or flow.
	DirectionReceive Direction = "Receive"
	// DirectionSend - The direction is on the sending side of a pipeline, connection, or flow.
	DirectionSend Direction = "Send"
)

// PossibleDirectionValues returns the possible values for the Direction const type.
func PossibleDirectionValues() []Direction {
	return []Direction{
		DirectionReceive,
		DirectionSend,
	}
}

// FlowBillingTier - Billing tier for this messaging flow.
type FlowBillingTier string

const (
	// FlowBillingTierBlobTransport - Billing tier for messaging processing that charges based on how much data is transferred.
	FlowBillingTierBlobTransport FlowBillingTier = "BlobTransport"
	// FlowBillingTierPremium - Billing tier for premium messaging processing that charges based on having the messaging resource
	// allocated.
	FlowBillingTierPremium FlowBillingTier = "Premium"
	// FlowBillingTierStandard - Billing tier for standard messaging processing that charges based on having the messaging resource
	// allocated.
	FlowBillingTierStandard FlowBillingTier = "Standard"
)

// PossibleFlowBillingTierValues returns the possible values for the FlowBillingTier const type.
func PossibleFlowBillingTierValues() []FlowBillingTier {
	return []FlowBillingTier{
		FlowBillingTierBlobTransport,
		FlowBillingTierPremium,
		FlowBillingTierStandard,
	}
}

// FlowStatus - Status of the current flow.
type FlowStatus string

const (
	// FlowStatusDisabled - The flow is currently disabled and cannot send or receive data.
	FlowStatusDisabled FlowStatus = "Disabled"
	// FlowStatusEnabled - The flow is currently enabled and able to send or receive data.
	FlowStatusEnabled FlowStatus = "Enabled"
)

// PossibleFlowStatusValues returns the possible values for the FlowStatus const type.
func PossibleFlowStatusValues() []FlowStatus {
	return []FlowStatus{
		FlowStatusDisabled,
		FlowStatusEnabled,
	}
}

// FlowType - Flow type for the specified resource
type FlowType string

const (
	// FlowTypeAPI - This flow sends data via an Application Programmer Interface.
	FlowTypeAPI FlowType = "API"
	// FlowTypeBasicFiles - This flow sends blobs that can be used for multiple use cases.
	FlowTypeBasicFiles FlowType = "BasicFiles"
	// FlowTypeComplex - This flow sends complex documents, such as Microsoft Office documents of Portable document format files.
	FlowTypeComplex FlowType = "Complex"
	// FlowTypeData - This flow sends blobs that can be used for multiple use cases.
	FlowTypeData FlowType = "Data"
	// FlowTypeDevSecOps - This flow sends source code files and artifacts.
	FlowTypeDevSecOps FlowType = "DevSecOps"
	// FlowTypeDiskImages - This flow sends blobs that can be used for Virtual Machines.
	FlowTypeDiskImages FlowType = "DiskImages"
	// FlowTypeMessaging - This flow over the Azure Data Transfer low latency messaging subsystem.
	FlowTypeMessaging FlowType = "Messaging"
	// FlowTypeMicrosoftInternal - This flow is assigned to internal Microsoft use cases.
	FlowTypeMicrosoftInternal FlowType = "MicrosoftInternal"
	// FlowTypeMission - This flow sends data that will not be processed by any security system.
	FlowTypeMission FlowType = "Mission"
	// FlowTypeMissionOpaqueXML - This flow sends Extensible Markup Language that will not be processed by any security system.
	FlowTypeMissionOpaqueXML FlowType = "MissionOpaqueXML"
	// FlowTypeOpaque - This flow sends blobs that will not be processed by any security system.
	FlowTypeOpaque FlowType = "Opaque"
	// FlowTypeStandard - This flow sends blobs that can be used for multiple use cases.
	FlowTypeStandard FlowType = "Standard"
	// FlowTypeStreamingVideo - This flow sends video streams.
	FlowTypeStreamingVideo FlowType = "StreamingVideo"
	// FlowTypeUnknown - This type of flow is not set.
	FlowTypeUnknown FlowType = "Unknown"
)

// PossibleFlowTypeValues returns the possible values for the FlowType const type.
func PossibleFlowTypeValues() []FlowType {
	return []FlowType{
		FlowTypeAPI,
		FlowTypeBasicFiles,
		FlowTypeComplex,
		FlowTypeData,
		FlowTypeDevSecOps,
		FlowTypeDiskImages,
		FlowTypeMessaging,
		FlowTypeMicrosoftInternal,
		FlowTypeMission,
		FlowTypeMissionOpaqueXML,
		FlowTypeOpaque,
		FlowTypeStandard,
		FlowTypeStreamingVideo,
		FlowTypeUnknown,
	}
}

// ForceDisabledStatus - Status of force disablement
type ForceDisabledStatus string

const (
	// ForceDisabledStatusConnectionForceDisabled - This Flow has been disabled as the connection has been disabled.
	ForceDisabledStatusConnectionForceDisabled ForceDisabledStatus = "ConnectionForceDisabled"
	// ForceDisabledStatusFlowTypeForceDisabled - This Flow has been disabled as the flow type this flow uses has been disabled.
	ForceDisabledStatusFlowTypeForceDisabled ForceDisabledStatus = "FlowTypeForceDisabled"
)

// PossibleForceDisabledStatusValues returns the possible values for the ForceDisabledStatus const type.
func PossibleForceDisabledStatusValues() []ForceDisabledStatus {
	return []ForceDisabledStatus{
		ForceDisabledStatusConnectionForceDisabled,
		ForceDisabledStatusFlowTypeForceDisabled,
	}
}

// IdentityTranslation - Flag for if Azure Data Transfer API Flow should extract the user token
type IdentityTranslation string

const (
	// IdentityTranslationServiceIdentity - The API flow will make use of the Azure Data Transfer Flow managed identity on the
	// other side of the boundary.
	IdentityTranslationServiceIdentity IdentityTranslation = "ServiceIdentity"
	// IdentityTranslationUserIdentity - The API flow will make use of the user identity that called this API flow, and pass that
	// token
	// through the boundary.
	IdentityTranslationUserIdentity IdentityTranslation = "UserIdentity"
)

// PossibleIdentityTranslationValues returns the possible values for the IdentityTranslation const type.
func PossibleIdentityTranslationValues() []IdentityTranslation {
	return []IdentityTranslation{
		IdentityTranslationServiceIdentity,
		IdentityTranslationUserIdentity,
	}
}

// LinkStatus - Link status of the current pipeline, connection, flow.
type LinkStatus string

const (
	// LinkStatusLinked - The pipeline, connection, or flow is currently linked with another corresponding pipeline,
	// connection, or flow, and can be used.
	LinkStatusLinked LinkStatus = "Linked"
	// LinkStatusUnlinked - The pipeline, connection, or flow is not linked with another corresponding pipeline,
	// connection, or flow, and cannot be used.
	LinkStatusUnlinked LinkStatus = "Unlinked"
)

// PossibleLinkStatusValues returns the possible values for the LinkStatus const type.
func PossibleLinkStatusValues() []LinkStatus {
	return []LinkStatus{
		LinkStatusLinked,
		LinkStatusUnlinked,
	}
}

// ManagedServiceIdentityType - Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                       ManagedServiceIdentityType = "None"
	ManagedServiceIdentityTypeSystemAssigned             ManagedServiceIdentityType = "SystemAssigned"
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned,UserAssigned"
	ManagedServiceIdentityTypeUserAssigned               ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns the possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{
		ManagedServiceIdentityTypeNone,
		ManagedServiceIdentityTypeSystemAssigned,
		ManagedServiceIdentityTypeSystemAssignedUserAssigned,
		ManagedServiceIdentityTypeUserAssigned,
	}
}

// OperationStatusEnum - Operation status for the last patch request for this connection.
type OperationStatusEnum string

const (
	// OperationStatusEnumFailed - The last patch request for this connection completed with an error.
	OperationStatusEnumFailed OperationStatusEnum = "Failed"
	// OperationStatusEnumSucceeded - The last patch request for this connection completed.
	OperationStatusEnumSucceeded OperationStatusEnum = "Succeeded"
)

// PossibleOperationStatusEnumValues returns the possible values for the OperationStatusEnum const type.
func PossibleOperationStatusEnumValues() []OperationStatusEnum {
	return []OperationStatusEnum{
		OperationStatusEnumFailed,
		OperationStatusEnumSucceeded,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// PipelineStatus - Status of the current pipeline
type PipelineStatus string

const (
	// PipelineStatusDisabled - The pipeline is currently disabled and all child connection and flow resources below are unable
	// to send or receive data.
	PipelineStatusDisabled PipelineStatus = "Disabled"
	// PipelineStatusEnabled - The pipeline is currently enabled and all child connection and flow resources below able to send
	// or receive data.
	PipelineStatusEnabled PipelineStatus = "Enabled"
)

// PossiblePipelineStatusValues returns the possible values for the PipelineStatus const type.
func PossiblePipelineStatusValues() []PipelineStatus {
	return []PipelineStatus{
		PipelineStatusDisabled,
		PipelineStatusEnabled,
	}
}

// ProvisioningState - Provisioning state of the pipeline, connection, flow.
type ProvisioningState string

const (
	// ProvisioningStateAccepted - Resource has been accepted for creation.
	ProvisioningStateAccepted ProvisioningState = "Accepted"
	// ProvisioningStateCanceled - Resource creation was canceled.
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	// ProvisioningStateFailed - Resource creation failed.
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateSucceeded - Resource has been created.
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateAccepted,
		ProvisioningStateCanceled,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
	}
}

// SchemaStatus - Status of the schema.
type SchemaStatus string

const (
	// SchemaStatusApproved - A schema that has been approved and is ready for use.
	SchemaStatusApproved SchemaStatus = "Approved"
	// SchemaStatusNew - A schema that has not been approved and is awaiting review.
	SchemaStatusNew SchemaStatus = "New"
)

// PossibleSchemaStatusValues returns the possible values for the SchemaStatus const type.
func PossibleSchemaStatusValues() []SchemaStatus {
	return []SchemaStatus{
		SchemaStatusApproved,
		SchemaStatusNew,
	}
}

// SchemaType - The Schema Type.
type SchemaType string

const (
	// SchemaTypeXsd - The schema represents a single XML schema definition file.
	SchemaTypeXsd SchemaType = "Xsd"
	// SchemaTypeZip - The schema represents a ZIP file with multiple XML schema definition files within it.
	SchemaTypeZip SchemaType = "Zip"
)

// PossibleSchemaTypeValues returns the possible values for the SchemaType const type.
func PossibleSchemaTypeValues() []SchemaType {
	return []SchemaType{
		SchemaTypeXsd,
		SchemaTypeZip,
	}
}

// StreamProtocol - The protocol of the stream
type StreamProtocol string

const (
	// StreamProtocolRTP - This Flow is using Real-time Transport Protocol for the video stream.
	StreamProtocolRTP StreamProtocol = "RTP"
	// StreamProtocolSRT - This Flow is using Secure Reliable Transfer for the video stream.
	StreamProtocolSRT StreamProtocol = "SRT"
	// StreamProtocolUDP - This Flow is using User Datagram Protocol for the video stream.
	StreamProtocolUDP StreamProtocol = "UDP"
)

// PossibleStreamProtocolValues returns the possible values for the StreamProtocol const type.
func PossibleStreamProtocolValues() []StreamProtocol {
	return []StreamProtocol{
		StreamProtocolRTP,
		StreamProtocolSRT,
		StreamProtocolUDP,
	}
}

// TargetType - Type of target to execute the action on
type TargetType string

const (
	// TargetTypeConnection - The action executing is targeting a connection.
	TargetTypeConnection TargetType = "Connection"
	// TargetTypeFlowType - The action executing is targeting a flow type.
	TargetTypeFlowType TargetType = "FlowType"
	// TargetTypePipeline - The action executing is targeting a pipeline.
	TargetTypePipeline TargetType = "Pipeline"
)

// PossibleTargetTypeValues returns the possible values for the TargetType const type.
func PossibleTargetTypeValues() []TargetType {
	return []TargetType{
		TargetTypeConnection,
		TargetTypeFlowType,
		TargetTypePipeline,
	}
}

// ValidateSchemaStatus - Validation status of the schema
type ValidateSchemaStatus string

const (
	// ValidateSchemaStatusFailed - The schema failed validation, whether due to error or an invalid schema.
	ValidateSchemaStatusFailed ValidateSchemaStatus = "Failed"
	// ValidateSchemaStatusSucceeded - Validation of the schema was successful.
	ValidateSchemaStatusSucceeded ValidateSchemaStatus = "Succeeded"
)

// PossibleValidateSchemaStatusValues returns the possible values for the ValidateSchemaStatus const type.
func PossibleValidateSchemaStatusValues() []ValidateSchemaStatus {
	return []ValidateSchemaStatus{
		ValidateSchemaStatusFailed,
		ValidateSchemaStatusSucceeded,
	}
}
