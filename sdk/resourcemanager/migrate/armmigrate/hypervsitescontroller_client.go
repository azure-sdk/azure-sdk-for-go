//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// HypervSitesControllerClient contains the methods for the HypervSitesController group.
// Don't use this type directly, use NewHypervSitesControllerClient() instead.
type HypervSitesControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewHypervSitesControllerClient creates a new instance of HypervSitesControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHypervSitesControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*HypervSitesControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HypervSitesControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// ComputeErrorSummary - Method to get site error summary.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - HypervSitesControllerClientComputeErrorSummaryOptions contains the optional parameters for the HypervSitesControllerClient.ComputeErrorSummary
//     method.
func (client *HypervSitesControllerClient) ComputeErrorSummary(ctx context.Context, resourceGroupName string, siteName string, body any, options *HypervSitesControllerClientComputeErrorSummaryOptions) (HypervSitesControllerClientComputeErrorSummaryResponse, error) {
	var err error
	const operationName = "HypervSitesControllerClient.ComputeErrorSummary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.computeErrorSummaryCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return HypervSitesControllerClientComputeErrorSummaryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervSitesControllerClientComputeErrorSummaryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervSitesControllerClientComputeErrorSummaryResponse{}, err
	}
	resp, err := client.computeErrorSummaryHandleResponse(httpResp)
	return resp, err
}

// computeErrorSummaryCreateRequest creates the ComputeErrorSummary request.
func (client *HypervSitesControllerClient) computeErrorSummaryCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body any, options *HypervSitesControllerClientComputeErrorSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/computeErrorSummary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// computeErrorSummaryHandleResponse handles the ComputeErrorSummary response.
func (client *HypervSitesControllerClient) computeErrorSummaryHandleResponse(resp *http.Response) (HypervSitesControllerClientComputeErrorSummaryResponse, error) {
	result := HypervSitesControllerClientComputeErrorSummaryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SiteErrorSummary); err != nil {
		return HypervSitesControllerClientComputeErrorSummaryResponse{}, err
	}
	return result, nil
}

// Computeusage - Get a hyperv site usage.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - HypervSitesControllerClientComputeusageOptions contains the optional parameters for the HypervSitesControllerClient.Computeusage
//     method.
func (client *HypervSitesControllerClient) Computeusage(ctx context.Context, resourceGroupName string, siteName string, body any, options *HypervSitesControllerClientComputeusageOptions) (HypervSitesControllerClientComputeusageResponse, error) {
	var err error
	const operationName = "HypervSitesControllerClient.Computeusage"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.computeusageCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return HypervSitesControllerClientComputeusageResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervSitesControllerClientComputeusageResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervSitesControllerClientComputeusageResponse{}, err
	}
	resp, err := client.computeusageHandleResponse(httpResp)
	return resp, err
}

// computeusageCreateRequest creates the Computeusage request.
func (client *HypervSitesControllerClient) computeusageCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body any, options *HypervSitesControllerClientComputeusageOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/computeusage"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// computeusageHandleResponse handles the Computeusage response.
func (client *HypervSitesControllerClient) computeusageHandleResponse(resp *http.Response) (HypervSitesControllerClientComputeusageResponse, error) {
	result := HypervSitesControllerClientComputeusageResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervSiteUsage); err != nil {
		return HypervSitesControllerClientComputeusageResponse{}, err
	}
	return result, nil
}

// Create - Create a HypervSite
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - Resource create parameters.
//   - options - HypervSitesControllerClientCreateOptions contains the optional parameters for the HypervSitesControllerClient.Create
//     method.
func (client *HypervSitesControllerClient) Create(ctx context.Context, resourceGroupName string, siteName string, body HypervSite, options *HypervSitesControllerClientCreateOptions) (HypervSitesControllerClientCreateResponse, error) {
	var err error
	const operationName = "HypervSitesControllerClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return HypervSitesControllerClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervSitesControllerClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return HypervSitesControllerClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *HypervSitesControllerClient) createCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body HypervSite, options *HypervSitesControllerClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *HypervSitesControllerClient) createHandleResponse(resp *http.Response) (HypervSitesControllerClientCreateResponse, error) {
	result := HypervSitesControllerClientCreateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return HypervSitesControllerClientCreateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervSite); err != nil {
		return HypervSitesControllerClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a HypervSite
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - HypervSitesControllerClientDeleteOptions contains the optional parameters for the HypervSitesControllerClient.Delete
//     method.
func (client *HypervSitesControllerClient) Delete(ctx context.Context, resourceGroupName string, siteName string, options *HypervSitesControllerClientDeleteOptions) (HypervSitesControllerClientDeleteResponse, error) {
	var err error
	const operationName = "HypervSitesControllerClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return HypervSitesControllerClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervSitesControllerClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HypervSitesControllerClientDeleteResponse{}, err
	}
	return HypervSitesControllerClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *HypervSitesControllerClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *HypervSitesControllerClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginExportApplications - Method to generate report containing machine and the deep discovery of the application installed
// in the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - HypervSitesControllerClientBeginExportApplicationsOptions contains the optional parameters for the HypervSitesControllerClient.BeginExportApplications
//     method.
func (client *HypervSitesControllerClient) BeginExportApplications(ctx context.Context, resourceGroupName string, siteName string, body any, options *HypervSitesControllerClientBeginExportApplicationsOptions) (*runtime.Poller[HypervSitesControllerClientExportApplicationsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.exportApplications(ctx, resourceGroupName, siteName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HypervSitesControllerClientExportApplicationsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[HypervSitesControllerClientExportApplicationsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// ExportApplications - Method to generate report containing machine and the deep discovery of the application installed in
// the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *HypervSitesControllerClient) exportApplications(ctx context.Context, resourceGroupName string, siteName string, body any, options *HypervSitesControllerClientBeginExportApplicationsOptions) (*http.Response, error) {
	var err error
	const operationName = "HypervSitesControllerClient.BeginExportApplications"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.exportApplicationsCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// exportApplicationsCreateRequest creates the ExportApplications request.
func (client *HypervSitesControllerClient) exportApplicationsCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body any, options *HypervSitesControllerClientBeginExportApplicationsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/exportApplications"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginExportMachineErrors - Method to generate report containing machine and the errors encountered during guest discovery
// of the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - HypervSitesControllerClientBeginExportMachineErrorsOptions contains the optional parameters for the HypervSitesControllerClient.BeginExportMachineErrors
//     method.
func (client *HypervSitesControllerClient) BeginExportMachineErrors(ctx context.Context, resourceGroupName string, siteName string, body ExportMachineErrorsRequest, options *HypervSitesControllerClientBeginExportMachineErrorsOptions) (*runtime.Poller[HypervSitesControllerClientExportMachineErrorsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.exportMachineErrors(ctx, resourceGroupName, siteName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HypervSitesControllerClientExportMachineErrorsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[HypervSitesControllerClientExportMachineErrorsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// ExportMachineErrors - Method to generate report containing machine and the errors encountered during guest discovery of
// the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *HypervSitesControllerClient) exportMachineErrors(ctx context.Context, resourceGroupName string, siteName string, body ExportMachineErrorsRequest, options *HypervSitesControllerClientBeginExportMachineErrorsOptions) (*http.Response, error) {
	var err error
	const operationName = "HypervSitesControllerClient.BeginExportMachineErrors"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.exportMachineErrorsCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// exportMachineErrorsCreateRequest creates the ExportMachineErrors request.
func (client *HypervSitesControllerClient) exportMachineErrorsCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body ExportMachineErrorsRequest, options *HypervSitesControllerClientBeginExportMachineErrorsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/exportMachineErrors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Get a HypervSite
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - HypervSitesControllerClientGetOptions contains the optional parameters for the HypervSitesControllerClient.Get
//     method.
func (client *HypervSitesControllerClient) Get(ctx context.Context, resourceGroupName string, siteName string, options *HypervSitesControllerClientGetOptions) (HypervSitesControllerClientGetResponse, error) {
	var err error
	const operationName = "HypervSitesControllerClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return HypervSitesControllerClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervSitesControllerClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervSitesControllerClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *HypervSitesControllerClient) getCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *HypervSitesControllerClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HypervSitesControllerClient) getHandleResponse(resp *http.Response) (HypervSitesControllerClientGetResponse, error) {
	result := HypervSitesControllerClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervSite); err != nil {
		return HypervSitesControllerClientGetResponse{}, err
	}
	return result, nil
}

// ListHealthSummary - Method to get site health summary.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - HypervSitesControllerClientListHealthSummaryOptions contains the optional parameters for the HypervSitesControllerClient.ListHealthSummary
//     method.
func (client *HypervSitesControllerClient) ListHealthSummary(ctx context.Context, resourceGroupName string, siteName string, options *HypervSitesControllerClientListHealthSummaryOptions) (HypervSitesControllerClientListHealthSummaryResponse, error) {
	var err error
	const operationName = "HypervSitesControllerClient.ListHealthSummary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listHealthSummaryCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return HypervSitesControllerClientListHealthSummaryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervSitesControllerClientListHealthSummaryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervSitesControllerClientListHealthSummaryResponse{}, err
	}
	resp, err := client.listHealthSummaryHandleResponse(httpResp)
	return resp, err
}

// listHealthSummaryCreateRequest creates the ListHealthSummary request.
func (client *HypervSitesControllerClient) listHealthSummaryCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *HypervSitesControllerClientListHealthSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/listHealthSummary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHealthSummaryHandleResponse handles the ListHealthSummary response.
func (client *HypervSitesControllerClient) listHealthSummaryHandleResponse(resp *http.Response) (HypervSitesControllerClientListHealthSummaryResponse, error) {
	result := HypervSitesControllerClientListHealthSummaryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SiteHealthSummaryCollection); err != nil {
		return HypervSitesControllerClientListHealthSummaryResponse{}, err
	}
	return result, nil
}

// Summary - Method to get site usage.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - HypervSitesControllerClientSummaryOptions contains the optional parameters for the HypervSitesControllerClient.Summary
//     method.
func (client *HypervSitesControllerClient) Summary(ctx context.Context, resourceGroupName string, siteName string, options *HypervSitesControllerClientSummaryOptions) (HypervSitesControllerClientSummaryResponse, error) {
	var err error
	const operationName = "HypervSitesControllerClient.Summary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.summaryCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return HypervSitesControllerClientSummaryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervSitesControllerClientSummaryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervSitesControllerClientSummaryResponse{}, err
	}
	resp, err := client.summaryHandleResponse(httpResp)
	return resp, err
}

// summaryCreateRequest creates the Summary request.
func (client *HypervSitesControllerClient) summaryCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *HypervSitesControllerClientSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/summary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// summaryHandleResponse handles the Summary response.
func (client *HypervSitesControllerClient) summaryHandleResponse(resp *http.Response) (HypervSitesControllerClientSummaryResponse, error) {
	result := HypervSitesControllerClientSummaryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervSiteUsage); err != nil {
		return HypervSitesControllerClientSummaryResponse{}, err
	}
	return result, nil
}

// Update - Update a HypervSite
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The resource properties to be updated.
//   - options - HypervSitesControllerClientUpdateOptions contains the optional parameters for the HypervSitesControllerClient.Update
//     method.
func (client *HypervSitesControllerClient) Update(ctx context.Context, resourceGroupName string, siteName string, body HypervSiteUpdate, options *HypervSitesControllerClientUpdateOptions) (HypervSitesControllerClientUpdateResponse, error) {
	var err error
	const operationName = "HypervSitesControllerClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return HypervSitesControllerClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervSitesControllerClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervSitesControllerClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *HypervSitesControllerClient) updateCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body HypervSiteUpdate, options *HypervSitesControllerClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *HypervSitesControllerClient) updateHandleResponse(resp *http.Response) (HypervSitesControllerClientUpdateResponse, error) {
	result := HypervSitesControllerClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervSite); err != nil {
		return HypervSitesControllerClientUpdateResponse{}, err
	}
	return result, nil
}
