// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armbotservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BotConnectionOperationGroupClient contains the methods for the BotConnectionOperationGroup group.
// Don't use this type directly, use NewBotConnectionOperationGroupClient() instead.
type BotConnectionOperationGroupClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewBotConnectionOperationGroupClient creates a new instance of BotConnectionOperationGroupClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewBotConnectionOperationGroupClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*BotConnectionOperationGroupClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &BotConnectionOperationGroupClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// ListServiceProviders - Lists the available Service Providers for creating Connection Settings
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-09-15-preview
//   - options - BotConnectionOperationGroupClientListServiceProvidersOptions contains the optional parameters for the BotConnectionOperationGroupClient.ListServiceProviders
//     method.
func (client *BotConnectionOperationGroupClient) ListServiceProviders(ctx context.Context, options *BotConnectionOperationGroupClientListServiceProvidersOptions) (BotConnectionOperationGroupClientListServiceProvidersResponse, error) {
	var err error
	const operationName = "BotConnectionOperationGroupClient.ListServiceProviders"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listServiceProvidersCreateRequest(ctx, options)
	if err != nil {
		return BotConnectionOperationGroupClientListServiceProvidersResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BotConnectionOperationGroupClientListServiceProvidersResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BotConnectionOperationGroupClientListServiceProvidersResponse{}, err
	}
	resp, err := client.listServiceProvidersHandleResponse(httpResp)
	return resp, err
}

// listServiceProvidersCreateRequest creates the ListServiceProviders request.
func (client *BotConnectionOperationGroupClient) listServiceProvidersCreateRequest(ctx context.Context, _ *BotConnectionOperationGroupClientListServiceProvidersOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/listAuthServiceProviders"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-09-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listServiceProvidersHandleResponse handles the ListServiceProviders response.
func (client *BotConnectionOperationGroupClient) listServiceProvidersHandleResponse(resp *http.Response) (BotConnectionOperationGroupClientListServiceProvidersResponse, error) {
	result := BotConnectionOperationGroupClientListServiceProvidersResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceProviderResponseList); err != nil {
		return BotConnectionOperationGroupClientListServiceProvidersResponse{}, err
	}
	return result, nil
}
