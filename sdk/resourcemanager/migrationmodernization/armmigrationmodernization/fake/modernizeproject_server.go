//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationmodernization/armmigrationmodernization"
	"net/http"
	"net/url"
	"regexp"
)

// ModernizeProjectServer is a fake server for instances of the armmigrationmodernization.ModernizeProjectClient type.
type ModernizeProjectServer struct {
	// Create is the fake for method ModernizeProjectClient.Create
	// HTTP status codes to indicate success: http.StatusCreated
	Create func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, body armmigrationmodernization.ModernizeProjectModel, options *armmigrationmodernization.ModernizeProjectClientCreateOptions) (resp azfake.Responder[armmigrationmodernization.ModernizeProjectClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method ModernizeProjectClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *armmigrationmodernization.ModernizeProjectClientBeginDeleteOptions) (resp azfake.PollerResponder[armmigrationmodernization.ModernizeProjectClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ModernizeProjectClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *armmigrationmodernization.ModernizeProjectClientGetOptions) (resp azfake.Responder[armmigrationmodernization.ModernizeProjectClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method ModernizeProjectClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(subscriptionID string, resourceGroupName string, options *armmigrationmodernization.ModernizeProjectClientListOptions) (resp azfake.PagerResponder[armmigrationmodernization.ModernizeProjectClientListResponse])

	// NewListBySubscriptionPager is the fake for method ModernizeProjectClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(subscriptionID string, options *armmigrationmodernization.ModernizeProjectClientListBySubscriptionOptions) (resp azfake.PagerResponder[armmigrationmodernization.ModernizeProjectClientListBySubscriptionResponse])

	// BeginUpdate is the fake for method ModernizeProjectClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginUpdate func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, body armmigrationmodernization.UpdateModernizeProjectModel, options *armmigrationmodernization.ModernizeProjectClientBeginUpdateOptions) (resp azfake.PollerResponder[armmigrationmodernization.ModernizeProjectClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewModernizeProjectServerTransport creates a new instance of ModernizeProjectServerTransport with the provided implementation.
// The returned ModernizeProjectServerTransport instance is connected to an instance of armmigrationmodernization.ModernizeProjectClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewModernizeProjectServerTransport(srv *ModernizeProjectServer) *ModernizeProjectServerTransport {
	return &ModernizeProjectServerTransport{
		srv:                        srv,
		beginDelete:                newTracker[azfake.PollerResponder[armmigrationmodernization.ModernizeProjectClientDeleteResponse]](),
		newListPager:               newTracker[azfake.PagerResponder[armmigrationmodernization.ModernizeProjectClientListResponse]](),
		newListBySubscriptionPager: newTracker[azfake.PagerResponder[armmigrationmodernization.ModernizeProjectClientListBySubscriptionResponse]](),
		beginUpdate:                newTracker[azfake.PollerResponder[armmigrationmodernization.ModernizeProjectClientUpdateResponse]](),
	}
}

// ModernizeProjectServerTransport connects instances of armmigrationmodernization.ModernizeProjectClient to instances of ModernizeProjectServer.
// Don't use this type directly, use NewModernizeProjectServerTransport instead.
type ModernizeProjectServerTransport struct {
	srv                        *ModernizeProjectServer
	beginDelete                *tracker[azfake.PollerResponder[armmigrationmodernization.ModernizeProjectClientDeleteResponse]]
	newListPager               *tracker[azfake.PagerResponder[armmigrationmodernization.ModernizeProjectClientListResponse]]
	newListBySubscriptionPager *tracker[azfake.PagerResponder[armmigrationmodernization.ModernizeProjectClientListBySubscriptionResponse]]
	beginUpdate                *tracker[azfake.PollerResponder[armmigrationmodernization.ModernizeProjectClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for ModernizeProjectServerTransport.
func (m *ModernizeProjectServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ModernizeProjectClient.Create":
		resp, err = m.dispatchCreate(req)
	case "ModernizeProjectClient.BeginDelete":
		resp, err = m.dispatchBeginDelete(req)
	case "ModernizeProjectClient.Get":
		resp, err = m.dispatchGet(req)
	case "ModernizeProjectClient.NewListPager":
		resp, err = m.dispatchNewListPager(req)
	case "ModernizeProjectClient.NewListBySubscriptionPager":
		resp, err = m.dispatchNewListBySubscriptionPager(req)
	case "ModernizeProjectClient.BeginUpdate":
		resp, err = m.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (m *ModernizeProjectServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if m.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationmodernization.ModernizeProjectModel](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Create(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ModernizeProjectModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *ModernizeProjectServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if m.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := m.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginDelete(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		m.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		m.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		m.beginDelete.remove(req)
	}

	return resp, nil
}

func (m *ModernizeProjectServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Get(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ModernizeProjectModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *ModernizeProjectServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := m.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *armmigrationmodernization.ModernizeProjectClientListOptions
		if continuationTokenParam != nil {
			options = &armmigrationmodernization.ModernizeProjectClientListOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := m.srv.NewListPager(subscriptionIDParam, resourceGroupNameParam, options)
		newListPager = &resp
		m.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armmigrationmodernization.ModernizeProjectClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		m.newListPager.remove(req)
	}
	return resp, nil
}

func (m *ModernizeProjectServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := m.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *armmigrationmodernization.ModernizeProjectClientListBySubscriptionOptions
		if continuationTokenParam != nil {
			options = &armmigrationmodernization.ModernizeProjectClientListBySubscriptionOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := m.srv.NewListBySubscriptionPager(subscriptionIDParam, options)
		newListBySubscriptionPager = &resp
		m.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armmigrationmodernization.ModernizeProjectClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		m.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (m *ModernizeProjectServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if m.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := m.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrationmodernization.UpdateModernizeProjectModel](req)
		if err != nil {
			return nil, err
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginUpdate(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		m.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		m.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		m.beginUpdate.remove(req)
	}

	return resp, nil
}
