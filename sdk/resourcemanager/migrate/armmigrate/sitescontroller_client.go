// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SitesControllerClient contains the methods for the SitesController group.
// Don't use this type directly, use NewSitesControllerClient() instead.
type SitesControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSitesControllerClient creates a new instance of SitesControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSitesControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SitesControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SitesControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// ComputeErrorSummary - Method to get site error summary.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - SitesControllerClientComputeErrorSummaryOptions contains the optional parameters for the SitesControllerClient.ComputeErrorSummary
//     method.
func (client *SitesControllerClient) ComputeErrorSummary(ctx context.Context, resourceGroupName string, siteName string, body any, options *SitesControllerClientComputeErrorSummaryOptions) (SitesControllerClientComputeErrorSummaryResponse, error) {
	var err error
	const operationName = "SitesControllerClient.ComputeErrorSummary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.computeErrorSummaryCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return SitesControllerClientComputeErrorSummaryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SitesControllerClientComputeErrorSummaryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SitesControllerClientComputeErrorSummaryResponse{}, err
	}
	resp, err := client.computeErrorSummaryHandleResponse(httpResp)
	return resp, err
}

// computeErrorSummaryCreateRequest creates the ComputeErrorSummary request.
func (client *SitesControllerClient) computeErrorSummaryCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body any, _ *SitesControllerClientComputeErrorSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/computeErrorSummary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// computeErrorSummaryHandleResponse handles the ComputeErrorSummary response.
func (client *SitesControllerClient) computeErrorSummaryHandleResponse(resp *http.Response) (SitesControllerClientComputeErrorSummaryResponse, error) {
	result := SitesControllerClientComputeErrorSummaryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SiteErrorSummary); err != nil {
		return SitesControllerClientComputeErrorSummaryResponse{}, err
	}
	return result, nil
}

// Computeusage - Method to get site error summary.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - SitesControllerClientComputeusageOptions contains the optional parameters for the SitesControllerClient.Computeusage
//     method.
func (client *SitesControllerClient) Computeusage(ctx context.Context, resourceGroupName string, siteName string, body any, options *SitesControllerClientComputeusageOptions) (SitesControllerClientComputeusageResponse, error) {
	var err error
	const operationName = "SitesControllerClient.Computeusage"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.computeusageCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return SitesControllerClientComputeusageResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SitesControllerClientComputeusageResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SitesControllerClientComputeusageResponse{}, err
	}
	resp, err := client.computeusageHandleResponse(httpResp)
	return resp, err
}

// computeusageCreateRequest creates the Computeusage request.
func (client *SitesControllerClient) computeusageCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body any, _ *SitesControllerClientComputeusageOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/computeusage"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// computeusageHandleResponse handles the Computeusage response.
func (client *SitesControllerClient) computeusageHandleResponse(resp *http.Response) (SitesControllerClientComputeusageResponse, error) {
	result := SitesControllerClientComputeusageResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VmwareSiteUsage); err != nil {
		return SitesControllerClientComputeusageResponse{}, err
	}
	return result, nil
}

// Create - Create a VmwareSite
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - Resource create parameters.
//   - options - SitesControllerClientCreateOptions contains the optional parameters for the SitesControllerClient.Create method.
func (client *SitesControllerClient) Create(ctx context.Context, resourceGroupName string, siteName string, body VmwareSite, options *SitesControllerClientCreateOptions) (SitesControllerClientCreateResponse, error) {
	var err error
	const operationName = "SitesControllerClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return SitesControllerClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SitesControllerClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SitesControllerClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *SitesControllerClient) createCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body VmwareSite, _ *SitesControllerClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *SitesControllerClient) createHandleResponse(resp *http.Response) (SitesControllerClientCreateResponse, error) {
	result := SitesControllerClientCreateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return SitesControllerClientCreateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.VmwareSite); err != nil {
		return SitesControllerClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a VmwareSite
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - SitesControllerClientDeleteOptions contains the optional parameters for the SitesControllerClient.Delete method.
func (client *SitesControllerClient) Delete(ctx context.Context, resourceGroupName string, siteName string, options *SitesControllerClientDeleteOptions) (SitesControllerClientDeleteResponse, error) {
	var err error
	const operationName = "SitesControllerClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return SitesControllerClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SitesControllerClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SitesControllerClientDeleteResponse{}, err
	}
	return SitesControllerClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SitesControllerClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, _ *SitesControllerClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginExportApplications - Method to generate report containing machine and the deep discovery of the application installed
// in the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - SitesControllerClientBeginExportApplicationsOptions contains the optional parameters for the SitesControllerClient.BeginExportApplications
//     method.
func (client *SitesControllerClient) BeginExportApplications(ctx context.Context, resourceGroupName string, siteName string, body any, options *SitesControllerClientBeginExportApplicationsOptions) (*runtime.Poller[SitesControllerClientExportApplicationsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.exportApplications(ctx, resourceGroupName, siteName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SitesControllerClientExportApplicationsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SitesControllerClientExportApplicationsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// ExportApplications - Method to generate report containing machine and the deep discovery of the application installed in
// the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *SitesControllerClient) exportApplications(ctx context.Context, resourceGroupName string, siteName string, body any, options *SitesControllerClientBeginExportApplicationsOptions) (*http.Response, error) {
	var err error
	const operationName = "SitesControllerClient.BeginExportApplications"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.exportApplicationsCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// exportApplicationsCreateRequest creates the ExportApplications request.
func (client *SitesControllerClient) exportApplicationsCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body any, _ *SitesControllerClientBeginExportApplicationsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/exportApplications"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginExportMachineErrors - Method to generate report containing machine and the errors encountered during guest discovery
// of the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - SitesControllerClientBeginExportMachineErrorsOptions contains the optional parameters for the SitesControllerClient.BeginExportMachineErrors
//     method.
func (client *SitesControllerClient) BeginExportMachineErrors(ctx context.Context, resourceGroupName string, siteName string, body ExportMachineErrorsRequest, options *SitesControllerClientBeginExportMachineErrorsOptions) (*runtime.Poller[SitesControllerClientExportMachineErrorsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.exportMachineErrors(ctx, resourceGroupName, siteName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SitesControllerClientExportMachineErrorsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SitesControllerClientExportMachineErrorsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// ExportMachineErrors - Method to generate report containing machine and the errors encountered during guest discovery of
// the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *SitesControllerClient) exportMachineErrors(ctx context.Context, resourceGroupName string, siteName string, body ExportMachineErrorsRequest, options *SitesControllerClientBeginExportMachineErrorsOptions) (*http.Response, error) {
	var err error
	const operationName = "SitesControllerClient.BeginExportMachineErrors"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.exportMachineErrorsCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// exportMachineErrorsCreateRequest creates the ExportMachineErrors request.
func (client *SitesControllerClient) exportMachineErrorsCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body ExportMachineErrorsRequest, _ *SitesControllerClientBeginExportMachineErrorsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/exportMachineErrors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginExportMachines - Method to generate report containing machine and the deep discovery of the application installed
// in the machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The content of the action request
//   - options - SitesControllerClientBeginExportMachinesOptions contains the optional parameters for the SitesControllerClient.BeginExportMachines
//     method.
func (client *SitesControllerClient) BeginExportMachines(ctx context.Context, resourceGroupName string, siteName string, body ExportMachinesRequest, options *SitesControllerClientBeginExportMachinesOptions) (*runtime.Poller[SitesControllerClientExportMachinesResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.exportMachines(ctx, resourceGroupName, siteName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SitesControllerClientExportMachinesResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SitesControllerClientExportMachinesResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// ExportMachines - Method to generate report containing machine and the deep discovery of the application installed in the
// machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *SitesControllerClient) exportMachines(ctx context.Context, resourceGroupName string, siteName string, body ExportMachinesRequest, options *SitesControllerClientBeginExportMachinesOptions) (*http.Response, error) {
	var err error
	const operationName = "SitesControllerClient.BeginExportMachines"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.exportMachinesCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// exportMachinesCreateRequest creates the ExportMachines request.
func (client *SitesControllerClient) exportMachinesCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body ExportMachinesRequest, _ *SitesControllerClientBeginExportMachinesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/exportMachines"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Get a VmwareSite
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - SitesControllerClientGetOptions contains the optional parameters for the SitesControllerClient.Get method.
func (client *SitesControllerClient) Get(ctx context.Context, resourceGroupName string, siteName string, options *SitesControllerClientGetOptions) (SitesControllerClientGetResponse, error) {
	var err error
	const operationName = "SitesControllerClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return SitesControllerClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SitesControllerClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SitesControllerClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SitesControllerClient) getCreateRequest(ctx context.Context, resourceGroupName string, siteName string, _ *SitesControllerClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SitesControllerClient) getHandleResponse(resp *http.Response) (SitesControllerClientGetResponse, error) {
	result := SitesControllerClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VmwareSite); err != nil {
		return SitesControllerClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Get all the vmware sites in the resource group.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SitesControllerClientListByResourceGroupOptions contains the optional parameters for the SitesControllerClient.NewListByResourceGroupPager
//     method.
func (client *SitesControllerClient) NewListByResourceGroupPager(resourceGroupName string, options *SitesControllerClientListByResourceGroupOptions) *runtime.Pager[SitesControllerClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[SitesControllerClientListByResourceGroupResponse]{
		More: func(page SitesControllerClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SitesControllerClientListByResourceGroupResponse) (SitesControllerClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SitesControllerClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return SitesControllerClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *SitesControllerClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *SitesControllerClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *SitesControllerClient) listByResourceGroupHandleResponse(resp *http.Response) (SitesControllerClientListByResourceGroupResponse, error) {
	result := SitesControllerClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VmwareSiteListResult); err != nil {
		return SitesControllerClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get all the vmware sites in the subscription.
//
// Generated from API version 2024-05-01-preview
//   - options - SitesControllerClientListBySubscriptionOptions contains the optional parameters for the SitesControllerClient.NewListBySubscriptionPager
//     method.
func (client *SitesControllerClient) NewListBySubscriptionPager(options *SitesControllerClientListBySubscriptionOptions) *runtime.Pager[SitesControllerClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[SitesControllerClientListBySubscriptionResponse]{
		More: func(page SitesControllerClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SitesControllerClientListBySubscriptionResponse) (SitesControllerClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SitesControllerClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return SitesControllerClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *SitesControllerClient) listBySubscriptionCreateRequest(ctx context.Context, _ *SitesControllerClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/vmwareSites"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *SitesControllerClient) listBySubscriptionHandleResponse(resp *http.Response) (SitesControllerClientListBySubscriptionResponse, error) {
	result := SitesControllerClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VmwareSiteListResult); err != nil {
		return SitesControllerClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// ListHealthSummary - Method to get site health summary.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - SitesControllerClientListHealthSummaryOptions contains the optional parameters for the SitesControllerClient.ListHealthSummary
//     method.
func (client *SitesControllerClient) ListHealthSummary(ctx context.Context, resourceGroupName string, siteName string, options *SitesControllerClientListHealthSummaryOptions) (SitesControllerClientListHealthSummaryResponse, error) {
	var err error
	const operationName = "SitesControllerClient.ListHealthSummary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listHealthSummaryCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return SitesControllerClientListHealthSummaryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SitesControllerClientListHealthSummaryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SitesControllerClientListHealthSummaryResponse{}, err
	}
	resp, err := client.listHealthSummaryHandleResponse(httpResp)
	return resp, err
}

// listHealthSummaryCreateRequest creates the ListHealthSummary request.
func (client *SitesControllerClient) listHealthSummaryCreateRequest(ctx context.Context, resourceGroupName string, siteName string, _ *SitesControllerClientListHealthSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/listHealthSummary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHealthSummaryHandleResponse handles the ListHealthSummary response.
func (client *SitesControllerClient) listHealthSummaryHandleResponse(resp *http.Response) (SitesControllerClientListHealthSummaryResponse, error) {
	result := SitesControllerClientListHealthSummaryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SiteHealthSummaryCollection); err != nil {
		return SitesControllerClientListHealthSummaryResponse{}, err
	}
	return result, nil
}

// Summary - Method to get site usage/summary.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - options - SitesControllerClientSummaryOptions contains the optional parameters for the SitesControllerClient.Summary method.
func (client *SitesControllerClient) Summary(ctx context.Context, resourceGroupName string, siteName string, options *SitesControllerClientSummaryOptions) (SitesControllerClientSummaryResponse, error) {
	var err error
	const operationName = "SitesControllerClient.Summary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.summaryCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return SitesControllerClientSummaryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SitesControllerClientSummaryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SitesControllerClientSummaryResponse{}, err
	}
	resp, err := client.summaryHandleResponse(httpResp)
	return resp, err
}

// summaryCreateRequest creates the Summary request.
func (client *SitesControllerClient) summaryCreateRequest(ctx context.Context, resourceGroupName string, siteName string, _ *SitesControllerClientSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/summary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// summaryHandleResponse handles the Summary response.
func (client *SitesControllerClient) summaryHandleResponse(resp *http.Response) (SitesControllerClientSummaryResponse, error) {
	result := SitesControllerClientSummaryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VmwareSiteUsage); err != nil {
		return SitesControllerClientSummaryResponse{}, err
	}
	return result, nil
}

// Update - Update a VmwareSite
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - body - The resource properties to be updated.
//   - options - SitesControllerClientUpdateOptions contains the optional parameters for the SitesControllerClient.Update method.
func (client *SitesControllerClient) Update(ctx context.Context, resourceGroupName string, siteName string, body VmwareSiteUpdate, options *SitesControllerClientUpdateOptions) (SitesControllerClientUpdateResponse, error) {
	var err error
	const operationName = "SitesControllerClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, siteName, body, options)
	if err != nil {
		return SitesControllerClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SitesControllerClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SitesControllerClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *SitesControllerClient) updateCreateRequest(ctx context.Context, resourceGroupName string, siteName string, body VmwareSiteUpdate, _ *SitesControllerClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *SitesControllerClient) updateHandleResponse(resp *http.Response) (SitesControllerClientUpdateResponse, error) {
	result := SitesControllerClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VmwareSite); err != nil {
		return SitesControllerClientUpdateResponse{}, err
	}
	return result, nil
}
