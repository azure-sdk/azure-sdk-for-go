//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmosdbmongocluster

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// AzureCosmosDBForMongoDBVCoreClient contains the methods for the AzureCosmosDBForMongoDBVCore group.
// Don't use this type directly, use NewAzureCosmosDBForMongoDBVCoreClient() instead.
type AzureCosmosDBForMongoDBVCoreClient struct {
	internal *arm.Client
}

// NewAzureCosmosDBForMongoDBVCoreClient creates a new instance of AzureCosmosDBForMongoDBVCoreClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureCosmosDBForMongoDBVCoreClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureCosmosDBForMongoDBVCoreClient, error) {
	cl, err := arm.NewClient(moduleName+".AzureCosmosDBForMongoDBVCoreClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureCosmosDBForMongoDBVCoreClient{
		internal: cl,
	}
	return client, nil
}

// NewListOperationsPager - Lists all of the available RP operations.
//
// Generated from API version 2023-10-01-preview
//   - options - AzureCosmosDBForMongoDBVCoreClientListOperationsOptions contains the optional parameters for the AzureCosmosDBForMongoDBVCoreClient.NewListOperationsPager
//     method.
func (client *AzureCosmosDBForMongoDBVCoreClient) NewListOperationsPager(options *AzureCosmosDBForMongoDBVCoreClientListOperationsOptions) *runtime.Pager[AzureCosmosDBForMongoDBVCoreClientListOperationsResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureCosmosDBForMongoDBVCoreClientListOperationsResponse]{
		More: func(page AzureCosmosDBForMongoDBVCoreClientListOperationsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureCosmosDBForMongoDBVCoreClientListOperationsResponse) (AzureCosmosDBForMongoDBVCoreClientListOperationsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listOperationsCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return AzureCosmosDBForMongoDBVCoreClientListOperationsResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return AzureCosmosDBForMongoDBVCoreClientListOperationsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return AzureCosmosDBForMongoDBVCoreClientListOperationsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listOperationsHandleResponse(resp)
		},
	})
}

// listOperationsCreateRequest creates the ListOperations request.
func (client *AzureCosmosDBForMongoDBVCoreClient) listOperationsCreateRequest(ctx context.Context, options *AzureCosmosDBForMongoDBVCoreClientListOperationsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.DocumentDB/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listOperationsHandleResponse handles the ListOperations response.
func (client *AzureCosmosDBForMongoDBVCoreClient) listOperationsHandleResponse(resp *http.Response) (AzureCosmosDBForMongoDBVCoreClientListOperationsResponse, error) {
	result := AzureCosmosDBForMongoDBVCoreClientListOperationsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationListResult); err != nil {
		return AzureCosmosDBForMongoDBVCoreClientListOperationsResponse{}, err
	}
	return result, nil
}
