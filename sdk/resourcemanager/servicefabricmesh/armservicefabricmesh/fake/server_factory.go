// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armservicefabricmesh.ClientFactory type.
type ServerFactory struct {
	// ApplicationServer contains the fakes for client ApplicationClient
	ApplicationServer ApplicationServer

	// CodePackageServer contains the fakes for client CodePackageClient
	CodePackageServer CodePackageServer

	// GatewayServer contains the fakes for client GatewayClient
	GatewayServer GatewayServer

	// NetworkServer contains the fakes for client NetworkClient
	NetworkServer NetworkServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// SecretServer contains the fakes for client SecretClient
	SecretServer SecretServer

	// SecretValueServer contains the fakes for client SecretValueClient
	SecretValueServer SecretValueServer

	// ServiceServer contains the fakes for client ServiceClient
	ServiceServer ServiceServer

	// ServiceReplicaServer contains the fakes for client ServiceReplicaClient
	ServiceReplicaServer ServiceReplicaServer

	// VolumeServer contains the fakes for client VolumeClient
	VolumeServer VolumeServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armservicefabricmesh.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armservicefabricmesh.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                    *ServerFactory
	trMu                   sync.Mutex
	trApplicationServer    *ApplicationServerTransport
	trCodePackageServer    *CodePackageServerTransport
	trGatewayServer        *GatewayServerTransport
	trNetworkServer        *NetworkServerTransport
	trOperationsServer     *OperationsServerTransport
	trSecretServer         *SecretServerTransport
	trSecretValueServer    *SecretValueServerTransport
	trServiceServer        *ServiceServerTransport
	trServiceReplicaServer *ServiceReplicaServerTransport
	trVolumeServer         *VolumeServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "ApplicationClient":
		initServer(s, &s.trApplicationServer, func() *ApplicationServerTransport { return NewApplicationServerTransport(&s.srv.ApplicationServer) })
		resp, err = s.trApplicationServer.Do(req)
	case "CodePackageClient":
		initServer(s, &s.trCodePackageServer, func() *CodePackageServerTransport { return NewCodePackageServerTransport(&s.srv.CodePackageServer) })
		resp, err = s.trCodePackageServer.Do(req)
	case "GatewayClient":
		initServer(s, &s.trGatewayServer, func() *GatewayServerTransport { return NewGatewayServerTransport(&s.srv.GatewayServer) })
		resp, err = s.trGatewayServer.Do(req)
	case "NetworkClient":
		initServer(s, &s.trNetworkServer, func() *NetworkServerTransport { return NewNetworkServerTransport(&s.srv.NetworkServer) })
		resp, err = s.trNetworkServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "SecretClient":
		initServer(s, &s.trSecretServer, func() *SecretServerTransport { return NewSecretServerTransport(&s.srv.SecretServer) })
		resp, err = s.trSecretServer.Do(req)
	case "SecretValueClient":
		initServer(s, &s.trSecretValueServer, func() *SecretValueServerTransport { return NewSecretValueServerTransport(&s.srv.SecretValueServer) })
		resp, err = s.trSecretValueServer.Do(req)
	case "ServiceClient":
		initServer(s, &s.trServiceServer, func() *ServiceServerTransport { return NewServiceServerTransport(&s.srv.ServiceServer) })
		resp, err = s.trServiceServer.Do(req)
	case "ServiceReplicaClient":
		initServer(s, &s.trServiceReplicaServer, func() *ServiceReplicaServerTransport {
			return NewServiceReplicaServerTransport(&s.srv.ServiceReplicaServer)
		})
		resp, err = s.trServiceReplicaServer.Do(req)
	case "VolumeClient":
		initServer(s, &s.trVolumeServer, func() *VolumeServerTransport { return NewVolumeServerTransport(&s.srv.VolumeServer) })
		resp, err = s.trVolumeServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
