// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MongoMIResourcesClient contains the methods for the MongoMIResources group.
// Don't use this type directly, use NewMongoMIResourcesClient() instead.
type MongoMIResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewMongoMIResourcesClient creates a new instance of MongoMIResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewMongoMIResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MongoMIResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &MongoMIResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateUpdateMongoMIRoleAssignment - Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Cosmos DB database account name.
//   - roleAssignmentID - The GUID for the Role Assignment.
//   - createUpdateMongoMIRoleAssignmentParameters - The properties required to create or update a Role Assignment.
//   - options - MongoMIResourcesClientBeginCreateUpdateMongoMIRoleAssignmentOptions contains the optional parameters for the
//     MongoMIResourcesClient.BeginCreateUpdateMongoMIRoleAssignment method.
func (client *MongoMIResourcesClient) BeginCreateUpdateMongoMIRoleAssignment(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, createUpdateMongoMIRoleAssignmentParameters MongoMIRoleAssignmentResource, options *MongoMIResourcesClientBeginCreateUpdateMongoMIRoleAssignmentOptions) (*runtime.Poller[MongoMIResourcesClientCreateUpdateMongoMIRoleAssignmentResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createUpdateMongoMIRoleAssignment(ctx, resourceGroupName, accountName, roleAssignmentID, createUpdateMongoMIRoleAssignmentParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MongoMIResourcesClientCreateUpdateMongoMIRoleAssignmentResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MongoMIResourcesClientCreateUpdateMongoMIRoleAssignmentResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateUpdateMongoMIRoleAssignment - Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *MongoMIResourcesClient) createUpdateMongoMIRoleAssignment(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, createUpdateMongoMIRoleAssignmentParameters MongoMIRoleAssignmentResource, options *MongoMIResourcesClientBeginCreateUpdateMongoMIRoleAssignmentOptions) (*http.Response, error) {
	var err error
	const operationName = "MongoMIResourcesClient.BeginCreateUpdateMongoMIRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createUpdateMongoMIRoleAssignmentCreateRequest(ctx, resourceGroupName, accountName, roleAssignmentID, createUpdateMongoMIRoleAssignmentParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createUpdateMongoMIRoleAssignmentCreateRequest creates the CreateUpdateMongoMIRoleAssignment request.
func (client *MongoMIResourcesClient) createUpdateMongoMIRoleAssignmentCreateRequest(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, createUpdateMongoMIRoleAssignmentParameters MongoMIRoleAssignmentResource, _ *MongoMIResourcesClientBeginCreateUpdateMongoMIRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleAssignments/{roleAssignmentId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if roleAssignmentID == "" {
		return nil, errors.New("parameter roleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleAssignmentId}", url.PathEscape(roleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createUpdateMongoMIRoleAssignmentParameters); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginCreateUpdateMongoMIRoleDefinition - Creates or updates an Azure Cosmos DB MongoMI Role Definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Cosmos DB database account name.
//   - roleDefinitionID - The GUID for the Role Definition.
//   - createUpdateMongoMIRoleDefinitionParameters - The properties required to create or update a Role Definition.
//   - options - MongoMIResourcesClientBeginCreateUpdateMongoMIRoleDefinitionOptions contains the optional parameters for the
//     MongoMIResourcesClient.BeginCreateUpdateMongoMIRoleDefinition method.
func (client *MongoMIResourcesClient) BeginCreateUpdateMongoMIRoleDefinition(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, createUpdateMongoMIRoleDefinitionParameters MongoMIRoleDefinitionResource, options *MongoMIResourcesClientBeginCreateUpdateMongoMIRoleDefinitionOptions) (*runtime.Poller[MongoMIResourcesClientCreateUpdateMongoMIRoleDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createUpdateMongoMIRoleDefinition(ctx, resourceGroupName, accountName, roleDefinitionID, createUpdateMongoMIRoleDefinitionParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MongoMIResourcesClientCreateUpdateMongoMIRoleDefinitionResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MongoMIResourcesClientCreateUpdateMongoMIRoleDefinitionResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateUpdateMongoMIRoleDefinition - Creates or updates an Azure Cosmos DB MongoMI Role Definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *MongoMIResourcesClient) createUpdateMongoMIRoleDefinition(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, createUpdateMongoMIRoleDefinitionParameters MongoMIRoleDefinitionResource, options *MongoMIResourcesClientBeginCreateUpdateMongoMIRoleDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "MongoMIResourcesClient.BeginCreateUpdateMongoMIRoleDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createUpdateMongoMIRoleDefinitionCreateRequest(ctx, resourceGroupName, accountName, roleDefinitionID, createUpdateMongoMIRoleDefinitionParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createUpdateMongoMIRoleDefinitionCreateRequest creates the CreateUpdateMongoMIRoleDefinition request.
func (client *MongoMIResourcesClient) createUpdateMongoMIRoleDefinitionCreateRequest(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, createUpdateMongoMIRoleDefinitionParameters MongoMIRoleDefinitionResource, _ *MongoMIResourcesClientBeginCreateUpdateMongoMIRoleDefinitionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleDefinitions/{roleDefinitionId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if roleDefinitionID == "" {
		return nil, errors.New("parameter roleDefinitionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleDefinitionId}", url.PathEscape(roleDefinitionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createUpdateMongoMIRoleDefinitionParameters); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDeleteMongoMIRoleAssignment - Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Cosmos DB database account name.
//   - roleAssignmentID - The GUID for the Role Assignment.
//   - options - MongoMIResourcesClientBeginDeleteMongoMIRoleAssignmentOptions contains the optional parameters for the MongoMIResourcesClient.BeginDeleteMongoMIRoleAssignment
//     method.
func (client *MongoMIResourcesClient) BeginDeleteMongoMIRoleAssignment(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, options *MongoMIResourcesClientBeginDeleteMongoMIRoleAssignmentOptions) (*runtime.Poller[MongoMIResourcesClientDeleteMongoMIRoleAssignmentResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteMongoMIRoleAssignment(ctx, resourceGroupName, accountName, roleAssignmentID, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MongoMIResourcesClientDeleteMongoMIRoleAssignmentResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MongoMIResourcesClientDeleteMongoMIRoleAssignmentResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DeleteMongoMIRoleAssignment - Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *MongoMIResourcesClient) deleteMongoMIRoleAssignment(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, options *MongoMIResourcesClientBeginDeleteMongoMIRoleAssignmentOptions) (*http.Response, error) {
	var err error
	const operationName = "MongoMIResourcesClient.BeginDeleteMongoMIRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteMongoMIRoleAssignmentCreateRequest(ctx, resourceGroupName, accountName, roleAssignmentID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteMongoMIRoleAssignmentCreateRequest creates the DeleteMongoMIRoleAssignment request.
func (client *MongoMIResourcesClient) deleteMongoMIRoleAssignmentCreateRequest(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, _ *MongoMIResourcesClientBeginDeleteMongoMIRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleAssignments/{roleAssignmentId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if roleAssignmentID == "" {
		return nil, errors.New("parameter roleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleAssignmentId}", url.PathEscape(roleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDeleteMongoMIRoleDefinition - Deletes an existing Azure Cosmos DB MongoMI Role Definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Cosmos DB database account name.
//   - roleDefinitionID - The GUID for the Role Definition.
//   - options - MongoMIResourcesClientBeginDeleteMongoMIRoleDefinitionOptions contains the optional parameters for the MongoMIResourcesClient.BeginDeleteMongoMIRoleDefinition
//     method.
func (client *MongoMIResourcesClient) BeginDeleteMongoMIRoleDefinition(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, options *MongoMIResourcesClientBeginDeleteMongoMIRoleDefinitionOptions) (*runtime.Poller[MongoMIResourcesClientDeleteMongoMIRoleDefinitionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteMongoMIRoleDefinition(ctx, resourceGroupName, accountName, roleDefinitionID, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MongoMIResourcesClientDeleteMongoMIRoleDefinitionResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MongoMIResourcesClientDeleteMongoMIRoleDefinitionResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DeleteMongoMIRoleDefinition - Deletes an existing Azure Cosmos DB MongoMI Role Definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *MongoMIResourcesClient) deleteMongoMIRoleDefinition(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, options *MongoMIResourcesClientBeginDeleteMongoMIRoleDefinitionOptions) (*http.Response, error) {
	var err error
	const operationName = "MongoMIResourcesClient.BeginDeleteMongoMIRoleDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteMongoMIRoleDefinitionCreateRequest(ctx, resourceGroupName, accountName, roleDefinitionID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteMongoMIRoleDefinitionCreateRequest creates the DeleteMongoMIRoleDefinition request.
func (client *MongoMIResourcesClient) deleteMongoMIRoleDefinitionCreateRequest(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, _ *MongoMIResourcesClientBeginDeleteMongoMIRoleDefinitionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleDefinitions/{roleDefinitionId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if roleDefinitionID == "" {
		return nil, errors.New("parameter roleDefinitionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleDefinitionId}", url.PathEscape(roleDefinitionID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetMongoMIRoleAssignment - Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given
// Id.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Cosmos DB database account name.
//   - roleAssignmentID - The GUID for the Role Assignment.
//   - options - MongoMIResourcesClientGetMongoMIRoleAssignmentOptions contains the optional parameters for the MongoMIResourcesClient.GetMongoMIRoleAssignment
//     method.
func (client *MongoMIResourcesClient) GetMongoMIRoleAssignment(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, options *MongoMIResourcesClientGetMongoMIRoleAssignmentOptions) (MongoMIResourcesClientGetMongoMIRoleAssignmentResponse, error) {
	var err error
	const operationName = "MongoMIResourcesClient.GetMongoMIRoleAssignment"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMongoMIRoleAssignmentCreateRequest(ctx, resourceGroupName, accountName, roleAssignmentID, options)
	if err != nil {
		return MongoMIResourcesClientGetMongoMIRoleAssignmentResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MongoMIResourcesClientGetMongoMIRoleAssignmentResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MongoMIResourcesClientGetMongoMIRoleAssignmentResponse{}, err
	}
	resp, err := client.getMongoMIRoleAssignmentHandleResponse(httpResp)
	return resp, err
}

// getMongoMIRoleAssignmentCreateRequest creates the GetMongoMIRoleAssignment request.
func (client *MongoMIResourcesClient) getMongoMIRoleAssignmentCreateRequest(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, _ *MongoMIResourcesClientGetMongoMIRoleAssignmentOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleAssignments/{roleAssignmentId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if roleAssignmentID == "" {
		return nil, errors.New("parameter roleAssignmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleAssignmentId}", url.PathEscape(roleAssignmentID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMongoMIRoleAssignmentHandleResponse handles the GetMongoMIRoleAssignment response.
func (client *MongoMIResourcesClient) getMongoMIRoleAssignmentHandleResponse(resp *http.Response) (MongoMIResourcesClientGetMongoMIRoleAssignmentResponse, error) {
	result := MongoMIResourcesClientGetMongoMIRoleAssignmentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MongoMIRoleAssignmentResource); err != nil {
		return MongoMIResourcesClientGetMongoMIRoleAssignmentResponse{}, err
	}
	return result, nil
}

// GetMongoMIRoleDefinition - Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given
// Id.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Cosmos DB database account name.
//   - roleDefinitionID - The GUID for the Role Definition.
//   - options - MongoMIResourcesClientGetMongoMIRoleDefinitionOptions contains the optional parameters for the MongoMIResourcesClient.GetMongoMIRoleDefinition
//     method.
func (client *MongoMIResourcesClient) GetMongoMIRoleDefinition(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, options *MongoMIResourcesClientGetMongoMIRoleDefinitionOptions) (MongoMIResourcesClientGetMongoMIRoleDefinitionResponse, error) {
	var err error
	const operationName = "MongoMIResourcesClient.GetMongoMIRoleDefinition"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMongoMIRoleDefinitionCreateRequest(ctx, resourceGroupName, accountName, roleDefinitionID, options)
	if err != nil {
		return MongoMIResourcesClientGetMongoMIRoleDefinitionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MongoMIResourcesClientGetMongoMIRoleDefinitionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MongoMIResourcesClientGetMongoMIRoleDefinitionResponse{}, err
	}
	resp, err := client.getMongoMIRoleDefinitionHandleResponse(httpResp)
	return resp, err
}

// getMongoMIRoleDefinitionCreateRequest creates the GetMongoMIRoleDefinition request.
func (client *MongoMIResourcesClient) getMongoMIRoleDefinitionCreateRequest(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, _ *MongoMIResourcesClientGetMongoMIRoleDefinitionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleDefinitions/{roleDefinitionId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if roleDefinitionID == "" {
		return nil, errors.New("parameter roleDefinitionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleDefinitionId}", url.PathEscape(roleDefinitionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMongoMIRoleDefinitionHandleResponse handles the GetMongoMIRoleDefinition response.
func (client *MongoMIResourcesClient) getMongoMIRoleDefinitionHandleResponse(resp *http.Response) (MongoMIResourcesClientGetMongoMIRoleDefinitionResponse, error) {
	result := MongoMIResourcesClientGetMongoMIRoleDefinitionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MongoMIRoleDefinitionResource); err != nil {
		return MongoMIResourcesClientGetMongoMIRoleDefinitionResponse{}, err
	}
	return result, nil
}

// NewListMongoMIRoleAssignmentsPager - Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Cosmos DB database account name.
//   - options - MongoMIResourcesClientListMongoMIRoleAssignmentsOptions contains the optional parameters for the MongoMIResourcesClient.NewListMongoMIRoleAssignmentsPager
//     method.
func (client *MongoMIResourcesClient) NewListMongoMIRoleAssignmentsPager(resourceGroupName string, accountName string, options *MongoMIResourcesClientListMongoMIRoleAssignmentsOptions) *runtime.Pager[MongoMIResourcesClientListMongoMIRoleAssignmentsResponse] {
	return runtime.NewPager(runtime.PagingHandler[MongoMIResourcesClientListMongoMIRoleAssignmentsResponse]{
		More: func(page MongoMIResourcesClientListMongoMIRoleAssignmentsResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *MongoMIResourcesClientListMongoMIRoleAssignmentsResponse) (MongoMIResourcesClientListMongoMIRoleAssignmentsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "MongoMIResourcesClient.NewListMongoMIRoleAssignmentsPager")
			req, err := client.listMongoMIRoleAssignmentsCreateRequest(ctx, resourceGroupName, accountName, options)
			if err != nil {
				return MongoMIResourcesClientListMongoMIRoleAssignmentsResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return MongoMIResourcesClientListMongoMIRoleAssignmentsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MongoMIResourcesClientListMongoMIRoleAssignmentsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listMongoMIRoleAssignmentsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listMongoMIRoleAssignmentsCreateRequest creates the ListMongoMIRoleAssignments request.
func (client *MongoMIResourcesClient) listMongoMIRoleAssignmentsCreateRequest(ctx context.Context, resourceGroupName string, accountName string, _ *MongoMIResourcesClientListMongoMIRoleAssignmentsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleAssignments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listMongoMIRoleAssignmentsHandleResponse handles the ListMongoMIRoleAssignments response.
func (client *MongoMIResourcesClient) listMongoMIRoleAssignmentsHandleResponse(resp *http.Response) (MongoMIResourcesClientListMongoMIRoleAssignmentsResponse, error) {
	result := MongoMIResourcesClientListMongoMIRoleAssignmentsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MongoMIRoleAssignmentListResult); err != nil {
		return MongoMIResourcesClientListMongoMIRoleAssignmentsResponse{}, err
	}
	return result, nil
}

// NewListMongoMIRoleDefinitionsPager - Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Cosmos DB database account name.
//   - options - MongoMIResourcesClientListMongoMIRoleDefinitionsOptions contains the optional parameters for the MongoMIResourcesClient.NewListMongoMIRoleDefinitionsPager
//     method.
func (client *MongoMIResourcesClient) NewListMongoMIRoleDefinitionsPager(resourceGroupName string, accountName string, options *MongoMIResourcesClientListMongoMIRoleDefinitionsOptions) *runtime.Pager[MongoMIResourcesClientListMongoMIRoleDefinitionsResponse] {
	return runtime.NewPager(runtime.PagingHandler[MongoMIResourcesClientListMongoMIRoleDefinitionsResponse]{
		More: func(page MongoMIResourcesClientListMongoMIRoleDefinitionsResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *MongoMIResourcesClientListMongoMIRoleDefinitionsResponse) (MongoMIResourcesClientListMongoMIRoleDefinitionsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "MongoMIResourcesClient.NewListMongoMIRoleDefinitionsPager")
			req, err := client.listMongoMIRoleDefinitionsCreateRequest(ctx, resourceGroupName, accountName, options)
			if err != nil {
				return MongoMIResourcesClientListMongoMIRoleDefinitionsResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return MongoMIResourcesClientListMongoMIRoleDefinitionsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MongoMIResourcesClientListMongoMIRoleDefinitionsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listMongoMIRoleDefinitionsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listMongoMIRoleDefinitionsCreateRequest creates the ListMongoMIRoleDefinitions request.
func (client *MongoMIResourcesClient) listMongoMIRoleDefinitionsCreateRequest(ctx context.Context, resourceGroupName string, accountName string, _ *MongoMIResourcesClientListMongoMIRoleDefinitionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleDefinitions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listMongoMIRoleDefinitionsHandleResponse handles the ListMongoMIRoleDefinitions response.
func (client *MongoMIResourcesClient) listMongoMIRoleDefinitionsHandleResponse(resp *http.Response) (MongoMIResourcesClientListMongoMIRoleDefinitionsResponse, error) {
	result := MongoMIResourcesClientListMongoMIRoleDefinitionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MongoMIRoleDefinitionListResult); err != nil {
		return MongoMIResourcesClientListMongoMIRoleDefinitionsResponse{}, err
	}
	return result, nil
}
