// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armstorageactions

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// StorageTasksOperationGroupClient contains the methods for the StorageTasksOperationGroup group.
// Don't use this type directly, use NewStorageTasksOperationGroupClient() instead.
type StorageTasksOperationGroupClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewStorageTasksOperationGroupClient creates a new instance of StorageTasksOperationGroupClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewStorageTasksOperationGroupClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*StorageTasksOperationGroupClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &StorageTasksOperationGroupClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// PreviewActions - Runs the input conditions against input object metadata properties and designates matched objects in response.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - parameters - The parameters to preview action condition.
//   - options - StorageTasksOperationGroupClientPreviewActionsOptions contains the optional parameters for the StorageTasksOperationGroupClient.PreviewActions
//     method.
func (client *StorageTasksOperationGroupClient) PreviewActions(ctx context.Context, location string, parameters StorageTaskPreviewAction, options *StorageTasksOperationGroupClientPreviewActionsOptions) (StorageTasksOperationGroupClientPreviewActionsResponse, error) {
	var err error
	const operationName = "StorageTasksOperationGroupClient.PreviewActions"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.previewActionsCreateRequest(ctx, location, parameters, options)
	if err != nil {
		return StorageTasksOperationGroupClientPreviewActionsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StorageTasksOperationGroupClientPreviewActionsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StorageTasksOperationGroupClientPreviewActionsResponse{}, err
	}
	resp, err := client.previewActionsHandleResponse(httpResp)
	return resp, err
}

// previewActionsCreateRequest creates the PreviewActions request.
func (client *StorageTasksOperationGroupClient) previewActionsCreateRequest(ctx context.Context, location string, parameters StorageTaskPreviewAction, _ *StorageTasksOperationGroupClientPreviewActionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.StorageActions/locations/{location}/previewActions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// previewActionsHandleResponse handles the PreviewActions response.
func (client *StorageTasksOperationGroupClient) previewActionsHandleResponse(resp *http.Response) (StorageTasksOperationGroupClientPreviewActionsResponse, error) {
	result := StorageTasksOperationGroupClientPreviewActionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StorageTaskPreviewAction); err != nil {
		return StorageTasksOperationGroupClientPreviewActionsResponse{}, err
	}
	return result, nil
}
