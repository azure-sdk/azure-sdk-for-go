//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/terraform/armterraform"
	"net/http"
	"regexp"
)

// AzureTerraformManagementServer is a fake server for instances of the armterraform.AzureTerraformManagementClient type.
type AzureTerraformManagementServer struct {
	// BeginExportTerraform is the fake for method AzureTerraformManagementClient.BeginExportTerraform
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginExportTerraform func(ctx context.Context, exportParameter armterraform.BaseExportModelClassification, options *armterraform.AzureTerraformManagementClientBeginExportTerraformOptions) (resp azfake.PollerResponder[armterraform.AzureTerraformManagementClientExportTerraformResponse], errResp azfake.ErrorResponder)
}

// NewAzureTerraformManagementServerTransport creates a new instance of AzureTerraformManagementServerTransport with the provided implementation.
// The returned AzureTerraformManagementServerTransport instance is connected to an instance of armterraform.AzureTerraformManagementClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAzureTerraformManagementServerTransport(srv *AzureTerraformManagementServer) *AzureTerraformManagementServerTransport {
	return &AzureTerraformManagementServerTransport{
		srv:                  srv,
		beginExportTerraform: newTracker[azfake.PollerResponder[armterraform.AzureTerraformManagementClientExportTerraformResponse]](),
	}
}

// AzureTerraformManagementServerTransport connects instances of armterraform.AzureTerraformManagementClient to instances of AzureTerraformManagementServer.
// Don't use this type directly, use NewAzureTerraformManagementServerTransport instead.
type AzureTerraformManagementServerTransport struct {
	srv                  *AzureTerraformManagementServer
	beginExportTerraform *tracker[azfake.PollerResponder[armterraform.AzureTerraformManagementClientExportTerraformResponse]]
}

// Do implements the policy.Transporter interface for AzureTerraformManagementServerTransport.
func (a *AzureTerraformManagementServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "AzureTerraformManagementClient.BeginExportTerraform":
		resp, err = a.dispatchBeginExportTerraform(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *AzureTerraformManagementServerTransport) dispatchBeginExportTerraform(req *http.Request) (*http.Response, error) {
	if a.srv.BeginExportTerraform == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginExportTerraform not implemented")}
	}
	beginExportTerraform := a.beginExportTerraform.get(req)
	if beginExportTerraform == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureTerraform/exportTerraform`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		raw, err := readRequestBody(req)
		if err != nil {
			return nil, err
		}
		body, err := unmarshalBaseExportModelClassification(raw)
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginExportTerraform(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginExportTerraform = &respr
		a.beginExportTerraform.add(req, beginExportTerraform)
	}

	resp, err := server.PollerResponderNext(beginExportTerraform, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginExportTerraform.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginExportTerraform) {
		a.beginExportTerraform.remove(req)
	}

	return resp, nil
}
