// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azonlineexperimentation

// DesiredDirection - Desired direction for an experiment metric value.
type DesiredDirection string

const (
	// DesiredDirectionDecrease - A decrease to the metric value is desired. E.g., Error rate, Latency.
	DesiredDirectionDecrease DesiredDirection = "Decrease"
	// DesiredDirectionIncrease - An increase to the metric value is desired. E.g., Success rate, Total revenue.
	DesiredDirectionIncrease DesiredDirection = "Increase"
	// DesiredDirectionNeutral - Neither an increase nor a decrease to the metric value is desired, or the desired direction depends
	// on other factors. E.g., Number of video play attempts, Number of user feedbacks
	DesiredDirectionNeutral DesiredDirection = "Neutral"
)

// PossibleDesiredDirectionValues returns the possible values for the DesiredDirection const type.
func PossibleDesiredDirectionValues() []DesiredDirection {
	return []DesiredDirection{
		DesiredDirectionDecrease,
		DesiredDirectionIncrease,
		DesiredDirectionNeutral,
	}
}

// DiagnosticCode - The diagnostic error codes.
type DiagnosticCode string

const (
	// DiagnosticCodeFailedSchemaValidation - The metric definition does not conform to the required schema.
	DiagnosticCodeFailedSchemaValidation DiagnosticCode = "FailedSchemaValidation"
	// DiagnosticCodeInvalidEventCondition - The filter condition is invalid.
	DiagnosticCodeInvalidEventCondition DiagnosticCode = "InvalidEventCondition"
	// DiagnosticCodeInvalidExperimentMetricDefinition - The provided metric definition is invalid.
	// For example, defining a metric to calculate the average of a numeric property but
	// including a filter condition that compares it to a string value creates a type mismatch.
	DiagnosticCodeInvalidExperimentMetricDefinition DiagnosticCode = "InvalidExperimentMetricDefinition"
	// DiagnosticCodeUnsupportedEventCondition - The filter condition is valid but not currently supported.
	DiagnosticCodeUnsupportedEventCondition DiagnosticCode = "UnsupportedEventCondition"
)

// PossibleDiagnosticCodeValues returns the possible values for the DiagnosticCode const type.
func PossibleDiagnosticCodeValues() []DiagnosticCode {
	return []DiagnosticCode{
		DiagnosticCodeFailedSchemaValidation,
		DiagnosticCodeInvalidEventCondition,
		DiagnosticCodeInvalidExperimentMetricDefinition,
		DiagnosticCodeUnsupportedEventCondition,
	}
}

// ExperimentMetricType - How the metric definition calculates metric values from event data.
type ExperimentMetricType string

const (
	// ExperimentMetricTypeAverage - Calculates the average value of a specified event property.
	ExperimentMetricTypeAverage ExperimentMetricType = "Average"
	// ExperimentMetricTypeEventCount - Counts the occurrences of an event. Experiment analysis accounts for unequal traffic allocation.
	ExperimentMetricTypeEventCount ExperimentMetricType = "EventCount"
	// ExperimentMetricTypeEventRate - Calculates the percentage of events that satisfy a specified condition.
	ExperimentMetricTypeEventRate ExperimentMetricType = "EventRate"
	// ExperimentMetricTypePercentile - Calculates a specified percentile of an event property.
	ExperimentMetricTypePercentile ExperimentMetricType = "Percentile"
	// ExperimentMetricTypeSum - Calculates the sum of a specified event property. Experiment analysis accounts for unequal traffic
	// allocation.
	ExperimentMetricTypeSum ExperimentMetricType = "Sum"
	// ExperimentMetricTypeUserCount - Counts the number of unique users who encounter an event. Experiment analysis accounts
	// for unequal traffic allocation.
	ExperimentMetricTypeUserCount ExperimentMetricType = "UserCount"
	// ExperimentMetricTypeUserRate - Calculates the percentage of users who encounter a start event and subsequently encounter
	// an end event. Users must encounter the start event before the end event to be counted.
	ExperimentMetricTypeUserRate ExperimentMetricType = "UserRate"
)

// PossibleExperimentMetricTypeValues returns the possible values for the ExperimentMetricType const type.
func PossibleExperimentMetricTypeValues() []ExperimentMetricType {
	return []ExperimentMetricType{
		ExperimentMetricTypeAverage,
		ExperimentMetricTypeEventCount,
		ExperimentMetricTypeEventRate,
		ExperimentMetricTypePercentile,
		ExperimentMetricTypeSum,
		ExperimentMetricTypeUserCount,
		ExperimentMetricTypeUserRate,
	}
}

// LifecycleStage - Lifecycle stages of an experiment metric, determining whether the metric is included in experiment analysis.
type LifecycleStage string

const (
	// LifecycleStageActive - The metric is included in experiment analysis.
	LifecycleStageActive LifecycleStage = "Active"
	// LifecycleStageInactive - The metric is excluded from experiment analysis but remains available for future use.
	LifecycleStageInactive LifecycleStage = "Inactive"
)

// PossibleLifecycleStageValues returns the possible values for the LifecycleStage const type.
func PossibleLifecycleStageValues() []LifecycleStage {
	return []LifecycleStage{
		LifecycleStageActive,
		LifecycleStageInactive,
	}
}
