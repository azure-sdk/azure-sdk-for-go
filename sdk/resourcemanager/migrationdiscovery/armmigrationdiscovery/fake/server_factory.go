// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armmigrationdiscovery.ClientFactory type.
type ServerFactory struct {
	// DependencyMapControllerServer contains the fakes for client DependencyMapControllerClient
	DependencyMapControllerServer DependencyMapControllerServer

	// HypervClusterControllerServer contains the fakes for client HypervClusterControllerClient
	HypervClusterControllerServer HypervClusterControllerServer

	// HypervDependencyMapControllerServer contains the fakes for client HypervDependencyMapControllerClient
	HypervDependencyMapControllerServer HypervDependencyMapControllerServer

	// HypervHostControllerServer contains the fakes for client HypervHostControllerClient
	HypervHostControllerServer HypervHostControllerServer

	// HypervJobsServer contains the fakes for client HypervJobsClient
	HypervJobsServer HypervJobsServer

	// HypervJobsControllerServer contains the fakes for client HypervJobsControllerClient
	HypervJobsControllerServer HypervJobsControllerServer

	// HypervMachinesControllerServer contains the fakes for client HypervMachinesControllerClient
	HypervMachinesControllerServer HypervMachinesControllerServer

	// HypervOperationsStatusControllerServer contains the fakes for client HypervOperationsStatusControllerClient
	HypervOperationsStatusControllerServer HypervOperationsStatusControllerServer

	// HypervRunAsAccountsControllerServer contains the fakes for client HypervRunAsAccountsControllerClient
	HypervRunAsAccountsControllerServer HypervRunAsAccountsControllerServer

	// HypervSitesServer contains the fakes for client HypervSitesClient
	HypervSitesServer HypervSitesServer

	// HypervSitesControllerServer contains the fakes for client HypervSitesControllerClient
	HypervSitesControllerServer HypervSitesControllerServer

	// HypervSoftwareInventoriesControllerServer contains the fakes for client HypervSoftwareInventoriesControllerClient
	HypervSoftwareInventoriesControllerServer HypervSoftwareInventoriesControllerServer

	// IisWebApplicationsControllerServer contains the fakes for client IisWebApplicationsControllerClient
	IisWebApplicationsControllerServer IisWebApplicationsControllerServer

	// IisWebServersControllerServer contains the fakes for client IisWebServersControllerClient
	IisWebServersControllerServer IisWebServersControllerServer

	// ImportJobsControllerServer contains the fakes for client ImportJobsControllerClient
	ImportJobsControllerServer ImportJobsControllerServer

	// ImportMachinesControllerServer contains the fakes for client ImportMachinesControllerClient
	ImportMachinesControllerServer ImportMachinesControllerServer

	// ImportSitesControllerServer contains the fakes for client ImportSitesControllerClient
	ImportSitesControllerServer ImportSitesControllerServer

	// MachinesControllerServer contains the fakes for client MachinesControllerClient
	MachinesControllerServer MachinesControllerServer

	// MasterSitesControllerServer contains the fakes for client MasterSitesControllerClient
	MasterSitesControllerServer MasterSitesControllerServer

	// MasterSitesOperationsStatusControllerServer contains the fakes for client MasterSitesOperationsStatusControllerClient
	MasterSitesOperationsStatusControllerServer MasterSitesOperationsStatusControllerServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// PrivateEndpointConnectionControllerServer contains the fakes for client PrivateEndpointConnectionControllerClient
	PrivateEndpointConnectionControllerServer PrivateEndpointConnectionControllerServer

	// PrivateLinkResourcesControllerServer contains the fakes for client PrivateLinkResourcesControllerClient
	PrivateLinkResourcesControllerServer PrivateLinkResourcesControllerServer

	// RunAsAccountsControllerServer contains the fakes for client RunAsAccountsControllerClient
	RunAsAccountsControllerServer RunAsAccountsControllerServer

	// SQLAvailabilityGroupsControllerServer contains the fakes for client SQLAvailabilityGroupsControllerClient
	SQLAvailabilityGroupsControllerServer SQLAvailabilityGroupsControllerServer

	// SQLDatabasesControllerServer contains the fakes for client SQLDatabasesControllerClient
	SQLDatabasesControllerServer SQLDatabasesControllerServer

	// SQLDiscoverySiteDataSourceControllerServer contains the fakes for client SQLDiscoverySiteDataSourceControllerClient
	SQLDiscoverySiteDataSourceControllerServer SQLDiscoverySiteDataSourceControllerServer

	// SQLJobsControllerServer contains the fakes for client SQLJobsControllerClient
	SQLJobsControllerServer SQLJobsControllerServer

	// SQLOperationsStatusControllerServer contains the fakes for client SQLOperationsStatusControllerClient
	SQLOperationsStatusControllerServer SQLOperationsStatusControllerServer

	// SQLRunAsAccountsControllerServer contains the fakes for client SQLRunAsAccountsControllerClient
	SQLRunAsAccountsControllerServer SQLRunAsAccountsControllerServer

	// SQLServersControllerServer contains the fakes for client SQLServersControllerClient
	SQLServersControllerServer SQLServersControllerServer

	// SQLSitesControllerServer contains the fakes for client SQLSitesControllerClient
	SQLSitesControllerServer SQLSitesControllerServer

	// ServerDependencyMapControllerServer contains the fakes for client ServerDependencyMapControllerClient
	ServerDependencyMapControllerServer ServerDependencyMapControllerServer

	// ServerJobsControllerServer contains the fakes for client ServerJobsControllerClient
	ServerJobsControllerServer ServerJobsControllerServer

	// ServerOperationsStatusControllerServer contains the fakes for client ServerOperationsStatusControllerClient
	ServerOperationsStatusControllerServer ServerOperationsStatusControllerServer

	// ServerRunAsAccountsControllerServer contains the fakes for client ServerRunAsAccountsControllerClient
	ServerRunAsAccountsControllerServer ServerRunAsAccountsControllerServer

	// ServerSitesControllerServer contains the fakes for client ServerSitesControllerClient
	ServerSitesControllerServer ServerSitesControllerServer

	// ServerSoftwareInventoriesControllerServer contains the fakes for client ServerSoftwareInventoriesControllerClient
	ServerSoftwareInventoriesControllerServer ServerSoftwareInventoriesControllerServer

	// ServersControllerServer contains the fakes for client ServersControllerClient
	ServersControllerServer ServersControllerServer

	// SitesControllerServer contains the fakes for client SitesControllerClient
	SitesControllerServer SitesControllerServer

	// TomcatWebApplicationsControllerServer contains the fakes for client TomcatWebApplicationsControllerClient
	TomcatWebApplicationsControllerServer TomcatWebApplicationsControllerServer

	// TomcatWebServersControllerServer contains the fakes for client TomcatWebServersControllerClient
	TomcatWebServersControllerServer TomcatWebServersControllerServer

	// VcenterControllerServer contains the fakes for client VcenterControllerClient
	VcenterControllerServer VcenterControllerServer

	// VmwareHostControllerServer contains the fakes for client VmwareHostControllerClient
	VmwareHostControllerServer VmwareHostControllerServer

	// VmwareOperationsStatusServer contains the fakes for client VmwareOperationsStatusClient
	VmwareOperationsStatusServer VmwareOperationsStatusServer

	// VmwarePropertiesControllerServer contains the fakes for client VmwarePropertiesControllerClient
	VmwarePropertiesControllerServer VmwarePropertiesControllerServer

	// VmwareSoftwareInventoriesControllerServer contains the fakes for client VmwareSoftwareInventoriesControllerClient
	VmwareSoftwareInventoriesControllerServer VmwareSoftwareInventoriesControllerServer

	// WebAppDiscoverySiteDataSourcesControllerServer contains the fakes for client WebAppDiscoverySiteDataSourcesControllerClient
	WebAppDiscoverySiteDataSourcesControllerServer WebAppDiscoverySiteDataSourcesControllerServer

	// WebAppExtendedMachinesControllerServer contains the fakes for client WebAppExtendedMachinesControllerClient
	WebAppExtendedMachinesControllerServer WebAppExtendedMachinesControllerServer

	// WebAppPropertiesControllerServer contains the fakes for client WebAppPropertiesControllerClient
	WebAppPropertiesControllerServer WebAppPropertiesControllerServer

	// WebAppRunAsAccountsControllerServer contains the fakes for client WebAppRunAsAccountsControllerClient
	WebAppRunAsAccountsControllerServer WebAppRunAsAccountsControllerServer

	// WebAppSitesControllerServer contains the fakes for client WebAppSitesControllerClient
	WebAppSitesControllerServer WebAppSitesControllerServer

	// WebApplicationsControllerServer contains the fakes for client WebApplicationsControllerClient
	WebApplicationsControllerServer WebApplicationsControllerServer

	// WebServersControllerServer contains the fakes for client WebServersControllerClient
	WebServersControllerServer WebServersControllerServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armmigrationdiscovery.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armmigrationdiscovery.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                              *ServerFactory
	trMu                                             sync.Mutex
	trDependencyMapControllerServer                  *DependencyMapControllerServerTransport
	trHypervClusterControllerServer                  *HypervClusterControllerServerTransport
	trHypervDependencyMapControllerServer            *HypervDependencyMapControllerServerTransport
	trHypervHostControllerServer                     *HypervHostControllerServerTransport
	trHypervJobsServer                               *HypervJobsServerTransport
	trHypervJobsControllerServer                     *HypervJobsControllerServerTransport
	trHypervMachinesControllerServer                 *HypervMachinesControllerServerTransport
	trHypervOperationsStatusControllerServer         *HypervOperationsStatusControllerServerTransport
	trHypervRunAsAccountsControllerServer            *HypervRunAsAccountsControllerServerTransport
	trHypervSitesServer                              *HypervSitesServerTransport
	trHypervSitesControllerServer                    *HypervSitesControllerServerTransport
	trHypervSoftwareInventoriesControllerServer      *HypervSoftwareInventoriesControllerServerTransport
	trIisWebApplicationsControllerServer             *IisWebApplicationsControllerServerTransport
	trIisWebServersControllerServer                  *IisWebServersControllerServerTransport
	trImportJobsControllerServer                     *ImportJobsControllerServerTransport
	trImportMachinesControllerServer                 *ImportMachinesControllerServerTransport
	trImportSitesControllerServer                    *ImportSitesControllerServerTransport
	trMachinesControllerServer                       *MachinesControllerServerTransport
	trMasterSitesControllerServer                    *MasterSitesControllerServerTransport
	trMasterSitesOperationsStatusControllerServer    *MasterSitesOperationsStatusControllerServerTransport
	trOperationsServer                               *OperationsServerTransport
	trPrivateEndpointConnectionControllerServer      *PrivateEndpointConnectionControllerServerTransport
	trPrivateLinkResourcesControllerServer           *PrivateLinkResourcesControllerServerTransport
	trRunAsAccountsControllerServer                  *RunAsAccountsControllerServerTransport
	trSQLAvailabilityGroupsControllerServer          *SQLAvailabilityGroupsControllerServerTransport
	trSQLDatabasesControllerServer                   *SQLDatabasesControllerServerTransport
	trSQLDiscoverySiteDataSourceControllerServer     *SQLDiscoverySiteDataSourceControllerServerTransport
	trSQLJobsControllerServer                        *SQLJobsControllerServerTransport
	trSQLOperationsStatusControllerServer            *SQLOperationsStatusControllerServerTransport
	trSQLRunAsAccountsControllerServer               *SQLRunAsAccountsControllerServerTransport
	trSQLServersControllerServer                     *SQLServersControllerServerTransport
	trSQLSitesControllerServer                       *SQLSitesControllerServerTransport
	trServerDependencyMapControllerServer            *ServerDependencyMapControllerServerTransport
	trServerJobsControllerServer                     *ServerJobsControllerServerTransport
	trServerOperationsStatusControllerServer         *ServerOperationsStatusControllerServerTransport
	trServerRunAsAccountsControllerServer            *ServerRunAsAccountsControllerServerTransport
	trServerSitesControllerServer                    *ServerSitesControllerServerTransport
	trServerSoftwareInventoriesControllerServer      *ServerSoftwareInventoriesControllerServerTransport
	trServersControllerServer                        *ServersControllerServerTransport
	trSitesControllerServer                          *SitesControllerServerTransport
	trTomcatWebApplicationsControllerServer          *TomcatWebApplicationsControllerServerTransport
	trTomcatWebServersControllerServer               *TomcatWebServersControllerServerTransport
	trVcenterControllerServer                        *VcenterControllerServerTransport
	trVmwareHostControllerServer                     *VmwareHostControllerServerTransport
	trVmwareOperationsStatusServer                   *VmwareOperationsStatusServerTransport
	trVmwarePropertiesControllerServer               *VmwarePropertiesControllerServerTransport
	trVmwareSoftwareInventoriesControllerServer      *VmwareSoftwareInventoriesControllerServerTransport
	trWebAppDiscoverySiteDataSourcesControllerServer *WebAppDiscoverySiteDataSourcesControllerServerTransport
	trWebAppExtendedMachinesControllerServer         *WebAppExtendedMachinesControllerServerTransport
	trWebAppPropertiesControllerServer               *WebAppPropertiesControllerServerTransport
	trWebAppRunAsAccountsControllerServer            *WebAppRunAsAccountsControllerServerTransport
	trWebAppSitesControllerServer                    *WebAppSitesControllerServerTransport
	trWebApplicationsControllerServer                *WebApplicationsControllerServerTransport
	trWebServersControllerServer                     *WebServersControllerServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "DependencyMapControllerClient":
		initServer(s, &s.trDependencyMapControllerServer, func() *DependencyMapControllerServerTransport {
			return NewDependencyMapControllerServerTransport(&s.srv.DependencyMapControllerServer)
		})
		resp, err = s.trDependencyMapControllerServer.Do(req)
	case "HypervClusterControllerClient":
		initServer(s, &s.trHypervClusterControllerServer, func() *HypervClusterControllerServerTransport {
			return NewHypervClusterControllerServerTransport(&s.srv.HypervClusterControllerServer)
		})
		resp, err = s.trHypervClusterControllerServer.Do(req)
	case "HypervDependencyMapControllerClient":
		initServer(s, &s.trHypervDependencyMapControllerServer, func() *HypervDependencyMapControllerServerTransport {
			return NewHypervDependencyMapControllerServerTransport(&s.srv.HypervDependencyMapControllerServer)
		})
		resp, err = s.trHypervDependencyMapControllerServer.Do(req)
	case "HypervHostControllerClient":
		initServer(s, &s.trHypervHostControllerServer, func() *HypervHostControllerServerTransport {
			return NewHypervHostControllerServerTransport(&s.srv.HypervHostControllerServer)
		})
		resp, err = s.trHypervHostControllerServer.Do(req)
	case "HypervJobsClient":
		initServer(s, &s.trHypervJobsServer, func() *HypervJobsServerTransport { return NewHypervJobsServerTransport(&s.srv.HypervJobsServer) })
		resp, err = s.trHypervJobsServer.Do(req)
	case "HypervJobsControllerClient":
		initServer(s, &s.trHypervJobsControllerServer, func() *HypervJobsControllerServerTransport {
			return NewHypervJobsControllerServerTransport(&s.srv.HypervJobsControllerServer)
		})
		resp, err = s.trHypervJobsControllerServer.Do(req)
	case "HypervMachinesControllerClient":
		initServer(s, &s.trHypervMachinesControllerServer, func() *HypervMachinesControllerServerTransport {
			return NewHypervMachinesControllerServerTransport(&s.srv.HypervMachinesControllerServer)
		})
		resp, err = s.trHypervMachinesControllerServer.Do(req)
	case "HypervOperationsStatusControllerClient":
		initServer(s, &s.trHypervOperationsStatusControllerServer, func() *HypervOperationsStatusControllerServerTransport {
			return NewHypervOperationsStatusControllerServerTransport(&s.srv.HypervOperationsStatusControllerServer)
		})
		resp, err = s.trHypervOperationsStatusControllerServer.Do(req)
	case "HypervRunAsAccountsControllerClient":
		initServer(s, &s.trHypervRunAsAccountsControllerServer, func() *HypervRunAsAccountsControllerServerTransport {
			return NewHypervRunAsAccountsControllerServerTransport(&s.srv.HypervRunAsAccountsControllerServer)
		})
		resp, err = s.trHypervRunAsAccountsControllerServer.Do(req)
	case "HypervSitesClient":
		initServer(s, &s.trHypervSitesServer, func() *HypervSitesServerTransport { return NewHypervSitesServerTransport(&s.srv.HypervSitesServer) })
		resp, err = s.trHypervSitesServer.Do(req)
	case "HypervSitesControllerClient":
		initServer(s, &s.trHypervSitesControllerServer, func() *HypervSitesControllerServerTransport {
			return NewHypervSitesControllerServerTransport(&s.srv.HypervSitesControllerServer)
		})
		resp, err = s.trHypervSitesControllerServer.Do(req)
	case "HypervSoftwareInventoriesControllerClient":
		initServer(s, &s.trHypervSoftwareInventoriesControllerServer, func() *HypervSoftwareInventoriesControllerServerTransport {
			return NewHypervSoftwareInventoriesControllerServerTransport(&s.srv.HypervSoftwareInventoriesControllerServer)
		})
		resp, err = s.trHypervSoftwareInventoriesControllerServer.Do(req)
	case "IisWebApplicationsControllerClient":
		initServer(s, &s.trIisWebApplicationsControllerServer, func() *IisWebApplicationsControllerServerTransport {
			return NewIisWebApplicationsControllerServerTransport(&s.srv.IisWebApplicationsControllerServer)
		})
		resp, err = s.trIisWebApplicationsControllerServer.Do(req)
	case "IisWebServersControllerClient":
		initServer(s, &s.trIisWebServersControllerServer, func() *IisWebServersControllerServerTransport {
			return NewIisWebServersControllerServerTransport(&s.srv.IisWebServersControllerServer)
		})
		resp, err = s.trIisWebServersControllerServer.Do(req)
	case "ImportJobsControllerClient":
		initServer(s, &s.trImportJobsControllerServer, func() *ImportJobsControllerServerTransport {
			return NewImportJobsControllerServerTransport(&s.srv.ImportJobsControllerServer)
		})
		resp, err = s.trImportJobsControllerServer.Do(req)
	case "ImportMachinesControllerClient":
		initServer(s, &s.trImportMachinesControllerServer, func() *ImportMachinesControllerServerTransport {
			return NewImportMachinesControllerServerTransport(&s.srv.ImportMachinesControllerServer)
		})
		resp, err = s.trImportMachinesControllerServer.Do(req)
	case "ImportSitesControllerClient":
		initServer(s, &s.trImportSitesControllerServer, func() *ImportSitesControllerServerTransport {
			return NewImportSitesControllerServerTransport(&s.srv.ImportSitesControllerServer)
		})
		resp, err = s.trImportSitesControllerServer.Do(req)
	case "MachinesControllerClient":
		initServer(s, &s.trMachinesControllerServer, func() *MachinesControllerServerTransport {
			return NewMachinesControllerServerTransport(&s.srv.MachinesControllerServer)
		})
		resp, err = s.trMachinesControllerServer.Do(req)
	case "MasterSitesControllerClient":
		initServer(s, &s.trMasterSitesControllerServer, func() *MasterSitesControllerServerTransport {
			return NewMasterSitesControllerServerTransport(&s.srv.MasterSitesControllerServer)
		})
		resp, err = s.trMasterSitesControllerServer.Do(req)
	case "MasterSitesOperationsStatusControllerClient":
		initServer(s, &s.trMasterSitesOperationsStatusControllerServer, func() *MasterSitesOperationsStatusControllerServerTransport {
			return NewMasterSitesOperationsStatusControllerServerTransport(&s.srv.MasterSitesOperationsStatusControllerServer)
		})
		resp, err = s.trMasterSitesOperationsStatusControllerServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrivateEndpointConnectionControllerClient":
		initServer(s, &s.trPrivateEndpointConnectionControllerServer, func() *PrivateEndpointConnectionControllerServerTransport {
			return NewPrivateEndpointConnectionControllerServerTransport(&s.srv.PrivateEndpointConnectionControllerServer)
		})
		resp, err = s.trPrivateEndpointConnectionControllerServer.Do(req)
	case "PrivateLinkResourcesControllerClient":
		initServer(s, &s.trPrivateLinkResourcesControllerServer, func() *PrivateLinkResourcesControllerServerTransport {
			return NewPrivateLinkResourcesControllerServerTransport(&s.srv.PrivateLinkResourcesControllerServer)
		})
		resp, err = s.trPrivateLinkResourcesControllerServer.Do(req)
	case "RunAsAccountsControllerClient":
		initServer(s, &s.trRunAsAccountsControllerServer, func() *RunAsAccountsControllerServerTransport {
			return NewRunAsAccountsControllerServerTransport(&s.srv.RunAsAccountsControllerServer)
		})
		resp, err = s.trRunAsAccountsControllerServer.Do(req)
	case "SQLAvailabilityGroupsControllerClient":
		initServer(s, &s.trSQLAvailabilityGroupsControllerServer, func() *SQLAvailabilityGroupsControllerServerTransport {
			return NewSQLAvailabilityGroupsControllerServerTransport(&s.srv.SQLAvailabilityGroupsControllerServer)
		})
		resp, err = s.trSQLAvailabilityGroupsControllerServer.Do(req)
	case "SQLDatabasesControllerClient":
		initServer(s, &s.trSQLDatabasesControllerServer, func() *SQLDatabasesControllerServerTransport {
			return NewSQLDatabasesControllerServerTransport(&s.srv.SQLDatabasesControllerServer)
		})
		resp, err = s.trSQLDatabasesControllerServer.Do(req)
	case "SQLDiscoverySiteDataSourceControllerClient":
		initServer(s, &s.trSQLDiscoverySiteDataSourceControllerServer, func() *SQLDiscoverySiteDataSourceControllerServerTransport {
			return NewSQLDiscoverySiteDataSourceControllerServerTransport(&s.srv.SQLDiscoverySiteDataSourceControllerServer)
		})
		resp, err = s.trSQLDiscoverySiteDataSourceControllerServer.Do(req)
	case "SQLJobsControllerClient":
		initServer(s, &s.trSQLJobsControllerServer, func() *SQLJobsControllerServerTransport {
			return NewSQLJobsControllerServerTransport(&s.srv.SQLJobsControllerServer)
		})
		resp, err = s.trSQLJobsControllerServer.Do(req)
	case "SQLOperationsStatusControllerClient":
		initServer(s, &s.trSQLOperationsStatusControllerServer, func() *SQLOperationsStatusControllerServerTransport {
			return NewSQLOperationsStatusControllerServerTransport(&s.srv.SQLOperationsStatusControllerServer)
		})
		resp, err = s.trSQLOperationsStatusControllerServer.Do(req)
	case "SQLRunAsAccountsControllerClient":
		initServer(s, &s.trSQLRunAsAccountsControllerServer, func() *SQLRunAsAccountsControllerServerTransport {
			return NewSQLRunAsAccountsControllerServerTransport(&s.srv.SQLRunAsAccountsControllerServer)
		})
		resp, err = s.trSQLRunAsAccountsControllerServer.Do(req)
	case "SQLServersControllerClient":
		initServer(s, &s.trSQLServersControllerServer, func() *SQLServersControllerServerTransport {
			return NewSQLServersControllerServerTransport(&s.srv.SQLServersControllerServer)
		})
		resp, err = s.trSQLServersControllerServer.Do(req)
	case "SQLSitesControllerClient":
		initServer(s, &s.trSQLSitesControllerServer, func() *SQLSitesControllerServerTransport {
			return NewSQLSitesControllerServerTransport(&s.srv.SQLSitesControllerServer)
		})
		resp, err = s.trSQLSitesControllerServer.Do(req)
	case "ServerDependencyMapControllerClient":
		initServer(s, &s.trServerDependencyMapControllerServer, func() *ServerDependencyMapControllerServerTransport {
			return NewServerDependencyMapControllerServerTransport(&s.srv.ServerDependencyMapControllerServer)
		})
		resp, err = s.trServerDependencyMapControllerServer.Do(req)
	case "ServerJobsControllerClient":
		initServer(s, &s.trServerJobsControllerServer, func() *ServerJobsControllerServerTransport {
			return NewServerJobsControllerServerTransport(&s.srv.ServerJobsControllerServer)
		})
		resp, err = s.trServerJobsControllerServer.Do(req)
	case "ServerOperationsStatusControllerClient":
		initServer(s, &s.trServerOperationsStatusControllerServer, func() *ServerOperationsStatusControllerServerTransport {
			return NewServerOperationsStatusControllerServerTransport(&s.srv.ServerOperationsStatusControllerServer)
		})
		resp, err = s.trServerOperationsStatusControllerServer.Do(req)
	case "ServerRunAsAccountsControllerClient":
		initServer(s, &s.trServerRunAsAccountsControllerServer, func() *ServerRunAsAccountsControllerServerTransport {
			return NewServerRunAsAccountsControllerServerTransport(&s.srv.ServerRunAsAccountsControllerServer)
		})
		resp, err = s.trServerRunAsAccountsControllerServer.Do(req)
	case "ServerSitesControllerClient":
		initServer(s, &s.trServerSitesControllerServer, func() *ServerSitesControllerServerTransport {
			return NewServerSitesControllerServerTransport(&s.srv.ServerSitesControllerServer)
		})
		resp, err = s.trServerSitesControllerServer.Do(req)
	case "ServerSoftwareInventoriesControllerClient":
		initServer(s, &s.trServerSoftwareInventoriesControllerServer, func() *ServerSoftwareInventoriesControllerServerTransport {
			return NewServerSoftwareInventoriesControllerServerTransport(&s.srv.ServerSoftwareInventoriesControllerServer)
		})
		resp, err = s.trServerSoftwareInventoriesControllerServer.Do(req)
	case "ServersControllerClient":
		initServer(s, &s.trServersControllerServer, func() *ServersControllerServerTransport {
			return NewServersControllerServerTransport(&s.srv.ServersControllerServer)
		})
		resp, err = s.trServersControllerServer.Do(req)
	case "SitesControllerClient":
		initServer(s, &s.trSitesControllerServer, func() *SitesControllerServerTransport {
			return NewSitesControllerServerTransport(&s.srv.SitesControllerServer)
		})
		resp, err = s.trSitesControllerServer.Do(req)
	case "TomcatWebApplicationsControllerClient":
		initServer(s, &s.trTomcatWebApplicationsControllerServer, func() *TomcatWebApplicationsControllerServerTransport {
			return NewTomcatWebApplicationsControllerServerTransport(&s.srv.TomcatWebApplicationsControllerServer)
		})
		resp, err = s.trTomcatWebApplicationsControllerServer.Do(req)
	case "TomcatWebServersControllerClient":
		initServer(s, &s.trTomcatWebServersControllerServer, func() *TomcatWebServersControllerServerTransport {
			return NewTomcatWebServersControllerServerTransport(&s.srv.TomcatWebServersControllerServer)
		})
		resp, err = s.trTomcatWebServersControllerServer.Do(req)
	case "VcenterControllerClient":
		initServer(s, &s.trVcenterControllerServer, func() *VcenterControllerServerTransport {
			return NewVcenterControllerServerTransport(&s.srv.VcenterControllerServer)
		})
		resp, err = s.trVcenterControllerServer.Do(req)
	case "VmwareHostControllerClient":
		initServer(s, &s.trVmwareHostControllerServer, func() *VmwareHostControllerServerTransport {
			return NewVmwareHostControllerServerTransport(&s.srv.VmwareHostControllerServer)
		})
		resp, err = s.trVmwareHostControllerServer.Do(req)
	case "VmwareOperationsStatusClient":
		initServer(s, &s.trVmwareOperationsStatusServer, func() *VmwareOperationsStatusServerTransport {
			return NewVmwareOperationsStatusServerTransport(&s.srv.VmwareOperationsStatusServer)
		})
		resp, err = s.trVmwareOperationsStatusServer.Do(req)
	case "VmwarePropertiesControllerClient":
		initServer(s, &s.trVmwarePropertiesControllerServer, func() *VmwarePropertiesControllerServerTransport {
			return NewVmwarePropertiesControllerServerTransport(&s.srv.VmwarePropertiesControllerServer)
		})
		resp, err = s.trVmwarePropertiesControllerServer.Do(req)
	case "VmwareSoftwareInventoriesControllerClient":
		initServer(s, &s.trVmwareSoftwareInventoriesControllerServer, func() *VmwareSoftwareInventoriesControllerServerTransport {
			return NewVmwareSoftwareInventoriesControllerServerTransport(&s.srv.VmwareSoftwareInventoriesControllerServer)
		})
		resp, err = s.trVmwareSoftwareInventoriesControllerServer.Do(req)
	case "WebAppDiscoverySiteDataSourcesControllerClient":
		initServer(s, &s.trWebAppDiscoverySiteDataSourcesControllerServer, func() *WebAppDiscoverySiteDataSourcesControllerServerTransport {
			return NewWebAppDiscoverySiteDataSourcesControllerServerTransport(&s.srv.WebAppDiscoverySiteDataSourcesControllerServer)
		})
		resp, err = s.trWebAppDiscoverySiteDataSourcesControllerServer.Do(req)
	case "WebAppExtendedMachinesControllerClient":
		initServer(s, &s.trWebAppExtendedMachinesControllerServer, func() *WebAppExtendedMachinesControllerServerTransport {
			return NewWebAppExtendedMachinesControllerServerTransport(&s.srv.WebAppExtendedMachinesControllerServer)
		})
		resp, err = s.trWebAppExtendedMachinesControllerServer.Do(req)
	case "WebAppPropertiesControllerClient":
		initServer(s, &s.trWebAppPropertiesControllerServer, func() *WebAppPropertiesControllerServerTransport {
			return NewWebAppPropertiesControllerServerTransport(&s.srv.WebAppPropertiesControllerServer)
		})
		resp, err = s.trWebAppPropertiesControllerServer.Do(req)
	case "WebAppRunAsAccountsControllerClient":
		initServer(s, &s.trWebAppRunAsAccountsControllerServer, func() *WebAppRunAsAccountsControllerServerTransport {
			return NewWebAppRunAsAccountsControllerServerTransport(&s.srv.WebAppRunAsAccountsControllerServer)
		})
		resp, err = s.trWebAppRunAsAccountsControllerServer.Do(req)
	case "WebAppSitesControllerClient":
		initServer(s, &s.trWebAppSitesControllerServer, func() *WebAppSitesControllerServerTransport {
			return NewWebAppSitesControllerServerTransport(&s.srv.WebAppSitesControllerServer)
		})
		resp, err = s.trWebAppSitesControllerServer.Do(req)
	case "WebApplicationsControllerClient":
		initServer(s, &s.trWebApplicationsControllerServer, func() *WebApplicationsControllerServerTransport {
			return NewWebApplicationsControllerServerTransport(&s.srv.WebApplicationsControllerServer)
		})
		resp, err = s.trWebApplicationsControllerServer.Do(req)
	case "WebServersControllerClient":
		initServer(s, &s.trWebServersControllerServer, func() *WebServersControllerServerTransport {
			return NewWebServersControllerServerTransport(&s.srv.WebServersControllerServer)
		})
		resp, err = s.trWebServersControllerServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
