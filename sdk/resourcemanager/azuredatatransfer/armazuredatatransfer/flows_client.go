// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazuredatatransfer

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// FlowsClient contains the methods for the Flows group.
// Don't use this type directly, use NewFlowsClient() instead.
type FlowsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewFlowsClient creates a new instance of FlowsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewFlowsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*FlowsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &FlowsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates the flow resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - flow - Flow body
//   - options - FlowsClientBeginCreateOrUpdateOptions contains the optional parameters for the FlowsClient.BeginCreateOrUpdate
//     method.
func (client *FlowsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow Flow, options *FlowsClientBeginCreateOrUpdateOptions) (*runtime.Poller[FlowsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, connectionName, flowName, flow, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates or updates the flow resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) createOrUpdate(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow Flow, options *FlowsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, connectionName, flowName, flow, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *FlowsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow Flow, _ *FlowsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, flow); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes the flow resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientBeginDeleteOptions contains the optional parameters for the FlowsClient.BeginDelete method.
func (client *FlowsClient) BeginDelete(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientBeginDeleteOptions) (*runtime.Poller[FlowsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, connectionName, flowName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes the flow resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) deleteOperation(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *FlowsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDisable - Disables the specified flow
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientBeginDisableOptions contains the optional parameters for the FlowsClient.BeginDisable method.
func (client *FlowsClient) BeginDisable(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientBeginDisableOptions) (*runtime.Poller[FlowsClientDisableResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.disable(ctx, resourceGroupName, connectionName, flowName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientDisableResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientDisableResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Disable - Disables the specified flow
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) disable(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientBeginDisableOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginDisable"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.disableCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// disableCreateRequest creates the Disable request.
func (client *FlowsClient) disableCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientBeginDisableOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/disable"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginEnable - Enables the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientBeginEnableOptions contains the optional parameters for the FlowsClient.BeginEnable method.
func (client *FlowsClient) BeginEnable(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientBeginEnableOptions) (*runtime.Poller[FlowsClientEnableResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.enable(ctx, resourceGroupName, connectionName, flowName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientEnableResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientEnableResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Enable - Enables the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) enable(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientBeginEnableOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginEnable"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.enableCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// enableCreateRequest creates the Enable request.
func (client *FlowsClient) enableCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientBeginEnableOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/enable"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginGeneratePassphrase - Generate a compliant passphrase for the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientBeginGeneratePassphraseOptions contains the optional parameters for the FlowsClient.BeginGeneratePassphrase
//     method.
func (client *FlowsClient) BeginGeneratePassphrase(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientBeginGeneratePassphraseOptions) (*runtime.Poller[FlowsClientGeneratePassphraseResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.generatePassphrase(ctx, resourceGroupName, connectionName, flowName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientGeneratePassphraseResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientGeneratePassphraseResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// GeneratePassphrase - Generate a compliant passphrase for the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) generatePassphrase(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientBeginGeneratePassphraseOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginGeneratePassphrase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.generatePassphraseCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// generatePassphraseCreateRequest creates the GeneratePassphrase request.
func (client *FlowsClient) generatePassphraseCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientBeginGeneratePassphraseOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/generatePassphrase"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets flow resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientGetOptions contains the optional parameters for the FlowsClient.Get method.
func (client *FlowsClient) Get(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientGetOptions) (FlowsClientGetResponse, error) {
	var err error
	const operationName = "FlowsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return FlowsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FlowsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FlowsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *FlowsClient) getCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *FlowsClient) getHandleResponse(resp *http.Response) (FlowsClientGetResponse, error) {
	result := FlowsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Flow); err != nil {
		return FlowsClientGetResponse{}, err
	}
	return result, nil
}

// GetDestinationEndpointPorts - Get the destination endpoint ports for the specified flow and stream ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientGetDestinationEndpointPortsOptions contains the optional parameters for the FlowsClient.GetDestinationEndpointPorts
//     method.
func (client *FlowsClient) GetDestinationEndpointPorts(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientGetDestinationEndpointPortsOptions) (FlowsClientGetDestinationEndpointPortsResponse, error) {
	var err error
	const operationName = "FlowsClient.GetDestinationEndpointPorts"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDestinationEndpointPortsCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return FlowsClientGetDestinationEndpointPortsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FlowsClientGetDestinationEndpointPortsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FlowsClientGetDestinationEndpointPortsResponse{}, err
	}
	resp, err := client.getDestinationEndpointPortsHandleResponse(httpResp)
	return resp, err
}

// getDestinationEndpointPortsCreateRequest creates the GetDestinationEndpointPorts request.
func (client *FlowsClient) getDestinationEndpointPortsCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientGetDestinationEndpointPortsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getDestinationEndpointPorts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDestinationEndpointPortsHandleResponse handles the GetDestinationEndpointPorts response.
func (client *FlowsClient) getDestinationEndpointPortsHandleResponse(resp *http.Response) (FlowsClientGetDestinationEndpointPortsResponse, error) {
	result := FlowsClientGetDestinationEndpointPortsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetDestinationEndpointPortsResult); err != nil {
		return FlowsClientGetDestinationEndpointPortsResponse{}, err
	}
	return result, nil
}

// GetDestinationEndpoints - Get the destination endpoints for the specified flow and stream ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientGetDestinationEndpointsOptions contains the optional parameters for the FlowsClient.GetDestinationEndpoints
//     method.
func (client *FlowsClient) GetDestinationEndpoints(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientGetDestinationEndpointsOptions) (FlowsClientGetDestinationEndpointsResponse, error) {
	var err error
	const operationName = "FlowsClient.GetDestinationEndpoints"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDestinationEndpointsCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return FlowsClientGetDestinationEndpointsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FlowsClientGetDestinationEndpointsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FlowsClientGetDestinationEndpointsResponse{}, err
	}
	resp, err := client.getDestinationEndpointsHandleResponse(httpResp)
	return resp, err
}

// getDestinationEndpointsCreateRequest creates the GetDestinationEndpoints request.
func (client *FlowsClient) getDestinationEndpointsCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientGetDestinationEndpointsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getDestinationEndpoints"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDestinationEndpointsHandleResponse handles the GetDestinationEndpoints response.
func (client *FlowsClient) getDestinationEndpointsHandleResponse(resp *http.Response) (FlowsClientGetDestinationEndpointsResponse, error) {
	result := FlowsClientGetDestinationEndpointsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetDestinationEndpointsResult); err != nil {
		return FlowsClientGetDestinationEndpointsResponse{}, err
	}
	return result, nil
}

// GetSourceAddresses - Get the source addresses for the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientGetSourceAddressesOptions contains the optional parameters for the FlowsClient.GetSourceAddresses
//     method.
func (client *FlowsClient) GetSourceAddresses(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientGetSourceAddressesOptions) (FlowsClientGetSourceAddressesResponse, error) {
	var err error
	const operationName = "FlowsClient.GetSourceAddresses"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSourceAddressesCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return FlowsClientGetSourceAddressesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FlowsClientGetSourceAddressesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FlowsClientGetSourceAddressesResponse{}, err
	}
	resp, err := client.getSourceAddressesHandleResponse(httpResp)
	return resp, err
}

// getSourceAddressesCreateRequest creates the GetSourceAddresses request.
func (client *FlowsClient) getSourceAddressesCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientGetSourceAddressesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getSourceAddresses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSourceAddressesHandleResponse handles the GetSourceAddresses response.
func (client *FlowsClient) getSourceAddressesHandleResponse(resp *http.Response) (FlowsClientGetSourceAddressesResponse, error) {
	result := FlowsClientGetSourceAddressesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StreamSourceAddresses); err != nil {
		return FlowsClientGetSourceAddressesResponse{}, err
	}
	return result, nil
}

// GetStreamConnectionString - Get the connection string for the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - options - FlowsClientGetStreamConnectionStringOptions contains the optional parameters for the FlowsClient.GetStreamConnectionString
//     method.
func (client *FlowsClient) GetStreamConnectionString(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *FlowsClientGetStreamConnectionStringOptions) (FlowsClientGetStreamConnectionStringResponse, error) {
	var err error
	const operationName = "FlowsClient.GetStreamConnectionString"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getStreamConnectionStringCreateRequest(ctx, resourceGroupName, connectionName, flowName, options)
	if err != nil {
		return FlowsClientGetStreamConnectionStringResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FlowsClientGetStreamConnectionStringResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FlowsClientGetStreamConnectionStringResponse{}, err
	}
	resp, err := client.getStreamConnectionStringHandleResponse(httpResp)
	return resp, err
}

// getStreamConnectionStringCreateRequest creates the GetStreamConnectionString request.
func (client *FlowsClient) getStreamConnectionStringCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, _ *FlowsClientGetStreamConnectionStringOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getStreamConnectionString"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getStreamConnectionStringHandleResponse handles the GetStreamConnectionString response.
func (client *FlowsClient) getStreamConnectionStringHandleResponse(resp *http.Response) (FlowsClientGetStreamConnectionStringResponse, error) {
	result := FlowsClientGetStreamConnectionStringResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetStreamConnectionStringResult); err != nil {
		return FlowsClientGetStreamConnectionStringResponse{}, err
	}
	return result, nil
}

// BeginLink - Links the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - flow - Flow body
//   - options - FlowsClientBeginLinkOptions contains the optional parameters for the FlowsClient.BeginLink method.
func (client *FlowsClient) BeginLink(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow ResourceBody, options *FlowsClientBeginLinkOptions) (*runtime.Poller[FlowsClientLinkResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.link(ctx, resourceGroupName, connectionName, flowName, flow, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientLinkResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientLinkResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Link - Links the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) link(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow ResourceBody, options *FlowsClientBeginLinkOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginLink"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.linkCreateRequest(ctx, resourceGroupName, connectionName, flowName, flow, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// linkCreateRequest creates the Link request.
func (client *FlowsClient) linkCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow ResourceBody, _ *FlowsClientBeginLinkOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/link"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, flow); err != nil {
		return nil, err
	}
	return req, nil
}

// NewListByConnectionPager - Gets flows in a connection.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - options - FlowsClientListByConnectionOptions contains the optional parameters for the FlowsClient.NewListByConnectionPager
//     method.
func (client *FlowsClient) NewListByConnectionPager(resourceGroupName string, connectionName string, options *FlowsClientListByConnectionOptions) *runtime.Pager[FlowsClientListByConnectionResponse] {
	return runtime.NewPager(runtime.PagingHandler[FlowsClientListByConnectionResponse]{
		More: func(page FlowsClientListByConnectionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *FlowsClientListByConnectionResponse) (FlowsClientListByConnectionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "FlowsClient.NewListByConnectionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByConnectionCreateRequest(ctx, resourceGroupName, connectionName, options)
			}, nil)
			if err != nil {
				return FlowsClientListByConnectionResponse{}, err
			}
			return client.listByConnectionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByConnectionCreateRequest creates the ListByConnection request.
func (client *FlowsClient) listByConnectionCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, _ *FlowsClientListByConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByConnectionHandleResponse handles the ListByConnection response.
func (client *FlowsClient) listByConnectionHandleResponse(resp *http.Response) (FlowsClientListByConnectionResponse, error) {
	result := FlowsClientListByConnectionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FlowsListResult); err != nil {
		return FlowsClientListByConnectionResponse{}, err
	}
	return result, nil
}

// BeginSetDestinationEndpointPorts - Set the destination endpoint ports for the specified flow and stream ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - streamDestinationEndpointPorts - Stream ID destination endpoint ports wanted
//   - options - FlowsClientBeginSetDestinationEndpointPortsOptions contains the optional parameters for the FlowsClient.BeginSetDestinationEndpointPorts
//     method.
func (client *FlowsClient) BeginSetDestinationEndpointPorts(ctx context.Context, resourceGroupName string, connectionName string, flowName string, streamDestinationEndpointPorts SetDestinationEndpointPorts, options *FlowsClientBeginSetDestinationEndpointPortsOptions) (*runtime.Poller[FlowsClientSetDestinationEndpointPortsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.setDestinationEndpointPorts(ctx, resourceGroupName, connectionName, flowName, streamDestinationEndpointPorts, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientSetDestinationEndpointPortsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientSetDestinationEndpointPortsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// SetDestinationEndpointPorts - Set the destination endpoint ports for the specified flow and stream ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) setDestinationEndpointPorts(ctx context.Context, resourceGroupName string, connectionName string, flowName string, streamDestinationEndpointPorts SetDestinationEndpointPorts, options *FlowsClientBeginSetDestinationEndpointPortsOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginSetDestinationEndpointPorts"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.setDestinationEndpointPortsCreateRequest(ctx, resourceGroupName, connectionName, flowName, streamDestinationEndpointPorts, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// setDestinationEndpointPortsCreateRequest creates the SetDestinationEndpointPorts request.
func (client *FlowsClient) setDestinationEndpointPortsCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, streamDestinationEndpointPorts SetDestinationEndpointPorts, _ *FlowsClientBeginSetDestinationEndpointPortsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setDestinationEndpointPorts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, streamDestinationEndpointPorts); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginSetDestinationEndpoints - Set the destination endpoints for the specified flow and stream ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - streamDestinationEndpoints - Stream ID destination endpoints wanted
//   - options - FlowsClientBeginSetDestinationEndpointsOptions contains the optional parameters for the FlowsClient.BeginSetDestinationEndpoints
//     method.
func (client *FlowsClient) BeginSetDestinationEndpoints(ctx context.Context, resourceGroupName string, connectionName string, flowName string, streamDestinationEndpoints SetDestinationEndpoints, options *FlowsClientBeginSetDestinationEndpointsOptions) (*runtime.Poller[FlowsClientSetDestinationEndpointsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.setDestinationEndpoints(ctx, resourceGroupName, connectionName, flowName, streamDestinationEndpoints, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientSetDestinationEndpointsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientSetDestinationEndpointsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// SetDestinationEndpoints - Set the destination endpoints for the specified flow and stream ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) setDestinationEndpoints(ctx context.Context, resourceGroupName string, connectionName string, flowName string, streamDestinationEndpoints SetDestinationEndpoints, options *FlowsClientBeginSetDestinationEndpointsOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginSetDestinationEndpoints"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.setDestinationEndpointsCreateRequest(ctx, resourceGroupName, connectionName, flowName, streamDestinationEndpoints, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// setDestinationEndpointsCreateRequest creates the SetDestinationEndpoints request.
func (client *FlowsClient) setDestinationEndpointsCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, streamDestinationEndpoints SetDestinationEndpoints, _ *FlowsClientBeginSetDestinationEndpointsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setDestinationEndpoints"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, streamDestinationEndpoints); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginSetPassphrase - Sets the passphrase of the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - passphrase - Passphrase to set
//   - options - FlowsClientBeginSetPassphraseOptions contains the optional parameters for the FlowsClient.BeginSetPassphrase
//     method.
func (client *FlowsClient) BeginSetPassphrase(ctx context.Context, resourceGroupName string, connectionName string, flowName string, passphrase SetStreamPassphrase, options *FlowsClientBeginSetPassphraseOptions) (*runtime.Poller[FlowsClientSetPassphraseResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.setPassphrase(ctx, resourceGroupName, connectionName, flowName, passphrase, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientSetPassphraseResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientSetPassphraseResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// SetPassphrase - Sets the passphrase of the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) setPassphrase(ctx context.Context, resourceGroupName string, connectionName string, flowName string, passphrase SetStreamPassphrase, options *FlowsClientBeginSetPassphraseOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginSetPassphrase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.setPassphraseCreateRequest(ctx, resourceGroupName, connectionName, flowName, passphrase, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// setPassphraseCreateRequest creates the SetPassphrase request.
func (client *FlowsClient) setPassphraseCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, passphrase SetStreamPassphrase, _ *FlowsClientBeginSetPassphraseOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setPassphrase"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, passphrase); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginSetSourceAddresses - Set the source addresses for the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - sourceAddresses - Source addresses wanted
//   - options - FlowsClientBeginSetSourceAddressesOptions contains the optional parameters for the FlowsClient.BeginSetSourceAddresses
//     method.
func (client *FlowsClient) BeginSetSourceAddresses(ctx context.Context, resourceGroupName string, connectionName string, flowName string, sourceAddresses SetSourceAddresses, options *FlowsClientBeginSetSourceAddressesOptions) (*runtime.Poller[FlowsClientSetSourceAddressesResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.setSourceAddresses(ctx, resourceGroupName, connectionName, flowName, sourceAddresses, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientSetSourceAddressesResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientSetSourceAddressesResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// SetSourceAddresses - Set the source addresses for the specified flow.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) setSourceAddresses(ctx context.Context, resourceGroupName string, connectionName string, flowName string, sourceAddresses SetSourceAddresses, options *FlowsClientBeginSetSourceAddressesOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginSetSourceAddresses"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.setSourceAddressesCreateRequest(ctx, resourceGroupName, connectionName, flowName, sourceAddresses, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// setSourceAddressesCreateRequest creates the SetSourceAddresses request.
func (client *FlowsClient) setSourceAddressesCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, sourceAddresses SetSourceAddresses, _ *FlowsClientBeginSetSourceAddressesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setSourceAddresses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, sourceAddresses); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdate - Updates the flow resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectionName - The name for the connection that is to be requested.
//   - flowName - The name for the flow that is to be onboarded.
//   - flow - Flow body
//   - options - FlowsClientBeginUpdateOptions contains the optional parameters for the FlowsClient.BeginUpdate method.
func (client *FlowsClient) BeginUpdate(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow FlowsPatch, options *FlowsClientBeginUpdateOptions) (*runtime.Poller[FlowsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, connectionName, flowName, flow, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FlowsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FlowsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Updates the flow resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-04-11-preview
func (client *FlowsClient) update(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow FlowsPatch, options *FlowsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "FlowsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, connectionName, flowName, flow, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *FlowsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow FlowsPatch, _ *FlowsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectionName == "" {
		return nil, errors.New("parameter connectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	if flowName == "" {
		return nil, errors.New("parameter flowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{flowName}", url.PathEscape(flowName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, flow); err != nil {
		return nil, err
	}
	return req, nil
}
