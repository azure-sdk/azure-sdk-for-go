// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armbotservice.ClientFactory type.
type ServerFactory struct {
	// BotChannelsServer contains the fakes for client BotChannelsClient
	BotChannelsServer BotChannelsServer

	// BotConnectionOperationGroupServer contains the fakes for client BotConnectionOperationGroupClient
	BotConnectionOperationGroupServer BotConnectionOperationGroupServer

	// BotsServer contains the fakes for client BotsClient
	BotsServer BotsServer

	// BotsOperationGroupServer contains the fakes for client BotsOperationGroupClient
	BotsOperationGroupServer BotsOperationGroupServer

	// ConnectionSettingsServer contains the fakes for client ConnectionSettingsClient
	ConnectionSettingsServer ConnectionSettingsServer

	// HostSettingsOperationGroupServer contains the fakes for client HostSettingsOperationGroupClient
	HostSettingsOperationGroupServer HostSettingsOperationGroupServer

	// NetworkSecurityPerimeterConfigurationsServer contains the fakes for client NetworkSecurityPerimeterConfigurationsClient
	NetworkSecurityPerimeterConfigurationsServer NetworkSecurityPerimeterConfigurationsServer

	// OperationResultsOperationGroupServer contains the fakes for client OperationResultsOperationGroupClient
	OperationResultsOperationGroupServer OperationResultsOperationGroupServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// PrivateEndpointConnectionsServer contains the fakes for client PrivateEndpointConnectionsClient
	PrivateEndpointConnectionsServer PrivateEndpointConnectionsServer

	// QnAMakerEndpointKeysOperationGroupServer contains the fakes for client QnAMakerEndpointKeysOperationGroupClient
	QnAMakerEndpointKeysOperationGroupServer QnAMakerEndpointKeysOperationGroupServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armbotservice.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armbotservice.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                            *ServerFactory
	trMu                                           sync.Mutex
	trBotChannelsServer                            *BotChannelsServerTransport
	trBotConnectionOperationGroupServer            *BotConnectionOperationGroupServerTransport
	trBotsServer                                   *BotsServerTransport
	trBotsOperationGroupServer                     *BotsOperationGroupServerTransport
	trConnectionSettingsServer                     *ConnectionSettingsServerTransport
	trHostSettingsOperationGroupServer             *HostSettingsOperationGroupServerTransport
	trNetworkSecurityPerimeterConfigurationsServer *NetworkSecurityPerimeterConfigurationsServerTransport
	trOperationResultsOperationGroupServer         *OperationResultsOperationGroupServerTransport
	trOperationsServer                             *OperationsServerTransport
	trPrivateEndpointConnectionsServer             *PrivateEndpointConnectionsServerTransport
	trQnAMakerEndpointKeysOperationGroupServer     *QnAMakerEndpointKeysOperationGroupServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "BotChannelsClient":
		initServer(s, &s.trBotChannelsServer, func() *BotChannelsServerTransport { return NewBotChannelsServerTransport(&s.srv.BotChannelsServer) })
		resp, err = s.trBotChannelsServer.Do(req)
	case "BotConnectionOperationGroupClient":
		initServer(s, &s.trBotConnectionOperationGroupServer, func() *BotConnectionOperationGroupServerTransport {
			return NewBotConnectionOperationGroupServerTransport(&s.srv.BotConnectionOperationGroupServer)
		})
		resp, err = s.trBotConnectionOperationGroupServer.Do(req)
	case "BotsClient":
		initServer(s, &s.trBotsServer, func() *BotsServerTransport { return NewBotsServerTransport(&s.srv.BotsServer) })
		resp, err = s.trBotsServer.Do(req)
	case "BotsOperationGroupClient":
		initServer(s, &s.trBotsOperationGroupServer, func() *BotsOperationGroupServerTransport {
			return NewBotsOperationGroupServerTransport(&s.srv.BotsOperationGroupServer)
		})
		resp, err = s.trBotsOperationGroupServer.Do(req)
	case "ConnectionSettingsClient":
		initServer(s, &s.trConnectionSettingsServer, func() *ConnectionSettingsServerTransport {
			return NewConnectionSettingsServerTransport(&s.srv.ConnectionSettingsServer)
		})
		resp, err = s.trConnectionSettingsServer.Do(req)
	case "HostSettingsOperationGroupClient":
		initServer(s, &s.trHostSettingsOperationGroupServer, func() *HostSettingsOperationGroupServerTransport {
			return NewHostSettingsOperationGroupServerTransport(&s.srv.HostSettingsOperationGroupServer)
		})
		resp, err = s.trHostSettingsOperationGroupServer.Do(req)
	case "NetworkSecurityPerimeterConfigurationsClient":
		initServer(s, &s.trNetworkSecurityPerimeterConfigurationsServer, func() *NetworkSecurityPerimeterConfigurationsServerTransport {
			return NewNetworkSecurityPerimeterConfigurationsServerTransport(&s.srv.NetworkSecurityPerimeterConfigurationsServer)
		})
		resp, err = s.trNetworkSecurityPerimeterConfigurationsServer.Do(req)
	case "OperationResultsOperationGroupClient":
		initServer(s, &s.trOperationResultsOperationGroupServer, func() *OperationResultsOperationGroupServerTransport {
			return NewOperationResultsOperationGroupServerTransport(&s.srv.OperationResultsOperationGroupServer)
		})
		resp, err = s.trOperationResultsOperationGroupServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrivateEndpointConnectionsClient":
		initServer(s, &s.trPrivateEndpointConnectionsServer, func() *PrivateEndpointConnectionsServerTransport {
			return NewPrivateEndpointConnectionsServerTransport(&s.srv.PrivateEndpointConnectionsServer)
		})
		resp, err = s.trPrivateEndpointConnectionsServer.Do(req)
	case "QnAMakerEndpointKeysOperationGroupClient":
		initServer(s, &s.trQnAMakerEndpointKeysOperationGroupServer, func() *QnAMakerEndpointKeysOperationGroupServerTransport {
			return NewQnAMakerEndpointKeysOperationGroupServerTransport(&s.srv.QnAMakerEndpointKeysOperationGroupServer)
		})
		resp, err = s.trQnAMakerEndpointKeysOperationGroupServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
