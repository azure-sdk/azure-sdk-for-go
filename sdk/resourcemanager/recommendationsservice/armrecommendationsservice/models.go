// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecommendationsservice

import "time"

// AccountPatchResource - Account resource patch details.
type AccountPatchResource struct {
	// The identity used for the resource.
	Identity *ManagedServiceIdentity

	// Account resource patch properties.
	Properties *AccountPatchResourceProperties

	// Resource tags.
	Tags map[string]*string
}

// AccountPatchResourceProperties - Account resource patch properties.
type AccountPatchResourceProperties struct {
	// The list of CORS details.
	Cors []*CorsRule

	// The list of service endpoints authentication details.
	EndpointAuthentications []*EndpointAuthentication

	// Connection string to write Accounts reports to.
	ReportsConnectionString *string
}

// AccountResource - Account resource details.
type AccountResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The identity used for the resource.
	Identity *ManagedServiceIdentity

	// Account resource properties.
	Properties *AccountResourceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AccountResourceList - The list of RecommendationsService Account resources.
type AccountResourceList struct {
	// The link used to get the next page of RecommendationsService Account resources list.
	NextLink *string

	// The list of RecommendationsService Account resources.
	Value []*AccountResource
}

// AccountResourceProperties - Account resource properties.
type AccountResourceProperties struct {
	// Account configuration. This can only be set at RecommendationsService Account creation.
	Configuration *AccountConfiguration

	// The list of CORS details.
	Cors []*CorsRule

	// The list of service endpoints authentication details.
	EndpointAuthentications []*EndpointAuthentication

	// Connection string to write Accounts reports to.
	ReportsConnectionString *string

	// READ-ONLY; The resource provisioning state.
	ProvisioningState *string
}

// AccountStatus - Account status.
type AccountStatus struct {
	// The list of scopes statuses.
	ScopesStatuses []*ScopeStatuses
}

// CheckNameAvailabilityRequest - The check availability request body.
type CheckNameAvailabilityRequest struct {
	// The name of the resource for which availability needs to be checked.
	Name *string

	// The resource type.
	Type *string
}

// CheckNameAvailabilityResponse - The check availability result.
type CheckNameAvailabilityResponse struct {
	// Detailed reason why the given name is available.
	Message *string

	// Indicates if the resource name is available.
	NameAvailable *bool

	// The reason why the given name is not available.
	Reason *CheckNameAvailabilityReason
}

// CorsRule - CORS details.
type CorsRule struct {
	// REQUIRED; The origin domains that are permitted to make a request against the service via CORS.
	AllowedOrigins []*string

	// The request headers that the origin domain may specify on the CORS request.
	AllowedHeaders []*string

	// The methods (HTTP request verbs) that the origin domain may use for a CORS request.
	AllowedMethods []*string

	// The response headers to expose to CORS clients.
	ExposedHeaders []*string

	// The number of seconds that the client/browser should cache a preflight response.
	MaxAgeInSeconds *int32
}

// EndpointAuthentication - Service endpoints authentication details.
type EndpointAuthentication struct {
	// AAD tenant ID.
	AADTenantID *string

	// AAD principal ID.
	PrincipalID *string

	// AAD principal type.
	PrincipalType *PrincipalType
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType

	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
	// resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	// The dictionary values can be empty objects ({}) in
	// requests.
	UserAssignedIdentities map[string]*UserAssignedIdentity

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

// ModelingInputData - The configuration to raw CDM data to be used as Modeling resource input.
type ModelingInputData struct {
	// Connection string to raw input data.
	ConnectionString *string
}

// ModelingPatchResource - Modeling resource patch details.
type ModelingPatchResource struct {
	// Modeling resource properties to update.
	Properties *ModelingPatchResourceProperties

	// Resource tags.
	Tags map[string]*string
}

// ModelingPatchResourceProperties - Modeling resource properties to update.
type ModelingPatchResourceProperties struct {
	// The configuration to raw CDM data to be used as Modeling resource input.
	InputData *ModelingInputData
}

// ModelingResource - Modeling resource details.
type ModelingResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Modeling resource properties.
	Properties *ModelingResourceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ModelingResourceList - The list of Modeling resources.
type ModelingResourceList struct {
	// The link used to get the next page of Modeling resources list.
	NextLink *string

	// The list of Modeling resources.
	Value []*ModelingResource
}

// ModelingResourceProperties - Modeling resource properties.
type ModelingResourceProperties struct {
	// Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling creation.
	Features *ModelingFeatures

	// Modeling frequency controls the modeling compute frequency.
	Frequency *ModelingFrequency

	// The configuration to raw CDM data to be used as Modeling resource input.
	InputData *ModelingInputData

	// Modeling size controls the maximum supported input data size.
	Size *ModelingSize

	// READ-ONLY; The resource provisioning state.
	ProvisioningState *string
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// OperationStatusResult - The current status of an async operation.
type OperationStatusResult struct {
	// REQUIRED; Operation status.
	Status *string

	// The end time of the operation.
	EndTime *time.Time

	// If present, details of the operation error.
	Error *ErrorDetail

	// Fully qualified ID for the async operation.
	ID *string

	// Name of the async operation.
	Name *string

	// The operations list.
	Operations []*OperationStatusResult

	// Percent of the operation that is complete.
	PercentComplete *float32

	// The start time of the operation.
	StartTime *time.Time
}

// ScopeStatuses - Scope statuses.
type ScopeStatuses struct {
	// The scope that the statuses refers to.
	Scope *string

	// Scope stage statuses.
	Statuses []*StageStatus
}

// ServiceEndpointPatchResource - ServiceEndpoint resource patch details.
type ServiceEndpointPatchResource struct {
	// Resource tags.
	Tags map[string]*string
}

// ServiceEndpointResource - ServiceEndpoint resource details.
type ServiceEndpointResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// ServiceEndpoint resource properties.
	Properties *ServiceEndpointResourceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ServiceEndpointResourceList - The list of ServiceEndpoint resources.
type ServiceEndpointResourceList struct {
	// The link used to get the next page of ServiceEndpoint resources list.
	NextLink *string

	// The list of ServiceEndpoint resources.
	Value []*ServiceEndpointResource
}

// ServiceEndpointResourceProperties - ServiceEndpoint resource properties.
type ServiceEndpointResourceProperties struct {
	// ServiceEndpoint pre-allocated capacity controls the maximum requests-per-second allowed for that endpoint. Only applicable
	// when Account configuration is Capacity.
	PreAllocatedCapacity *int32

	// READ-ONLY; The paired location that will be used by this ServiceEndpoint.
	PairedLocation *string

	// READ-ONLY; The resource provisioning state.
	ProvisioningState *string

	// READ-ONLY; The URL where the ServiceEndpoint API is accessible at.
	URL *string
}

// StageStatus - Stage status.
type StageStatus struct {
	// The stage name.
	Stage *string

	// The status of the stage.
	Status *string

	// The time of the status.
	Time *time.Time
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}
