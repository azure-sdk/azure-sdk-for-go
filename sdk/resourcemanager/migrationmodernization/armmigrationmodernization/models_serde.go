//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationmodernization

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type ACRProperties.
func (a ACRProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "registryName", a.RegistryName)
	populate(objectMap, "resourceGroup", a.ResourceGroup)
	populate(objectMap, "subscriptionId", a.SubscriptionID)
	populate(objectMap, "tenantId", a.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ACRProperties.
func (a *ACRProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "registryName":
			err = unpopulate(val, "RegistryName", &a.RegistryName)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, "ResourceGroup", &a.ResourceGroup)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, "SubscriptionID", &a.SubscriptionID)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, "TenantID", &a.TenantID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AKSDeploymentProperties.
func (a AKSDeploymentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "aksClusterName", a.AksClusterName)
	populate(objectMap, "resourceGroup", a.ResourceGroup)
	populate(objectMap, "subscriptionId", a.SubscriptionID)
	populate(objectMap, "tenantId", a.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AKSDeploymentProperties.
func (a *AKSDeploymentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "aksClusterName":
			err = unpopulate(val, "AksClusterName", &a.AksClusterName)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, "ResourceGroup", &a.ResourceGroup)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, "SubscriptionID", &a.SubscriptionID)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, "TenantID", &a.TenantID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AKSDeploymentSpecification.
func (a AKSDeploymentSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "kubernetesObjectsYaml", a.KubernetesObjectsYaml)
	populate(objectMap, "loadBalancerType", a.LoadBalancerType)
	populate(objectMap, "replicaCount", a.ReplicaCount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AKSDeploymentSpecification.
func (a *AKSDeploymentSpecification) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kubernetesObjectsYaml":
			err = unpopulate(val, "KubernetesObjectsYaml", &a.KubernetesObjectsYaml)
			delete(rawMsg, key)
		case "loadBalancerType":
			err = unpopulate(val, "LoadBalancerType", &a.LoadBalancerType)
			delete(rawMsg, key)
		case "replicaCount":
			err = unpopulate(val, "ReplicaCount", &a.ReplicaCount)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ApacheTomcatAKSWorkloadDeployment.
func (a ApacheTomcatAKSWorkloadDeployment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "automationArtifactProperties", a.AutomationArtifactProperties)
	populate(objectMap, "bindings", a.Bindings)
	populate(objectMap, "buildContainerImages", a.BuildContainerImages)
	populate(objectMap, "clusterProperties", a.ClusterProperties)
	populate(objectMap, "configurations", a.Configurations)
	populate(objectMap, "containerImageProperties", a.ContainerImageProperties)
	populate(objectMap, "deploymentHistory", a.DeploymentHistory)
	populate(objectMap, "deploymentNamePrefix", a.DeploymentNamePrefix)
	populate(objectMap, "deploymentSpec", a.DeploymentSpec)
	populate(objectMap, "directories", a.Directories)
	populate(objectMap, "limits", a.Limits)
	populate(objectMap, "monitoringProperties", a.MonitoringProperties)
	populate(objectMap, "requests", a.Requests)
	populate(objectMap, "targetPlatformIdentity", a.TargetPlatformIdentity)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApacheTomcatAKSWorkloadDeployment.
func (a *ApacheTomcatAKSWorkloadDeployment) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "automationArtifactProperties":
			err = unpopulate(val, "AutomationArtifactProperties", &a.AutomationArtifactProperties)
			delete(rawMsg, key)
		case "bindings":
			err = unpopulate(val, "Bindings", &a.Bindings)
			delete(rawMsg, key)
		case "buildContainerImages":
			err = unpopulate(val, "BuildContainerImages", &a.BuildContainerImages)
			delete(rawMsg, key)
		case "clusterProperties":
			err = unpopulate(val, "ClusterProperties", &a.ClusterProperties)
			delete(rawMsg, key)
		case "configurations":
			err = unpopulate(val, "Configurations", &a.Configurations)
			delete(rawMsg, key)
		case "containerImageProperties":
			err = unpopulate(val, "ContainerImageProperties", &a.ContainerImageProperties)
			delete(rawMsg, key)
		case "deploymentHistory":
			err = unpopulate(val, "DeploymentHistory", &a.DeploymentHistory)
			delete(rawMsg, key)
		case "deploymentNamePrefix":
			err = unpopulate(val, "DeploymentNamePrefix", &a.DeploymentNamePrefix)
			delete(rawMsg, key)
		case "deploymentSpec":
			err = unpopulate(val, "DeploymentSpec", &a.DeploymentSpec)
			delete(rawMsg, key)
		case "directories":
			err = unpopulate(val, "Directories", &a.Directories)
			delete(rawMsg, key)
		case "limits":
			err = unpopulate(val, "Limits", &a.Limits)
			delete(rawMsg, key)
		case "monitoringProperties":
			err = unpopulate(val, "MonitoringProperties", &a.MonitoringProperties)
			delete(rawMsg, key)
		case "requests":
			err = unpopulate(val, "Requests", &a.Requests)
			delete(rawMsg, key)
		case "targetPlatformIdentity":
			err = unpopulate(val, "TargetPlatformIdentity", &a.TargetPlatformIdentity)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ApacheTomcatAKSWorkloadDeploymentModelCustomProperties.
func (a ApacheTomcatAKSWorkloadDeploymentModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "apacheTomcatAksWorkloadDeploymentProperties", a.ApacheTomcatAksWorkloadDeploymentProperties)
	objectMap["instanceType"] = "ApacheTomcatAKSWorkloadDeploymentModelCustomProperties"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApacheTomcatAKSWorkloadDeploymentModelCustomProperties.
func (a *ApacheTomcatAKSWorkloadDeploymentModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apacheTomcatAksWorkloadDeploymentProperties":
			err = unpopulate(val, "ApacheTomcatAksWorkloadDeploymentProperties", &a.ApacheTomcatAksWorkloadDeploymentProperties)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &a.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ApacheTomcatWebApplication.
func (a ApacheTomcatWebApplication) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "applicationId", a.ApplicationID)
	populate(objectMap, "applicationName", a.ApplicationName)
	populate(objectMap, "applicationScratchPath", a.ApplicationScratchPath)
	populate(objectMap, "bindings", a.Bindings)
	populate(objectMap, "configurations", a.Configurations)
	populate(objectMap, "directories", a.Directories)
	populate(objectMap, "discoveredFrameworks", a.DiscoveredFrameworks)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "limits", a.Limits)
	populate(objectMap, "path", a.Path)
	populate(objectMap, "primaryFramework", a.PrimaryFramework)
	populate(objectMap, "requests", a.Requests)
	populate(objectMap, "webServerId", a.WebServerID)
	populate(objectMap, "webServerName", a.WebServerName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApacheTomcatWebApplication.
func (a *ApacheTomcatWebApplication) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "applicationId":
			err = unpopulate(val, "ApplicationID", &a.ApplicationID)
			delete(rawMsg, key)
		case "applicationName":
			err = unpopulate(val, "ApplicationName", &a.ApplicationName)
			delete(rawMsg, key)
		case "applicationScratchPath":
			err = unpopulate(val, "ApplicationScratchPath", &a.ApplicationScratchPath)
			delete(rawMsg, key)
		case "bindings":
			err = unpopulate(val, "Bindings", &a.Bindings)
			delete(rawMsg, key)
		case "configurations":
			err = unpopulate(val, "Configurations", &a.Configurations)
			delete(rawMsg, key)
		case "directories":
			err = unpopulate(val, "Directories", &a.Directories)
			delete(rawMsg, key)
		case "discoveredFrameworks":
			err = unpopulate(val, "DiscoveredFrameworks", &a.DiscoveredFrameworks)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "limits":
			err = unpopulate(val, "Limits", &a.Limits)
			delete(rawMsg, key)
		case "path":
			err = unpopulate(val, "Path", &a.Path)
			delete(rawMsg, key)
		case "primaryFramework":
			err = unpopulate(val, "PrimaryFramework", &a.PrimaryFramework)
			delete(rawMsg, key)
		case "requests":
			err = unpopulate(val, "Requests", &a.Requests)
			delete(rawMsg, key)
		case "webServerId":
			err = unpopulate(val, "WebServerID", &a.WebServerID)
			delete(rawMsg, key)
		case "webServerName":
			err = unpopulate(val, "WebServerName", &a.WebServerName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ApacheTomcatWorkloadInstanceModelCustomProperties.
func (a ApacheTomcatWorkloadInstanceModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "apacheTomcatWebApplication", a.ApacheTomcatWebApplication)
	objectMap["instanceType"] = "ApacheTomcatWorkloadInstanceModelCustomProperties"
	populate(objectMap, "webAppArmId", a.WebAppArmID)
	populate(objectMap, "webAppSiteName", a.WebAppSiteName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApacheTomcatWorkloadInstanceModelCustomProperties.
func (a *ApacheTomcatWorkloadInstanceModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apacheTomcatWebApplication":
			err = unpopulate(val, "ApacheTomcatWebApplication", &a.ApacheTomcatWebApplication)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &a.InstanceType)
			delete(rawMsg, key)
		case "webAppArmId":
			err = unpopulate(val, "WebAppArmID", &a.WebAppArmID)
			delete(rawMsg, key)
		case "webAppSiteName":
			err = unpopulate(val, "WebAppSiteName", &a.WebAppSiteName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AppInsightMonitoringProperties.
func (a AppInsightMonitoringProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "appInsightsName", a.AppInsightsName)
	populate(objectMap, "isEnabled", a.IsEnabled)
	populate(objectMap, "region", a.Region)
	populate(objectMap, "resourceGroup", a.ResourceGroup)
	populate(objectMap, "secretStoreDetails", a.SecretStoreDetails)
	populate(objectMap, "subscriptionId", a.SubscriptionID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AppInsightMonitoringProperties.
func (a *AppInsightMonitoringProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appInsightsName":
			err = unpopulate(val, "AppInsightsName", &a.AppInsightsName)
			delete(rawMsg, key)
		case "isEnabled":
			err = unpopulate(val, "IsEnabled", &a.IsEnabled)
			delete(rawMsg, key)
		case "region":
			err = unpopulate(val, "Region", &a.Region)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, "ResourceGroup", &a.ResourceGroup)
			delete(rawMsg, key)
		case "secretStoreDetails":
			err = unpopulate(val, "SecretStoreDetails", &a.SecretStoreDetails)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, "SubscriptionID", &a.SubscriptionID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AutomationArtifact.
func (a AutomationArtifact) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "artifacts", a.Artifacts)
	populate(objectMap, "azureFileShareProfile", a.AzureFileShareProfile)
	populate(objectMap, "status", a.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AutomationArtifact.
func (a *AutomationArtifact) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "artifacts":
			err = unpopulate(val, "Artifacts", &a.Artifacts)
			delete(rawMsg, key)
		case "azureFileShareProfile":
			err = unpopulate(val, "AzureFileShareProfile", &a.AzureFileShareProfile)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &a.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AzureFileShareHydrationProfile.
func (a AzureFileShareHydrationProfile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "azureFileShareDirPath", a.AzureFileShareDirPath)
	populate(objectMap, "azureFileShareName", a.AzureFileShareName)
	populate(objectMap, "azureFileShareResourceGroup", a.AzureFileShareResourceGroup)
	populate(objectMap, "azureFileShareStorageAccount", a.AzureFileShareStorageAccount)
	populate(objectMap, "azureFileShareSubscriptionId", a.AzureFileShareSubscriptionID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureFileShareHydrationProfile.
func (a *AzureFileShareHydrationProfile) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureFileShareDirPath":
			err = unpopulate(val, "AzureFileShareDirPath", &a.AzureFileShareDirPath)
			delete(rawMsg, key)
		case "azureFileShareName":
			err = unpopulate(val, "AzureFileShareName", &a.AzureFileShareName)
			delete(rawMsg, key)
		case "azureFileShareResourceGroup":
			err = unpopulate(val, "AzureFileShareResourceGroup", &a.AzureFileShareResourceGroup)
			delete(rawMsg, key)
		case "azureFileShareStorageAccount":
			err = unpopulate(val, "AzureFileShareStorageAccount", &a.AzureFileShareStorageAccount)
			delete(rawMsg, key)
		case "azureFileShareSubscriptionId":
			err = unpopulate(val, "AzureFileShareSubscriptionID", &a.AzureFileShareSubscriptionID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Binding.
func (b Binding) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "cert", b.Cert)
	populate(objectMap, "hostName", b.HostName)
	populate(objectMap, "id", b.ID)
	populate(objectMap, "ipAddress", b.IPAddress)
	populate(objectMap, "port", b.Port)
	populate(objectMap, "portMapping", b.PortMapping)
	populate(objectMap, "protocol", b.Protocol)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Binding.
func (b *Binding) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "cert":
			err = unpopulate(val, "Cert", &b.Cert)
			delete(rawMsg, key)
		case "hostName":
			err = unpopulate(val, "HostName", &b.HostName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &b.ID)
			delete(rawMsg, key)
		case "ipAddress":
			err = unpopulate(val, "IPAddress", &b.IPAddress)
			delete(rawMsg, key)
		case "port":
			err = unpopulate(val, "Port", &b.Port)
			delete(rawMsg, key)
		case "portMapping":
			err = unpopulate(val, "PortMapping", &b.PortMapping)
			delete(rawMsg, key)
		case "protocol":
			err = unpopulate(val, "Protocol", &b.Protocol)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BuildContainerImageModel.
func (b BuildContainerImageModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BuildContainerImageModel.
func (b *BuildContainerImageModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, "Properties", &b.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BuildContainerImageWorkflowModelCustomProperties.
func (b BuildContainerImageWorkflowModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "affectedObjectDetails", b.AffectedObjectDetails)
	populate(objectMap, "containerImageProperties", b.ContainerImageProperties)
	objectMap["instanceType"] = "BuildContainerImageWorkflowModelCustomProperties"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BuildContainerImageWorkflowModelCustomProperties.
func (b *BuildContainerImageWorkflowModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "affectedObjectDetails":
			err = unpopulate(val, "AffectedObjectDetails", &b.AffectedObjectDetails)
			delete(rawMsg, key)
		case "containerImageProperties":
			err = unpopulate(val, "ContainerImageProperties", &b.ContainerImageProperties)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &b.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BuildContainerImageWorkflowModelCustomPropertiesContainerImageProperties.
func (b BuildContainerImageWorkflowModelCustomPropertiesContainerImageProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "dockerfile", b.Dockerfile)
	populate(objectMap, "id", b.ID)
	populate(objectMap, "imageName", b.ImageName)
	populate(objectMap, "imageTag", b.ImageTag)
	populate(objectMap, "registryProperties", b.RegistryProperties)
	populate(objectMap, "runId", b.RunID)
	populate(objectMap, "runStatus", b.RunStatus)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BuildContainerImageWorkflowModelCustomPropertiesContainerImageProperties.
func (b *BuildContainerImageWorkflowModelCustomPropertiesContainerImageProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dockerfile":
			err = unpopulate(val, "Dockerfile", &b.Dockerfile)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &b.ID)
			delete(rawMsg, key)
		case "imageName":
			err = unpopulate(val, "ImageName", &b.ImageName)
			delete(rawMsg, key)
		case "imageTag":
			err = unpopulate(val, "ImageTag", &b.ImageTag)
			delete(rawMsg, key)
		case "registryProperties":
			err = unpopulate(val, "RegistryProperties", &b.RegistryProperties)
			delete(rawMsg, key)
		case "runId":
			err = unpopulate(val, "RunID", &b.RunID)
			delete(rawMsg, key)
		case "runStatus":
			err = unpopulate(val, "RunStatus", &b.RunStatus)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Cert.
func (c Cert) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateByteArray(objectMap, "certData", c.CertData, func() any {
		return runtime.EncodeByteArray(c.CertData, runtime.Base64StdFormat)
	})
	populate(objectMap, "certNeeded", c.CertNeeded)
	populate(objectMap, "certProvided", c.CertProvided)
	populate(objectMap, "secretStore", c.SecretStore)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Cert.
func (c *Cert) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "certData":
			if val != nil && string(val) != "null" {
				err = runtime.DecodeByteArray(string(val), &c.CertData, runtime.Base64StdFormat)
			}
			delete(rawMsg, key)
		case "certNeeded":
			err = unpopulate(val, "CertNeeded", &c.CertNeeded)
			delete(rawMsg, key)
		case "certProvided":
			err = unpopulate(val, "CertProvided", &c.CertProvided)
			delete(rawMsg, key)
		case "secretStore":
			err = unpopulate(val, "SecretStore", &c.SecretStore)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ContainerImageProperties.
func (c ContainerImageProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "dockerfile", c.Dockerfile)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "imageName", c.ImageName)
	populate(objectMap, "imageTag", c.ImageTag)
	populate(objectMap, "registryProperties", c.RegistryProperties)
	populate(objectMap, "runId", c.RunID)
	populate(objectMap, "runStatus", c.RunStatus)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContainerImageProperties.
func (c *ContainerImageProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dockerfile":
			err = unpopulate(val, "Dockerfile", &c.Dockerfile)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &c.ID)
			delete(rawMsg, key)
		case "imageName":
			err = unpopulate(val, "ImageName", &c.ImageName)
			delete(rawMsg, key)
		case "imageTag":
			err = unpopulate(val, "ImageTag", &c.ImageTag)
			delete(rawMsg, key)
		case "registryProperties":
			err = unpopulate(val, "RegistryProperties", &c.RegistryProperties)
			delete(rawMsg, key)
		case "runId":
			err = unpopulate(val, "RunID", &c.RunID)
			delete(rawMsg, key)
		case "runStatus":
			err = unpopulate(val, "RunStatus", &c.RunStatus)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DeployedResourceModel.
func (d DeployedResourceModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeployedResourceModel.
func (d *DeployedResourceModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &d.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &d.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &d.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &d.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &d.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &d.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DeployedResourceModelCollection.
func (d DeployedResourceModelCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeployedResourceModelCollection.
func (d *DeployedResourceModelCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &d.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &d.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DeployedResourceModelProperties.
func (d DeployedResourceModelProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "appIp", d.AppIP)
	populate(objectMap, "containerRegistryId", d.ContainerRegistryID)
	populate(objectMap, "customProperties", d.CustomProperties)
	populateDateTimeRFC3339(objectMap, "deploymentTimestamp", d.DeploymentTimestamp)
	populate(objectMap, "displayName", d.DisplayName)
	populate(objectMap, "imageName", d.ImageName)
	populate(objectMap, "imageTag", d.ImageTag)
	populate(objectMap, "resourcesDeployed", d.ResourcesDeployed)
	populate(objectMap, "secretStoreId", d.SecretStoreID)
	populate(objectMap, "targetAzureService", d.TargetAzureService)
	populate(objectMap, "workloadDeploymentId", d.WorkloadDeploymentID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeployedResourceModelProperties.
func (d *DeployedResourceModelProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appIp":
			err = unpopulate(val, "AppIP", &d.AppIP)
			delete(rawMsg, key)
		case "containerRegistryId":
			err = unpopulate(val, "ContainerRegistryID", &d.ContainerRegistryID)
			delete(rawMsg, key)
		case "customProperties":
			err = unpopulate(val, "CustomProperties", &d.CustomProperties)
			delete(rawMsg, key)
		case "deploymentTimestamp":
			err = unpopulateDateTimeRFC3339(val, "DeploymentTimestamp", &d.DeploymentTimestamp)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &d.DisplayName)
			delete(rawMsg, key)
		case "imageName":
			err = unpopulate(val, "ImageName", &d.ImageName)
			delete(rawMsg, key)
		case "imageTag":
			err = unpopulate(val, "ImageTag", &d.ImageTag)
			delete(rawMsg, key)
		case "resourcesDeployed":
			err = unpopulate(val, "ResourcesDeployed", &d.ResourcesDeployed)
			delete(rawMsg, key)
		case "secretStoreId":
			err = unpopulate(val, "SecretStoreID", &d.SecretStoreID)
			delete(rawMsg, key)
		case "targetAzureService":
			err = unpopulate(val, "TargetAzureService", &d.TargetAzureService)
			delete(rawMsg, key)
		case "workloadDeploymentId":
			err = unpopulate(val, "WorkloadDeploymentID", &d.WorkloadDeploymentID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DeployedResourceModelSystemData.
func (d DeployedResourceModelSystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", d.CreatedAt)
	populate(objectMap, "createdBy", d.CreatedBy)
	populate(objectMap, "createdByType", d.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", d.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", d.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", d.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeployedResourceModelSystemData.
func (d *DeployedResourceModelSystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &d.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &d.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &d.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &d.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &d.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &d.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DeployedResourcesProperties.
func (d DeployedResourcesProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "context", d.Context)
	populate(objectMap, "deployedResourceId", d.DeployedResourceID)
	populateDateTimeRFC3339(objectMap, "deploymentTimestamp", d.DeploymentTimestamp)
	populate(objectMap, "displayName", d.DisplayName)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "isCleanUpDone", d.IsCleanUpDone)
	populate(objectMap, "isTestMigration", d.IsTestMigration)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeployedResourcesProperties.
func (d *DeployedResourcesProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "context":
			err = unpopulate(val, "Context", &d.Context)
			delete(rawMsg, key)
		case "deployedResourceId":
			err = unpopulate(val, "DeployedResourceID", &d.DeployedResourceID)
			delete(rawMsg, key)
		case "deploymentTimestamp":
			err = unpopulateDateTimeRFC3339(val, "DeploymentTimestamp", &d.DeploymentTimestamp)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &d.DisplayName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &d.ID)
			delete(rawMsg, key)
		case "isCleanUpDone":
			err = unpopulate(val, "IsCleanUpDone", &d.IsCleanUpDone)
			delete(rawMsg, key)
		case "isTestMigration":
			err = unpopulate(val, "IsTestMigration", &d.IsTestMigration)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &d.Status)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &d.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DirectoryPath.
func (d DirectoryPath) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "physical", d.Physical)
	populate(objectMap, "virtual", d.Virtual)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DirectoryPath.
func (d *DirectoryPath) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &d.ID)
			delete(rawMsg, key)
		case "physical":
			err = unpopulate(val, "Physical", &d.Physical)
			delete(rawMsg, key)
		case "virtual":
			err = unpopulate(val, "Virtual", &d.Virtual)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type EnableReplicationWorkflowModelCustomProperties.
func (e EnableReplicationWorkflowModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "affectedObjectDetails", e.AffectedObjectDetails)
	objectMap["instanceType"] = "EnableReplicationWorkflowModelCustomProperties"
	populate(objectMap, "workloadInstanceProperties", e.WorkloadInstanceProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnableReplicationWorkflowModelCustomProperties.
func (e *EnableReplicationWorkflowModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "affectedObjectDetails":
			err = unpopulate(val, "AffectedObjectDetails", &e.AffectedObjectDetails)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &e.InstanceType)
			delete(rawMsg, key)
		case "workloadInstanceProperties":
			err = unpopulate(val, "WorkloadInstanceProperties", &e.WorkloadInstanceProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type EnableReplicationWorkflowModelCustomPropertiesWorkloadInstanceProperties.
func (e EnableReplicationWorkflowModelCustomPropertiesWorkloadInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "allowedOperations", e.AllowedOperations)
	populate(objectMap, "currentJob", e.CurrentJob)
	populate(objectMap, "customProperties", e.CustomProperties)
	populate(objectMap, "displayName", e.DisplayName)
	populate(objectMap, "healthErrors", e.HealthErrors)
	populateDateTimeRFC3339(objectMap, "lastSuccessfulReplicationCycleTime", e.LastSuccessfulReplicationCycleTime)
	populate(objectMap, "masterSiteName", e.MasterSiteName)
	populate(objectMap, "migrateAgentId", e.MigrateAgentID)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "replicationHealth", e.ReplicationHealth)
	populate(objectMap, "replicationStatus", e.ReplicationStatus)
	populate(objectMap, "replicationStatusDescription", e.ReplicationStatusDescription)
	populate(objectMap, "sourceName", e.SourceName)
	populate(objectMap, "sourcePlatform", e.SourcePlatform)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnableReplicationWorkflowModelCustomPropertiesWorkloadInstanceProperties.
func (e *EnableReplicationWorkflowModelCustomPropertiesWorkloadInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "allowedOperations":
			err = unpopulate(val, "AllowedOperations", &e.AllowedOperations)
			delete(rawMsg, key)
		case "currentJob":
			err = unpopulate(val, "CurrentJob", &e.CurrentJob)
			delete(rawMsg, key)
		case "customProperties":
			e.CustomProperties, err = unmarshalWorkloadInstanceModelCustomPropertiesClassification(val)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &e.DisplayName)
			delete(rawMsg, key)
		case "healthErrors":
			err = unpopulate(val, "HealthErrors", &e.HealthErrors)
			delete(rawMsg, key)
		case "lastSuccessfulReplicationCycleTime":
			err = unpopulateDateTimeRFC3339(val, "LastSuccessfulReplicationCycleTime", &e.LastSuccessfulReplicationCycleTime)
			delete(rawMsg, key)
		case "masterSiteName":
			err = unpopulate(val, "MasterSiteName", &e.MasterSiteName)
			delete(rawMsg, key)
		case "migrateAgentId":
			err = unpopulate(val, "MigrateAgentID", &e.MigrateAgentID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &e.Name)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &e.ProvisioningState)
			delete(rawMsg, key)
		case "replicationHealth":
			err = unpopulate(val, "ReplicationHealth", &e.ReplicationHealth)
			delete(rawMsg, key)
		case "replicationStatus":
			err = unpopulate(val, "ReplicationStatus", &e.ReplicationStatus)
			delete(rawMsg, key)
		case "replicationStatusDescription":
			err = unpopulate(val, "ReplicationStatusDescription", &e.ReplicationStatusDescription)
			delete(rawMsg, key)
		case "sourceName":
			err = unpopulate(val, "SourceName", &e.SourceName)
			delete(rawMsg, key)
		case "sourcePlatform":
			err = unpopulate(val, "SourcePlatform", &e.SourcePlatform)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorModel.
func (e ErrorModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "causes", e.Causes)
	populate(objectMap, "code", e.Code)
	populateDateTimeRFC3339(objectMap, "creationTime", e.CreationTime)
	populate(objectMap, "id", e.ID)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "recommendation", e.Recommendation)
	populate(objectMap, "severity", e.Severity)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ErrorModel.
func (e *ErrorModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "causes":
			err = unpopulate(val, "Causes", &e.Causes)
			delete(rawMsg, key)
		case "code":
			err = unpopulate(val, "Code", &e.Code)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateDateTimeRFC3339(val, "CreationTime", &e.CreationTime)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &e.ID)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, "Message", &e.Message)
			delete(rawMsg, key)
		case "recommendation":
			err = unpopulate(val, "Recommendation", &e.Recommendation)
			delete(rawMsg, key)
		case "severity":
			err = unpopulate(val, "Severity", &e.Severity)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &e.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GmsaAuthenticationProperties.
func (g GmsaAuthenticationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "adDomainControllerDns", g.AdDomainControllerDNS)
	populate(objectMap, "adDomainFqdn", g.AdDomainFqdn)
	populate(objectMap, "akvProperties", g.AkvProperties)
	populate(objectMap, "configurationState", g.ConfigurationState)
	populate(objectMap, "domainAdminPassword", g.DomainAdminPassword)
	populate(objectMap, "domainAdminUsername", g.DomainAdminUsername)
	populate(objectMap, "domainControllerAddress", g.DomainControllerAddress)
	populate(objectMap, "gmsaAccountName", g.GmsaAccountName)
	populate(objectMap, "gmsaCredSpecName", g.GmsaCredSpecName)
	populate(objectMap, "gmsaSecretName", g.GmsaSecretName)
	populate(objectMap, "gmsaUserPassword", g.GmsaUserPassword)
	populate(objectMap, "gmsaUsername", g.GmsaUsername)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GmsaAuthenticationProperties.
func (g *GmsaAuthenticationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "adDomainControllerDns":
			err = unpopulate(val, "AdDomainControllerDNS", &g.AdDomainControllerDNS)
			delete(rawMsg, key)
		case "adDomainFqdn":
			err = unpopulate(val, "AdDomainFqdn", &g.AdDomainFqdn)
			delete(rawMsg, key)
		case "akvProperties":
			err = unpopulate(val, "AkvProperties", &g.AkvProperties)
			delete(rawMsg, key)
		case "configurationState":
			err = unpopulate(val, "ConfigurationState", &g.ConfigurationState)
			delete(rawMsg, key)
		case "domainAdminPassword":
			err = unpopulate(val, "DomainAdminPassword", &g.DomainAdminPassword)
			delete(rawMsg, key)
		case "domainAdminUsername":
			err = unpopulate(val, "DomainAdminUsername", &g.DomainAdminUsername)
			delete(rawMsg, key)
		case "domainControllerAddress":
			err = unpopulate(val, "DomainControllerAddress", &g.DomainControllerAddress)
			delete(rawMsg, key)
		case "gmsaAccountName":
			err = unpopulate(val, "GmsaAccountName", &g.GmsaAccountName)
			delete(rawMsg, key)
		case "gmsaCredSpecName":
			err = unpopulate(val, "GmsaCredSpecName", &g.GmsaCredSpecName)
			delete(rawMsg, key)
		case "gmsaSecretName":
			err = unpopulate(val, "GmsaSecretName", &g.GmsaSecretName)
			delete(rawMsg, key)
		case "gmsaUserPassword":
			err = unpopulate(val, "GmsaUserPassword", &g.GmsaUserPassword)
			delete(rawMsg, key)
		case "gmsaUsername":
			err = unpopulate(val, "GmsaUsername", &g.GmsaUsername)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type HealthErrorModel.
func (h HealthErrorModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "affectedResourceCorrelationIds", h.AffectedResourceCorrelationIDs)
	populate(objectMap, "affectedResourceType", h.AffectedResourceType)
	populate(objectMap, "category", h.Category)
	populate(objectMap, "causes", h.Causes)
	populate(objectMap, "childErrors", h.ChildErrors)
	populate(objectMap, "code", h.Code)
	populateDateTimeRFC3339(objectMap, "creationTime", h.CreationTime)
	populate(objectMap, "healthCategory", h.HealthCategory)
	populate(objectMap, "id", h.ID)
	populate(objectMap, "isCustomerResolvable", h.IsCustomerResolvable)
	populate(objectMap, "message", h.Message)
	populate(objectMap, "recommendation", h.Recommendation)
	populate(objectMap, "severity", h.Severity)
	populate(objectMap, "source", h.Source)
	populate(objectMap, "summary", h.Summary)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HealthErrorModel.
func (h *HealthErrorModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", h, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "affectedResourceCorrelationIds":
			err = unpopulate(val, "AffectedResourceCorrelationIDs", &h.AffectedResourceCorrelationIDs)
			delete(rawMsg, key)
		case "affectedResourceType":
			err = unpopulate(val, "AffectedResourceType", &h.AffectedResourceType)
			delete(rawMsg, key)
		case "category":
			err = unpopulate(val, "Category", &h.Category)
			delete(rawMsg, key)
		case "causes":
			err = unpopulate(val, "Causes", &h.Causes)
			delete(rawMsg, key)
		case "childErrors":
			err = unpopulate(val, "ChildErrors", &h.ChildErrors)
			delete(rawMsg, key)
		case "code":
			err = unpopulate(val, "Code", &h.Code)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateDateTimeRFC3339(val, "CreationTime", &h.CreationTime)
			delete(rawMsg, key)
		case "healthCategory":
			err = unpopulate(val, "HealthCategory", &h.HealthCategory)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &h.ID)
			delete(rawMsg, key)
		case "isCustomerResolvable":
			err = unpopulate(val, "IsCustomerResolvable", &h.IsCustomerResolvable)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, "Message", &h.Message)
			delete(rawMsg, key)
		case "recommendation":
			err = unpopulate(val, "Recommendation", &h.Recommendation)
			delete(rawMsg, key)
		case "severity":
			err = unpopulate(val, "Severity", &h.Severity)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, "Source", &h.Source)
			delete(rawMsg, key)
		case "summary":
			err = unpopulate(val, "Summary", &h.Summary)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", h, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IISAKSWorkloadDeployment.
func (i IISAKSWorkloadDeployment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "authenticationProperties", i.AuthenticationProperties)
	populate(objectMap, "automationArtifactProperties", i.AutomationArtifactProperties)
	populate(objectMap, "bindings", i.Bindings)
	populate(objectMap, "buildContainerImages", i.BuildContainerImages)
	populate(objectMap, "clusterProperties", i.ClusterProperties)
	populate(objectMap, "configurations", i.Configurations)
	populate(objectMap, "containerImageProperties", i.ContainerImageProperties)
	populate(objectMap, "deploymentHistory", i.DeploymentHistory)
	populate(objectMap, "deploymentNamePrefix", i.DeploymentNamePrefix)
	populate(objectMap, "deploymentSpec", i.DeploymentSpec)
	populate(objectMap, "directories", i.Directories)
	populate(objectMap, "limits", i.Limits)
	populate(objectMap, "monitoringProperties", i.MonitoringProperties)
	populate(objectMap, "requests", i.Requests)
	populate(objectMap, "targetPlatformIdentity", i.TargetPlatformIdentity)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IISAKSWorkloadDeployment.
func (i *IISAKSWorkloadDeployment) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authenticationProperties":
			err = unpopulate(val, "AuthenticationProperties", &i.AuthenticationProperties)
			delete(rawMsg, key)
		case "automationArtifactProperties":
			err = unpopulate(val, "AutomationArtifactProperties", &i.AutomationArtifactProperties)
			delete(rawMsg, key)
		case "bindings":
			err = unpopulate(val, "Bindings", &i.Bindings)
			delete(rawMsg, key)
		case "buildContainerImages":
			err = unpopulate(val, "BuildContainerImages", &i.BuildContainerImages)
			delete(rawMsg, key)
		case "clusterProperties":
			err = unpopulate(val, "ClusterProperties", &i.ClusterProperties)
			delete(rawMsg, key)
		case "configurations":
			err = unpopulate(val, "Configurations", &i.Configurations)
			delete(rawMsg, key)
		case "containerImageProperties":
			err = unpopulate(val, "ContainerImageProperties", &i.ContainerImageProperties)
			delete(rawMsg, key)
		case "deploymentHistory":
			err = unpopulate(val, "DeploymentHistory", &i.DeploymentHistory)
			delete(rawMsg, key)
		case "deploymentNamePrefix":
			err = unpopulate(val, "DeploymentNamePrefix", &i.DeploymentNamePrefix)
			delete(rawMsg, key)
		case "deploymentSpec":
			err = unpopulate(val, "DeploymentSpec", &i.DeploymentSpec)
			delete(rawMsg, key)
		case "directories":
			err = unpopulate(val, "Directories", &i.Directories)
			delete(rawMsg, key)
		case "limits":
			err = unpopulate(val, "Limits", &i.Limits)
			delete(rawMsg, key)
		case "monitoringProperties":
			err = unpopulate(val, "MonitoringProperties", &i.MonitoringProperties)
			delete(rawMsg, key)
		case "requests":
			err = unpopulate(val, "Requests", &i.Requests)
			delete(rawMsg, key)
		case "targetPlatformIdentity":
			err = unpopulate(val, "TargetPlatformIdentity", &i.TargetPlatformIdentity)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IISAKSWorkloadDeploymentModelCustomProperties.
func (i IISAKSWorkloadDeploymentModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "iisAksWorkloadDeploymentProperties", i.IisAksWorkloadDeploymentProperties)
	objectMap["instanceType"] = "IISAKSWorkloadDeploymentModelCustomProperties"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IISAKSWorkloadDeploymentModelCustomProperties.
func (i *IISAKSWorkloadDeploymentModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "iisAksWorkloadDeploymentProperties":
			err = unpopulate(val, "IisAksWorkloadDeploymentProperties", &i.IisAksWorkloadDeploymentProperties)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &i.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IISApplicationDetails.
func (i IISApplicationDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "applicationPoolName", i.ApplicationPoolName)
	populate(objectMap, "directories", i.Directories)
	populate(objectMap, "enable32BitApiOnWin64", i.Enable32BitAPIOnWin64)
	populate(objectMap, "id", i.ID)
	populate(objectMap, "managedPipelineMode", i.ManagedPipelineMode)
	populate(objectMap, "path", i.Path)
	populate(objectMap, "runtimeVersion", i.RuntimeVersion)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IISApplicationDetails.
func (i *IISApplicationDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "applicationPoolName":
			err = unpopulate(val, "ApplicationPoolName", &i.ApplicationPoolName)
			delete(rawMsg, key)
		case "directories":
			err = unpopulate(val, "Directories", &i.Directories)
			delete(rawMsg, key)
		case "enable32BitApiOnWin64":
			err = unpopulate(val, "Enable32BitAPIOnWin64", &i.Enable32BitAPIOnWin64)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &i.ID)
			delete(rawMsg, key)
		case "managedPipelineMode":
			err = unpopulate(val, "ManagedPipelineMode", &i.ManagedPipelineMode)
			delete(rawMsg, key)
		case "path":
			err = unpopulate(val, "Path", &i.Path)
			delete(rawMsg, key)
		case "runtimeVersion":
			err = unpopulate(val, "RuntimeVersion", &i.RuntimeVersion)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IISVirtualApplicationDetails.
func (i IISVirtualApplicationDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "directories", i.Directories)
	populate(objectMap, "id", i.ID)
	populate(objectMap, "isVirtualDirectory", i.IsVirtualDirectory)
	populate(objectMap, "path", i.Path)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IISVirtualApplicationDetails.
func (i *IISVirtualApplicationDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "directories":
			err = unpopulate(val, "Directories", &i.Directories)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &i.ID)
			delete(rawMsg, key)
		case "isVirtualDirectory":
			err = unpopulate(val, "IsVirtualDirectory", &i.IsVirtualDirectory)
			delete(rawMsg, key)
		case "path":
			err = unpopulate(val, "Path", &i.Path)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IISWebApplication.
func (i IISWebApplication) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "applicationId", i.ApplicationID)
	populate(objectMap, "applicationName", i.ApplicationName)
	populate(objectMap, "applicationScratchPath", i.ApplicationScratchPath)
	populate(objectMap, "applications", i.Applications)
	populate(objectMap, "bindings", i.Bindings)
	populate(objectMap, "configurations", i.Configurations)
	populate(objectMap, "directories", i.Directories)
	populate(objectMap, "discoveredFrameworks", i.DiscoveredFrameworks)
	populate(objectMap, "displayName", i.DisplayName)
	populate(objectMap, "iisWebServer", i.IisWebServer)
	populate(objectMap, "limits", i.Limits)
	populate(objectMap, "path", i.Path)
	populate(objectMap, "primaryFramework", i.PrimaryFramework)
	populate(objectMap, "requests", i.Requests)
	populate(objectMap, "virtualApplications", i.VirtualApplications)
	populate(objectMap, "webServerId", i.WebServerID)
	populate(objectMap, "webServerName", i.WebServerName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IISWebApplication.
func (i *IISWebApplication) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "applicationId":
			err = unpopulate(val, "ApplicationID", &i.ApplicationID)
			delete(rawMsg, key)
		case "applicationName":
			err = unpopulate(val, "ApplicationName", &i.ApplicationName)
			delete(rawMsg, key)
		case "applicationScratchPath":
			err = unpopulate(val, "ApplicationScratchPath", &i.ApplicationScratchPath)
			delete(rawMsg, key)
		case "applications":
			err = unpopulate(val, "Applications", &i.Applications)
			delete(rawMsg, key)
		case "bindings":
			err = unpopulate(val, "Bindings", &i.Bindings)
			delete(rawMsg, key)
		case "configurations":
			err = unpopulate(val, "Configurations", &i.Configurations)
			delete(rawMsg, key)
		case "directories":
			err = unpopulate(val, "Directories", &i.Directories)
			delete(rawMsg, key)
		case "discoveredFrameworks":
			err = unpopulate(val, "DiscoveredFrameworks", &i.DiscoveredFrameworks)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &i.DisplayName)
			delete(rawMsg, key)
		case "iisWebServer":
			err = unpopulate(val, "IisWebServer", &i.IisWebServer)
			delete(rawMsg, key)
		case "limits":
			err = unpopulate(val, "Limits", &i.Limits)
			delete(rawMsg, key)
		case "path":
			err = unpopulate(val, "Path", &i.Path)
			delete(rawMsg, key)
		case "primaryFramework":
			err = unpopulate(val, "PrimaryFramework", &i.PrimaryFramework)
			delete(rawMsg, key)
		case "requests":
			err = unpopulate(val, "Requests", &i.Requests)
			delete(rawMsg, key)
		case "virtualApplications":
			err = unpopulate(val, "VirtualApplications", &i.VirtualApplications)
			delete(rawMsg, key)
		case "webServerId":
			err = unpopulate(val, "WebServerID", &i.WebServerID)
			delete(rawMsg, key)
		case "webServerName":
			err = unpopulate(val, "WebServerName", &i.WebServerName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IISWebServer.
func (i IISWebServer) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "displayName", i.DisplayName)
	populate(objectMap, "ipAddresses", i.IPAddresses)
	populate(objectMap, "machines", i.Machines)
	populate(objectMap, "operatingSystemDetails", i.OperatingSystemDetails)
	populate(objectMap, "rootConfigurationLocation", i.RootConfigurationLocation)
	populate(objectMap, "runAsAccountId", i.RunAsAccountID)
	populate(objectMap, "serverFqdn", i.ServerFqdn)
	populate(objectMap, "serverId", i.ServerID)
	populate(objectMap, "serverName", i.ServerName)
	populate(objectMap, "version", i.Version)
	populate(objectMap, "webApplications", i.WebApplications)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IISWebServer.
func (i *IISWebServer) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &i.DisplayName)
			delete(rawMsg, key)
		case "ipAddresses":
			err = unpopulate(val, "IPAddresses", &i.IPAddresses)
			delete(rawMsg, key)
		case "machines":
			err = unpopulate(val, "Machines", &i.Machines)
			delete(rawMsg, key)
		case "operatingSystemDetails":
			err = unpopulate(val, "OperatingSystemDetails", &i.OperatingSystemDetails)
			delete(rawMsg, key)
		case "rootConfigurationLocation":
			err = unpopulate(val, "RootConfigurationLocation", &i.RootConfigurationLocation)
			delete(rawMsg, key)
		case "runAsAccountId":
			err = unpopulate(val, "RunAsAccountID", &i.RunAsAccountID)
			delete(rawMsg, key)
		case "serverFqdn":
			err = unpopulate(val, "ServerFqdn", &i.ServerFqdn)
			delete(rawMsg, key)
		case "serverId":
			err = unpopulate(val, "ServerID", &i.ServerID)
			delete(rawMsg, key)
		case "serverName":
			err = unpopulate(val, "ServerName", &i.ServerName)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, "Version", &i.Version)
			delete(rawMsg, key)
		case "webApplications":
			err = unpopulate(val, "WebApplications", &i.WebApplications)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IISWorkloadInstanceModelCustomProperties.
func (i IISWorkloadInstanceModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "containerName", i.ContainerName)
	populate(objectMap, "fileshareName", i.FileshareName)
	populate(objectMap, "iisWebApplication", i.IisWebApplication)
	objectMap["instanceType"] = "IISWorkloadInstanceModelCustomProperties"
	populate(objectMap, "webAppArmId", i.WebAppArmID)
	populate(objectMap, "webAppSiteName", i.WebAppSiteName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IISWorkloadInstanceModelCustomProperties.
func (i *IISWorkloadInstanceModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "containerName":
			err = unpopulate(val, "ContainerName", &i.ContainerName)
			delete(rawMsg, key)
		case "fileshareName":
			err = unpopulate(val, "FileshareName", &i.FileshareName)
			delete(rawMsg, key)
		case "iisWebApplication":
			err = unpopulate(val, "IisWebApplication", &i.IisWebApplication)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &i.InstanceType)
			delete(rawMsg, key)
		case "webAppArmId":
			err = unpopulate(val, "WebAppArmID", &i.WebAppArmID)
			delete(rawMsg, key)
		case "webAppSiteName":
			err = unpopulate(val, "WebAppSiteName", &i.WebAppSiteName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IdentityModel.
func (i IdentityModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "aadAuthority", i.AADAuthority)
	populate(objectMap, "applicationId", i.ApplicationID)
	populate(objectMap, "audience", i.Audience)
	populate(objectMap, "objectId", i.ObjectID)
	populate(objectMap, "tenantId", i.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IdentityModel.
func (i *IdentityModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "aadAuthority":
			err = unpopulate(val, "AADAuthority", &i.AADAuthority)
			delete(rawMsg, key)
		case "applicationId":
			err = unpopulate(val, "ApplicationID", &i.ApplicationID)
			delete(rawMsg, key)
		case "audience":
			err = unpopulate(val, "Audience", &i.Audience)
			delete(rawMsg, key)
		case "objectId":
			err = unpopulate(val, "ObjectID", &i.ObjectID)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, "TenantID", &i.TenantID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type InnerHealthErrorModel.
func (i InnerHealthErrorModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "category", i.Category)
	populate(objectMap, "causes", i.Causes)
	populate(objectMap, "code", i.Code)
	populateDateTimeRFC3339(objectMap, "creationTime", i.CreationTime)
	populate(objectMap, "healthCategory", i.HealthCategory)
	populate(objectMap, "id", i.ID)
	populate(objectMap, "isCustomerResolvable", i.IsCustomerResolvable)
	populate(objectMap, "message", i.Message)
	populate(objectMap, "recommendation", i.Recommendation)
	populate(objectMap, "severity", i.Severity)
	populate(objectMap, "source", i.Source)
	populate(objectMap, "summary", i.Summary)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InnerHealthErrorModel.
func (i *InnerHealthErrorModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "category":
			err = unpopulate(val, "Category", &i.Category)
			delete(rawMsg, key)
		case "causes":
			err = unpopulate(val, "Causes", &i.Causes)
			delete(rawMsg, key)
		case "code":
			err = unpopulate(val, "Code", &i.Code)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateDateTimeRFC3339(val, "CreationTime", &i.CreationTime)
			delete(rawMsg, key)
		case "healthCategory":
			err = unpopulate(val, "HealthCategory", &i.HealthCategory)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &i.ID)
			delete(rawMsg, key)
		case "isCustomerResolvable":
			err = unpopulate(val, "IsCustomerResolvable", &i.IsCustomerResolvable)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, "Message", &i.Message)
			delete(rawMsg, key)
		case "recommendation":
			err = unpopulate(val, "Recommendation", &i.Recommendation)
			delete(rawMsg, key)
		case "severity":
			err = unpopulate(val, "Severity", &i.Severity)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, "Source", &i.Source)
			delete(rawMsg, key)
		case "summary":
			err = unpopulate(val, "Summary", &i.Summary)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type KeyVaultSecretStoreProperties.
func (k KeyVaultSecretStoreProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "inputType", k.InputType)
	populate(objectMap, "keyvaultName", k.KeyvaultName)
	populate(objectMap, "managedIdentityProperties", k.ManagedIdentityProperties)
	populate(objectMap, "resourceGroup", k.ResourceGroup)
	populate(objectMap, "secretStoreId", k.SecretStoreID)
	populate(objectMap, "subscriptionId", k.SubscriptionID)
	populate(objectMap, "tenantId", k.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KeyVaultSecretStoreProperties.
func (k *KeyVaultSecretStoreProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", k, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "inputType":
			err = unpopulate(val, "InputType", &k.InputType)
			delete(rawMsg, key)
		case "keyvaultName":
			err = unpopulate(val, "KeyvaultName", &k.KeyvaultName)
			delete(rawMsg, key)
		case "managedIdentityProperties":
			err = unpopulate(val, "ManagedIdentityProperties", &k.ManagedIdentityProperties)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, "ResourceGroup", &k.ResourceGroup)
			delete(rawMsg, key)
		case "secretStoreId":
			err = unpopulate(val, "SecretStoreID", &k.SecretStoreID)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, "SubscriptionID", &k.SubscriptionID)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, "TenantID", &k.TenantID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", k, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ManagedIdentityProperties.
func (m ManagedIdentityProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "clientId", m.ClientID)
	populate(objectMap, "managedIdentityName", m.ManagedIdentityName)
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "resourceGroup", m.ResourceGroup)
	populate(objectMap, "subscriptionId", m.SubscriptionID)
	populate(objectMap, "tenantId", m.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ManagedIdentityProperties.
func (m *ManagedIdentityProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "clientId":
			err = unpopulate(val, "ClientID", &m.ClientID)
			delete(rawMsg, key)
		case "managedIdentityName":
			err = unpopulate(val, "ManagedIdentityName", &m.ManagedIdentityName)
			delete(rawMsg, key)
		case "principalId":
			err = unpopulate(val, "PrincipalID", &m.PrincipalID)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, "ResourceGroup", &m.ResourceGroup)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, "SubscriptionID", &m.SubscriptionID)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, "TenantID", &m.TenantID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrateAgentModel.
func (m MigrateAgentModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrateAgentModel.
func (m *MigrateAgentModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &m.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &m.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &m.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &m.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &m.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &m.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrateAgentModelCollection.
func (m MigrateAgentModelCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrateAgentModelCollection.
func (m *MigrateAgentModelCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &m.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &m.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrateAgentModelCustomProperties.
func (m MigrateAgentModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	objectMap["instanceType"] = m.InstanceType
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrateAgentModelCustomProperties.
func (m *MigrateAgentModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "instanceType":
			err = unpopulate(val, "InstanceType", &m.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrateAgentModelProperties.
func (m MigrateAgentModelProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "authenticationIdentity", m.AuthenticationIdentity)
	populate(objectMap, "correlationId", m.CorrelationID)
	populate(objectMap, "customProperties", m.CustomProperties)
	populate(objectMap, "healthErrors", m.HealthErrors)
	populate(objectMap, "isResponsive", m.IsResponsive)
	populateDateTimeRFC3339(objectMap, "lastHeartbeat", m.LastHeartbeat)
	populate(objectMap, "machineId", m.MachineID)
	populate(objectMap, "machineName", m.MachineName)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "versionNumber", m.VersionNumber)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrateAgentModelProperties.
func (m *MigrateAgentModelProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authenticationIdentity":
			err = unpopulate(val, "AuthenticationIdentity", &m.AuthenticationIdentity)
			delete(rawMsg, key)
		case "correlationId":
			err = unpopulate(val, "CorrelationID", &m.CorrelationID)
			delete(rawMsg, key)
		case "customProperties":
			m.CustomProperties, err = unmarshalMigrateAgentModelCustomPropertiesClassification(val)
			delete(rawMsg, key)
		case "healthErrors":
			err = unpopulate(val, "HealthErrors", &m.HealthErrors)
			delete(rawMsg, key)
		case "isResponsive":
			err = unpopulate(val, "IsResponsive", &m.IsResponsive)
			delete(rawMsg, key)
		case "lastHeartbeat":
			err = unpopulateDateTimeRFC3339(val, "LastHeartbeat", &m.LastHeartbeat)
			delete(rawMsg, key)
		case "machineId":
			err = unpopulate(val, "MachineID", &m.MachineID)
			delete(rawMsg, key)
		case "machineName":
			err = unpopulate(val, "MachineName", &m.MachineName)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &m.ProvisioningState)
			delete(rawMsg, key)
		case "versionNumber":
			err = unpopulate(val, "VersionNumber", &m.VersionNumber)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrateAgentModelSystemData.
func (m MigrateAgentModelSystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", m.CreatedAt)
	populate(objectMap, "createdBy", m.CreatedBy)
	populate(objectMap, "createdByType", m.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", m.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", m.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", m.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrateAgentModelSystemData.
func (m *MigrateAgentModelSystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &m.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &m.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &m.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &m.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &m.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &m.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrateWorkflowModelCustomProperties.
func (m MigrateWorkflowModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "affectedObjectDetails", m.AffectedObjectDetails)
	populate(objectMap, "deployedResourcesProperties", m.DeployedResourcesProperties)
	objectMap["instanceType"] = "MigrateWorkflowModelCustomProperties"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrateWorkflowModelCustomProperties.
func (m *MigrateWorkflowModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "affectedObjectDetails":
			err = unpopulate(val, "AffectedObjectDetails", &m.AffectedObjectDetails)
			delete(rawMsg, key)
		case "deployedResourcesProperties":
			err = unpopulate(val, "DeployedResourcesProperties", &m.DeployedResourcesProperties)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &m.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrateWorkflowModelCustomPropertiesDeployedResourcesProperties.
func (m MigrateWorkflowModelCustomPropertiesDeployedResourcesProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "context", m.Context)
	populate(objectMap, "deployedResourceId", m.DeployedResourceID)
	populateDateTimeRFC3339(objectMap, "deploymentTimestamp", m.DeploymentTimestamp)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "isCleanUpDone", m.IsCleanUpDone)
	populate(objectMap, "isTestMigration", m.IsTestMigration)
	populate(objectMap, "status", m.Status)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrateWorkflowModelCustomPropertiesDeployedResourcesProperties.
func (m *MigrateWorkflowModelCustomPropertiesDeployedResourcesProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "context":
			err = unpopulate(val, "Context", &m.Context)
			delete(rawMsg, key)
		case "deployedResourceId":
			err = unpopulate(val, "DeployedResourceID", &m.DeployedResourceID)
			delete(rawMsg, key)
		case "deploymentTimestamp":
			err = unpopulateDateTimeRFC3339(val, "DeploymentTimestamp", &m.DeploymentTimestamp)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &m.DisplayName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &m.ID)
			delete(rawMsg, key)
		case "isCleanUpDone":
			err = unpopulate(val, "IsCleanUpDone", &m.IsCleanUpDone)
			delete(rawMsg, key)
		case "isTestMigration":
			err = unpopulate(val, "IsTestMigration", &m.IsTestMigration)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &m.Status)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &m.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MigrationConfiguration.
func (m MigrationConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "keyVaultResourceId", m.KeyVaultResourceID)
	populate(objectMap, "migrationSolutionResourceId", m.MigrationSolutionResourceID)
	populate(objectMap, "storageAccountResourceId", m.StorageAccountResourceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MigrationConfiguration.
func (m *MigrationConfiguration) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "keyVaultResourceId":
			err = unpopulate(val, "KeyVaultResourceID", &m.KeyVaultResourceID)
			delete(rawMsg, key)
		case "migrationSolutionResourceId":
			err = unpopulate(val, "MigrationSolutionResourceID", &m.MigrationSolutionResourceID)
			delete(rawMsg, key)
		case "storageAccountResourceId":
			err = unpopulate(val, "StorageAccountResourceID", &m.StorageAccountResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectModel.
func (m ModernizeProjectModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectModel.
func (m *ModernizeProjectModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &m.ID)
			delete(rawMsg, key)
		case "identity":
			err = unpopulate(val, "Identity", &m.Identity)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, "Location", &m.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &m.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &m.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &m.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &m.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &m.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectModelCollection.
func (m ModernizeProjectModelCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectModelCollection.
func (m *ModernizeProjectModelCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &m.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &m.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectModelProperties.
func (m ModernizeProjectModelProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "migrationConfiguration", m.MigrationConfiguration)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "serviceEndpoint", m.ServiceEndpoint)
	populate(objectMap, "serviceResourceId", m.ServiceResourceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectModelProperties.
func (m *ModernizeProjectModelProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "migrationConfiguration":
			err = unpopulate(val, "MigrationConfiguration", &m.MigrationConfiguration)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &m.ProvisioningState)
			delete(rawMsg, key)
		case "serviceEndpoint":
			err = unpopulate(val, "ServiceEndpoint", &m.ServiceEndpoint)
			delete(rawMsg, key)
		case "serviceResourceId":
			err = unpopulate(val, "ServiceResourceID", &m.ServiceResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectModelSystemData.
func (m ModernizeProjectModelSystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", m.CreatedAt)
	populate(objectMap, "createdBy", m.CreatedBy)
	populate(objectMap, "createdByType", m.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", m.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", m.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", m.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectModelSystemData.
func (m *ModernizeProjectModelSystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &m.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &m.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &m.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &m.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &m.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &m.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectStatisticsModel.
func (m ModernizeProjectStatisticsModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectStatisticsModel.
func (m *ModernizeProjectStatisticsModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, "Properties", &m.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectStatisticsModelProperties.
func (m ModernizeProjectStatisticsModelProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "jobStatistics", m.JobStatistics)
	populate(objectMap, "modernizeProjectErrors", m.ModernizeProjectErrors)
	populate(objectMap, "workloadDeploymentStatistics", m.WorkloadDeploymentStatistics)
	populate(objectMap, "workloadInstanceStatistics", m.WorkloadInstanceStatistics)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectStatisticsModelProperties.
func (m *ModernizeProjectStatisticsModelProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "jobStatistics":
			err = unpopulate(val, "JobStatistics", &m.JobStatistics)
			delete(rawMsg, key)
		case "modernizeProjectErrors":
			err = unpopulate(val, "ModernizeProjectErrors", &m.ModernizeProjectErrors)
			delete(rawMsg, key)
		case "workloadDeploymentStatistics":
			err = unpopulate(val, "WorkloadDeploymentStatistics", &m.WorkloadDeploymentStatistics)
			delete(rawMsg, key)
		case "workloadInstanceStatistics":
			err = unpopulate(val, "WorkloadInstanceStatistics", &m.WorkloadInstanceStatistics)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectStatisticsModelPropertiesJobStatistics.
func (m ModernizeProjectStatisticsModelPropertiesJobStatistics) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "categorizedCounts", m.CategorizedCounts)
	populate(objectMap, "count", m.Count)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectStatisticsModelPropertiesJobStatistics.
func (m *ModernizeProjectStatisticsModelPropertiesJobStatistics) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "categorizedCounts":
			err = unpopulate(val, "CategorizedCounts", &m.CategorizedCounts)
			delete(rawMsg, key)
		case "count":
			err = unpopulate(val, "Count", &m.Count)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectStatisticsModelPropertiesWorkloadDeploymentStatistics.
func (m ModernizeProjectStatisticsModelPropertiesWorkloadDeploymentStatistics) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "categorizedCounts", m.CategorizedCounts)
	populate(objectMap, "count", m.Count)
	populate(objectMap, "healthErrors", m.HealthErrors)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectStatisticsModelPropertiesWorkloadDeploymentStatistics.
func (m *ModernizeProjectStatisticsModelPropertiesWorkloadDeploymentStatistics) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "categorizedCounts":
			err = unpopulate(val, "CategorizedCounts", &m.CategorizedCounts)
			delete(rawMsg, key)
		case "count":
			err = unpopulate(val, "Count", &m.Count)
			delete(rawMsg, key)
		case "healthErrors":
			err = unpopulate(val, "HealthErrors", &m.HealthErrors)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ModernizeProjectStatisticsModelPropertiesWorkloadInstanceStatistics.
func (m ModernizeProjectStatisticsModelPropertiesWorkloadInstanceStatistics) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "categorizedCounts", m.CategorizedCounts)
	populate(objectMap, "count", m.Count)
	populate(objectMap, "healthErrors", m.HealthErrors)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModernizeProjectStatisticsModelPropertiesWorkloadInstanceStatistics.
func (m *ModernizeProjectStatisticsModelPropertiesWorkloadInstanceStatistics) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "categorizedCounts":
			err = unpopulate(val, "CategorizedCounts", &m.CategorizedCounts)
			delete(rawMsg, key)
		case "count":
			err = unpopulate(val, "Count", &m.Count)
			delete(rawMsg, key)
		case "healthErrors":
			err = unpopulate(val, "HealthErrors", &m.HealthErrors)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatingSystemDetails.
func (o OperatingSystemDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "os", o.OS)
	populate(objectMap, "osArchitecture", o.OSArchitecture)
	populate(objectMap, "osName", o.OSName)
	populate(objectMap, "osVersion", o.OSVersion)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatingSystemDetails.
func (o *OperatingSystemDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "os":
			err = unpopulate(val, "OS", &o.OS)
			delete(rawMsg, key)
		case "osArchitecture":
			err = unpopulate(val, "OSArchitecture", &o.OSArchitecture)
			delete(rawMsg, key)
		case "osName":
			err = unpopulate(val, "OSName", &o.OSName)
			delete(rawMsg, key)
		case "osVersion":
			err = unpopulate(val, "OSVersion", &o.OSVersion)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "actionType", o.ActionType)
	populate(objectMap, "display", o.Display)
	populate(objectMap, "isDataAction", o.IsDataAction)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "origin", o.Origin)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Operation.
func (o *Operation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionType":
			err = unpopulate(val, "ActionType", &o.ActionType)
			delete(rawMsg, key)
		case "display":
			err = unpopulate(val, "Display", &o.Display)
			delete(rawMsg, key)
		case "isDataAction":
			err = unpopulate(val, "IsDataAction", &o.IsDataAction)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &o.Name)
			delete(rawMsg, key)
		case "origin":
			err = unpopulate(val, "Origin", &o.Origin)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationDisplay.
func (o OperationDisplay) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "description", o.Description)
	populate(objectMap, "operation", o.Operation)
	populate(objectMap, "provider", o.Provider)
	populate(objectMap, "resource", o.Resource)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationDisplay.
func (o *OperationDisplay) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, "Description", &o.Description)
			delete(rawMsg, key)
		case "operation":
			err = unpopulate(val, "Operation", &o.Operation)
			delete(rawMsg, key)
		case "provider":
			err = unpopulate(val, "Provider", &o.Provider)
			delete(rawMsg, key)
		case "resource":
			err = unpopulate(val, "Resource", &o.Resource)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationListResult.
func (o *OperationListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &o.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &o.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationStatus.
func (o OperationStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "endTime", o.EndTime)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "startTime", o.StartTime)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationStatus.
func (o *OperationStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulate(val, "EndTime", &o.EndTime)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &o.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &o.Name)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulate(val, "StartTime", &o.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PortMapping.
func (p PortMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "externalPort", p.ExternalPort)
	populate(objectMap, "internalPort", p.InternalPort)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PortMapping.
func (p *PortMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "externalPort":
			err = unpopulate(val, "ExternalPort", &p.ExternalPort)
			delete(rawMsg, key)
		case "internalPort":
			err = unpopulate(val, "InternalPort", &p.InternalPort)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ResourceIdentity.
func (r ResourceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "principalId", r.PrincipalID)
	populate(objectMap, "tenantId", r.TenantID)
	populate(objectMap, "type", r.Type)
	populate(objectMap, "userAssignedIdentities", r.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ResourceIdentity.
func (r *ResourceIdentity) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "principalId":
			err = unpopulate(val, "PrincipalID", &r.PrincipalID)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, "TenantID", &r.TenantID)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &r.Type)
			delete(rawMsg, key)
		case "userAssignedIdentities":
			err = unpopulate(val, "UserAssignedIdentities", &r.UserAssignedIdentities)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ResourceRequirements.
func (r ResourceRequirements) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "cpu", r.CPU)
	populate(objectMap, "memory", r.Memory)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ResourceRequirements.
func (r *ResourceRequirements) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "cpu":
			err = unpopulate(val, "CPU", &r.CPU)
			delete(rawMsg, key)
		case "memory":
			err = unpopulate(val, "Memory", &r.Memory)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SecretStoreDetails.
func (s SecretStoreDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "secretStore", s.SecretStore)
	populate(objectMap, "secretStoreProperties", s.SecretStoreProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SecretStoreDetails.
func (s *SecretStoreDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "secretStore":
			err = unpopulate(val, "SecretStore", &s.SecretStore)
			delete(rawMsg, key)
		case "secretStoreProperties":
			err = unpopulate(val, "SecretStoreProperties", &s.SecretStoreProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SecretStoreProperties.
func (s SecretStoreProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "inputType", s.InputType)
	populate(objectMap, "secretStoreId", s.SecretStoreID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SecretStoreProperties.
func (s *SecretStoreProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "inputType":
			err = unpopulate(val, "InputType", &s.InputType)
			delete(rawMsg, key)
		case "secretStoreId":
			err = unpopulate(val, "SecretStoreID", &s.SecretStoreID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TargetStorageProfile.
func (t TargetStorageProfile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "azureFileShareProfile", t.AzureFileShareProfile)
	populate(objectMap, "hydrationStorageProviderType", t.HydrationStorageProviderType)
	populate(objectMap, "persistentVolumeId", t.PersistentVolumeID)
	populate(objectMap, "storageAccessType", t.StorageAccessType)
	populate(objectMap, "storageProjectionType", t.StorageProjectionType)
	populate(objectMap, "targetName", t.TargetName)
	populate(objectMap, "targetSize", t.TargetSize)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TargetStorageProfile.
func (t *TargetStorageProfile) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureFileShareProfile":
			err = unpopulate(val, "AzureFileShareProfile", &t.AzureFileShareProfile)
			delete(rawMsg, key)
		case "hydrationStorageProviderType":
			err = unpopulate(val, "HydrationStorageProviderType", &t.HydrationStorageProviderType)
			delete(rawMsg, key)
		case "persistentVolumeId":
			err = unpopulate(val, "PersistentVolumeID", &t.PersistentVolumeID)
			delete(rawMsg, key)
		case "storageAccessType":
			err = unpopulate(val, "StorageAccessType", &t.StorageAccessType)
			delete(rawMsg, key)
		case "storageProjectionType":
			err = unpopulate(val, "StorageProjectionType", &t.StorageProjectionType)
			delete(rawMsg, key)
		case "targetName":
			err = unpopulate(val, "TargetName", &t.TargetName)
			delete(rawMsg, key)
		case "targetSize":
			err = unpopulate(val, "TargetSize", &t.TargetSize)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TaskModel.
func (t TaskModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "customProperties", t.CustomProperties)
	populateDateTimeRFC3339(objectMap, "endTime", t.EndTime)
	populate(objectMap, "id", t.ID)
	populateDateTimeRFC3339(objectMap, "startTime", t.StartTime)
	populate(objectMap, "state", t.State)
	populate(objectMap, "taskName", t.TaskName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TaskModel.
func (t *TaskModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "customProperties":
			err = unpopulate(val, "CustomProperties", &t.CustomProperties)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateDateTimeRFC3339(val, "EndTime", &t.EndTime)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &t.ID)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateDateTimeRFC3339(val, "StartTime", &t.StartTime)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, "State", &t.State)
			delete(rawMsg, key)
		case "taskName":
			err = unpopulate(val, "TaskName", &t.TaskName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TaskModelCustomProperties.
func (t TaskModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "instanceType", t.InstanceType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TaskModelCustomProperties.
func (t *TaskModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "instanceType":
			err = unpopulate(val, "InstanceType", &t.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TestMigrateCleanupWorkflowModelCustomProperties.
func (t TestMigrateCleanupWorkflowModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "affectedObjectDetails", t.AffectedObjectDetails)
	populate(objectMap, "comments", t.Comments)
	objectMap["instanceType"] = "TestMigrateCleanupWorkflowModelCustomProperties"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TestMigrateCleanupWorkflowModelCustomProperties.
func (t *TestMigrateCleanupWorkflowModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "affectedObjectDetails":
			err = unpopulate(val, "AffectedObjectDetails", &t.AffectedObjectDetails)
			delete(rawMsg, key)
		case "comments":
			err = unpopulate(val, "Comments", &t.Comments)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &t.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TestMigrateModel.
func (t TestMigrateModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TestMigrateModel.
func (t *TestMigrateModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, "Properties", &t.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TestMigrateModelProperties.
func (t TestMigrateModelProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "customProperties", t.CustomProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TestMigrateModelProperties.
func (t *TestMigrateModelProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "customProperties":
			t.CustomProperties, err = unmarshalWorkloadDeploymentModelCustomPropertiesClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TestMigrateWorkflowModelCustomProperties.
func (t TestMigrateWorkflowModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "affectedObjectDetails", t.AffectedObjectDetails)
	populate(objectMap, "deployedResourcesProperties", t.DeployedResourcesProperties)
	objectMap["instanceType"] = "TestMigrateWorkflowModelCustomProperties"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TestMigrateWorkflowModelCustomProperties.
func (t *TestMigrateWorkflowModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "affectedObjectDetails":
			err = unpopulate(val, "AffectedObjectDetails", &t.AffectedObjectDetails)
			delete(rawMsg, key)
		case "deployedResourcesProperties":
			err = unpopulate(val, "DeployedResourcesProperties", &t.DeployedResourcesProperties)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &t.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TestMigrateWorkflowModelCustomPropertiesDeployedResourcesProperties.
func (t TestMigrateWorkflowModelCustomPropertiesDeployedResourcesProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "context", t.Context)
	populate(objectMap, "deployedResourceId", t.DeployedResourceID)
	populateDateTimeRFC3339(objectMap, "deploymentTimestamp", t.DeploymentTimestamp)
	populate(objectMap, "displayName", t.DisplayName)
	populate(objectMap, "id", t.ID)
	populate(objectMap, "isCleanUpDone", t.IsCleanUpDone)
	populate(objectMap, "isTestMigration", t.IsTestMigration)
	populate(objectMap, "status", t.Status)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TestMigrateWorkflowModelCustomPropertiesDeployedResourcesProperties.
func (t *TestMigrateWorkflowModelCustomPropertiesDeployedResourcesProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "context":
			err = unpopulate(val, "Context", &t.Context)
			delete(rawMsg, key)
		case "deployedResourceId":
			err = unpopulate(val, "DeployedResourceID", &t.DeployedResourceID)
			delete(rawMsg, key)
		case "deploymentTimestamp":
			err = unpopulateDateTimeRFC3339(val, "DeploymentTimestamp", &t.DeploymentTimestamp)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &t.DisplayName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &t.ID)
			delete(rawMsg, key)
		case "isCleanUpDone":
			err = unpopulate(val, "IsCleanUpDone", &t.IsCleanUpDone)
			delete(rawMsg, key)
		case "isTestMigration":
			err = unpopulate(val, "IsTestMigration", &t.IsTestMigration)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &t.Status)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &t.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UpdateModernizeProjectModel.
func (u UpdateModernizeProjectModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "identity", u.Identity)
	populate(objectMap, "tags", u.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateModernizeProjectModel.
func (u *UpdateModernizeProjectModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "identity":
			err = unpopulate(val, "Identity", &u.Identity)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &u.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UserAssignedIdentity.
func (u UserAssignedIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "clientId", u.ClientID)
	populate(objectMap, "principalId", u.PrincipalID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UserAssignedIdentity.
func (u *UserAssignedIdentity) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "clientId":
			err = unpopulate(val, "ClientID", &u.ClientID)
			delete(rawMsg, key)
		case "principalId":
			err = unpopulate(val, "PrincipalID", &u.PrincipalID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type VMwareMigrateAgentModelCustomProperties.
func (v VMwareMigrateAgentModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "fabricFriendlyName", v.FabricFriendlyName)
	objectMap["instanceType"] = "VMwareMigrateAgentModelCustomProperties"
	populate(objectMap, "vmwareSiteId", v.VmwareSiteID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VMwareMigrateAgentModelCustomProperties.
func (v *VMwareMigrateAgentModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", v, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "fabricFriendlyName":
			err = unpopulate(val, "FabricFriendlyName", &v.FabricFriendlyName)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &v.InstanceType)
			delete(rawMsg, key)
		case "vmwareSiteId":
			err = unpopulate(val, "VmwareSiteID", &v.VmwareSiteID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", v, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WebApplicationConfiguration.
func (w WebApplicationConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "filePath", w.FilePath)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "identifier", w.Identifier)
	populate(objectMap, "isDeploymentTimeEditable", w.IsDeploymentTimeEditable)
	populate(objectMap, "localFilePath", w.LocalFilePath)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "secretStoreDetails", w.SecretStoreDetails)
	populate(objectMap, "section", w.Section)
	populate(objectMap, "targetFilePath", w.TargetFilePath)
	populate(objectMap, "type", w.Type)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WebApplicationConfiguration.
func (w *WebApplicationConfiguration) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "filePath":
			err = unpopulate(val, "FilePath", &w.FilePath)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &w.ID)
			delete(rawMsg, key)
		case "identifier":
			err = unpopulate(val, "Identifier", &w.Identifier)
			delete(rawMsg, key)
		case "isDeploymentTimeEditable":
			err = unpopulate(val, "IsDeploymentTimeEditable", &w.IsDeploymentTimeEditable)
			delete(rawMsg, key)
		case "localFilePath":
			err = unpopulate(val, "LocalFilePath", &w.LocalFilePath)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &w.Name)
			delete(rawMsg, key)
		case "secretStoreDetails":
			err = unpopulate(val, "SecretStoreDetails", &w.SecretStoreDetails)
			delete(rawMsg, key)
		case "section":
			err = unpopulate(val, "Section", &w.Section)
			delete(rawMsg, key)
		case "targetFilePath":
			err = unpopulate(val, "TargetFilePath", &w.TargetFilePath)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &w.Type)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &w.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WebApplicationDirectory.
func (w WebApplicationDirectory) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "isEditable", w.IsEditable)
	populate(objectMap, "sourcePaths", w.SourcePaths)
	populate(objectMap, "sourceSize", w.SourceSize)
	populate(objectMap, "storageProfile", w.StorageProfile)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WebApplicationDirectory.
func (w *WebApplicationDirectory) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &w.ID)
			delete(rawMsg, key)
		case "isEditable":
			err = unpopulate(val, "IsEditable", &w.IsEditable)
			delete(rawMsg, key)
		case "sourcePaths":
			err = unpopulate(val, "SourcePaths", &w.SourcePaths)
			delete(rawMsg, key)
		case "sourceSize":
			err = unpopulate(val, "SourceSize", &w.SourceSize)
			delete(rawMsg, key)
		case "storageProfile":
			err = unpopulate(val, "StorageProfile", &w.StorageProfile)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WebApplicationFramework.
func (w WebApplicationFramework) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "version", w.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WebApplicationFramework.
func (w *WebApplicationFramework) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &w.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &w.Name)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, "Version", &w.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkflowModel.
func (w WorkflowModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "systemData", w.SystemData)
	populate(objectMap, "tags", w.Tags)
	populate(objectMap, "type", w.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkflowModel.
func (w *WorkflowModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &w.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &w.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &w.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &w.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &w.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &w.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkflowModelCollection.
func (w WorkflowModelCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkflowModelCollection.
func (w *WorkflowModelCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &w.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &w.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkflowModelCustomProperties.
func (w WorkflowModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "affectedObjectDetails", w.AffectedObjectDetails)
	objectMap["instanceType"] = w.InstanceType
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkflowModelCustomProperties.
func (w *WorkflowModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "affectedObjectDetails":
			err = unpopulate(val, "AffectedObjectDetails", &w.AffectedObjectDetails)
			delete(rawMsg, key)
		case "instanceType":
			err = unpopulate(val, "InstanceType", &w.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkflowModelProperties.
func (w WorkflowModelProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "activityId", w.ActivityID)
	populate(objectMap, "allowedActions", w.AllowedActions)
	populate(objectMap, "customProperties", w.CustomProperties)
	populate(objectMap, "displayName", w.DisplayName)
	populateDateTimeRFC3339(objectMap, "endTime", w.EndTime)
	populate(objectMap, "errors", w.Errors)
	populate(objectMap, "objectId", w.ObjectID)
	populate(objectMap, "objectInternalId", w.ObjectInternalID)
	populate(objectMap, "objectInternalName", w.ObjectInternalName)
	populate(objectMap, "objectName", w.ObjectName)
	populate(objectMap, "objectType", w.ObjectType)
	populateDateTimeRFC3339(objectMap, "startTime", w.StartTime)
	populate(objectMap, "state", w.State)
	populate(objectMap, "tasks", w.Tasks)
	populate(objectMap, "workloadDeploymentProviderId", w.WorkloadDeploymentProviderID)
	populate(objectMap, "workloadInstanceProviderId", w.WorkloadInstanceProviderID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkflowModelProperties.
func (w *WorkflowModelProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activityId":
			err = unpopulate(val, "ActivityID", &w.ActivityID)
			delete(rawMsg, key)
		case "allowedActions":
			err = unpopulate(val, "AllowedActions", &w.AllowedActions)
			delete(rawMsg, key)
		case "customProperties":
			w.CustomProperties, err = unmarshalWorkflowModelCustomPropertiesClassification(val)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &w.DisplayName)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateDateTimeRFC3339(val, "EndTime", &w.EndTime)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, "Errors", &w.Errors)
			delete(rawMsg, key)
		case "objectId":
			err = unpopulate(val, "ObjectID", &w.ObjectID)
			delete(rawMsg, key)
		case "objectInternalId":
			err = unpopulate(val, "ObjectInternalID", &w.ObjectInternalID)
			delete(rawMsg, key)
		case "objectInternalName":
			err = unpopulate(val, "ObjectInternalName", &w.ObjectInternalName)
			delete(rawMsg, key)
		case "objectName":
			err = unpopulate(val, "ObjectName", &w.ObjectName)
			delete(rawMsg, key)
		case "objectType":
			err = unpopulate(val, "ObjectType", &w.ObjectType)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateDateTimeRFC3339(val, "StartTime", &w.StartTime)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, "State", &w.State)
			delete(rawMsg, key)
		case "tasks":
			err = unpopulate(val, "Tasks", &w.Tasks)
			delete(rawMsg, key)
		case "workloadDeploymentProviderId":
			err = unpopulate(val, "WorkloadDeploymentProviderID", &w.WorkloadDeploymentProviderID)
			delete(rawMsg, key)
		case "workloadInstanceProviderId":
			err = unpopulate(val, "WorkloadInstanceProviderID", &w.WorkloadInstanceProviderID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkflowModelSystemData.
func (w WorkflowModelSystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", w.CreatedAt)
	populate(objectMap, "createdBy", w.CreatedBy)
	populate(objectMap, "createdByType", w.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", w.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", w.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", w.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkflowModelSystemData.
func (w *WorkflowModelSystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &w.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &w.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &w.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &w.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &w.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &w.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadDeploymentModel.
func (w WorkloadDeploymentModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "systemData", w.SystemData)
	populate(objectMap, "tags", w.Tags)
	populate(objectMap, "type", w.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadDeploymentModel.
func (w *WorkloadDeploymentModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &w.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &w.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &w.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &w.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &w.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &w.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadDeploymentModelCollection.
func (w WorkloadDeploymentModelCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadDeploymentModelCollection.
func (w *WorkloadDeploymentModelCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &w.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &w.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadDeploymentModelCustomProperties.
func (w WorkloadDeploymentModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	objectMap["instanceType"] = w.InstanceType
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadDeploymentModelCustomProperties.
func (w *WorkloadDeploymentModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "instanceType":
			err = unpopulate(val, "InstanceType", &w.InstanceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadDeploymentModelProperties.
func (w WorkloadDeploymentModelProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "allowedOperations", w.AllowedOperations)
	populate(objectMap, "correlationId", w.CorrelationID)
	populate(objectMap, "currentJob", w.CurrentJob)
	populate(objectMap, "customProperties", w.CustomProperties)
	populate(objectMap, "displayName", w.DisplayName)
	populate(objectMap, "healthErrors", w.HealthErrors)
	populateDateTimeRFC3339(objectMap, "lastSuccessfulMigrateTime", w.LastSuccessfulMigrateTime)
	populateDateTimeRFC3339(objectMap, "lastSuccessfulTestMigrateTime", w.LastSuccessfulTestMigrateTime)
	populate(objectMap, "migrationStatus", w.MigrationStatus)
	populate(objectMap, "migrationStatusDescription", w.MigrationStatusDescription)
	populate(objectMap, "provisioningState", w.ProvisioningState)
	populate(objectMap, "status", w.Status)
	populate(objectMap, "statusDescription", w.StatusDescription)
	populate(objectMap, "targetPlatform", w.TargetPlatform)
	populate(objectMap, "testMigrationStatus", w.TestMigrationStatus)
	populate(objectMap, "testMigrationStatusDescription", w.TestMigrationStatusDescription)
	populate(objectMap, "workloadInstanceProperties", w.WorkloadInstanceProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadDeploymentModelProperties.
func (w *WorkloadDeploymentModelProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "allowedOperations":
			err = unpopulate(val, "AllowedOperations", &w.AllowedOperations)
			delete(rawMsg, key)
		case "correlationId":
			err = unpopulate(val, "CorrelationID", &w.CorrelationID)
			delete(rawMsg, key)
		case "currentJob":
			err = unpopulate(val, "CurrentJob", &w.CurrentJob)
			delete(rawMsg, key)
		case "customProperties":
			w.CustomProperties, err = unmarshalWorkloadDeploymentModelCustomPropertiesClassification(val)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &w.DisplayName)
			delete(rawMsg, key)
		case "healthErrors":
			err = unpopulate(val, "HealthErrors", &w.HealthErrors)
			delete(rawMsg, key)
		case "lastSuccessfulMigrateTime":
			err = unpopulateDateTimeRFC3339(val, "LastSuccessfulMigrateTime", &w.LastSuccessfulMigrateTime)
			delete(rawMsg, key)
		case "lastSuccessfulTestMigrateTime":
			err = unpopulateDateTimeRFC3339(val, "LastSuccessfulTestMigrateTime", &w.LastSuccessfulTestMigrateTime)
			delete(rawMsg, key)
		case "migrationStatus":
			err = unpopulate(val, "MigrationStatus", &w.MigrationStatus)
			delete(rawMsg, key)
		case "migrationStatusDescription":
			err = unpopulate(val, "MigrationStatusDescription", &w.MigrationStatusDescription)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &w.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &w.Status)
			delete(rawMsg, key)
		case "statusDescription":
			err = unpopulate(val, "StatusDescription", &w.StatusDescription)
			delete(rawMsg, key)
		case "targetPlatform":
			err = unpopulate(val, "TargetPlatform", &w.TargetPlatform)
			delete(rawMsg, key)
		case "testMigrationStatus":
			err = unpopulate(val, "TestMigrationStatus", &w.TestMigrationStatus)
			delete(rawMsg, key)
		case "testMigrationStatusDescription":
			err = unpopulate(val, "TestMigrationStatusDescription", &w.TestMigrationStatusDescription)
			delete(rawMsg, key)
		case "workloadInstanceProperties":
			err = unpopulate(val, "WorkloadInstanceProperties", &w.WorkloadInstanceProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadDeploymentModelPropertiesCurrentJob.
func (w WorkloadDeploymentModelPropertiesCurrentJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "displayName", w.DisplayName)
	populateDateTimeRFC3339(objectMap, "endTime", w.EndTime)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "scenarioName", w.ScenarioName)
	populateDateTimeRFC3339(objectMap, "startTime", w.StartTime)
	populate(objectMap, "state", w.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadDeploymentModelPropertiesCurrentJob.
func (w *WorkloadDeploymentModelPropertiesCurrentJob) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &w.DisplayName)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateDateTimeRFC3339(val, "EndTime", &w.EndTime)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &w.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &w.Name)
			delete(rawMsg, key)
		case "scenarioName":
			err = unpopulate(val, "ScenarioName", &w.ScenarioName)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateDateTimeRFC3339(val, "StartTime", &w.StartTime)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, "State", &w.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadDeploymentModelSystemData.
func (w WorkloadDeploymentModelSystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", w.CreatedAt)
	populate(objectMap, "createdBy", w.CreatedBy)
	populate(objectMap, "createdByType", w.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", w.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", w.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", w.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadDeploymentModelSystemData.
func (w *WorkloadDeploymentModelSystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &w.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &w.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &w.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &w.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &w.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &w.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadInstanceModel.
func (w WorkloadInstanceModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "systemData", w.SystemData)
	populate(objectMap, "tags", w.Tags)
	populate(objectMap, "type", w.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadInstanceModel.
func (w *WorkloadInstanceModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &w.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &w.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &w.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &w.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &w.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &w.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadInstanceModelCollection.
func (w WorkloadInstanceModelCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadInstanceModelCollection.
func (w *WorkloadInstanceModelCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &w.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &w.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadInstanceModelCustomProperties.
func (w WorkloadInstanceModelCustomProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	objectMap["instanceType"] = w.InstanceType
	populate(objectMap, "webAppArmId", w.WebAppArmID)
	populate(objectMap, "webAppSiteName", w.WebAppSiteName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadInstanceModelCustomProperties.
func (w *WorkloadInstanceModelCustomProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "instanceType":
			err = unpopulate(val, "InstanceType", &w.InstanceType)
			delete(rawMsg, key)
		case "webAppArmId":
			err = unpopulate(val, "WebAppArmID", &w.WebAppArmID)
			delete(rawMsg, key)
		case "webAppSiteName":
			err = unpopulate(val, "WebAppSiteName", &w.WebAppSiteName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadInstanceModelProperties.
func (w WorkloadInstanceModelProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "allowedOperations", w.AllowedOperations)
	populate(objectMap, "currentJob", w.CurrentJob)
	populate(objectMap, "customProperties", w.CustomProperties)
	populate(objectMap, "displayName", w.DisplayName)
	populate(objectMap, "healthErrors", w.HealthErrors)
	populateDateTimeRFC3339(objectMap, "lastSuccessfulReplicationCycleTime", w.LastSuccessfulReplicationCycleTime)
	populate(objectMap, "masterSiteName", w.MasterSiteName)
	populate(objectMap, "migrateAgentId", w.MigrateAgentID)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "provisioningState", w.ProvisioningState)
	populate(objectMap, "replicationHealth", w.ReplicationHealth)
	populate(objectMap, "replicationStatus", w.ReplicationStatus)
	populate(objectMap, "replicationStatusDescription", w.ReplicationStatusDescription)
	populate(objectMap, "sourceName", w.SourceName)
	populate(objectMap, "sourcePlatform", w.SourcePlatform)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadInstanceModelProperties.
func (w *WorkloadInstanceModelProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "allowedOperations":
			err = unpopulate(val, "AllowedOperations", &w.AllowedOperations)
			delete(rawMsg, key)
		case "currentJob":
			err = unpopulate(val, "CurrentJob", &w.CurrentJob)
			delete(rawMsg, key)
		case "customProperties":
			w.CustomProperties, err = unmarshalWorkloadInstanceModelCustomPropertiesClassification(val)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &w.DisplayName)
			delete(rawMsg, key)
		case "healthErrors":
			err = unpopulate(val, "HealthErrors", &w.HealthErrors)
			delete(rawMsg, key)
		case "lastSuccessfulReplicationCycleTime":
			err = unpopulateDateTimeRFC3339(val, "LastSuccessfulReplicationCycleTime", &w.LastSuccessfulReplicationCycleTime)
			delete(rawMsg, key)
		case "masterSiteName":
			err = unpopulate(val, "MasterSiteName", &w.MasterSiteName)
			delete(rawMsg, key)
		case "migrateAgentId":
			err = unpopulate(val, "MigrateAgentID", &w.MigrateAgentID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &w.Name)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &w.ProvisioningState)
			delete(rawMsg, key)
		case "replicationHealth":
			err = unpopulate(val, "ReplicationHealth", &w.ReplicationHealth)
			delete(rawMsg, key)
		case "replicationStatus":
			err = unpopulate(val, "ReplicationStatus", &w.ReplicationStatus)
			delete(rawMsg, key)
		case "replicationStatusDescription":
			err = unpopulate(val, "ReplicationStatusDescription", &w.ReplicationStatusDescription)
			delete(rawMsg, key)
		case "sourceName":
			err = unpopulate(val, "SourceName", &w.SourceName)
			delete(rawMsg, key)
		case "sourcePlatform":
			err = unpopulate(val, "SourcePlatform", &w.SourcePlatform)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadInstanceModelPropertiesCurrentJob.
func (w WorkloadInstanceModelPropertiesCurrentJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "displayName", w.DisplayName)
	populateDateTimeRFC3339(objectMap, "endTime", w.EndTime)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "scenarioName", w.ScenarioName)
	populateDateTimeRFC3339(objectMap, "startTime", w.StartTime)
	populate(objectMap, "state", w.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadInstanceModelPropertiesCurrentJob.
func (w *WorkloadInstanceModelPropertiesCurrentJob) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &w.DisplayName)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateDateTimeRFC3339(val, "EndTime", &w.EndTime)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &w.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &w.Name)
			delete(rawMsg, key)
		case "scenarioName":
			err = unpopulate(val, "ScenarioName", &w.ScenarioName)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateDateTimeRFC3339(val, "StartTime", &w.StartTime)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, "State", &w.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadInstanceModelSystemData.
func (w WorkloadInstanceModelSystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", w.CreatedAt)
	populate(objectMap, "createdBy", w.CreatedBy)
	populate(objectMap, "createdByType", w.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", w.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", w.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", w.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadInstanceModelSystemData.
func (w *WorkloadInstanceModelSystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", w, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &w.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &w.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &w.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &w.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &w.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &w.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", w, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func populateByteArray[T any](m map[string]any, k string, b []T, convert func() any) {
	if azcore.IsNullValue(b) {
		m[k] = nil
	} else if len(b) == 0 {
		return
	} else {
		m[k] = convert()
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
