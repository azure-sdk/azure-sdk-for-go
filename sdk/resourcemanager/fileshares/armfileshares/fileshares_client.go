// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armfileshares

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// FileSharesClient contains the methods for the FileShares group.
// Don't use this type directly, use NewFileSharesClient() instead.
type FileSharesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewFileSharesClient creates a new instance of FileSharesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewFileSharesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*FileSharesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &FileSharesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CheckNameAvailability - Implements local CheckNameAvailability operations
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - location - The name of the Azure region.
//   - body - The CheckAvailability request
//   - options - FileSharesClientCheckNameAvailabilityOptions contains the optional parameters for the FileSharesClient.CheckNameAvailability
//     method.
func (client *FileSharesClient) CheckNameAvailability(ctx context.Context, location string, body CheckNameAvailabilityRequest, options *FileSharesClientCheckNameAvailabilityOptions) (FileSharesClientCheckNameAvailabilityResponse, error) {
	var err error
	const operationName = "FileSharesClient.CheckNameAvailability"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.checkNameAvailabilityCreateRequest(ctx, location, body, options)
	if err != nil {
		return FileSharesClientCheckNameAvailabilityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FileSharesClientCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FileSharesClientCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.checkNameAvailabilityHandleResponse(httpResp)
	return resp, err
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *FileSharesClient) checkNameAvailabilityCreateRequest(ctx context.Context, location string, body CheckNameAvailabilityRequest, _ *FileSharesClientCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.FileShares/locations/{location}/checkNameAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *FileSharesClient) checkNameAvailabilityHandleResponse(resp *http.Response) (FileSharesClientCheckNameAvailabilityResponse, error) {
	result := FileSharesClientCheckNameAvailabilityResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityResponse); err != nil {
		return FileSharesClientCheckNameAvailabilityResponse{}, err
	}
	return result, nil
}

// BeginCreateOrUpdate - Create or update a file share.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - resource - Resource create parameters.
//   - options - FileSharesClientBeginCreateOrUpdateOptions contains the optional parameters for the FileSharesClient.BeginCreateOrUpdate
//     method.
func (client *FileSharesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, resource FileShare, options *FileSharesClientBeginCreateOrUpdateOptions) (*runtime.Poller[FileSharesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, resourceName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FileSharesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FileSharesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create or update a file share.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
func (client *FileSharesClient) createOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, resource FileShare, options *FileSharesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "FileSharesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, resourceName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *FileSharesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, resource FileShare, _ *FileSharesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// CreateOrUpdateFileShareSnapshot - Create a FileShareSnapshot.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - name - The name of the FileShareSnapshot
//   - resource - Resource create parameters.
//   - options - FileSharesClientCreateOrUpdateFileShareSnapshotOptions contains the optional parameters for the FileSharesClient.CreateOrUpdateFileShareSnapshot
//     method.
func (client *FileSharesClient) CreateOrUpdateFileShareSnapshot(ctx context.Context, resourceGroupName string, resourceName string, name string, resource FileShareSnapshot, options *FileSharesClientCreateOrUpdateFileShareSnapshotOptions) (FileSharesClientCreateOrUpdateFileShareSnapshotResponse, error) {
	var err error
	const operationName = "FileSharesClient.CreateOrUpdateFileShareSnapshot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateFileShareSnapshotCreateRequest(ctx, resourceGroupName, resourceName, name, resource, options)
	if err != nil {
		return FileSharesClientCreateOrUpdateFileShareSnapshotResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FileSharesClientCreateOrUpdateFileShareSnapshotResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return FileSharesClientCreateOrUpdateFileShareSnapshotResponse{}, err
	}
	resp, err := client.createOrUpdateFileShareSnapshotHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateFileShareSnapshotCreateRequest creates the CreateOrUpdateFileShareSnapshot request.
func (client *FileSharesClient) createOrUpdateFileShareSnapshotCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, name string, resource FileShareSnapshot, _ *FileSharesClientCreateOrUpdateFileShareSnapshotOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}/fileShareSnapshots/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateFileShareSnapshotHandleResponse handles the CreateOrUpdateFileShareSnapshot response.
func (client *FileSharesClient) createOrUpdateFileShareSnapshotHandleResponse(resp *http.Response) (FileSharesClientCreateOrUpdateFileShareSnapshotResponse, error) {
	result := FileSharesClientCreateOrUpdateFileShareSnapshotResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileShareSnapshot); err != nil {
		return FileSharesClientCreateOrUpdateFileShareSnapshotResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete a FileShare
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - options - FileSharesClientBeginDeleteOptions contains the optional parameters for the FileSharesClient.BeginDelete method.
func (client *FileSharesClient) BeginDelete(ctx context.Context, resourceGroupName string, resourceName string, options *FileSharesClientBeginDeleteOptions) (*runtime.Poller[FileSharesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, resourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FileSharesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FileSharesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a FileShare
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
func (client *FileSharesClient) deleteOperation(ctx context.Context, resourceGroupName string, resourceName string, options *FileSharesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "FileSharesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *FileSharesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, _ *FileSharesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDeleteFileShareSnapshot - Delete a FileShareSnapshot.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - name - The name of the FileShareSnapshot
//   - options - FileSharesClientBeginDeleteFileShareSnapshotOptions contains the optional parameters for the FileSharesClient.BeginDeleteFileShareSnapshot
//     method.
func (client *FileSharesClient) BeginDeleteFileShareSnapshot(ctx context.Context, resourceGroupName string, resourceName string, name string, options *FileSharesClientBeginDeleteFileShareSnapshotOptions) (*runtime.Poller[FileSharesClientDeleteFileShareSnapshotResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteFileShareSnapshot(ctx, resourceGroupName, resourceName, name, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FileSharesClientDeleteFileShareSnapshotResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FileSharesClientDeleteFileShareSnapshotResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DeleteFileShareSnapshot - Delete a FileShareSnapshot.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
func (client *FileSharesClient) deleteFileShareSnapshot(ctx context.Context, resourceGroupName string, resourceName string, name string, options *FileSharesClientBeginDeleteFileShareSnapshotOptions) (*http.Response, error) {
	var err error
	const operationName = "FileSharesClient.BeginDeleteFileShareSnapshot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteFileShareSnapshotCreateRequest(ctx, resourceGroupName, resourceName, name, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteFileShareSnapshotCreateRequest creates the DeleteFileShareSnapshot request.
func (client *FileSharesClient) deleteFileShareSnapshotCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, name string, _ *FileSharesClientBeginDeleteFileShareSnapshotOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}/fileShareSnapshots/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a FileShare
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - options - FileSharesClientGetOptions contains the optional parameters for the FileSharesClient.Get method.
func (client *FileSharesClient) Get(ctx context.Context, resourceGroupName string, resourceName string, options *FileSharesClientGetOptions) (FileSharesClientGetResponse, error) {
	var err error
	const operationName = "FileSharesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return FileSharesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FileSharesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FileSharesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *FileSharesClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, _ *FileSharesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *FileSharesClient) getHandleResponse(resp *http.Response) (FileSharesClientGetResponse, error) {
	result := FileSharesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileShare); err != nil {
		return FileSharesClientGetResponse{}, err
	}
	return result, nil
}

// GetFileShareSnapshot - Get a FileShareSnapshot
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - name - The name of the FileShareSnapshot
//   - options - FileSharesClientGetFileShareSnapshotOptions contains the optional parameters for the FileSharesClient.GetFileShareSnapshot
//     method.
func (client *FileSharesClient) GetFileShareSnapshot(ctx context.Context, resourceGroupName string, resourceName string, name string, options *FileSharesClientGetFileShareSnapshotOptions) (FileSharesClientGetFileShareSnapshotResponse, error) {
	var err error
	const operationName = "FileSharesClient.GetFileShareSnapshot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getFileShareSnapshotCreateRequest(ctx, resourceGroupName, resourceName, name, options)
	if err != nil {
		return FileSharesClientGetFileShareSnapshotResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FileSharesClientGetFileShareSnapshotResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FileSharesClientGetFileShareSnapshotResponse{}, err
	}
	resp, err := client.getFileShareSnapshotHandleResponse(httpResp)
	return resp, err
}

// getFileShareSnapshotCreateRequest creates the GetFileShareSnapshot request.
func (client *FileSharesClient) getFileShareSnapshotCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, name string, _ *FileSharesClientGetFileShareSnapshotOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}/fileShareSnapshots/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getFileShareSnapshotHandleResponse handles the GetFileShareSnapshot response.
func (client *FileSharesClient) getFileShareSnapshotHandleResponse(resp *http.Response) (FileSharesClientGetFileShareSnapshotResponse, error) {
	result := FileSharesClientGetFileShareSnapshotResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileShareSnapshot); err != nil {
		return FileSharesClientGetFileShareSnapshotResponse{}, err
	}
	return result, nil
}

// NewListByFileSharePager - List FileShareSnapshot by FileShare.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - options - FileSharesClientListByFileShareOptions contains the optional parameters for the FileSharesClient.NewListByFileSharePager
//     method.
func (client *FileSharesClient) NewListByFileSharePager(resourceGroupName string, resourceName string, options *FileSharesClientListByFileShareOptions) *runtime.Pager[FileSharesClientListByFileShareResponse] {
	return runtime.NewPager(runtime.PagingHandler[FileSharesClientListByFileShareResponse]{
		More: func(page FileSharesClientListByFileShareResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *FileSharesClientListByFileShareResponse) (FileSharesClientListByFileShareResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "FileSharesClient.NewListByFileSharePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByFileShareCreateRequest(ctx, resourceGroupName, resourceName, options)
			}, nil)
			if err != nil {
				return FileSharesClientListByFileShareResponse{}, err
			}
			return client.listByFileShareHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByFileShareCreateRequest creates the ListByFileShare request.
func (client *FileSharesClient) listByFileShareCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, _ *FileSharesClientListByFileShareOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}/fileShareSnapshots"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByFileShareHandleResponse handles the ListByFileShare response.
func (client *FileSharesClient) listByFileShareHandleResponse(resp *http.Response) (FileSharesClientListByFileShareResponse, error) {
	result := FileSharesClientListByFileShareResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileShareSnapshotListResult); err != nil {
		return FileSharesClientListByFileShareResponse{}, err
	}
	return result, nil
}

// NewListByParentPager - List FileShare resources by resource group
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - FileSharesClientListByParentOptions contains the optional parameters for the FileSharesClient.NewListByParentPager
//     method.
func (client *FileSharesClient) NewListByParentPager(resourceGroupName string, options *FileSharesClientListByParentOptions) *runtime.Pager[FileSharesClientListByParentResponse] {
	return runtime.NewPager(runtime.PagingHandler[FileSharesClientListByParentResponse]{
		More: func(page FileSharesClientListByParentResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *FileSharesClientListByParentResponse) (FileSharesClientListByParentResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "FileSharesClient.NewListByParentPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByParentCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return FileSharesClientListByParentResponse{}, err
			}
			return client.listByParentHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByParentCreateRequest creates the ListByParent request.
func (client *FileSharesClient) listByParentCreateRequest(ctx context.Context, resourceGroupName string, _ *FileSharesClientListByParentOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByParentHandleResponse handles the ListByParent response.
func (client *FileSharesClient) listByParentHandleResponse(resp *http.Response) (FileSharesClientListByParentResponse, error) {
	result := FileSharesClientListByParentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileShareListResult); err != nil {
		return FileSharesClientListByParentResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List FileShare resources by subscription ID
//
// Generated from API version 2024-01-01-preview
//   - options - FileSharesClientListBySubscriptionOptions contains the optional parameters for the FileSharesClient.NewListBySubscriptionPager
//     method.
func (client *FileSharesClient) NewListBySubscriptionPager(options *FileSharesClientListBySubscriptionOptions) *runtime.Pager[FileSharesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[FileSharesClientListBySubscriptionResponse]{
		More: func(page FileSharesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *FileSharesClientListBySubscriptionResponse) (FileSharesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "FileSharesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return FileSharesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *FileSharesClient) listBySubscriptionCreateRequest(ctx context.Context, _ *FileSharesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.FileShares/fileShares"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *FileSharesClient) listBySubscriptionHandleResponse(resp *http.Response) (FileSharesClientListBySubscriptionResponse, error) {
	result := FileSharesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileShareListResult); err != nil {
		return FileSharesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a FileShare
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - properties - The resource properties to be updated.
//   - options - FileSharesClientBeginUpdateOptions contains the optional parameters for the FileSharesClient.BeginUpdate method.
func (client *FileSharesClient) BeginUpdate(ctx context.Context, resourceGroupName string, resourceName string, properties FileShareUpdate, options *FileSharesClientBeginUpdateOptions) (*runtime.Poller[FileSharesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, resourceName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FileSharesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FileSharesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a FileShare
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
func (client *FileSharesClient) update(ctx context.Context, resourceGroupName string, resourceName string, properties FileShareUpdate, options *FileSharesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "FileSharesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, resourceName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *FileSharesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, properties FileShareUpdate, _ *FileSharesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdateFileShareSnapshot - Update a FileShareSnapshot.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The resource name of the file share, as seen by the administrator through Azure Resource Manager.
//   - name - The name of the FileShareSnapshot
//   - properties - The resource properties to be updated.
//   - options - FileSharesClientBeginUpdateFileShareSnapshotOptions contains the optional parameters for the FileSharesClient.BeginUpdateFileShareSnapshot
//     method.
func (client *FileSharesClient) BeginUpdateFileShareSnapshot(ctx context.Context, resourceGroupName string, resourceName string, name string, properties FileShareSnapshotUpdate, options *FileSharesClientBeginUpdateFileShareSnapshotOptions) (*runtime.Poller[FileSharesClientUpdateFileShareSnapshotResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateFileShareSnapshot(ctx, resourceGroupName, resourceName, name, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[FileSharesClientUpdateFileShareSnapshotResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[FileSharesClientUpdateFileShareSnapshotResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// UpdateFileShareSnapshot - Update a FileShareSnapshot.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
func (client *FileSharesClient) updateFileShareSnapshot(ctx context.Context, resourceGroupName string, resourceName string, name string, properties FileShareSnapshotUpdate, options *FileSharesClientBeginUpdateFileShareSnapshotOptions) (*http.Response, error) {
	var err error
	const operationName = "FileSharesClient.BeginUpdateFileShareSnapshot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateFileShareSnapshotCreateRequest(ctx, resourceGroupName, resourceName, name, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateFileShareSnapshotCreateRequest creates the UpdateFileShareSnapshot request.
func (client *FileSharesClient) updateFileShareSnapshotCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, name string, properties FileShareSnapshotUpdate, _ *FileSharesClientBeginUpdateFileShareSnapshotOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}/fileShareSnapshots/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
