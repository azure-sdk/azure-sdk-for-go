//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armazurearcdata

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SQLAvailabilityGroupDatabasesClient contains the methods for the SQLAvailabilityGroupDatabases group.
// Don't use this type directly, use NewSQLAvailabilityGroupDatabasesClient() instead.
type SQLAvailabilityGroupDatabasesClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewSQLAvailabilityGroupDatabasesClient creates a new instance of SQLAvailabilityGroupDatabasesClient with the specified values.
//   - subscriptionID - The ID of the Azure subscription
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSQLAvailabilityGroupDatabasesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SQLAvailabilityGroupDatabasesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &SQLAvailabilityGroupDatabasesClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// Create - Creates or update database in an Arc Sql Availability Group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupDatabaseName - Name of SQL Availability Group Database
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - sqlAvailabilityGroupDatabaseResource - The request body for availability group databases resource.
//   - options - SQLAvailabilityGroupDatabasesClientCreateOptions contains the optional parameters for the SQLAvailabilityGroupDatabasesClient.Create
//     method.
func (client *SQLAvailabilityGroupDatabasesClient) Create(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupDatabaseName string, sqlAvailabilityGroupName string, sqlAvailabilityGroupDatabaseResource SQLAvailabilityGroupDatabaseResource, options *SQLAvailabilityGroupDatabasesClientCreateOptions) (SQLAvailabilityGroupDatabasesClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, sqlAvailabilityGroupDatabaseResource, options)
	if err != nil {
		return SQLAvailabilityGroupDatabasesClientCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupDatabasesClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SQLAvailabilityGroupDatabasesClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *SQLAvailabilityGroupDatabasesClient) createCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupDatabaseName string, sqlAvailabilityGroupName string, sqlAvailabilityGroupDatabaseResource SQLAvailabilityGroupDatabaseResource, options *SQLAvailabilityGroupDatabasesClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupDatabaseName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupDatabaseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupDatabaseName}", url.PathEscape(sqlAvailabilityGroupDatabaseName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sqlAvailabilityGroupDatabaseResource)
}

// createHandleResponse handles the Create response.
func (client *SQLAvailabilityGroupDatabasesClient) createHandleResponse(resp *http.Response) (SQLAvailabilityGroupDatabasesClientCreateResponse, error) {
	result := SQLAvailabilityGroupDatabasesClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroupDatabaseResource); err != nil {
		return SQLAvailabilityGroupDatabasesClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes an Arc Sql availability group database resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupDatabaseName - Name of SQL Availability Group Database
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - options - SQLAvailabilityGroupDatabasesClientDeleteOptions contains the optional parameters for the SQLAvailabilityGroupDatabasesClient.Delete
//     method.
func (client *SQLAvailabilityGroupDatabasesClient) Delete(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupDatabaseName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupDatabasesClientDeleteOptions) (SQLAvailabilityGroupDatabasesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, options)
	if err != nil {
		return SQLAvailabilityGroupDatabasesClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupDatabasesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SQLAvailabilityGroupDatabasesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return SQLAvailabilityGroupDatabasesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SQLAvailabilityGroupDatabasesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupDatabaseName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupDatabasesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupDatabaseName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupDatabaseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupDatabaseName}", url.PathEscape(sqlAvailabilityGroupDatabaseName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieves an Arc Sql availability group database resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupDatabaseName - Name of SQL Availability Group Database
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - options - SQLAvailabilityGroupDatabasesClientGetOptions contains the optional parameters for the SQLAvailabilityGroupDatabasesClient.Get
//     method.
func (client *SQLAvailabilityGroupDatabasesClient) Get(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupDatabaseName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupDatabasesClientGetOptions) (SQLAvailabilityGroupDatabasesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, options)
	if err != nil {
		return SQLAvailabilityGroupDatabasesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupDatabasesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SQLAvailabilityGroupDatabasesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SQLAvailabilityGroupDatabasesClient) getCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupDatabaseName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupDatabasesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupDatabaseName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupDatabaseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupDatabaseName}", url.PathEscape(sqlAvailabilityGroupDatabaseName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SQLAvailabilityGroupDatabasesClient) getHandleResponse(resp *http.Response) (SQLAvailabilityGroupDatabasesClientGetResponse, error) {
	result := SQLAvailabilityGroupDatabasesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroupDatabaseResource); err != nil {
		return SQLAvailabilityGroupDatabasesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List the Availability Group Databases associated with the given Arc Sql AG.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - options - SQLAvailabilityGroupDatabasesClientListOptions contains the optional parameters for the SQLAvailabilityGroupDatabasesClient.NewListPager
//     method.
func (client *SQLAvailabilityGroupDatabasesClient) NewListPager(resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupDatabasesClientListOptions) *runtime.Pager[SQLAvailabilityGroupDatabasesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SQLAvailabilityGroupDatabasesClientListResponse]{
		More: func(page SQLAvailabilityGroupDatabasesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SQLAvailabilityGroupDatabasesClientListResponse) (SQLAvailabilityGroupDatabasesClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SQLAvailabilityGroupDatabasesClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return SQLAvailabilityGroupDatabasesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SQLAvailabilityGroupDatabasesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *SQLAvailabilityGroupDatabasesClient) listCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupDatabasesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SQLAvailabilityGroupDatabasesClient) listHandleResponse(resp *http.Response) (SQLAvailabilityGroupDatabasesClientListResponse, error) {
	result := SQLAvailabilityGroupDatabasesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ArcSQLAvailabilityGroupDatabasesListResult); err != nil {
		return SQLAvailabilityGroupDatabasesClientListResponse{}, err
	}
	return result, nil
}

// Update - Updates an existing Availability Group Database.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupDatabaseName - Name of SQL Availability Group Database
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - sqlAvailabilityGroupDatabaseUpdate - The update availability group database resource.
//   - options - SQLAvailabilityGroupDatabasesClientUpdateOptions contains the optional parameters for the SQLAvailabilityGroupDatabasesClient.Update
//     method.
func (client *SQLAvailabilityGroupDatabasesClient) Update(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupDatabaseName string, sqlAvailabilityGroupName string, sqlAvailabilityGroupDatabaseUpdate SQLAvailabilityGroupDatabaseUpdate, options *SQLAvailabilityGroupDatabasesClientUpdateOptions) (SQLAvailabilityGroupDatabasesClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, sqlAvailabilityGroupDatabaseUpdate, options)
	if err != nil {
		return SQLAvailabilityGroupDatabasesClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupDatabasesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SQLAvailabilityGroupDatabasesClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *SQLAvailabilityGroupDatabasesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupDatabaseName string, sqlAvailabilityGroupName string, sqlAvailabilityGroupDatabaseUpdate SQLAvailabilityGroupDatabaseUpdate, options *SQLAvailabilityGroupDatabasesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupDatabaseName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupDatabaseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupDatabaseName}", url.PathEscape(sqlAvailabilityGroupDatabaseName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sqlAvailabilityGroupDatabaseUpdate)
}

// updateHandleResponse handles the Update response.
func (client *SQLAvailabilityGroupDatabasesClient) updateHandleResponse(resp *http.Response) (SQLAvailabilityGroupDatabasesClientUpdateResponse, error) {
	result := SQLAvailabilityGroupDatabasesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroupDatabaseResource); err != nil {
		return SQLAvailabilityGroupDatabasesClientUpdateResponse{}, err
	}
	return result, nil
}
