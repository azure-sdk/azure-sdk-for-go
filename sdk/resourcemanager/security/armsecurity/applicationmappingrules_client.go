//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ApplicationMappingRulesClient contains the methods for the ApplicationMappingRules group.
// Don't use this type directly, use NewApplicationMappingRulesClient() instead.
type ApplicationMappingRulesClient struct {
	internal *arm.Client
}

// NewApplicationMappingRulesClient creates a new instance of ApplicationMappingRulesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewApplicationMappingRulesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*ApplicationMappingRulesClient, error) {
	cl, err := arm.NewClient(moduleName+".ApplicationMappingRulesClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ApplicationMappingRulesClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a single application mapping rule over a given scope.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01-preview
//   - scope - The scope of the application mapping rules rules. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
//   - ruleID - The rule key - unique key for the rule (GUID)
//   - applicationMappingRule - The application mapping rules resource
//   - options - ApplicationMappingRulesClientCreateOrUpdateOptions contains the optional parameters for the ApplicationMappingRulesClient.CreateOrUpdate
//     method.
func (client *ApplicationMappingRulesClient) CreateOrUpdate(ctx context.Context, scope string, ruleID string, applicationMappingRule ApplicationMappingRule, options *ApplicationMappingRulesClientCreateOrUpdateOptions) (ApplicationMappingRulesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, scope, ruleID, applicationMappingRule, options)
	if err != nil {
		return ApplicationMappingRulesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ApplicationMappingRulesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return ApplicationMappingRulesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ApplicationMappingRulesClient) createOrUpdateCreateRequest(ctx context.Context, scope string, ruleID string, applicationMappingRule ApplicationMappingRule, options *ApplicationMappingRulesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if ruleID == "" {
		return nil, errors.New("parameter ruleID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleId}", url.PathEscape(ruleID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, applicationMappingRule)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ApplicationMappingRulesClient) createOrUpdateHandleResponse(resp *http.Response) (ApplicationMappingRulesClientCreateOrUpdateResponse, error) {
	result := ApplicationMappingRulesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ApplicationMappingRule); err != nil {
		return ApplicationMappingRulesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a single application mapping rule over a given scope.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01-preview
//   - scope - The scope of the application mapping rules rules. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
//   - ruleID - The rule key - unique key for the rule (GUID)
//   - options - ApplicationMappingRulesClientDeleteOptions contains the optional parameters for the ApplicationMappingRulesClient.Delete
//     method.
func (client *ApplicationMappingRulesClient) Delete(ctx context.Context, scope string, ruleID string, options *ApplicationMappingRulesClientDeleteOptions) (ApplicationMappingRulesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, scope, ruleID, options)
	if err != nil {
		return ApplicationMappingRulesClientDeleteResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ApplicationMappingRulesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ApplicationMappingRulesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return ApplicationMappingRulesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ApplicationMappingRulesClient) deleteCreateRequest(ctx context.Context, scope string, ruleID string, options *ApplicationMappingRulesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if ruleID == "" {
		return nil, errors.New("parameter ruleID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleId}", url.PathEscape(ruleID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieves details of a specific application mapping rule for the requested scope by ruleId.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01-preview
//   - scope - The scope of the application mapping rules rules. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
//   - ruleID - The rule key - unique key for the rule (GUID)
//   - options - ApplicationMappingRulesClientGetOptions contains the optional parameters for the ApplicationMappingRulesClient.Get
//     method.
func (client *ApplicationMappingRulesClient) Get(ctx context.Context, scope string, ruleID string, options *ApplicationMappingRulesClientGetOptions) (ApplicationMappingRulesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, ruleID, options)
	if err != nil {
		return ApplicationMappingRulesClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ApplicationMappingRulesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ApplicationMappingRulesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ApplicationMappingRulesClient) getCreateRequest(ctx context.Context, scope string, ruleID string, options *ApplicationMappingRulesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if ruleID == "" {
		return nil, errors.New("parameter ruleID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleId}", url.PathEscape(ruleID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ApplicationMappingRulesClient) getHandleResponse(resp *http.Response) (ApplicationMappingRulesClientGetResponse, error) {
	result := ApplicationMappingRulesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ApplicationMappingRule); err != nil {
		return ApplicationMappingRulesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get a list of all relevant application mapping rules over a scope.
//
// Generated from API version 2023-07-01-preview
//   - scope - The scope of the application mapping rules rules. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
//   - options - ApplicationMappingRulesClientListOptions contains the optional parameters for the ApplicationMappingRulesClient.NewListPager
//     method.
func (client *ApplicationMappingRulesClient) NewListPager(scope string, options *ApplicationMappingRulesClientListOptions) *runtime.Pager[ApplicationMappingRulesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[ApplicationMappingRulesClientListResponse]{
		More: func(page ApplicationMappingRulesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ApplicationMappingRulesClientListResponse) (ApplicationMappingRulesClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, scope, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ApplicationMappingRulesClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return ApplicationMappingRulesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ApplicationMappingRulesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *ApplicationMappingRulesClient) listCreateRequest(ctx context.Context, scope string, options *ApplicationMappingRulesClientListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/applicationMappingRules"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ApplicationMappingRulesClient) listHandleResponse(resp *http.Response) (ApplicationMappingRulesClientListResponse, error) {
	result := ApplicationMappingRulesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ApplicationMappingRuleList); err != nil {
		return ApplicationMappingRulesClientListResponse{}, err
	}
	return result, nil
}
