// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationdiscovery

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SQLDiscoverySiteDataSourceControllerClient contains the methods for the SQLDiscoverySiteDataSourceController group.
// Don't use this type directly, use NewSQLDiscoverySiteDataSourceControllerClient() instead.
type SQLDiscoverySiteDataSourceControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSQLDiscoverySiteDataSourceControllerClient creates a new instance of SQLDiscoverySiteDataSourceControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSQLDiscoverySiteDataSourceControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SQLDiscoverySiteDataSourceControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SQLDiscoverySiteDataSourceControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Create a SqlDiscoverySiteDataSource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - sqlSiteName - SQL site name.
//   - discoverySiteDataSourceName - SQL Discovery site data source name.
//   - body - Resource create parameters.
//   - options - SQLDiscoverySiteDataSourceControllerClientBeginCreateOptions contains the optional parameters for the SQLDiscoverySiteDataSourceControllerClient.BeginCreate
//     method.
func (client *SQLDiscoverySiteDataSourceControllerClient) BeginCreate(ctx context.Context, resourceGroupName string, siteName string, sqlSiteName string, discoverySiteDataSourceName string, body SQLDiscoverySiteDataSource, options *SQLDiscoverySiteDataSourceControllerClientBeginCreateOptions) (*runtime.Poller[SQLDiscoverySiteDataSourceControllerClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, siteName, sqlSiteName, discoverySiteDataSourceName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SQLDiscoverySiteDataSourceControllerClientCreateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SQLDiscoverySiteDataSourceControllerClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Create a SqlDiscoverySiteDataSource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *SQLDiscoverySiteDataSourceControllerClient) create(ctx context.Context, resourceGroupName string, siteName string, sqlSiteName string, discoverySiteDataSourceName string, body SQLDiscoverySiteDataSource, options *SQLDiscoverySiteDataSourceControllerClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "SQLDiscoverySiteDataSourceControllerClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, siteName, sqlSiteName, discoverySiteDataSourceName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *SQLDiscoverySiteDataSourceControllerClient) createCreateRequest(ctx context.Context, resourceGroupName string, siteName string, sqlSiteName string, discoverySiteDataSourceName string, body SQLDiscoverySiteDataSource, _ *SQLDiscoverySiteDataSourceControllerClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/discoverySiteDataSources/{discoverySiteDataSourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if sqlSiteName == "" {
		return nil, errors.New("parameter sqlSiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlSiteName}", url.PathEscape(sqlSiteName))
	if discoverySiteDataSourceName == "" {
		return nil, errors.New("parameter discoverySiteDataSourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoverySiteDataSourceName}", url.PathEscape(discoverySiteDataSourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Delete - Delete a SqlDiscoverySiteDataSource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - sqlSiteName - SQL site name.
//   - discoverySiteDataSourceName - SQL Discovery site data source name.
//   - options - SQLDiscoverySiteDataSourceControllerClientDeleteOptions contains the optional parameters for the SQLDiscoverySiteDataSourceControllerClient.Delete
//     method.
func (client *SQLDiscoverySiteDataSourceControllerClient) Delete(ctx context.Context, resourceGroupName string, siteName string, sqlSiteName string, discoverySiteDataSourceName string, options *SQLDiscoverySiteDataSourceControllerClientDeleteOptions) (SQLDiscoverySiteDataSourceControllerClientDeleteResponse, error) {
	var err error
	const operationName = "SQLDiscoverySiteDataSourceControllerClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, siteName, sqlSiteName, discoverySiteDataSourceName, options)
	if err != nil {
		return SQLDiscoverySiteDataSourceControllerClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLDiscoverySiteDataSourceControllerClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SQLDiscoverySiteDataSourceControllerClientDeleteResponse{}, err
	}
	return SQLDiscoverySiteDataSourceControllerClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SQLDiscoverySiteDataSourceControllerClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, sqlSiteName string, discoverySiteDataSourceName string, _ *SQLDiscoverySiteDataSourceControllerClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/discoverySiteDataSources/{discoverySiteDataSourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if sqlSiteName == "" {
		return nil, errors.New("parameter sqlSiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlSiteName}", url.PathEscape(sqlSiteName))
	if discoverySiteDataSourceName == "" {
		return nil, errors.New("parameter discoverySiteDataSourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoverySiteDataSourceName}", url.PathEscape(discoverySiteDataSourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a SqlDiscoverySiteDataSource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - sqlSiteName - SQL site name.
//   - discoverySiteDataSourceName - SQL Discovery site data source name.
//   - options - SQLDiscoverySiteDataSourceControllerClientGetOptions contains the optional parameters for the SQLDiscoverySiteDataSourceControllerClient.Get
//     method.
func (client *SQLDiscoverySiteDataSourceControllerClient) Get(ctx context.Context, resourceGroupName string, siteName string, sqlSiteName string, discoverySiteDataSourceName string, options *SQLDiscoverySiteDataSourceControllerClientGetOptions) (SQLDiscoverySiteDataSourceControllerClientGetResponse, error) {
	var err error
	const operationName = "SQLDiscoverySiteDataSourceControllerClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, siteName, sqlSiteName, discoverySiteDataSourceName, options)
	if err != nil {
		return SQLDiscoverySiteDataSourceControllerClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLDiscoverySiteDataSourceControllerClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SQLDiscoverySiteDataSourceControllerClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SQLDiscoverySiteDataSourceControllerClient) getCreateRequest(ctx context.Context, resourceGroupName string, siteName string, sqlSiteName string, discoverySiteDataSourceName string, _ *SQLDiscoverySiteDataSourceControllerClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/discoverySiteDataSources/{discoverySiteDataSourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if sqlSiteName == "" {
		return nil, errors.New("parameter sqlSiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlSiteName}", url.PathEscape(sqlSiteName))
	if discoverySiteDataSourceName == "" {
		return nil, errors.New("parameter discoverySiteDataSourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoverySiteDataSourceName}", url.PathEscape(discoverySiteDataSourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SQLDiscoverySiteDataSourceControllerClient) getHandleResponse(resp *http.Response) (SQLDiscoverySiteDataSourceControllerClientGetResponse, error) {
	result := SQLDiscoverySiteDataSourceControllerClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLDiscoverySiteDataSource); err != nil {
		return SQLDiscoverySiteDataSourceControllerClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySQLSitePager - List SqlDiscoverySiteDataSource resources by SqlSite
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - sqlSiteName - SQL site name.
//   - options - SQLDiscoverySiteDataSourceControllerClientListBySQLSiteOptions contains the optional parameters for the SQLDiscoverySiteDataSourceControllerClient.NewListBySQLSitePager
//     method.
func (client *SQLDiscoverySiteDataSourceControllerClient) NewListBySQLSitePager(resourceGroupName string, siteName string, sqlSiteName string, options *SQLDiscoverySiteDataSourceControllerClientListBySQLSiteOptions) *runtime.Pager[SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse]{
		More: func(page SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse) (SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SQLDiscoverySiteDataSourceControllerClient.NewListBySQLSitePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySQLSiteCreateRequest(ctx, resourceGroupName, siteName, sqlSiteName, options)
			}, nil)
			if err != nil {
				return SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse{}, err
			}
			return client.listBySQLSiteHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySQLSiteCreateRequest creates the ListBySQLSite request.
func (client *SQLDiscoverySiteDataSourceControllerClient) listBySQLSiteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, sqlSiteName string, _ *SQLDiscoverySiteDataSourceControllerClientListBySQLSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/discoverySiteDataSources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if sqlSiteName == "" {
		return nil, errors.New("parameter sqlSiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlSiteName}", url.PathEscape(sqlSiteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySQLSiteHandleResponse handles the ListBySQLSite response.
func (client *SQLDiscoverySiteDataSourceControllerClient) listBySQLSiteHandleResponse(resp *http.Response) (SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse, error) {
	result := SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLDiscoverySiteDataSourceListResult); err != nil {
		return SQLDiscoverySiteDataSourceControllerClientListBySQLSiteResponse{}, err
	}
	return result, nil
}
