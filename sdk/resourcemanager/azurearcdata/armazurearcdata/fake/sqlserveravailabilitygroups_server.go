// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurearcdata/armazurearcdata"
	"net/http"
	"net/url"
	"regexp"
)

// SQLServerAvailabilityGroupsServer is a fake server for instances of the armazurearcdata.SQLServerAvailabilityGroupsClient type.
type SQLServerAvailabilityGroupsServer struct {
	// AddDatabases is the fake for method SQLServerAvailabilityGroupsClient.AddDatabases
	// HTTP status codes to indicate success: http.StatusOK
	AddDatabases func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, databases armazurearcdata.Databases, options *armazurearcdata.SQLServerAvailabilityGroupsClientAddDatabasesOptions) (resp azfake.Responder[armazurearcdata.SQLServerAvailabilityGroupsClientAddDatabasesResponse], errResp azfake.ErrorResponder)

	// Create is the fake for method SQLServerAvailabilityGroupsClient.Create
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Create func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, sqlServerAvailabilityGroupResource armazurearcdata.SQLServerAvailabilityGroupResource, options *armazurearcdata.SQLServerAvailabilityGroupsClientCreateOptions) (resp azfake.Responder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginCreateAvailabilityGroup is the fake for method SQLServerAvailabilityGroupsClient.BeginCreateAvailabilityGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateAvailabilityGroup func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, createAgConfiguration armazurearcdata.AvailabilityGroupCreateUpdateConfiguration, options *armazurearcdata.SQLServerAvailabilityGroupsClientBeginCreateAvailabilityGroupOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateAvailabilityGroupResponse], errResp azfake.ErrorResponder)

	// BeginCreateDistributedAvailabilityGroup is the fake for method SQLServerAvailabilityGroupsClient.BeginCreateDistributedAvailabilityGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateDistributedAvailabilityGroup func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, createDagConfiguration armazurearcdata.DistributedAvailabilityGroupCreateUpdateConfiguration, options *armazurearcdata.SQLServerAvailabilityGroupsClientBeginCreateDistributedAvailabilityGroupOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateDistributedAvailabilityGroupResponse], errResp azfake.ErrorResponder)

	// BeginCreateManagedInstanceLink is the fake for method SQLServerAvailabilityGroupsClient.BeginCreateManagedInstanceLink
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateManagedInstanceLink func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, createManagedInstanceLinkConfiguration armazurearcdata.ManagedInstanceLinkCreateUpdateConfiguration, options *armazurearcdata.SQLServerAvailabilityGroupsClientBeginCreateManagedInstanceLinkOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateManagedInstanceLinkResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method SQLServerAvailabilityGroupsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *armazurearcdata.SQLServerAvailabilityGroupsClientBeginDeleteOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientDeleteResponse], errResp azfake.ErrorResponder)

	// DetailView is the fake for method SQLServerAvailabilityGroupsClient.DetailView
	// HTTP status codes to indicate success: http.StatusOK
	DetailView func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *armazurearcdata.SQLServerAvailabilityGroupsClientDetailViewOptions) (resp azfake.Responder[armazurearcdata.SQLServerAvailabilityGroupsClientDetailViewResponse], errResp azfake.ErrorResponder)

	// Failover is the fake for method SQLServerAvailabilityGroupsClient.Failover
	// HTTP status codes to indicate success: http.StatusOK
	Failover func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *armazurearcdata.SQLServerAvailabilityGroupsClientFailoverOptions) (resp azfake.Responder[armazurearcdata.SQLServerAvailabilityGroupsClientFailoverResponse], errResp azfake.ErrorResponder)

	// BeginFailoverMiLink is the fake for method SQLServerAvailabilityGroupsClient.BeginFailoverMiLink
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginFailoverMiLink func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, managedInstanceResourceID armazurearcdata.FailoverMiLinkResourceID, options *armazurearcdata.SQLServerAvailabilityGroupsClientBeginFailoverMiLinkOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientFailoverMiLinkResponse], errResp azfake.ErrorResponder)

	// ForceFailoverAllowDataLoss is the fake for method SQLServerAvailabilityGroupsClient.ForceFailoverAllowDataLoss
	// HTTP status codes to indicate success: http.StatusOK
	ForceFailoverAllowDataLoss func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *armazurearcdata.SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossOptions) (resp azfake.Responder[armazurearcdata.SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SQLServerAvailabilityGroupsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *armazurearcdata.SQLServerAvailabilityGroupsClientGetOptions) (resp azfake.Responder[armazurearcdata.SQLServerAvailabilityGroupsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method SQLServerAvailabilityGroupsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, sqlServerInstanceName string, options *armazurearcdata.SQLServerAvailabilityGroupsClientListOptions) (resp azfake.PagerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientListResponse])

	// RemoveDatabases is the fake for method SQLServerAvailabilityGroupsClient.RemoveDatabases
	// HTTP status codes to indicate success: http.StatusOK
	RemoveDatabases func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, databases armazurearcdata.Databases, options *armazurearcdata.SQLServerAvailabilityGroupsClientRemoveDatabasesOptions) (resp azfake.Responder[armazurearcdata.SQLServerAvailabilityGroupsClientRemoveDatabasesResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method SQLServerAvailabilityGroupsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, sqlServerAvailabilityGroupUpdate armazurearcdata.SQLServerAvailabilityGroupUpdate, options *armazurearcdata.SQLServerAvailabilityGroupsClientBeginUpdateOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewSQLServerAvailabilityGroupsServerTransport creates a new instance of SQLServerAvailabilityGroupsServerTransport with the provided implementation.
// The returned SQLServerAvailabilityGroupsServerTransport instance is connected to an instance of armazurearcdata.SQLServerAvailabilityGroupsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSQLServerAvailabilityGroupsServerTransport(srv *SQLServerAvailabilityGroupsServer) *SQLServerAvailabilityGroupsServerTransport {
	return &SQLServerAvailabilityGroupsServerTransport{
		srv:                                     srv,
		beginCreateAvailabilityGroup:            newTracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateAvailabilityGroupResponse]](),
		beginCreateDistributedAvailabilityGroup: newTracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateDistributedAvailabilityGroupResponse]](),
		beginCreateManagedInstanceLink:          newTracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateManagedInstanceLinkResponse]](),
		beginDelete:                             newTracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientDeleteResponse]](),
		beginFailoverMiLink:                     newTracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientFailoverMiLinkResponse]](),
		newListPager:                            newTracker[azfake.PagerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientListResponse]](),
		beginUpdate:                             newTracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientUpdateResponse]](),
	}
}

// SQLServerAvailabilityGroupsServerTransport connects instances of armazurearcdata.SQLServerAvailabilityGroupsClient to instances of SQLServerAvailabilityGroupsServer.
// Don't use this type directly, use NewSQLServerAvailabilityGroupsServerTransport instead.
type SQLServerAvailabilityGroupsServerTransport struct {
	srv                                     *SQLServerAvailabilityGroupsServer
	beginCreateAvailabilityGroup            *tracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateAvailabilityGroupResponse]]
	beginCreateDistributedAvailabilityGroup *tracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateDistributedAvailabilityGroupResponse]]
	beginCreateManagedInstanceLink          *tracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientCreateManagedInstanceLinkResponse]]
	beginDelete                             *tracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientDeleteResponse]]
	beginFailoverMiLink                     *tracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientFailoverMiLinkResponse]]
	newListPager                            *tracker[azfake.PagerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientListResponse]]
	beginUpdate                             *tracker[azfake.PollerResponder[armazurearcdata.SQLServerAvailabilityGroupsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for SQLServerAvailabilityGroupsServerTransport.
func (s *SQLServerAvailabilityGroupsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if sqlServerAvailabilityGroupsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = sqlServerAvailabilityGroupsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SQLServerAvailabilityGroupsClient.AddDatabases":
				res.resp, res.err = s.dispatchAddDatabases(req)
			case "SQLServerAvailabilityGroupsClient.Create":
				res.resp, res.err = s.dispatchCreate(req)
			case "SQLServerAvailabilityGroupsClient.BeginCreateAvailabilityGroup":
				res.resp, res.err = s.dispatchBeginCreateAvailabilityGroup(req)
			case "SQLServerAvailabilityGroupsClient.BeginCreateDistributedAvailabilityGroup":
				res.resp, res.err = s.dispatchBeginCreateDistributedAvailabilityGroup(req)
			case "SQLServerAvailabilityGroupsClient.BeginCreateManagedInstanceLink":
				res.resp, res.err = s.dispatchBeginCreateManagedInstanceLink(req)
			case "SQLServerAvailabilityGroupsClient.BeginDelete":
				res.resp, res.err = s.dispatchBeginDelete(req)
			case "SQLServerAvailabilityGroupsClient.DetailView":
				res.resp, res.err = s.dispatchDetailView(req)
			case "SQLServerAvailabilityGroupsClient.Failover":
				res.resp, res.err = s.dispatchFailover(req)
			case "SQLServerAvailabilityGroupsClient.BeginFailoverMiLink":
				res.resp, res.err = s.dispatchBeginFailoverMiLink(req)
			case "SQLServerAvailabilityGroupsClient.ForceFailoverAllowDataLoss":
				res.resp, res.err = s.dispatchForceFailoverAllowDataLoss(req)
			case "SQLServerAvailabilityGroupsClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			case "SQLServerAvailabilityGroupsClient.NewListPager":
				res.resp, res.err = s.dispatchNewListPager(req)
			case "SQLServerAvailabilityGroupsClient.RemoveDatabases":
				res.resp, res.err = s.dispatchRemoveDatabases(req)
			case "SQLServerAvailabilityGroupsClient.BeginUpdate":
				res.resp, res.err = s.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchAddDatabases(req *http.Request) (*http.Response, error) {
	if s.srv.AddDatabases == nil {
		return nil, &nonRetriableError{errors.New("fake for method AddDatabases not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/addDatabases`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurearcdata.Databases](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.AddDatabases(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerAvailabilityGroupResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if s.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurearcdata.SQLServerAvailabilityGroupResource](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Create(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerAvailabilityGroupResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchBeginCreateAvailabilityGroup(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreateAvailabilityGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateAvailabilityGroup not implemented")}
	}
	beginCreateAvailabilityGroup := s.beginCreateAvailabilityGroup.get(req)
	if beginCreateAvailabilityGroup == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/createAvailabilityGroup`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurearcdata.AvailabilityGroupCreateUpdateConfiguration](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreateAvailabilityGroup(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateAvailabilityGroup = &respr
		s.beginCreateAvailabilityGroup.add(req, beginCreateAvailabilityGroup)
	}

	resp, err := server.PollerResponderNext(beginCreateAvailabilityGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginCreateAvailabilityGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateAvailabilityGroup) {
		s.beginCreateAvailabilityGroup.remove(req)
	}

	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchBeginCreateDistributedAvailabilityGroup(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreateDistributedAvailabilityGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateDistributedAvailabilityGroup not implemented")}
	}
	beginCreateDistributedAvailabilityGroup := s.beginCreateDistributedAvailabilityGroup.get(req)
	if beginCreateDistributedAvailabilityGroup == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/createDistributedAvailabilityGroup`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurearcdata.DistributedAvailabilityGroupCreateUpdateConfiguration](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreateDistributedAvailabilityGroup(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateDistributedAvailabilityGroup = &respr
		s.beginCreateDistributedAvailabilityGroup.add(req, beginCreateDistributedAvailabilityGroup)
	}

	resp, err := server.PollerResponderNext(beginCreateDistributedAvailabilityGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginCreateDistributedAvailabilityGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateDistributedAvailabilityGroup) {
		s.beginCreateDistributedAvailabilityGroup.remove(req)
	}

	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchBeginCreateManagedInstanceLink(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreateManagedInstanceLink == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateManagedInstanceLink not implemented")}
	}
	beginCreateManagedInstanceLink := s.beginCreateManagedInstanceLink.get(req)
	if beginCreateManagedInstanceLink == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/createManagedInstanceLink`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurearcdata.ManagedInstanceLinkCreateUpdateConfiguration](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreateManagedInstanceLink(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateManagedInstanceLink = &respr
		s.beginCreateManagedInstanceLink.add(req, beginCreateManagedInstanceLink)
	}

	resp, err := server.PollerResponderNext(beginCreateManagedInstanceLink, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginCreateManagedInstanceLink.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateManagedInstanceLink) {
		s.beginCreateManagedInstanceLink.remove(req)
	}

	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if s.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := s.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginDelete(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		s.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		s.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		s.beginDelete.remove(req)
	}

	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchDetailView(req *http.Request) (*http.Response, error) {
	if s.srv.DetailView == nil {
		return nil, &nonRetriableError{errors.New("fake for method DetailView not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getDetailView`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.DetailView(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerAvailabilityGroupResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchFailover(req *http.Request) (*http.Response, error) {
	if s.srv.Failover == nil {
		return nil, &nonRetriableError{errors.New("fake for method Failover not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/failover`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Failover(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerAvailabilityGroupResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchBeginFailoverMiLink(req *http.Request) (*http.Response, error) {
	if s.srv.BeginFailoverMiLink == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginFailoverMiLink not implemented")}
	}
	beginFailoverMiLink := s.beginFailoverMiLink.get(req)
	if beginFailoverMiLink == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/failoverMiLink`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurearcdata.FailoverMiLinkResourceID](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginFailoverMiLink(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginFailoverMiLink = &respr
		s.beginFailoverMiLink.add(req, beginFailoverMiLink)
	}

	resp, err := server.PollerResponderNext(beginFailoverMiLink, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginFailoverMiLink.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginFailoverMiLink) {
		s.beginFailoverMiLink.remove(req)
	}

	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchForceFailoverAllowDataLoss(req *http.Request) (*http.Response, error) {
	if s.srv.ForceFailoverAllowDataLoss == nil {
		return nil, &nonRetriableError{errors.New("fake for method ForceFailoverAllowDataLoss not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/forceFailoverAllowDataLoss`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.ForceFailoverAllowDataLoss(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerAvailabilityGroupResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerAvailabilityGroupResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := s.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListPager(resourceGroupNameParam, sqlServerInstanceNameParam, nil)
		newListPager = &resp
		s.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armazurearcdata.SQLServerAvailabilityGroupsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		s.newListPager.remove(req)
	}
	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchRemoveDatabases(req *http.Request) (*http.Response, error) {
	if s.srv.RemoveDatabases == nil {
		return nil, &nonRetriableError{errors.New("fake for method RemoveDatabases not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/removeDatabases`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurearcdata.Databases](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.RemoveDatabases(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerAvailabilityGroupResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerAvailabilityGroupsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := s.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availabilityGroups/(?P<availabilityGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurearcdata.SQLServerAvailabilityGroupUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		availabilityGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("availabilityGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginUpdate(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, availabilityGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		s.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		s.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to SQLServerAvailabilityGroupsServerTransport
var sqlServerAvailabilityGroupsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
