//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfairfieldgardens

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ProvisioningPoliciesClient contains the methods for the ProvisioningPolicies group.
// Don't use this type directly, use NewProvisioningPoliciesClient() instead.
type ProvisioningPoliciesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewProvisioningPoliciesClient creates a new instance of ProvisioningPoliciesClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewProvisioningPoliciesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ProvisioningPoliciesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ProvisioningPoliciesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a ProvisioningPolicy
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - provisioningResourceName - The name of the Provisioning Resource.
//   - provisioningPolicyName - The name of the Provisioning Policy tracked resource.
//   - resource - Resource create parameters.
//   - options - ProvisioningPoliciesClientBeginCreateOrUpdateOptions contains the optional parameters for the ProvisioningPoliciesClient.BeginCreateOrUpdate
//     method.
func (client *ProvisioningPoliciesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, resource ProvisioningPolicy, options *ProvisioningPoliciesClientBeginCreateOrUpdateOptions) (*runtime.Poller[ProvisioningPoliciesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, provisioningResourceName, provisioningPolicyName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ProvisioningPoliciesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ProvisioningPoliciesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a ProvisioningPolicy
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *ProvisioningPoliciesClient) createOrUpdate(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, resource ProvisioningPolicy, options *ProvisioningPoliciesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ProvisioningPoliciesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, provisioningResourceName, provisioningPolicyName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ProvisioningPoliciesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, resource ProvisioningPolicy, options *ProvisioningPoliciesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if provisioningResourceName == "" {
		return nil, errors.New("parameter provisioningResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningResourceName}", url.PathEscape(provisioningResourceName))
	if provisioningPolicyName == "" {
		return nil, errors.New("parameter provisioningPolicyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningPolicyName}", url.PathEscape(provisioningPolicyName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// Delete - Delete a ProvisioningPolicy
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - provisioningResourceName - The name of the Provisioning Resource.
//   - provisioningPolicyName - The name of the Provisioning Policy tracked resource.
//   - options - ProvisioningPoliciesClientDeleteOptions contains the optional parameters for the ProvisioningPoliciesClient.Delete
//     method.
func (client *ProvisioningPoliciesClient) Delete(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, options *ProvisioningPoliciesClientDeleteOptions) (ProvisioningPoliciesClientDeleteResponse, error) {
	var err error
	const operationName = "ProvisioningPoliciesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, provisioningResourceName, provisioningPolicyName, options)
	if err != nil {
		return ProvisioningPoliciesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProvisioningPoliciesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ProvisioningPoliciesClientDeleteResponse{}, err
	}
	return ProvisioningPoliciesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ProvisioningPoliciesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, options *ProvisioningPoliciesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if provisioningResourceName == "" {
		return nil, errors.New("parameter provisioningResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningResourceName}", url.PathEscape(provisioningResourceName))
	if provisioningPolicyName == "" {
		return nil, errors.New("parameter provisioningPolicyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningPolicyName}", url.PathEscape(provisioningPolicyName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a ProvisioningPolicy
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - provisioningResourceName - The name of the Provisioning Resource.
//   - provisioningPolicyName - The name of the Provisioning Policy tracked resource.
//   - options - ProvisioningPoliciesClientGetOptions contains the optional parameters for the ProvisioningPoliciesClient.Get
//     method.
func (client *ProvisioningPoliciesClient) Get(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, options *ProvisioningPoliciesClientGetOptions) (ProvisioningPoliciesClientGetResponse, error) {
	var err error
	const operationName = "ProvisioningPoliciesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, provisioningResourceName, provisioningPolicyName, options)
	if err != nil {
		return ProvisioningPoliciesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProvisioningPoliciesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ProvisioningPoliciesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ProvisioningPoliciesClient) getCreateRequest(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, options *ProvisioningPoliciesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if provisioningResourceName == "" {
		return nil, errors.New("parameter provisioningResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningResourceName}", url.PathEscape(provisioningResourceName))
	if provisioningPolicyName == "" {
		return nil, errors.New("parameter provisioningPolicyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningPolicyName}", url.PathEscape(provisioningPolicyName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ProvisioningPoliciesClient) getHandleResponse(resp *http.Response) (ProvisioningPoliciesClientGetResponse, error) {
	result := ProvisioningPoliciesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProvisioningPolicy); err != nil {
		return ProvisioningPoliciesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByProvisioningResourcePager - List ProvisioningPolicy resources by ProvisioningResource
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - provisioningResourceName - The name of the Provisioning Resource.
//   - options - ProvisioningPoliciesClientListByProvisioningResourceOptions contains the optional parameters for the ProvisioningPoliciesClient.NewListByProvisioningResourcePager
//     method.
func (client *ProvisioningPoliciesClient) NewListByProvisioningResourcePager(resourceGroupName string, provisioningResourceName string, options *ProvisioningPoliciesClientListByProvisioningResourceOptions) *runtime.Pager[ProvisioningPoliciesClientListByProvisioningResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[ProvisioningPoliciesClientListByProvisioningResourceResponse]{
		More: func(page ProvisioningPoliciesClientListByProvisioningResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ProvisioningPoliciesClientListByProvisioningResourceResponse) (ProvisioningPoliciesClientListByProvisioningResourceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ProvisioningPoliciesClient.NewListByProvisioningResourcePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByProvisioningResourceCreateRequest(ctx, resourceGroupName, provisioningResourceName, options)
			}, nil)
			if err != nil {
				return ProvisioningPoliciesClientListByProvisioningResourceResponse{}, err
			}
			return client.listByProvisioningResourceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByProvisioningResourceCreateRequest creates the ListByProvisioningResource request.
func (client *ProvisioningPoliciesClient) listByProvisioningResourceCreateRequest(ctx context.Context, resourceGroupName string, provisioningResourceName string, options *ProvisioningPoliciesClientListByProvisioningResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if provisioningResourceName == "" {
		return nil, errors.New("parameter provisioningResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningResourceName}", url.PathEscape(provisioningResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByProvisioningResourceHandleResponse handles the ListByProvisioningResource response.
func (client *ProvisioningPoliciesClient) listByProvisioningResourceHandleResponse(resp *http.Response) (ProvisioningPoliciesClientListByProvisioningResourceResponse, error) {
	result := ProvisioningPoliciesClientListByProvisioningResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProvisioningPolicyListResult); err != nil {
		return ProvisioningPoliciesClientListByProvisioningResourceResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a ProvisioningPolicy
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - provisioningResourceName - The name of the Provisioning Resource.
//   - provisioningPolicyName - The name of the Provisioning Policy tracked resource.
//   - properties - The resource properties to be updated.
//   - options - ProvisioningPoliciesClientBeginUpdateOptions contains the optional parameters for the ProvisioningPoliciesClient.BeginUpdate
//     method.
func (client *ProvisioningPoliciesClient) BeginUpdate(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, properties ProvisioningPolicyUpdate, options *ProvisioningPoliciesClientBeginUpdateOptions) (*runtime.Poller[ProvisioningPoliciesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, provisioningResourceName, provisioningPolicyName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ProvisioningPoliciesClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ProvisioningPoliciesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a ProvisioningPolicy
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *ProvisioningPoliciesClient) update(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, properties ProvisioningPolicyUpdate, options *ProvisioningPoliciesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ProvisioningPoliciesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, provisioningResourceName, provisioningPolicyName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *ProvisioningPoliciesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, properties ProvisioningPolicyUpdate, options *ProvisioningPoliciesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if provisioningResourceName == "" {
		return nil, errors.New("parameter provisioningResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningResourceName}", url.PathEscape(provisioningResourceName))
	if provisioningPolicyName == "" {
		return nil, errors.New("parameter provisioningPolicyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{provisioningPolicyName}", url.PathEscape(provisioningPolicyName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
