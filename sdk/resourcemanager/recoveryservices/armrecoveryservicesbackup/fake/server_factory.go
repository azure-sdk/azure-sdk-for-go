//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armrecoveryservicesbackup.ClientFactory type.
type ServerFactory struct {
	AADPropertiesServer                AADPropertiesServer
	BackupCrrJobDetailsServer          BackupCrrJobDetailsServer
	BackupCrrJobsServer                BackupCrrJobsServer
	BackupProtectedItemsCrrServer      BackupProtectedItemsCrrServer
	BackupResourceStorageConfigsServer BackupResourceStorageConfigsServer
	BackupUsageSummariesCRRServer      BackupUsageSummariesCRRServer
	CrossRegionRestoreServer           CrossRegionRestoreServer
	CrrOperationResultsServer          CrrOperationResultsServer
	CrrOperationStatusServer           CrrOperationStatusServer
	RecoveryPointsServer               RecoveryPointsServer
	RecoveryPointsCrrServer            RecoveryPointsCrrServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armrecoveryservicesbackup.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armrecoveryservicesbackup.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                  *ServerFactory
	trMu                                 sync.Mutex
	trAADPropertiesServer                *AADPropertiesServerTransport
	trBackupCrrJobDetailsServer          *BackupCrrJobDetailsServerTransport
	trBackupCrrJobsServer                *BackupCrrJobsServerTransport
	trBackupProtectedItemsCrrServer      *BackupProtectedItemsCrrServerTransport
	trBackupResourceStorageConfigsServer *BackupResourceStorageConfigsServerTransport
	trBackupUsageSummariesCRRServer      *BackupUsageSummariesCRRServerTransport
	trCrossRegionRestoreServer           *CrossRegionRestoreServerTransport
	trCrrOperationResultsServer          *CrrOperationResultsServerTransport
	trCrrOperationStatusServer           *CrrOperationStatusServerTransport
	trRecoveryPointsServer               *RecoveryPointsServerTransport
	trRecoveryPointsCrrServer            *RecoveryPointsCrrServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AADPropertiesClient":
		initServer(s, &s.trAADPropertiesServer, func() *AADPropertiesServerTransport {
			return NewAADPropertiesServerTransport(&s.srv.AADPropertiesServer)
		})
		resp, err = s.trAADPropertiesServer.Do(req)
	case "BackupCrrJobDetailsClient":
		initServer(s, &s.trBackupCrrJobDetailsServer, func() *BackupCrrJobDetailsServerTransport {
			return NewBackupCrrJobDetailsServerTransport(&s.srv.BackupCrrJobDetailsServer)
		})
		resp, err = s.trBackupCrrJobDetailsServer.Do(req)
	case "BackupCrrJobsClient":
		initServer(s, &s.trBackupCrrJobsServer, func() *BackupCrrJobsServerTransport {
			return NewBackupCrrJobsServerTransport(&s.srv.BackupCrrJobsServer)
		})
		resp, err = s.trBackupCrrJobsServer.Do(req)
	case "BackupProtectedItemsCrrClient":
		initServer(s, &s.trBackupProtectedItemsCrrServer, func() *BackupProtectedItemsCrrServerTransport {
			return NewBackupProtectedItemsCrrServerTransport(&s.srv.BackupProtectedItemsCrrServer)
		})
		resp, err = s.trBackupProtectedItemsCrrServer.Do(req)
	case "BackupResourceStorageConfigsClient":
		initServer(s, &s.trBackupResourceStorageConfigsServer, func() *BackupResourceStorageConfigsServerTransport {
			return NewBackupResourceStorageConfigsServerTransport(&s.srv.BackupResourceStorageConfigsServer)
		})
		resp, err = s.trBackupResourceStorageConfigsServer.Do(req)
	case "BackupUsageSummariesCRRClient":
		initServer(s, &s.trBackupUsageSummariesCRRServer, func() *BackupUsageSummariesCRRServerTransport {
			return NewBackupUsageSummariesCRRServerTransport(&s.srv.BackupUsageSummariesCRRServer)
		})
		resp, err = s.trBackupUsageSummariesCRRServer.Do(req)
	case "CrossRegionRestoreClient":
		initServer(s, &s.trCrossRegionRestoreServer, func() *CrossRegionRestoreServerTransport {
			return NewCrossRegionRestoreServerTransport(&s.srv.CrossRegionRestoreServer)
		})
		resp, err = s.trCrossRegionRestoreServer.Do(req)
	case "CrrOperationResultsClient":
		initServer(s, &s.trCrrOperationResultsServer, func() *CrrOperationResultsServerTransport {
			return NewCrrOperationResultsServerTransport(&s.srv.CrrOperationResultsServer)
		})
		resp, err = s.trCrrOperationResultsServer.Do(req)
	case "CrrOperationStatusClient":
		initServer(s, &s.trCrrOperationStatusServer, func() *CrrOperationStatusServerTransport {
			return NewCrrOperationStatusServerTransport(&s.srv.CrrOperationStatusServer)
		})
		resp, err = s.trCrrOperationStatusServer.Do(req)
	case "RecoveryPointsClient":
		initServer(s, &s.trRecoveryPointsServer, func() *RecoveryPointsServerTransport {
			return NewRecoveryPointsServerTransport(&s.srv.RecoveryPointsServer)
		})
		resp, err = s.trRecoveryPointsServer.Do(req)
	case "RecoveryPointsCrrClient":
		initServer(s, &s.trRecoveryPointsCrrServer, func() *RecoveryPointsCrrServerTransport {
			return NewRecoveryPointsCrrServerTransport(&s.srv.RecoveryPointsCrrServer)
		})
		resp, err = s.trRecoveryPointsCrrServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
