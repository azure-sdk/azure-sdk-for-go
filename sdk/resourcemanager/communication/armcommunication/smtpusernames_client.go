// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcommunication

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SMTPUsernamesClient contains the methods for the SMTPUsernames group.
// Don't use this type directly, use NewSMTPUsernamesClient() instead.
type SMTPUsernamesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSMTPUsernamesClient creates a new instance of SMTPUsernamesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSMTPUsernamesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SMTPUsernamesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SMTPUsernamesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update an SmtpUsernameResource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationServiceName - The name of the CommunicationService resource.
//   - smtpUsername - The name of the SmtpUsernameResource.
//   - parameters - Parameters for the create or update operation
//   - options - SMTPUsernamesClientCreateOrUpdateOptions contains the optional parameters for the SMTPUsernamesClient.CreateOrUpdate
//     method.
func (client *SMTPUsernamesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, communicationServiceName string, smtpUsername string, parameters SMTPUsernameResource, options *SMTPUsernamesClientCreateOrUpdateOptions) (SMTPUsernamesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "SMTPUsernamesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, communicationServiceName, smtpUsername, parameters, options)
	if err != nil {
		return SMTPUsernamesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SMTPUsernamesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SMTPUsernamesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SMTPUsernamesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, smtpUsername string, parameters SMTPUsernameResource, _ *SMTPUsernamesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/smtpUsernames/{smtpUsername}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	if smtpUsername == "" {
		return nil, errors.New("parameter smtpUsername cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smtpUsername}", url.PathEscape(smtpUsername))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SMTPUsernamesClient) createOrUpdateHandleResponse(resp *http.Response) (SMTPUsernamesClientCreateOrUpdateResponse, error) {
	result := SMTPUsernamesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SMTPUsernameResource); err != nil {
		return SMTPUsernamesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Operation to delete a single SmtpUsername resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationServiceName - The name of the CommunicationService resource.
//   - smtpUsername - The name of the SmtpUsernameResource.
//   - options - SMTPUsernamesClientDeleteOptions contains the optional parameters for the SMTPUsernamesClient.Delete method.
func (client *SMTPUsernamesClient) Delete(ctx context.Context, resourceGroupName string, communicationServiceName string, smtpUsername string, options *SMTPUsernamesClientDeleteOptions) (SMTPUsernamesClientDeleteResponse, error) {
	var err error
	const operationName = "SMTPUsernamesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, communicationServiceName, smtpUsername, options)
	if err != nil {
		return SMTPUsernamesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SMTPUsernamesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SMTPUsernamesClientDeleteResponse{}, err
	}
	return SMTPUsernamesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SMTPUsernamesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, smtpUsername string, _ *SMTPUsernamesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/smtpUsernames/{smtpUsername}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	if smtpUsername == "" {
		return nil, errors.New("parameter smtpUsername cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smtpUsername}", url.PathEscape(smtpUsername))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a SmtpUsernameResource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationServiceName - The name of the CommunicationService resource.
//   - smtpUsername - The name of the SmtpUsernameResource.
//   - options - SMTPUsernamesClientGetOptions contains the optional parameters for the SMTPUsernamesClient.Get method.
func (client *SMTPUsernamesClient) Get(ctx context.Context, resourceGroupName string, communicationServiceName string, smtpUsername string, options *SMTPUsernamesClientGetOptions) (SMTPUsernamesClientGetResponse, error) {
	var err error
	const operationName = "SMTPUsernamesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, communicationServiceName, smtpUsername, options)
	if err != nil {
		return SMTPUsernamesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SMTPUsernamesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SMTPUsernamesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SMTPUsernamesClient) getCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, smtpUsername string, _ *SMTPUsernamesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/smtpUsernames/{smtpUsername}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	if smtpUsername == "" {
		return nil, errors.New("parameter smtpUsername cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smtpUsername}", url.PathEscape(smtpUsername))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SMTPUsernamesClient) getHandleResponse(resp *http.Response) (SMTPUsernamesClientGetResponse, error) {
	result := SMTPUsernamesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SMTPUsernameResource); err != nil {
		return SMTPUsernamesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get all SmtpUsernameResources for a Communication resource.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationServiceName - The name of the CommunicationService resource.
//   - options - SMTPUsernamesClientListOptions contains the optional parameters for the SMTPUsernamesClient.NewListPager method.
func (client *SMTPUsernamesClient) NewListPager(resourceGroupName string, communicationServiceName string, options *SMTPUsernamesClientListOptions) *runtime.Pager[SMTPUsernamesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SMTPUsernamesClientListResponse]{
		More: func(page SMTPUsernamesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SMTPUsernamesClientListResponse) (SMTPUsernamesClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SMTPUsernamesClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, communicationServiceName, options)
			}, nil)
			if err != nil {
				return SMTPUsernamesClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *SMTPUsernamesClient) listCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, _ *SMTPUsernamesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/smtpUsernames"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SMTPUsernamesClient) listHandleResponse(resp *http.Response) (SMTPUsernamesClientListResponse, error) {
	result := SMTPUsernamesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SMTPUsernameResourceCollection); err != nil {
		return SMTPUsernamesClientListResponse{}, err
	}
	return result, nil
}
