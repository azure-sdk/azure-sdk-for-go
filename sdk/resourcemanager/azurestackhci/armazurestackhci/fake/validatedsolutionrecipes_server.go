// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhci/v3"
	"net/http"
	"net/url"
	"regexp"
)

// ValidatedSolutionRecipesServer is a fake server for instances of the armazurestackhci.ValidatedSolutionRecipesClient type.
type ValidatedSolutionRecipesServer struct {
	// Get is the fake for method ValidatedSolutionRecipesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, location string, validatedSolutionRecipeName string, options *armazurestackhci.ValidatedSolutionRecipesClientGetOptions) (resp azfake.Responder[armazurestackhci.ValidatedSolutionRecipesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListBySubscriptionLocationResourcePager is the fake for method ValidatedSolutionRecipesClient.NewListBySubscriptionLocationResourcePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionLocationResourcePager func(location string, options *armazurestackhci.ValidatedSolutionRecipesClientListBySubscriptionLocationResourceOptions) (resp azfake.PagerResponder[armazurestackhci.ValidatedSolutionRecipesClientListBySubscriptionLocationResourceResponse])
}

// NewValidatedSolutionRecipesServerTransport creates a new instance of ValidatedSolutionRecipesServerTransport with the provided implementation.
// The returned ValidatedSolutionRecipesServerTransport instance is connected to an instance of armazurestackhci.ValidatedSolutionRecipesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewValidatedSolutionRecipesServerTransport(srv *ValidatedSolutionRecipesServer) *ValidatedSolutionRecipesServerTransport {
	return &ValidatedSolutionRecipesServerTransport{
		srv: srv,
		newListBySubscriptionLocationResourcePager: newTracker[azfake.PagerResponder[armazurestackhci.ValidatedSolutionRecipesClientListBySubscriptionLocationResourceResponse]](),
	}
}

// ValidatedSolutionRecipesServerTransport connects instances of armazurestackhci.ValidatedSolutionRecipesClient to instances of ValidatedSolutionRecipesServer.
// Don't use this type directly, use NewValidatedSolutionRecipesServerTransport instead.
type ValidatedSolutionRecipesServerTransport struct {
	srv                                        *ValidatedSolutionRecipesServer
	newListBySubscriptionLocationResourcePager *tracker[azfake.PagerResponder[armazurestackhci.ValidatedSolutionRecipesClientListBySubscriptionLocationResourceResponse]]
}

// Do implements the policy.Transporter interface for ValidatedSolutionRecipesServerTransport.
func (v *ValidatedSolutionRecipesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return v.dispatchToMethodFake(req, method)
}

func (v *ValidatedSolutionRecipesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if validatedSolutionRecipesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = validatedSolutionRecipesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ValidatedSolutionRecipesClient.Get":
				res.resp, res.err = v.dispatchGet(req)
			case "ValidatedSolutionRecipesClient.NewListBySubscriptionLocationResourcePager":
				res.resp, res.err = v.dispatchNewListBySubscriptionLocationResourcePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (v *ValidatedSolutionRecipesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validatedSolutionRecipes/(?P<validatedSolutionRecipeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	validatedSolutionRecipeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("validatedSolutionRecipeName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.Get(req.Context(), locationParam, validatedSolutionRecipeNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ValidatedSolutionRecipe, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *ValidatedSolutionRecipesServerTransport) dispatchNewListBySubscriptionLocationResourcePager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListBySubscriptionLocationResourcePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionLocationResourcePager not implemented")}
	}
	newListBySubscriptionLocationResourcePager := v.newListBySubscriptionLocationResourcePager.get(req)
	if newListBySubscriptionLocationResourcePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validatedSolutionRecipes`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		resp := v.srv.NewListBySubscriptionLocationResourcePager(locationParam, nil)
		newListBySubscriptionLocationResourcePager = &resp
		v.newListBySubscriptionLocationResourcePager.add(req, newListBySubscriptionLocationResourcePager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionLocationResourcePager, req, func(page *armazurestackhci.ValidatedSolutionRecipesClientListBySubscriptionLocationResourceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionLocationResourcePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListBySubscriptionLocationResourcePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionLocationResourcePager) {
		v.newListBySubscriptionLocationResourcePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ValidatedSolutionRecipesServerTransport
var validatedSolutionRecipesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
