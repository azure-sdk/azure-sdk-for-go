// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/loadtesting/armloadtesting/v2"
	"net/http"
	"net/url"
	"regexp"
)

// LoadTestMgmtServer is a fake server for instances of the armloadtesting.LoadTestMgmtClient type.
type LoadTestMgmtServer struct {
	// CheckAvailabilityQuota is the fake for method LoadTestMgmtClient.CheckAvailabilityQuota
	// HTTP status codes to indicate success: http.StatusOK
	CheckAvailabilityQuota func(ctx context.Context, location string, quotaBucketName string, quotaBucketRequest armloadtesting.QuotaBucketRequest, options *armloadtesting.LoadTestMgmtClientCheckAvailabilityQuotaOptions) (resp azfake.Responder[armloadtesting.LoadTestMgmtClientCheckAvailabilityQuotaResponse], errResp azfake.ErrorResponder)

	// BeginCreateOrUpdateLoadtest is the fake for method LoadTestMgmtClient.BeginCreateOrUpdateLoadtest
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdateLoadtest func(ctx context.Context, resourceGroupName string, loadTestName string, loadTestResource armloadtesting.LoadTestResource, options *armloadtesting.LoadTestMgmtClientBeginCreateOrUpdateLoadtestOptions) (resp azfake.PollerResponder[armloadtesting.LoadTestMgmtClientCreateOrUpdateLoadtestResponse], errResp azfake.ErrorResponder)

	// BeginDeleteLoadtest is the fake for method LoadTestMgmtClient.BeginDeleteLoadtest
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteLoadtest func(ctx context.Context, resourceGroupName string, loadTestName string, options *armloadtesting.LoadTestMgmtClientBeginDeleteLoadtestOptions) (resp azfake.PollerResponder[armloadtesting.LoadTestMgmtClientDeleteLoadtestResponse], errResp azfake.ErrorResponder)

	// GetLoadtest is the fake for method LoadTestMgmtClient.GetLoadtest
	// HTTP status codes to indicate success: http.StatusOK
	GetLoadtest func(ctx context.Context, resourceGroupName string, loadTestName string, options *armloadtesting.LoadTestMgmtClientGetLoadtestOptions) (resp azfake.Responder[armloadtesting.LoadTestMgmtClientGetLoadtestResponse], errResp azfake.ErrorResponder)

	// GetQuota is the fake for method LoadTestMgmtClient.GetQuota
	// HTTP status codes to indicate success: http.StatusOK
	GetQuota func(ctx context.Context, location string, quotaBucketName string, options *armloadtesting.LoadTestMgmtClientGetQuotaOptions) (resp azfake.Responder[armloadtesting.LoadTestMgmtClientGetQuotaResponse], errResp azfake.ErrorResponder)

	// NewListByResourceGroupPager is the fake for method LoadTestMgmtClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armloadtesting.LoadTestMgmtClientListByResourceGroupOptions) (resp azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListByResourceGroupResponse])

	// NewListBySubscriptionPager is the fake for method LoadTestMgmtClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armloadtesting.LoadTestMgmtClientListBySubscriptionOptions) (resp azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListBySubscriptionResponse])

	// NewListQuotaPager is the fake for method LoadTestMgmtClient.NewListQuotaPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListQuotaPager func(location string, options *armloadtesting.LoadTestMgmtClientListQuotaOptions) (resp azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListQuotaResponse])

	// NewOutboundNetworkDependenciesEndpointsPager is the fake for method LoadTestMgmtClient.NewOutboundNetworkDependenciesEndpointsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewOutboundNetworkDependenciesEndpointsPager func(resourceGroupName string, loadTestName string, options *armloadtesting.LoadTestMgmtClientOutboundNetworkDependenciesEndpointsOptions) (resp azfake.PagerResponder[armloadtesting.LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse])

	// BeginUpdateLoadtest is the fake for method LoadTestMgmtClient.BeginUpdateLoadtest
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdateLoadtest func(ctx context.Context, resourceGroupName string, loadTestName string, loadTestResourcePatchRequestBody armloadtesting.LoadTestResourceUpdate, options *armloadtesting.LoadTestMgmtClientBeginUpdateLoadtestOptions) (resp azfake.PollerResponder[armloadtesting.LoadTestMgmtClientUpdateLoadtestResponse], errResp azfake.ErrorResponder)
}

// NewLoadTestMgmtServerTransport creates a new instance of LoadTestMgmtServerTransport with the provided implementation.
// The returned LoadTestMgmtServerTransport instance is connected to an instance of armloadtesting.LoadTestMgmtClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLoadTestMgmtServerTransport(srv *LoadTestMgmtServer) *LoadTestMgmtServerTransport {
	return &LoadTestMgmtServerTransport{
		srv:                         srv,
		beginCreateOrUpdateLoadtest: newTracker[azfake.PollerResponder[armloadtesting.LoadTestMgmtClientCreateOrUpdateLoadtestResponse]](),
		beginDeleteLoadtest:         newTracker[azfake.PollerResponder[armloadtesting.LoadTestMgmtClientDeleteLoadtestResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListByResourceGroupResponse]](),
		newListBySubscriptionPager:  newTracker[azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListBySubscriptionResponse]](),
		newListQuotaPager:           newTracker[azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListQuotaResponse]](),
		newOutboundNetworkDependenciesEndpointsPager: newTracker[azfake.PagerResponder[armloadtesting.LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse]](),
		beginUpdateLoadtest:                          newTracker[azfake.PollerResponder[armloadtesting.LoadTestMgmtClientUpdateLoadtestResponse]](),
	}
}

// LoadTestMgmtServerTransport connects instances of armloadtesting.LoadTestMgmtClient to instances of LoadTestMgmtServer.
// Don't use this type directly, use NewLoadTestMgmtServerTransport instead.
type LoadTestMgmtServerTransport struct {
	srv                                          *LoadTestMgmtServer
	beginCreateOrUpdateLoadtest                  *tracker[azfake.PollerResponder[armloadtesting.LoadTestMgmtClientCreateOrUpdateLoadtestResponse]]
	beginDeleteLoadtest                          *tracker[azfake.PollerResponder[armloadtesting.LoadTestMgmtClientDeleteLoadtestResponse]]
	newListByResourceGroupPager                  *tracker[azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListByResourceGroupResponse]]
	newListBySubscriptionPager                   *tracker[azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListBySubscriptionResponse]]
	newListQuotaPager                            *tracker[azfake.PagerResponder[armloadtesting.LoadTestMgmtClientListQuotaResponse]]
	newOutboundNetworkDependenciesEndpointsPager *tracker[azfake.PagerResponder[armloadtesting.LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse]]
	beginUpdateLoadtest                          *tracker[azfake.PollerResponder[armloadtesting.LoadTestMgmtClientUpdateLoadtestResponse]]
}

// Do implements the policy.Transporter interface for LoadTestMgmtServerTransport.
func (l *LoadTestMgmtServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return l.dispatchToMethodFake(req, method)
}

func (l *LoadTestMgmtServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if loadTestMgmtServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = loadTestMgmtServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "LoadTestMgmtClient.CheckAvailabilityQuota":
				res.resp, res.err = l.dispatchCheckAvailabilityQuota(req)
			case "LoadTestMgmtClient.BeginCreateOrUpdateLoadtest":
				res.resp, res.err = l.dispatchBeginCreateOrUpdateLoadtest(req)
			case "LoadTestMgmtClient.BeginDeleteLoadtest":
				res.resp, res.err = l.dispatchBeginDeleteLoadtest(req)
			case "LoadTestMgmtClient.GetLoadtest":
				res.resp, res.err = l.dispatchGetLoadtest(req)
			case "LoadTestMgmtClient.GetQuota":
				res.resp, res.err = l.dispatchGetQuota(req)
			case "LoadTestMgmtClient.NewListByResourceGroupPager":
				res.resp, res.err = l.dispatchNewListByResourceGroupPager(req)
			case "LoadTestMgmtClient.NewListBySubscriptionPager":
				res.resp, res.err = l.dispatchNewListBySubscriptionPager(req)
			case "LoadTestMgmtClient.NewListQuotaPager":
				res.resp, res.err = l.dispatchNewListQuotaPager(req)
			case "LoadTestMgmtClient.NewOutboundNetworkDependenciesEndpointsPager":
				res.resp, res.err = l.dispatchNewOutboundNetworkDependenciesEndpointsPager(req)
			case "LoadTestMgmtClient.BeginUpdateLoadtest":
				res.resp, res.err = l.dispatchBeginUpdateLoadtest(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (l *LoadTestMgmtServerTransport) dispatchCheckAvailabilityQuota(req *http.Request) (*http.Response, error) {
	if l.srv.CheckAvailabilityQuota == nil {
		return nil, &nonRetriableError{errors.New("fake for method CheckAvailabilityQuota not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas/(?P<quotaBucketName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/checkAvailabilityQuota`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armloadtesting.QuotaBucketRequest](req)
	if err != nil {
		return nil, err
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	quotaBucketNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("quotaBucketName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.CheckAvailabilityQuota(req.Context(), locationParam, quotaBucketNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CheckQuotaAvailabilityResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchBeginCreateOrUpdateLoadtest(req *http.Request) (*http.Response, error) {
	if l.srv.BeginCreateOrUpdateLoadtest == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdateLoadtest not implemented")}
	}
	beginCreateOrUpdateLoadtest := l.beginCreateOrUpdateLoadtest.get(req)
	if beginCreateOrUpdateLoadtest == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTests/(?P<loadTestName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armloadtesting.LoadTestResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		loadTestNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginCreateOrUpdateLoadtest(req.Context(), resourceGroupNameParam, loadTestNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdateLoadtest = &respr
		l.beginCreateOrUpdateLoadtest.add(req, beginCreateOrUpdateLoadtest)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdateLoadtest, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		l.beginCreateOrUpdateLoadtest.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdateLoadtest) {
		l.beginCreateOrUpdateLoadtest.remove(req)
	}

	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchBeginDeleteLoadtest(req *http.Request) (*http.Response, error) {
	if l.srv.BeginDeleteLoadtest == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteLoadtest not implemented")}
	}
	beginDeleteLoadtest := l.beginDeleteLoadtest.get(req)
	if beginDeleteLoadtest == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTests/(?P<loadTestName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		loadTestNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginDeleteLoadtest(req.Context(), resourceGroupNameParam, loadTestNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteLoadtest = &respr
		l.beginDeleteLoadtest.add(req, beginDeleteLoadtest)
	}

	resp, err := server.PollerResponderNext(beginDeleteLoadtest, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		l.beginDeleteLoadtest.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteLoadtest) {
		l.beginDeleteLoadtest.remove(req)
	}

	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchGetLoadtest(req *http.Request) (*http.Response, error) {
	if l.srv.GetLoadtest == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLoadtest not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTests/(?P<loadTestName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	loadTestNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.GetLoadtest(req.Context(), resourceGroupNameParam, loadTestNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LoadTestResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchGetQuota(req *http.Request) (*http.Response, error) {
	if l.srv.GetQuota == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetQuota not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas/(?P<quotaBucketName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	quotaBucketNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("quotaBucketName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.GetQuota(req.Context(), locationParam, quotaBucketNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).QuotaResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := l.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTests`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := l.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		l.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armloadtesting.LoadTestMgmtClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		l.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := l.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTests`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := l.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		l.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armloadtesting.LoadTestMgmtClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		l.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchNewListQuotaPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewListQuotaPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListQuotaPager not implemented")}
	}
	newListQuotaPager := l.newListQuotaPager.get(req)
	if newListQuotaPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		resp := l.srv.NewListQuotaPager(locationParam, nil)
		newListQuotaPager = &resp
		l.newListQuotaPager.add(req, newListQuotaPager)
		server.PagerResponderInjectNextLinks(newListQuotaPager, req, func(page *armloadtesting.LoadTestMgmtClientListQuotaResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListQuotaPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newListQuotaPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListQuotaPager) {
		l.newListQuotaPager.remove(req)
	}
	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchNewOutboundNetworkDependenciesEndpointsPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewOutboundNetworkDependenciesEndpointsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewOutboundNetworkDependenciesEndpointsPager not implemented")}
	}
	newOutboundNetworkDependenciesEndpointsPager := l.newOutboundNetworkDependenciesEndpointsPager.get(req)
	if newOutboundNetworkDependenciesEndpointsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTests/(?P<loadTestName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/outboundNetworkDependenciesEndpoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		loadTestNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestName")])
		if err != nil {
			return nil, err
		}
		resp := l.srv.NewOutboundNetworkDependenciesEndpointsPager(resourceGroupNameParam, loadTestNameParam, nil)
		newOutboundNetworkDependenciesEndpointsPager = &resp
		l.newOutboundNetworkDependenciesEndpointsPager.add(req, newOutboundNetworkDependenciesEndpointsPager)
		server.PagerResponderInjectNextLinks(newOutboundNetworkDependenciesEndpointsPager, req, func(page *armloadtesting.LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newOutboundNetworkDependenciesEndpointsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newOutboundNetworkDependenciesEndpointsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newOutboundNetworkDependenciesEndpointsPager) {
		l.newOutboundNetworkDependenciesEndpointsPager.remove(req)
	}
	return resp, nil
}

func (l *LoadTestMgmtServerTransport) dispatchBeginUpdateLoadtest(req *http.Request) (*http.Response, error) {
	if l.srv.BeginUpdateLoadtest == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateLoadtest not implemented")}
	}
	beginUpdateLoadtest := l.beginUpdateLoadtest.get(req)
	if beginUpdateLoadtest == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTests/(?P<loadTestName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armloadtesting.LoadTestResourceUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		loadTestNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginUpdateLoadtest(req.Context(), resourceGroupNameParam, loadTestNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateLoadtest = &respr
		l.beginUpdateLoadtest.add(req, beginUpdateLoadtest)
	}

	resp, err := server.PollerResponderNext(beginUpdateLoadtest, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		l.beginUpdateLoadtest.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateLoadtest) {
		l.beginUpdateLoadtest.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to LoadTestMgmtServerTransport
var loadTestMgmtServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
