// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotoperations/armiotoperations"
	"net/http"
	"net/url"
	"regexp"
)

// AkriConnectorServer is a fake server for instances of the armiotoperations.AkriConnectorClient type.
type AkriConnectorServer struct {
	// BeginCreateOrUpdate is the fake for method AkriConnectorClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, instanceName string, akriConnectorTemplateName string, akriConnectorName string, resource armiotoperations.AkriConnectorResource, options *armiotoperations.AkriConnectorClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armiotoperations.AkriConnectorClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method AkriConnectorClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, instanceName string, akriConnectorTemplateName string, akriConnectorName string, options *armiotoperations.AkriConnectorClientBeginDeleteOptions) (resp azfake.PollerResponder[armiotoperations.AkriConnectorClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AkriConnectorClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, instanceName string, akriConnectorTemplateName string, akriConnectorName string, options *armiotoperations.AkriConnectorClientGetOptions) (resp azfake.Responder[armiotoperations.AkriConnectorClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByTemplatePager is the fake for method AkriConnectorClient.NewListByTemplatePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByTemplatePager func(resourceGroupName string, instanceName string, akriConnectorTemplateName string, options *armiotoperations.AkriConnectorClientListByTemplateOptions) (resp azfake.PagerResponder[armiotoperations.AkriConnectorClientListByTemplateResponse])
}

// NewAkriConnectorServerTransport creates a new instance of AkriConnectorServerTransport with the provided implementation.
// The returned AkriConnectorServerTransport instance is connected to an instance of armiotoperations.AkriConnectorClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAkriConnectorServerTransport(srv *AkriConnectorServer) *AkriConnectorServerTransport {
	return &AkriConnectorServerTransport{
		srv:                    srv,
		beginCreateOrUpdate:    newTracker[azfake.PollerResponder[armiotoperations.AkriConnectorClientCreateOrUpdateResponse]](),
		beginDelete:            newTracker[azfake.PollerResponder[armiotoperations.AkriConnectorClientDeleteResponse]](),
		newListByTemplatePager: newTracker[azfake.PagerResponder[armiotoperations.AkriConnectorClientListByTemplateResponse]](),
	}
}

// AkriConnectorServerTransport connects instances of armiotoperations.AkriConnectorClient to instances of AkriConnectorServer.
// Don't use this type directly, use NewAkriConnectorServerTransport instead.
type AkriConnectorServerTransport struct {
	srv                    *AkriConnectorServer
	beginCreateOrUpdate    *tracker[azfake.PollerResponder[armiotoperations.AkriConnectorClientCreateOrUpdateResponse]]
	beginDelete            *tracker[azfake.PollerResponder[armiotoperations.AkriConnectorClientDeleteResponse]]
	newListByTemplatePager *tracker[azfake.PagerResponder[armiotoperations.AkriConnectorClientListByTemplateResponse]]
}

// Do implements the policy.Transporter interface for AkriConnectorServerTransport.
func (a *AkriConnectorServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *AkriConnectorServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if akriConnectorServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = akriConnectorServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "AkriConnectorClient.BeginCreateOrUpdate":
				res.resp, res.err = a.dispatchBeginCreateOrUpdate(req)
			case "AkriConnectorClient.BeginDelete":
				res.resp, res.err = a.dispatchBeginDelete(req)
			case "AkriConnectorClient.Get":
				res.resp, res.err = a.dispatchGet(req)
			case "AkriConnectorClient.NewListByTemplatePager":
				res.resp, res.err = a.dispatchNewListByTemplatePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *AkriConnectorServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := a.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectorTemplates/(?P<akriConnectorTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectors/(?P<akriConnectorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armiotoperations.AkriConnectorResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		akriConnectorTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorTemplateName")])
		if err != nil {
			return nil, err
		}
		akriConnectorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, instanceNameParam, akriConnectorTemplateNameParam, akriConnectorNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		a.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		a.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		a.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (a *AkriConnectorServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectorTemplates/(?P<akriConnectorTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectors/(?P<akriConnectorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		akriConnectorTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorTemplateName")])
		if err != nil {
			return nil, err
		}
		akriConnectorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceGroupNameParam, instanceNameParam, akriConnectorTemplateNameParam, akriConnectorNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *AkriConnectorServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectorTemplates/(?P<akriConnectorTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectors/(?P<akriConnectorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
	if err != nil {
		return nil, err
	}
	akriConnectorTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorTemplateName")])
	if err != nil {
		return nil, err
	}
	akriConnectorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, instanceNameParam, akriConnectorTemplateNameParam, akriConnectorNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AkriConnectorResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AkriConnectorServerTransport) dispatchNewListByTemplatePager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByTemplatePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByTemplatePager not implemented")}
	}
	newListByTemplatePager := a.newListByTemplatePager.get(req)
	if newListByTemplatePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectorTemplates/(?P<akriConnectorTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectors`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		akriConnectorTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorTemplateName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByTemplatePager(resourceGroupNameParam, instanceNameParam, akriConnectorTemplateNameParam, nil)
		newListByTemplatePager = &resp
		a.newListByTemplatePager.add(req, newListByTemplatePager)
		server.PagerResponderInjectNextLinks(newListByTemplatePager, req, func(page *armiotoperations.AkriConnectorClientListByTemplateResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByTemplatePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByTemplatePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByTemplatePager) {
		a.newListByTemplatePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to AkriConnectorServerTransport
var akriConnectorServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
