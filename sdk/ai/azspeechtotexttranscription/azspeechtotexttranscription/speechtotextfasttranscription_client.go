// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azspeechtotexttranscription

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
	"strings"
)

// SpeechToTextFastTranscriptionClient contains the methods for the SpeechToTextFastTranscription group.
// Don't use this type directly, use [SpeechToTextClient.NewSpeechToTextFastTranscriptionClient] instead.
type SpeechToTextFastTranscriptionClient struct {
	internal *azcore.Client
	endpoint string
}

// Transcribe - Transcribes the provided audio stream.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-15
//   - transcribeRequest - Metadata for a fast transcription request. This field contains a JSON-serialized object of type `TranscribeDefinition`.
//   - audio - The content of the audio file to be transcribed. The audio file must be shorter than 2 hours in audio duration
//     and smaller than 250 MB in size.
//   - options - SpeechToTextFastTranscriptionClientTranscribeOptions contains the optional parameters for the SpeechToTextFastTranscriptionClient.Transcribe
//     method.
func (client *SpeechToTextFastTranscriptionClient) Transcribe(ctx context.Context, transcribeRequest transcribeRequest, audio io.ReadSeekCloser, options *SpeechToTextFastTranscriptionClientTranscribeOptions) (SpeechToTextFastTranscriptionClientTranscribeResponse, error) {
	var err error
	const operationName = "SpeechToTextFastTranscriptionClient.Transcribe"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.transcribeCreateRequest(ctx, transcribeRequest, audio, options)
	if err != nil {
		return SpeechToTextFastTranscriptionClientTranscribeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpeechToTextFastTranscriptionClientTranscribeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SpeechToTextFastTranscriptionClientTranscribeResponse{}, err
	}
	resp, err := client.transcribeHandleResponse(httpResp)
	return resp, err
}

// transcribeCreateRequest creates the Transcribe request.
func (client *SpeechToTextFastTranscriptionClient) transcribeCreateRequest(ctx context.Context, transcribeRequest transcribeRequest, audio io.ReadSeekCloser, _ *SpeechToTextFastTranscriptionClientTranscribeOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/transcriptions:transcribe"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	formData, err := transcribeRequest.toMultipartFormData()
	if err != nil {
		return nil, err
	}
	if err := runtime.SetMultipartFormData(req, formData); err != nil {
		return nil, err
	}
	return req, nil
}

// transcribeHandleResponse handles the Transcribe response.
func (client *SpeechToTextFastTranscriptionClient) transcribeHandleResponse(resp *http.Response) (SpeechToTextFastTranscriptionClientTranscribeResponse, error) {
	result := SpeechToTextFastTranscriptionClientTranscribeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TranscribeResult); err != nil {
		return SpeechToTextFastTranscriptionClientTranscribeResponse{}, err
	}
	return result, nil
}
