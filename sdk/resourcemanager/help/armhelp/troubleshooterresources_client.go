// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armhelp

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// TroubleshooterResourcesClient contains the methods for the TroubleshooterResources group.
// Don't use this type directly, use NewTroubleshooterResourcesClient() instead.
type TroubleshooterResourcesClient struct {
	internal *arm.Client
}

// NewTroubleshooterResourcesClient creates a new instance of TroubleshooterResourcesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewTroubleshooterResourcesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*TroubleshooterResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &TroubleshooterResourcesClient{
		internal: cl,
	}
	return client, nil
}

// Continue - Uses ‘stepId’ and ‘responses’ as the trigger to continue the troubleshooting steps for the respective troubleshooter
// resource name. <br/>Continue API is used to provide inputs that are required for the specific troubleshooter to progress
// into the next step in the process. This API is used after the Troubleshooter has been created using the Create API.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - troubleshooterName - Troubleshooter resource Name.
//   - options - TroubleshooterResourcesClientContinueOptions contains the optional parameters for the TroubleshooterResourcesClient.Continue
//     method.
func (client *TroubleshooterResourcesClient) Continue(ctx context.Context, scope string, troubleshooterName string, options *TroubleshooterResourcesClientContinueOptions) (TroubleshooterResourcesClientContinueResponse, error) {
	var err error
	const operationName = "TroubleshooterResourcesClient.Continue"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.continueCreateRequest(ctx, scope, troubleshooterName, options)
	if err != nil {
		return TroubleshooterResourcesClientContinueResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TroubleshooterResourcesClientContinueResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TroubleshooterResourcesClientContinueResponse{}, err
	}
	return TroubleshooterResourcesClientContinueResponse{}, nil
}

// continueCreateRequest creates the Continue request.
func (client *TroubleshooterResourcesClient) continueCreateRequest(ctx context.Context, scope string, troubleshooterName string, options *TroubleshooterResourcesClientContinueOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}/continue"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if troubleshooterName == "" {
		return nil, errors.New("parameter troubleshooterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{troubleshooterName}", url.PathEscape(troubleshooterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.ContinueRequestBody != nil {
		req.Raw().Header["Content-Type"] = []string{"application/json"}
		if err := runtime.MarshalAsJSON(req, *options.ContinueRequestBody); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// Create - Creates the specific troubleshooter action under a resource or subscription using the ‘solutionId’ and ‘properties.parameters’
// as the trigger. <br/> Azure Troubleshooters help with hard to classify issues, reducing the gap between customer observed
// problems and solutions by guiding the user effortlessly through the troubleshooting process. Each Troubleshooter flow represents
// a problem area within Azure and has a complex tree-like structure that addresses many root causes. These flows are prepared
// with the help of Subject Matter experts and customer support engineers by carefully considering previous support requests
// raised by customers. Troubleshooters terminate at a well curated solution based off of resource backend signals and customer
// manual selections.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - troubleshooterName - Troubleshooter resource Name.
//   - createTroubleshooterRequestBody - The required request body for this Troubleshooter resource creation.
//   - options - TroubleshooterResourcesClientCreateOptions contains the optional parameters for the TroubleshooterResourcesClient.Create
//     method.
func (client *TroubleshooterResourcesClient) Create(ctx context.Context, scope string, troubleshooterName string, createTroubleshooterRequestBody TroubleshooterResource, options *TroubleshooterResourcesClientCreateOptions) (TroubleshooterResourcesClientCreateResponse, error) {
	var err error
	const operationName = "TroubleshooterResourcesClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, scope, troubleshooterName, createTroubleshooterRequestBody, options)
	if err != nil {
		return TroubleshooterResourcesClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TroubleshooterResourcesClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return TroubleshooterResourcesClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *TroubleshooterResourcesClient) createCreateRequest(ctx context.Context, scope string, troubleshooterName string, createTroubleshooterRequestBody TroubleshooterResource, _ *TroubleshooterResourcesClientCreateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if troubleshooterName == "" {
		return nil, errors.New("parameter troubleshooterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{troubleshooterName}", url.PathEscape(troubleshooterName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createTroubleshooterRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *TroubleshooterResourcesClient) createHandleResponse(resp *http.Response) (TroubleshooterResourcesClientCreateResponse, error) {
	result := TroubleshooterResourcesClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TroubleshooterResource); err != nil {
		return TroubleshooterResourcesClientCreateResponse{}, err
	}
	return result, nil
}

// End - Ends the troubleshooter action
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - troubleshooterName - Troubleshooter resource Name.
//   - options - TroubleshooterResourcesClientEndOptions contains the optional parameters for the TroubleshooterResourcesClient.End
//     method.
func (client *TroubleshooterResourcesClient) End(ctx context.Context, scope string, troubleshooterName string, options *TroubleshooterResourcesClientEndOptions) (TroubleshooterResourcesClientEndResponse, error) {
	var err error
	const operationName = "TroubleshooterResourcesClient.End"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.endCreateRequest(ctx, scope, troubleshooterName, options)
	if err != nil {
		return TroubleshooterResourcesClientEndResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TroubleshooterResourcesClientEndResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TroubleshooterResourcesClientEndResponse{}, err
	}
	return TroubleshooterResourcesClientEndResponse{}, nil
}

// endCreateRequest creates the End request.
func (client *TroubleshooterResourcesClient) endCreateRequest(ctx context.Context, scope string, troubleshooterName string, _ *TroubleshooterResourcesClientEndOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}/end"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if troubleshooterName == "" {
		return nil, errors.New("parameter troubleshooterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{troubleshooterName}", url.PathEscape(troubleshooterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets troubleshooter instance result which includes the step status/result of the troubleshooter resource name that
// is being executed.<br/> Get API is used to retrieve the result of a Troubleshooter instance, which includes the status
// and result of each step in the Troubleshooter workflow. This API requires the Troubleshooter resource name that was created
// using the Create API.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - troubleshooterName - Troubleshooter resource Name.
//   - options - TroubleshooterResourcesClientGetOptions contains the optional parameters for the TroubleshooterResourcesClient.Get
//     method.
func (client *TroubleshooterResourcesClient) Get(ctx context.Context, scope string, troubleshooterName string, options *TroubleshooterResourcesClientGetOptions) (TroubleshooterResourcesClientGetResponse, error) {
	var err error
	const operationName = "TroubleshooterResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, scope, troubleshooterName, options)
	if err != nil {
		return TroubleshooterResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TroubleshooterResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TroubleshooterResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *TroubleshooterResourcesClient) getCreateRequest(ctx context.Context, scope string, troubleshooterName string, _ *TroubleshooterResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if troubleshooterName == "" {
		return nil, errors.New("parameter troubleshooterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{troubleshooterName}", url.PathEscape(troubleshooterName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *TroubleshooterResourcesClient) getHandleResponse(resp *http.Response) (TroubleshooterResourcesClientGetResponse, error) {
	result := TroubleshooterResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TroubleshooterResource); err != nil {
		return TroubleshooterResourcesClientGetResponse{}, err
	}
	return result, nil
}

// Restart - Restarts the troubleshooter API using applicable troubleshooter resource name as the input.<br/> It returns new
// resource name which should be used in subsequent request. The old resource name is obsolete after this API is invoked.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - troubleshooterName - Troubleshooter resource Name.
//   - options - TroubleshooterResourcesClientRestartOptions contains the optional parameters for the TroubleshooterResourcesClient.Restart
//     method.
func (client *TroubleshooterResourcesClient) Restart(ctx context.Context, scope string, troubleshooterName string, options *TroubleshooterResourcesClientRestartOptions) (TroubleshooterResourcesClientRestartResponse, error) {
	var err error
	const operationName = "TroubleshooterResourcesClient.Restart"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.restartCreateRequest(ctx, scope, troubleshooterName, options)
	if err != nil {
		return TroubleshooterResourcesClientRestartResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TroubleshooterResourcesClientRestartResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TroubleshooterResourcesClientRestartResponse{}, err
	}
	resp, err := client.restartHandleResponse(httpResp)
	return resp, err
}

// restartCreateRequest creates the Restart request.
func (client *TroubleshooterResourcesClient) restartCreateRequest(ctx context.Context, scope string, troubleshooterName string, _ *TroubleshooterResourcesClientRestartOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}/restart"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if troubleshooterName == "" {
		return nil, errors.New("parameter troubleshooterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{troubleshooterName}", url.PathEscape(troubleshooterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// restartHandleResponse handles the Restart response.
func (client *TroubleshooterResourcesClient) restartHandleResponse(resp *http.Response) (TroubleshooterResourcesClientRestartResponse, error) {
	result := TroubleshooterResourcesClientRestartResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RestartTroubleshooterResponse); err != nil {
		return TroubleshooterResourcesClientRestartResponse{}, err
	}
	return result, nil
}
