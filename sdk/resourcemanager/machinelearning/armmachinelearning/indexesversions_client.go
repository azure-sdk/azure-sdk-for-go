//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearning

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// IndexesVersionsClient contains the methods for the IndexesVersions group.
// Don't use this type directly, use NewIndexesVersionsClient() instead.
type IndexesVersionsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewIndexesVersionsClient creates a new instance of IndexesVersionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewIndexesVersionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*IndexesVersionsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &IndexesVersionsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a Index.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - indexName - Name of the index
//   - versionName - version of the index
//   - resource - Resource create parameters.
//   - options - IndexesVersionsClientCreateOrUpdateOptions contains the optional parameters for the IndexesVersionsClient.CreateOrUpdate
//     method.
func (client *IndexesVersionsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, indexName string, versionName string, resource IndexVersion, options *IndexesVersionsClientCreateOrUpdateOptions) (IndexesVersionsClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "IndexesVersionsClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, indexName, versionName, resource, options)
	if err != nil {
		return IndexesVersionsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesVersionsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexesVersionsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *IndexesVersionsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, indexName string, versionName string, resource IndexVersion, options *IndexesVersionsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/indexes/{indexName}/versions/{versionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	if versionName == "" {
		return nil, errors.New("parameter versionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{versionName}", url.PathEscape(versionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *IndexesVersionsClient) createOrUpdateHandleResponse(resp *http.Response) (IndexesVersionsClientCreateOrUpdateResponse, error) {
	result := IndexesVersionsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IndexVersion); err != nil {
		return IndexesVersionsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a Index.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - indexName - Name of the index
//   - versionName - version of the index
//   - options - IndexesVersionsClientDeleteOptions contains the optional parameters for the IndexesVersionsClient.Delete method.
func (client *IndexesVersionsClient) Delete(ctx context.Context, resourceGroupName string, indexName string, versionName string, options *IndexesVersionsClientDeleteOptions) (IndexesVersionsClientDeleteResponse, error) {
	var err error
	const operationName = "IndexesVersionsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, indexName, versionName, options)
	if err != nil {
		return IndexesVersionsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesVersionsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return IndexesVersionsClientDeleteResponse{}, err
	}
	return IndexesVersionsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *IndexesVersionsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, indexName string, versionName string, options *IndexesVersionsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/indexes/{indexName}/versions/{versionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	if versionName == "" {
		return nil, errors.New("parameter versionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{versionName}", url.PathEscape(versionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a Index.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - indexName - Name of the index
//   - versionName - version of the index
//   - options - IndexesVersionsClientGetOptions contains the optional parameters for the IndexesVersionsClient.Get method.
func (client *IndexesVersionsClient) Get(ctx context.Context, resourceGroupName string, indexName string, versionName string, options *IndexesVersionsClientGetOptions) (IndexesVersionsClientGetResponse, error) {
	var err error
	const operationName = "IndexesVersionsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, indexName, versionName, options)
	if err != nil {
		return IndexesVersionsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesVersionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexesVersionsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *IndexesVersionsClient) getCreateRequest(ctx context.Context, resourceGroupName string, indexName string, versionName string, options *IndexesVersionsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/indexes/{indexName}/versions/{versionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	if versionName == "" {
		return nil, errors.New("parameter versionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{versionName}", url.PathEscape(versionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *IndexesVersionsClient) getHandleResponse(resp *http.Response) (IndexesVersionsClientGetResponse, error) {
	result := IndexesVersionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IndexVersion); err != nil {
		return IndexesVersionsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByIndexPager - List by parent.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - indexName - Name of the index
//   - options - IndexesVersionsClientListByIndexOptions contains the optional parameters for the IndexesVersionsClient.NewListByIndexPager
//     method.
func (client *IndexesVersionsClient) NewListByIndexPager(resourceGroupName string, indexName string, options *IndexesVersionsClientListByIndexOptions) *runtime.Pager[IndexesVersionsClientListByIndexResponse] {
	return runtime.NewPager(runtime.PagingHandler[IndexesVersionsClientListByIndexResponse]{
		More: func(page IndexesVersionsClientListByIndexResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *IndexesVersionsClientListByIndexResponse) (IndexesVersionsClientListByIndexResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "IndexesVersionsClient.NewListByIndexPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByIndexCreateRequest(ctx, resourceGroupName, indexName, options)
			}, nil)
			if err != nil {
				return IndexesVersionsClientListByIndexResponse{}, err
			}
			return client.listByIndexHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByIndexCreateRequest creates the ListByIndex request.
func (client *IndexesVersionsClient) listByIndexCreateRequest(ctx context.Context, resourceGroupName string, indexName string, options *IndexesVersionsClientListByIndexOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/indexes/{indexName}/versions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByIndexHandleResponse handles the ListByIndex response.
func (client *IndexesVersionsClient) listByIndexHandleResponse(resp *http.Response) (IndexesVersionsClientListByIndexResponse, error) {
	result := IndexesVersionsClientListByIndexResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IndexVersionListResult); err != nil {
		return IndexesVersionsClientListByIndexResponse{}, err
	}
	return result, nil
}
