// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armsecretsstoreextension

import "time"

// AzureKeyVaultSecretProviderClass - The AzureKeyVaultSecretProviderClass resource.
type AzureKeyVaultSecretProviderClass struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// READ-ONLY; The name of the AzureKeyVaultSecretProviderClass
	Name             *string
	ExtendedLocation *ExtendedLocation

	// The resource-specific properties for this resource.
	Properties *AzureKeyVaultSecretProviderClassProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AzureKeyVaultSecretProviderClassListResult - The response of a AzureKeyVaultSecretProviderClass list operation.
type AzureKeyVaultSecretProviderClassListResult struct {
	// REQUIRED; The AzureKeyVaultSecretProviderClass items on this page
	Value []*AzureKeyVaultSecretProviderClass

	// The link to the next page of items
	NextLink *string
}

// AzureKeyVaultSecretProviderClassProperties - The properties of the AzureKeyVaultSecretProviderClass.
type AzureKeyVaultSecretProviderClassProperties struct {
	// REQUIRED; The user assigned managed identity client ID that should be used to access the Azure Key Vault.
	ClientID *string

	// REQUIRED; The name of the Azure Key Vault to sync secrets from.
	KeyvaultName *string

	// REQUIRED; The Azure Active Directory tenant ID that should be used for authenticating requests to the Azure Key Vault.
	TenantID *string

	// Objects defines the desired state of synced K8s secret objects
	Objects *string

	// READ-ONLY; Provisioning state of the AzureKeyVaultSecretProviderClass instance.
	ProvisioningState *ProvisioningState
}

// AzureKeyVaultSecretProviderClassUpdate - The type used for update operations of the AzureKeyVaultSecretProviderClass.
type AzureKeyVaultSecretProviderClassUpdate struct {
	// The resource-specific properties for this resource.
	Properties *AzureKeyVaultSecretProviderClassUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// AzureKeyVaultSecretProviderClassUpdateProperties - The updatable properties of the AzureKeyVaultSecretProviderClass.
type AzureKeyVaultSecretProviderClassUpdateProperties struct {
	// The user assigned managed identity client ID that should be used to access the Azure Key Vault.
	ClientID *string

	// The name of the Azure Key Vault to sync secrets from.
	KeyvaultName *string

	// Objects defines the desired state of synced K8s secret objects
	Objects *string

	// The Azure Active Directory tenant ID that should be used for authenticating requests to the Azure Key Vault.
	TenantID *string
}

// ExtendedLocation - The complex type of the extended location.
type ExtendedLocation struct {
	// REQUIRED; The name of the extended location.
	Name *string

	// REQUIRED; The type of the extended location.
	Type *ExtendedLocationType
}

// KubernetesSecretObjectMapping - Properties defining the mapping between a cloud secret store object and a Kubernetes Secret.
type KubernetesSecretObjectMapping struct {
	// REQUIRED; SourcePath is the identifier for the secret data as defined by the external secret provider. This is the key
	// or path to the secret in the provider's system, which gets mounted to a specific path in the pod. The value should match
	// the name of the secret as specified in the SecretProviderClass's objects array.
	SourcePath *string

	// REQUIRED; TargetKey is the key in the Kubernetes secret's data field where the secret value will be stored. This key is
	// used to reference the secret data within Kubernetes, and it should be unique within the secret.
	TargetKey *string
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure
	// Resource Manager/control-plane operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for and operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// REQUIRED; The Operation items on this page
	Value []*Operation

	// The link to the next page of items
	NextLink *string
}

// SecretSync - The SecretSync resource.
type SecretSync struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// READ-ONLY; The name of the SecretSync
	Name             *string
	ExtendedLocation *ExtendedLocation

	// The resource-specific properties for this resource.
	Properties *SecretSyncProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SecretSyncCondition - A condition represents the status of the secret create and update processes.
type SecretSyncCondition struct {
	// READ-ONLY; Message is a human readable message indicating details about the transition. This may be an empty string.
	Message *string

	// READ-ONLY; Reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers
	// of specific condition types may define expected values and meanings for this field, and whether the values are considered
	// a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason *string

	// READ-ONLY; Status of the condition, one of True, False, Unknown.
	Status *StatusConditionType

	// READ-ONLY; Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across
	// resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to
	// de-conflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type *string

	// READ-ONLY; LastTransitionTime is the last time the condition transitioned from one status to another. This should be when
	// the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *time.Time

	// READ-ONLY; ObservedGeneration represents the .metadata.generation that the condition was set based upon. For instance,
	// if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of
	// date with respect to the current state of the instance.
	ObservedGeneration *int64
}

// SecretSyncListResult - The response of a SecretSync list operation.
type SecretSyncListResult struct {
	// REQUIRED; The SecretSync items on this page
	Value []*SecretSync

	// The link to the next page of items
	NextLink *string
}

// SecretSyncProperties - The properties of the SecretSync instance.
type SecretSyncProperties struct {
	// REQUIRED; Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller
	// must have permission to create secrets of the specified type.
	KubernetesSecretType *KubernetesSecretType

	// REQUIRED; An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret.
	// Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
	ObjectSecretMapping []*KubernetesSecretObjectMapping

	// REQUIRED; SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information
	// needed to access the cloud provider secret store.
	SecretProviderClassName *string

	// REQUIRED; ServiceAccountName specifies the name of the service account used to access the cloud provider secret store.
	// The audience field in the service account token must be passed as parameter in the controller configuration. The audience
	// is used when requesting a token from the API server for the service account; the supported audiences are defined by each
	// provider.
	ServiceAccountName *string

	// ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing
	// the value in this field. This field is not used to resolve synchronization conflicts.
	ForceSynchronization *string

	// READ-ONLY; Provisioning state of the SecretSync instance.
	ProvisioningState *ProvisioningState

	// READ-ONLY; SecretSyncStatus defines the observed state of the secret synchronization process.
	Status *SecretSyncStatus
}

// SecretSyncStatus defines the observed state of the secret synchronization process.
type SecretSyncStatus struct {
	// READ-ONLY; Conditions represent the status of the secret create and update processes. The status can be True, False, or
	// Unknown with various reasons and messages explaining the state. Examples of reasons include CreateSucceeded, ProviderError,
	// InvalidClusterSecretLabelError, InvalidClusterSecretAnnotationError, UnknownError, ValidatingAdmissionPolicyCheckFailed,
	// UserInputValidationFailed, ControllerSpcError, ControllerInternalError, NoValueChange, and ValueChangeOrForceUpdateDetected.
	Conditions []*SecretSyncCondition

	// READ-ONLY; LastSuccessfulSyncTime represents the last time the secret was retrieved from the Provider and updated.
	LastSuccessfulSyncTime *time.Time
}

// SecretSyncUpdate - The type used for update operations of the SecretSync.
type SecretSyncUpdate struct {
	// The resource-specific properties for this resource.
	Properties *SecretSyncUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// SecretSyncUpdateProperties - The updatable properties of the SecretSync.
type SecretSyncUpdateProperties struct {
	// ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing
	// the value in this field. This field is not used to resolve synchronization conflicts.
	ForceSynchronization *string

	// Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have
	// permission to create secrets of the specified type.
	KubernetesSecretType *KubernetesSecretType

	// An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry
	// specifies the source secret in the external provider and the corresponding key in the Kubernetes secret.
	ObjectSecretMapping []*KubernetesSecretObjectMapping

	// SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to
	// access the cloud provider secret store.
	SecretProviderClassName *string

	// ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience
	// field in the service account token must be passed as parameter in the controller configuration. The audience is used when
	// requesting a token from the API server for the service account; the supported audiences are defined by each provider.
	ServiceAccountName *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}
