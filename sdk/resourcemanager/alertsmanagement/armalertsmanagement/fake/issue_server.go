// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/alertsmanagement/armalertsmanagement"
	"net/http"
	"net/url"
	"regexp"
)

// IssueServer is a fake server for instances of the armalertsmanagement.IssueClient type.
type IssueServer struct {
	// AddOrUpdateAlerts is the fake for method IssueClient.AddOrUpdateAlerts
	// HTTP status codes to indicate success: http.StatusOK
	AddOrUpdateAlerts func(ctx context.Context, resourceURI string, body armalertsmanagement.RelatedAlerts, options *armalertsmanagement.IssueClientAddOrUpdateAlertsOptions) (resp azfake.Responder[armalertsmanagement.IssueClientAddOrUpdateAlertsResponse], errResp azfake.ErrorResponder)

	// AddOrUpdateResources is the fake for method IssueClient.AddOrUpdateResources
	// HTTP status codes to indicate success: http.StatusOK
	AddOrUpdateResources func(ctx context.Context, resourceURI string, body armalertsmanagement.RelatedResources, options *armalertsmanagement.IssueClientAddOrUpdateResourcesOptions) (resp azfake.Responder[armalertsmanagement.IssueClientAddOrUpdateResourcesResponse], errResp azfake.ErrorResponder)

	// Create is the fake for method IssueClient.Create
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Create func(ctx context.Context, resourceURI string, resource armalertsmanagement.IssueResource, options *armalertsmanagement.IssueClientCreateOptions) (resp azfake.Responder[armalertsmanagement.IssueClientCreateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method IssueClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceURI string, options *armalertsmanagement.IssueClientDeleteOptions) (resp azfake.Responder[armalertsmanagement.IssueClientDeleteResponse], errResp azfake.ErrorResponder)

	// FetchInvestigationResult is the fake for method IssueClient.FetchInvestigationResult
	// HTTP status codes to indicate success: http.StatusOK
	FetchInvestigationResult func(ctx context.Context, resourceURI string, body armalertsmanagement.FetchInvestigationResultParameters, options *armalertsmanagement.IssueClientFetchInvestigationResultOptions) (resp azfake.Responder[armalertsmanagement.IssueClientFetchInvestigationResultResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method IssueClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceURI string, options *armalertsmanagement.IssueClientGetOptions) (resp azfake.Responder[armalertsmanagement.IssueClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method IssueClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceURI string, options *armalertsmanagement.IssueClientListOptions) (resp azfake.PagerResponder[armalertsmanagement.IssueClientListResponse])

	// NewListAlertsPager is the fake for method IssueClient.NewListAlertsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAlertsPager func(resourceURI string, body armalertsmanagement.ListParameter, options *armalertsmanagement.IssueClientListAlertsOptions) (resp azfake.PagerResponder[armalertsmanagement.IssueClientListAlertsResponse])

	// NewListResourcesPager is the fake for method IssueClient.NewListResourcesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListResourcesPager func(resourceURI string, body armalertsmanagement.ListParameter, options *armalertsmanagement.IssueClientListResourcesOptions) (resp azfake.PagerResponder[armalertsmanagement.IssueClientListResourcesResponse])

	// StartInvestigation is the fake for method IssueClient.StartInvestigation
	// HTTP status codes to indicate success: http.StatusOK
	StartInvestigation func(ctx context.Context, resourceURI string, body armalertsmanagement.StartInvestigationParameters, options *armalertsmanagement.IssueClientStartInvestigationOptions) (resp azfake.Responder[armalertsmanagement.IssueClientStartInvestigationResponse], errResp azfake.ErrorResponder)

	// Update is the fake for method IssueClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceURI string, properties armalertsmanagement.IssueResourceUpdate, options *armalertsmanagement.IssueClientUpdateOptions) (resp azfake.Responder[armalertsmanagement.IssueClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewIssueServerTransport creates a new instance of IssueServerTransport with the provided implementation.
// The returned IssueServerTransport instance is connected to an instance of armalertsmanagement.IssueClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewIssueServerTransport(srv *IssueServer) *IssueServerTransport {
	return &IssueServerTransport{
		srv:                   srv,
		newListPager:          newTracker[azfake.PagerResponder[armalertsmanagement.IssueClientListResponse]](),
		newListAlertsPager:    newTracker[azfake.PagerResponder[armalertsmanagement.IssueClientListAlertsResponse]](),
		newListResourcesPager: newTracker[azfake.PagerResponder[armalertsmanagement.IssueClientListResourcesResponse]](),
	}
}

// IssueServerTransport connects instances of armalertsmanagement.IssueClient to instances of IssueServer.
// Don't use this type directly, use NewIssueServerTransport instead.
type IssueServerTransport struct {
	srv                   *IssueServer
	newListPager          *tracker[azfake.PagerResponder[armalertsmanagement.IssueClientListResponse]]
	newListAlertsPager    *tracker[azfake.PagerResponder[armalertsmanagement.IssueClientListAlertsResponse]]
	newListResourcesPager *tracker[azfake.PagerResponder[armalertsmanagement.IssueClientListResourcesResponse]]
}

// Do implements the policy.Transporter interface for IssueServerTransport.
func (i *IssueServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return i.dispatchToMethodFake(req, method)
}

func (i *IssueServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if issueServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = issueServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "IssueClient.AddOrUpdateAlerts":
				res.resp, res.err = i.dispatchAddOrUpdateAlerts(req)
			case "IssueClient.AddOrUpdateResources":
				res.resp, res.err = i.dispatchAddOrUpdateResources(req)
			case "IssueClient.Create":
				res.resp, res.err = i.dispatchCreate(req)
			case "IssueClient.Delete":
				res.resp, res.err = i.dispatchDelete(req)
			case "IssueClient.FetchInvestigationResult":
				res.resp, res.err = i.dispatchFetchInvestigationResult(req)
			case "IssueClient.Get":
				res.resp, res.err = i.dispatchGet(req)
			case "IssueClient.NewListPager":
				res.resp, res.err = i.dispatchNewListPager(req)
			case "IssueClient.NewListAlertsPager":
				res.resp, res.err = i.dispatchNewListAlertsPager(req)
			case "IssueClient.NewListResourcesPager":
				res.resp, res.err = i.dispatchNewListResourcesPager(req)
			case "IssueClient.StartInvestigation":
				res.resp, res.err = i.dispatchStartInvestigation(req)
			case "IssueClient.Update":
				res.resp, res.err = i.dispatchUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *IssueServerTransport) dispatchAddOrUpdateAlerts(req *http.Request) (*http.Response, error) {
	if i.srv.AddOrUpdateAlerts == nil {
		return nil, &nonRetriableError{errors.New("fake for method AddOrUpdateAlerts not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/addOrUpdateAlerts`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armalertsmanagement.RelatedAlerts](req)
	if err != nil {
		return nil, err
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.AddOrUpdateAlerts(req.Context(), resourceURIParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RelatedAlerts, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchAddOrUpdateResources(req *http.Request) (*http.Response, error) {
	if i.srv.AddOrUpdateResources == nil {
		return nil, &nonRetriableError{errors.New("fake for method AddOrUpdateResources not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/addOrUpdateResources`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armalertsmanagement.RelatedResources](req)
	if err != nil {
		return nil, err
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.AddOrUpdateResources(req.Context(), resourceURIParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RelatedResources, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if i.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armalertsmanagement.IssueResource](req)
	if err != nil {
		return nil, err
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Create(req.Context(), resourceURIParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).IssueResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if i.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Delete(req.Context(), resourceURIParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchFetchInvestigationResult(req *http.Request) (*http.Response, error) {
	if i.srv.FetchInvestigationResult == nil {
		return nil, &nonRetriableError{errors.New("fake for method FetchInvestigationResult not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/fetchInvestigationResult`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armalertsmanagement.FetchInvestigationResultParameters](req)
	if err != nil {
		return nil, err
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.FetchInvestigationResult(req.Context(), resourceURIParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).InvestigationResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if i.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Get(req.Context(), resourceURIParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).IssueResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := i.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListPager(resourceURIParam, nil)
		newListPager = &resp
		i.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armalertsmanagement.IssueClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		i.newListPager.remove(req)
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchNewListAlertsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListAlertsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAlertsPager not implemented")}
	}
	newListAlertsPager := i.newListAlertsPager.get(req)
	if newListAlertsPager == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listAlerts`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armalertsmanagement.ListParameter](req)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListAlertsPager(resourceURIParam, body, nil)
		newListAlertsPager = &resp
		i.newListAlertsPager.add(req, newListAlertsPager)
		server.PagerResponderInjectNextLinks(newListAlertsPager, req, func(page *armalertsmanagement.IssueClientListAlertsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAlertsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListAlertsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAlertsPager) {
		i.newListAlertsPager.remove(req)
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchNewListResourcesPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListResourcesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListResourcesPager not implemented")}
	}
	newListResourcesPager := i.newListResourcesPager.get(req)
	if newListResourcesPager == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listResources`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armalertsmanagement.ListParameter](req)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListResourcesPager(resourceURIParam, body, nil)
		newListResourcesPager = &resp
		i.newListResourcesPager.add(req, newListResourcesPager)
		server.PagerResponderInjectNextLinks(newListResourcesPager, req, func(page *armalertsmanagement.IssueClientListResourcesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListResourcesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListResourcesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListResourcesPager) {
		i.newListResourcesPager.remove(req)
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchStartInvestigation(req *http.Request) (*http.Response, error) {
	if i.srv.StartInvestigation == nil {
		return nil, &nonRetriableError{errors.New("fake for method StartInvestigation not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/startInvestigation`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armalertsmanagement.StartInvestigationParameters](req)
	if err != nil {
		return nil, err
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.StartInvestigation(req.Context(), resourceURIParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).InvestigationMetadata, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *IssueServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if i.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AlertsManagement/issues/(?P<issueName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armalertsmanagement.IssueResourceUpdate](req)
	if err != nil {
		return nil, err
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Update(req.Context(), resourceURIParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).IssueResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to IssueServerTransport
var issueServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
