//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/purview/armpurview/v2"
	"net/http"
	"net/url"
	"regexp"
)

// KafkaConfigurationsServer is a fake server for instances of the armpurview.KafkaConfigurationsClient type.
type KafkaConfigurationsServer struct {
	// CreateOrUpdate is the fake for method KafkaConfigurationsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, accountName string, kafkaConfigurationName string, kafkaConfiguration armpurview.KafkaConfiguration, options *armpurview.KafkaConfigurationsClientCreateOrUpdateOptions) (resp azfake.Responder[armpurview.KafkaConfigurationsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method KafkaConfigurationsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, accountName string, kafkaConfigurationName string, options *armpurview.KafkaConfigurationsClientDeleteOptions) (resp azfake.Responder[armpurview.KafkaConfigurationsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method KafkaConfigurationsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, accountName string, kafkaConfigurationName string, options *armpurview.KafkaConfigurationsClientGetOptions) (resp azfake.Responder[armpurview.KafkaConfigurationsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByAccountPager is the fake for method KafkaConfigurationsClient.NewListByAccountPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByAccountPager func(resourceGroupName string, accountName string, options *armpurview.KafkaConfigurationsClientListByAccountOptions) (resp azfake.PagerResponder[armpurview.KafkaConfigurationsClientListByAccountResponse])
}

// NewKafkaConfigurationsServerTransport creates a new instance of KafkaConfigurationsServerTransport with the provided implementation.
// The returned KafkaConfigurationsServerTransport instance is connected to an instance of armpurview.KafkaConfigurationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewKafkaConfigurationsServerTransport(srv *KafkaConfigurationsServer) *KafkaConfigurationsServerTransport {
	return &KafkaConfigurationsServerTransport{
		srv:                   srv,
		newListByAccountPager: newTracker[azfake.PagerResponder[armpurview.KafkaConfigurationsClientListByAccountResponse]](),
	}
}

// KafkaConfigurationsServerTransport connects instances of armpurview.KafkaConfigurationsClient to instances of KafkaConfigurationsServer.
// Don't use this type directly, use NewKafkaConfigurationsServerTransport instead.
type KafkaConfigurationsServerTransport struct {
	srv                   *KafkaConfigurationsServer
	newListByAccountPager *tracker[azfake.PagerResponder[armpurview.KafkaConfigurationsClientListByAccountResponse]]
}

// Do implements the policy.Transporter interface for KafkaConfigurationsServerTransport.
func (k *KafkaConfigurationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "KafkaConfigurationsClient.CreateOrUpdate":
		resp, err = k.dispatchCreateOrUpdate(req)
	case "KafkaConfigurationsClient.Delete":
		resp, err = k.dispatchDelete(req)
	case "KafkaConfigurationsClient.Get":
		resp, err = k.dispatchGet(req)
	case "KafkaConfigurationsClient.NewListByAccountPager":
		resp, err = k.dispatchNewListByAccountPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (k *KafkaConfigurationsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if k.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Purview/accounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kafkaConfigurations/(?P<kafkaConfigurationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armpurview.KafkaConfiguration](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	kafkaConfigurationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("kafkaConfigurationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, accountNameParam, kafkaConfigurationNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KafkaConfiguration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KafkaConfigurationsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if k.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Purview/accounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kafkaConfigurations/(?P<kafkaConfigurationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	kafkaConfigurationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("kafkaConfigurationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.Delete(req.Context(), resourceGroupNameParam, accountNameParam, kafkaConfigurationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KafkaConfigurationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if k.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Purview/accounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kafkaConfigurations/(?P<kafkaConfigurationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	kafkaConfigurationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("kafkaConfigurationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.Get(req.Context(), resourceGroupNameParam, accountNameParam, kafkaConfigurationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KafkaConfiguration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KafkaConfigurationsServerTransport) dispatchNewListByAccountPager(req *http.Request) (*http.Response, error) {
	if k.srv.NewListByAccountPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByAccountPager not implemented")}
	}
	newListByAccountPager := k.newListByAccountPager.get(req)
	if newListByAccountPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Purview/accounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/kafkaConfigurations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armpurview.KafkaConfigurationsClientListByAccountOptions
		if skipTokenParam != nil {
			options = &armpurview.KafkaConfigurationsClientListByAccountOptions{
				SkipToken: skipTokenParam,
			}
		}
		resp := k.srv.NewListByAccountPager(resourceGroupNameParam, accountNameParam, options)
		newListByAccountPager = &resp
		k.newListByAccountPager.add(req, newListByAccountPager)
		server.PagerResponderInjectNextLinks(newListByAccountPager, req, func(page *armpurview.KafkaConfigurationsClientListByAccountResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByAccountPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		k.newListByAccountPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByAccountPager) {
		k.newListByAccountPager.remove(req)
	}
	return resp, nil
}
