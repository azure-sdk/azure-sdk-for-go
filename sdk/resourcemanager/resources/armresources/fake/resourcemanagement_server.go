//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources/v2"
	"net/http"
	"net/url"
	"regexp"
)

// ResourceManagementServer is a fake server for instances of the armresources.ResourceManagementClient type.
type ResourceManagementServer struct {
	// GetDataBoundaryAtScope is the fake for method ResourceManagementClient.GetDataBoundaryAtScope
	// HTTP status codes to indicate success: http.StatusOK
	GetDataBoundaryAtScope func(ctx context.Context, scope string, options *armresources.ResourceManagementClientGetDataBoundaryAtScopeOptions) (resp azfake.Responder[armresources.ResourceManagementClientGetDataBoundaryAtScopeResponse], errResp azfake.ErrorResponder)

	// GetTenantDataBoundary is the fake for method ResourceManagementClient.GetTenantDataBoundary
	// HTTP status codes to indicate success: http.StatusOK
	GetTenantDataBoundary func(ctx context.Context, options *armresources.ResourceManagementClientGetTenantDataBoundaryOptions) (resp azfake.Responder[armresources.ResourceManagementClientGetTenantDataBoundaryResponse], errResp azfake.ErrorResponder)

	// PutDataBoundary is the fake for method ResourceManagementClient.PutDataBoundary
	// HTTP status codes to indicate success: http.StatusOK
	PutDataBoundary func(ctx context.Context, dataBoundaryDefinition any, options *armresources.ResourceManagementClientPutDataBoundaryOptions) (resp azfake.Responder[armresources.ResourceManagementClientPutDataBoundaryResponse], errResp azfake.ErrorResponder)
}

// NewResourceManagementServerTransport creates a new instance of ResourceManagementServerTransport with the provided implementation.
// The returned ResourceManagementServerTransport instance is connected to an instance of armresources.ResourceManagementClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewResourceManagementServerTransport(srv *ResourceManagementServer) *ResourceManagementServerTransport {
	return &ResourceManagementServerTransport{srv: srv}
}

// ResourceManagementServerTransport connects instances of armresources.ResourceManagementClient to instances of ResourceManagementServer.
// Don't use this type directly, use NewResourceManagementServerTransport instead.
type ResourceManagementServerTransport struct {
	srv *ResourceManagementServer
}

// Do implements the policy.Transporter interface for ResourceManagementServerTransport.
func (r *ResourceManagementServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ResourceManagementClient.GetDataBoundaryAtScope":
		resp, err = r.dispatchGetDataBoundaryAtScope(req)
	case "ResourceManagementClient.GetTenantDataBoundary":
		resp, err = r.dispatchGetTenantDataBoundary(req)
	case "ResourceManagementClient.PutDataBoundary":
		resp, err = r.dispatchPutDataBoundary(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *ResourceManagementServerTransport) dispatchGetDataBoundaryAtScope(req *http.Request) (*http.Response, error) {
	if r.srv.GetDataBoundaryAtScope == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDataBoundaryAtScope not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft.Resources/dataBoundaries/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeUnescaped, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.GetDataBoundaryAtScope(req.Context(), scopeUnescaped, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DataBoundaryDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ResourceManagementServerTransport) dispatchGetTenantDataBoundary(req *http.Request) (*http.Response, error) {
	if r.srv.GetTenantDataBoundary == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetTenantDataBoundary not implemented")}
	}
	respr, errRespr := r.srv.GetTenantDataBoundary(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DataBoundaryDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ResourceManagementServerTransport) dispatchPutDataBoundary(req *http.Request) (*http.Response, error) {
	if r.srv.PutDataBoundary == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDataBoundary not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[any](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.PutDataBoundary(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DataBoundaryDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
