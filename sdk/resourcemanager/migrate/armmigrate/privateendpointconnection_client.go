//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PrivateEndpointConnectionClient contains the methods for the PrivateEndpointConnection group.
// Don't use this type directly, use NewPrivateEndpointConnectionClient() instead.
type PrivateEndpointConnectionClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewPrivateEndpointConnectionClient creates a new instance of PrivateEndpointConnectionClient with the specified values.
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPrivateEndpointConnectionClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PrivateEndpointConnectionClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &PrivateEndpointConnectionClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// DeletePrivateEndpointConnection - Gets the private link resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - peConnectionName - Private link resource name.
//   - options - PrivateEndpointConnectionClientDeletePrivateEndpointConnectionOptions contains the optional parameters for the
//     PrivateEndpointConnectionClient.DeletePrivateEndpointConnection method.
func (client *PrivateEndpointConnectionClient) DeletePrivateEndpointConnection(ctx context.Context, resourceGroupName string, siteName string, peConnectionName string, options *PrivateEndpointConnectionClientDeletePrivateEndpointConnectionOptions) (PrivateEndpointConnectionClientDeletePrivateEndpointConnectionResponse, error) {
	req, err := client.deletePrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, siteName, peConnectionName, options)
	if err != nil {
		return PrivateEndpointConnectionClientDeletePrivateEndpointConnectionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionClientDeletePrivateEndpointConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return PrivateEndpointConnectionClientDeletePrivateEndpointConnectionResponse{}, runtime.NewResponseError(resp)
	}
	return PrivateEndpointConnectionClientDeletePrivateEndpointConnectionResponse{}, nil
}

// deletePrivateEndpointConnectionCreateRequest creates the DeletePrivateEndpointConnection request.
func (client *PrivateEndpointConnectionClient) deletePrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, siteName string, peConnectionName string, options *PrivateEndpointConnectionClientDeletePrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/privateEndpointConnections/{peConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if peConnectionName == "" {
		return nil, errors.New("parameter peConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{peConnectionName}", url.PathEscape(peConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetPrivateEndpointConnection - Gets the private link resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - peConnectionName - Private link resource name.
//   - options - PrivateEndpointConnectionClientGetPrivateEndpointConnectionOptions contains the optional parameters for the PrivateEndpointConnectionClient.GetPrivateEndpointConnection
//     method.
func (client *PrivateEndpointConnectionClient) GetPrivateEndpointConnection(ctx context.Context, resourceGroupName string, siteName string, peConnectionName string, options *PrivateEndpointConnectionClientGetPrivateEndpointConnectionOptions) (PrivateEndpointConnectionClientGetPrivateEndpointConnectionResponse, error) {
	req, err := client.getPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, siteName, peConnectionName, options)
	if err != nil {
		return PrivateEndpointConnectionClientGetPrivateEndpointConnectionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionClientGetPrivateEndpointConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrivateEndpointConnectionClientGetPrivateEndpointConnectionResponse{}, runtime.NewResponseError(resp)
	}
	return client.getPrivateEndpointConnectionHandleResponse(resp)
}

// getPrivateEndpointConnectionCreateRequest creates the GetPrivateEndpointConnection request.
func (client *PrivateEndpointConnectionClient) getPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, siteName string, peConnectionName string, options *PrivateEndpointConnectionClientGetPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/privateEndpointConnections/{peConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if peConnectionName == "" {
		return nil, errors.New("parameter peConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{peConnectionName}", url.PathEscape(peConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPrivateEndpointConnectionHandleResponse handles the GetPrivateEndpointConnection response.
func (client *PrivateEndpointConnectionClient) getPrivateEndpointConnectionHandleResponse(resp *http.Response) (PrivateEndpointConnectionClientGetPrivateEndpointConnectionResponse, error) {
	result := PrivateEndpointConnectionClientGetPrivateEndpointConnectionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnection); err != nil {
		return PrivateEndpointConnectionClientGetPrivateEndpointConnectionResponse{}, err
	}
	return result, nil
}

// GetPrivateEndpointConnections - Gets the private link resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - PrivateEndpointConnectionClientGetPrivateEndpointConnectionsOptions contains the optional parameters for the
//     PrivateEndpointConnectionClient.GetPrivateEndpointConnections method.
func (client *PrivateEndpointConnectionClient) GetPrivateEndpointConnections(ctx context.Context, resourceGroupName string, siteName string, options *PrivateEndpointConnectionClientGetPrivateEndpointConnectionsOptions) (PrivateEndpointConnectionClientGetPrivateEndpointConnectionsResponse, error) {
	req, err := client.getPrivateEndpointConnectionsCreateRequest(ctx, resourceGroupName, siteName, options)
	if err != nil {
		return PrivateEndpointConnectionClientGetPrivateEndpointConnectionsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionClientGetPrivateEndpointConnectionsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrivateEndpointConnectionClientGetPrivateEndpointConnectionsResponse{}, runtime.NewResponseError(resp)
	}
	return client.getPrivateEndpointConnectionsHandleResponse(resp)
}

// getPrivateEndpointConnectionsCreateRequest creates the GetPrivateEndpointConnections request.
func (client *PrivateEndpointConnectionClient) getPrivateEndpointConnectionsCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *PrivateEndpointConnectionClientGetPrivateEndpointConnectionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/privateEndpointConnections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPrivateEndpointConnectionsHandleResponse handles the GetPrivateEndpointConnections response.
func (client *PrivateEndpointConnectionClient) getPrivateEndpointConnectionsHandleResponse(resp *http.Response) (PrivateEndpointConnectionClientGetPrivateEndpointConnectionsResponse, error) {
	result := PrivateEndpointConnectionClientGetPrivateEndpointConnectionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnectionCollection); err != nil {
		return PrivateEndpointConnectionClientGetPrivateEndpointConnectionsResponse{}, err
	}
	return result, nil
}

// PutPrivateEndpointConnection -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - peConnectionName - Private link resource name.
//   - options - PrivateEndpointConnectionClientPutPrivateEndpointConnectionOptions contains the optional parameters for the PrivateEndpointConnectionClient.PutPrivateEndpointConnection
//     method.
func (client *PrivateEndpointConnectionClient) PutPrivateEndpointConnection(ctx context.Context, resourceGroupName string, siteName string, peConnectionName string, body PrivateEndpointConnection, options *PrivateEndpointConnectionClientPutPrivateEndpointConnectionOptions) (PrivateEndpointConnectionClientPutPrivateEndpointConnectionResponse, error) {
	req, err := client.putPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, siteName, peConnectionName, body, options)
	if err != nil {
		return PrivateEndpointConnectionClientPutPrivateEndpointConnectionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionClientPutPrivateEndpointConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrivateEndpointConnectionClientPutPrivateEndpointConnectionResponse{}, runtime.NewResponseError(resp)
	}
	return client.putPrivateEndpointConnectionHandleResponse(resp)
}

// putPrivateEndpointConnectionCreateRequest creates the PutPrivateEndpointConnection request.
func (client *PrivateEndpointConnectionClient) putPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, siteName string, peConnectionName string, body PrivateEndpointConnection, options *PrivateEndpointConnectionClientPutPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/privateEndpointConnections/{peConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if peConnectionName == "" {
		return nil, errors.New("parameter peConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{peConnectionName}", url.PathEscape(peConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// putPrivateEndpointConnectionHandleResponse handles the PutPrivateEndpointConnection response.
func (client *PrivateEndpointConnectionClient) putPrivateEndpointConnectionHandleResponse(resp *http.Response) (PrivateEndpointConnectionClientPutPrivateEndpointConnectionResponse, error) {
	result := PrivateEndpointConnectionClientPutPrivateEndpointConnectionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnection); err != nil {
		return PrivateEndpointConnectionClientPutPrivateEndpointConnectionResponse{}, err
	}
	return result, nil
}
