// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloads/sapmonitors"
	"net/http"
	"net/url"
	"regexp"
)

// ProviderInstancesServer is a fake server for instances of the sapmonitors.ProviderInstancesClient type.
type ProviderInstancesServer struct {
	// BeginCreate is the fake for method ProviderInstancesClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, monitorName string, providerInstanceName string, resource sapmonitors.ProviderInstance, options *sapmonitors.ProviderInstancesClientBeginCreateOptions) (resp azfake.PollerResponder[sapmonitors.ProviderInstancesClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method ProviderInstancesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, monitorName string, providerInstanceName string, options *sapmonitors.ProviderInstancesClientBeginDeleteOptions) (resp azfake.PollerResponder[sapmonitors.ProviderInstancesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ProviderInstancesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, monitorName string, providerInstanceName string, options *sapmonitors.ProviderInstancesClientGetOptions) (resp azfake.Responder[sapmonitors.ProviderInstancesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByMonitorPager is the fake for method ProviderInstancesClient.NewListByMonitorPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByMonitorPager func(resourceGroupName string, monitorName string, options *sapmonitors.ProviderInstancesClientListByMonitorOptions) (resp azfake.PagerResponder[sapmonitors.ProviderInstancesClientListByMonitorResponse])
}

// NewProviderInstancesServerTransport creates a new instance of ProviderInstancesServerTransport with the provided implementation.
// The returned ProviderInstancesServerTransport instance is connected to an instance of sapmonitors.ProviderInstancesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProviderInstancesServerTransport(srv *ProviderInstancesServer) *ProviderInstancesServerTransport {
	return &ProviderInstancesServerTransport{
		srv:                   srv,
		beginCreate:           newTracker[azfake.PollerResponder[sapmonitors.ProviderInstancesClientCreateResponse]](),
		beginDelete:           newTracker[azfake.PollerResponder[sapmonitors.ProviderInstancesClientDeleteResponse]](),
		newListByMonitorPager: newTracker[azfake.PagerResponder[sapmonitors.ProviderInstancesClientListByMonitorResponse]](),
	}
}

// ProviderInstancesServerTransport connects instances of sapmonitors.ProviderInstancesClient to instances of ProviderInstancesServer.
// Don't use this type directly, use NewProviderInstancesServerTransport instead.
type ProviderInstancesServerTransport struct {
	srv                   *ProviderInstancesServer
	beginCreate           *tracker[azfake.PollerResponder[sapmonitors.ProviderInstancesClientCreateResponse]]
	beginDelete           *tracker[azfake.PollerResponder[sapmonitors.ProviderInstancesClientDeleteResponse]]
	newListByMonitorPager *tracker[azfake.PagerResponder[sapmonitors.ProviderInstancesClientListByMonitorResponse]]
}

// Do implements the policy.Transporter interface for ProviderInstancesServerTransport.
func (p *ProviderInstancesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *ProviderInstancesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if providerInstancesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = providerInstancesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ProviderInstancesClient.BeginCreate":
				res.resp, res.err = p.dispatchBeginCreate(req)
			case "ProviderInstancesClient.BeginDelete":
				res.resp, res.err = p.dispatchBeginDelete(req)
			case "ProviderInstancesClient.Get":
				res.resp, res.err = p.dispatchGet(req)
			case "ProviderInstancesClient.NewListByMonitorPager":
				res.resp, res.err = p.dispatchNewListByMonitorPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *ProviderInstancesServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if p.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := p.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providerInstances/(?P<providerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[sapmonitors.ProviderInstance](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
		if err != nil {
			return nil, err
		}
		providerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("providerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginCreate(req.Context(), resourceGroupNameParam, monitorNameParam, providerInstanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		p.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		p.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		p.beginCreate.remove(req)
	}

	return resp, nil
}

func (p *ProviderInstancesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if p.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := p.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providerInstances/(?P<providerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
		if err != nil {
			return nil, err
		}
		providerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("providerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginDelete(req.Context(), resourceGroupNameParam, monitorNameParam, providerInstanceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		p.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		p.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		p.beginDelete.remove(req)
	}

	return resp, nil
}

func (p *ProviderInstancesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providerInstances/(?P<providerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
	if err != nil {
		return nil, err
	}
	providerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("providerInstanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), resourceGroupNameParam, monitorNameParam, providerInstanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProviderInstance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProviderInstancesServerTransport) dispatchNewListByMonitorPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListByMonitorPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByMonitorPager not implemented")}
	}
	newListByMonitorPager := p.newListByMonitorPager.get(req)
	if newListByMonitorPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providerInstances`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewListByMonitorPager(resourceGroupNameParam, monitorNameParam, nil)
		newListByMonitorPager = &resp
		p.newListByMonitorPager.add(req, newListByMonitorPager)
		server.PagerResponderInjectNextLinks(newListByMonitorPager, req, func(page *sapmonitors.ProviderInstancesClientListByMonitorResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByMonitorPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListByMonitorPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByMonitorPager) {
		p.newListByMonitorPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ProviderInstancesServerTransport
var providerInstancesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
