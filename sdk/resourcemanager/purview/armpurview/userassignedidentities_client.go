//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpurview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// UserAssignedIdentitiesClient contains the methods for the UserAssignedIdentities group.
// Don't use this type directly, use NewUserAssignedIdentitiesClient() instead.
type UserAssignedIdentitiesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewUserAssignedIdentitiesClient creates a new instance of UserAssignedIdentitiesClient with the specified values.
//   - subscriptionID - The subscription identifier
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewUserAssignedIdentitiesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*UserAssignedIdentitiesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &UserAssignedIdentitiesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Assign - Assign the user assigned identity to account or domain
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-04-01-preview
//   - resourceGroupName - The resource group name.
//   - accountName - The name of the account.
//   - domainUserIdentityRequest - The request payload that contains the target domain and the resourceId of the User Assigned
//     Identity.
//   - options - UserAssignedIdentitiesClientAssignOptions contains the optional parameters for the UserAssignedIdentitiesClient.Assign
//     method.
func (client *UserAssignedIdentitiesClient) Assign(ctx context.Context, resourceGroupName string, accountName string, domainUserIdentityRequest DomainUserIdentityRequest, options *UserAssignedIdentitiesClientAssignOptions) (UserAssignedIdentitiesClientAssignResponse, error) {
	var err error
	const operationName = "UserAssignedIdentitiesClient.Assign"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.assignCreateRequest(ctx, resourceGroupName, accountName, domainUserIdentityRequest, options)
	if err != nil {
		return UserAssignedIdentitiesClientAssignResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UserAssignedIdentitiesClientAssignResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UserAssignedIdentitiesClientAssignResponse{}, err
	}
	resp, err := client.assignHandleResponse(httpResp)
	return resp, err
}

// assignCreateRequest creates the Assign request.
func (client *UserAssignedIdentitiesClient) assignCreateRequest(ctx context.Context, resourceGroupName string, accountName string, domainUserIdentityRequest DomainUserIdentityRequest, options *UserAssignedIdentitiesClientAssignOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/assignIdentity"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, domainUserIdentityRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// assignHandleResponse handles the Assign response.
func (client *UserAssignedIdentitiesClient) assignHandleResponse(resp *http.Response) (UserAssignedIdentitiesClientAssignResponse, error) {
	result := UserAssignedIdentitiesClientAssignResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DomainScopedUserAssignedIdentity); err != nil {
		return UserAssignedIdentitiesClientAssignResponse{}, err
	}
	return result, nil
}
