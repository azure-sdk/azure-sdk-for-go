//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armstackhcivm"
	"net/http"
	"net/url"
	"regexp"
)

// GuestAgentsServer is a fake server for instances of the armstackhcivm.GuestAgentsClient type.
type GuestAgentsServer struct {
	// BeginCreate is the fake for method GuestAgentsClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceURI string, resource armstackhcivm.GuestAgent, options *armstackhcivm.GuestAgentsClientBeginCreateOptions) (resp azfake.PollerResponder[armstackhcivm.GuestAgentsClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method GuestAgentsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceURI string, options *armstackhcivm.GuestAgentsClientBeginDeleteOptions) (resp azfake.PollerResponder[armstackhcivm.GuestAgentsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method GuestAgentsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceURI string, options *armstackhcivm.GuestAgentsClientGetOptions) (resp azfake.Responder[armstackhcivm.GuestAgentsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByVirtualMachineInstancePager is the fake for method GuestAgentsClient.NewListByVirtualMachineInstancePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByVirtualMachineInstancePager func(resourceURI string, options *armstackhcivm.GuestAgentsClientListByVirtualMachineInstanceOptions) (resp azfake.PagerResponder[armstackhcivm.GuestAgentsClientListByVirtualMachineInstanceResponse])
}

// NewGuestAgentsServerTransport creates a new instance of GuestAgentsServerTransport with the provided implementation.
// The returned GuestAgentsServerTransport instance is connected to an instance of armstackhcivm.GuestAgentsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewGuestAgentsServerTransport(srv *GuestAgentsServer) *GuestAgentsServerTransport {
	return &GuestAgentsServerTransport{
		srv:                                  srv,
		beginCreate:                          newTracker[azfake.PollerResponder[armstackhcivm.GuestAgentsClientCreateResponse]](),
		beginDelete:                          newTracker[azfake.PollerResponder[armstackhcivm.GuestAgentsClientDeleteResponse]](),
		newListByVirtualMachineInstancePager: newTracker[azfake.PagerResponder[armstackhcivm.GuestAgentsClientListByVirtualMachineInstanceResponse]](),
	}
}

// GuestAgentsServerTransport connects instances of armstackhcivm.GuestAgentsClient to instances of GuestAgentsServer.
// Don't use this type directly, use NewGuestAgentsServerTransport instead.
type GuestAgentsServerTransport struct {
	srv                                  *GuestAgentsServer
	beginCreate                          *tracker[azfake.PollerResponder[armstackhcivm.GuestAgentsClientCreateResponse]]
	beginDelete                          *tracker[azfake.PollerResponder[armstackhcivm.GuestAgentsClientDeleteResponse]]
	newListByVirtualMachineInstancePager *tracker[azfake.PagerResponder[armstackhcivm.GuestAgentsClientListByVirtualMachineInstanceResponse]]
}

// Do implements the policy.Transporter interface for GuestAgentsServerTransport.
func (g *GuestAgentsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "GuestAgentsClient.BeginCreate":
		resp, err = g.dispatchBeginCreate(req)
	case "GuestAgentsClient.BeginDelete":
		resp, err = g.dispatchBeginDelete(req)
	case "GuestAgentsClient.Get":
		resp, err = g.dispatchGet(req)
	case "GuestAgentsClient.NewListByVirtualMachineInstancePager":
		resp, err = g.dispatchNewListByVirtualMachineInstancePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *GuestAgentsServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if g.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := g.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualMachineInstances/default/guestAgents/default`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armstackhcivm.GuestAgent](req)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := g.srv.BeginCreate(req.Context(), resourceURIParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		g.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		g.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		g.beginCreate.remove(req)
	}

	return resp, nil
}

func (g *GuestAgentsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if g.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := g.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualMachineInstances/default/guestAgents/default`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := g.srv.BeginDelete(req.Context(), resourceURIParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		g.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		g.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		g.beginDelete.remove(req)
	}

	return resp, nil
}

func (g *GuestAgentsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if g.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualMachineInstances/default/guestAgents/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := g.srv.Get(req.Context(), resourceURIParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GuestAgent, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GuestAgentsServerTransport) dispatchNewListByVirtualMachineInstancePager(req *http.Request) (*http.Response, error) {
	if g.srv.NewListByVirtualMachineInstancePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByVirtualMachineInstancePager not implemented")}
	}
	newListByVirtualMachineInstancePager := g.newListByVirtualMachineInstancePager.get(req)
	if newListByVirtualMachineInstancePager == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualMachineInstances/default/guestAgents`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		resp := g.srv.NewListByVirtualMachineInstancePager(resourceURIParam, nil)
		newListByVirtualMachineInstancePager = &resp
		g.newListByVirtualMachineInstancePager.add(req, newListByVirtualMachineInstancePager)
		server.PagerResponderInjectNextLinks(newListByVirtualMachineInstancePager, req, func(page *armstackhcivm.GuestAgentsClientListByVirtualMachineInstanceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByVirtualMachineInstancePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		g.newListByVirtualMachineInstancePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByVirtualMachineInstancePager) {
		g.newListByVirtualMachineInstancePager.remove(req)
	}
	return resp, nil
}
