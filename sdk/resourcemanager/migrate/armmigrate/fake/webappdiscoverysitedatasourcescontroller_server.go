//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate"
	"net/http"
	"net/url"
	"regexp"
)

// WebAppDiscoverySiteDataSourcesControllerServer is a fake server for instances of the armmigrate.WebAppDiscoverySiteDataSourcesControllerClient type.
type WebAppDiscoverySiteDataSourcesControllerServer struct {
	// BeginCreate is the fake for method WebAppDiscoverySiteDataSourcesControllerClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, discoverySiteDataSourceName string, body armmigrate.DiscoverySiteDataSource, options *armmigrate.WebAppDiscoverySiteDataSourcesControllerClientBeginCreateOptions) (resp azfake.PollerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method WebAppDiscoverySiteDataSourcesControllerClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, discoverySiteDataSourceName string, options *armmigrate.WebAppDiscoverySiteDataSourcesControllerClientBeginDeleteOptions) (resp azfake.PollerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method WebAppDiscoverySiteDataSourcesControllerClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, discoverySiteDataSourceName string, options *armmigrate.WebAppDiscoverySiteDataSourcesControllerClientGetOptions) (resp azfake.Responder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByWebAppSitePager is the fake for method WebAppDiscoverySiteDataSourcesControllerClient.NewListByWebAppSitePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByWebAppSitePager func(resourceGroupName string, siteName string, webAppSiteName string, options *armmigrate.WebAppDiscoverySiteDataSourcesControllerClientListByWebAppSiteOptions) (resp azfake.PagerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientListByWebAppSiteResponse])
}

// NewWebAppDiscoverySiteDataSourcesControllerServerTransport creates a new instance of WebAppDiscoverySiteDataSourcesControllerServerTransport with the provided implementation.
// The returned WebAppDiscoverySiteDataSourcesControllerServerTransport instance is connected to an instance of armmigrate.WebAppDiscoverySiteDataSourcesControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWebAppDiscoverySiteDataSourcesControllerServerTransport(srv *WebAppDiscoverySiteDataSourcesControllerServer) *WebAppDiscoverySiteDataSourcesControllerServerTransport {
	return &WebAppDiscoverySiteDataSourcesControllerServerTransport{
		srv:                      srv,
		beginCreate:              newTracker[azfake.PollerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientCreateResponse]](),
		beginDelete:              newTracker[azfake.PollerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientDeleteResponse]](),
		newListByWebAppSitePager: newTracker[azfake.PagerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientListByWebAppSiteResponse]](),
	}
}

// WebAppDiscoverySiteDataSourcesControllerServerTransport connects instances of armmigrate.WebAppDiscoverySiteDataSourcesControllerClient to instances of WebAppDiscoverySiteDataSourcesControllerServer.
// Don't use this type directly, use NewWebAppDiscoverySiteDataSourcesControllerServerTransport instead.
type WebAppDiscoverySiteDataSourcesControllerServerTransport struct {
	srv                      *WebAppDiscoverySiteDataSourcesControllerServer
	beginCreate              *tracker[azfake.PollerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientCreateResponse]]
	beginDelete              *tracker[azfake.PollerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientDeleteResponse]]
	newListByWebAppSitePager *tracker[azfake.PagerResponder[armmigrate.WebAppDiscoverySiteDataSourcesControllerClientListByWebAppSiteResponse]]
}

// Do implements the policy.Transporter interface for WebAppDiscoverySiteDataSourcesControllerServerTransport.
func (w *WebAppDiscoverySiteDataSourcesControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "WebAppDiscoverySiteDataSourcesControllerClient.BeginCreate":
		resp, err = w.dispatchBeginCreate(req)
	case "WebAppDiscoverySiteDataSourcesControllerClient.BeginDelete":
		resp, err = w.dispatchBeginDelete(req)
	case "WebAppDiscoverySiteDataSourcesControllerClient.Get":
		resp, err = w.dispatchGet(req)
	case "WebAppDiscoverySiteDataSourcesControllerClient.NewListByWebAppSitePager":
		resp, err = w.dispatchNewListByWebAppSitePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (w *WebAppDiscoverySiteDataSourcesControllerServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if w.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := w.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/masterSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/webAppSites/(?P<webAppSiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/discoverySiteDataSources/(?P<discoverySiteDataSourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.DiscoverySiteDataSource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		webAppSiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("webAppSiteName")])
		if err != nil {
			return nil, err
		}
		discoverySiteDataSourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("discoverySiteDataSourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginCreate(req.Context(), resourceGroupNameParam, siteNameParam, webAppSiteNameParam, discoverySiteDataSourceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		w.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		w.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		w.beginCreate.remove(req)
	}

	return resp, nil
}

func (w *WebAppDiscoverySiteDataSourcesControllerServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if w.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := w.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/masterSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/webAppSites/(?P<webAppSiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/discoverySiteDataSources/(?P<discoverySiteDataSourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		webAppSiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("webAppSiteName")])
		if err != nil {
			return nil, err
		}
		discoverySiteDataSourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("discoverySiteDataSourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginDelete(req.Context(), resourceGroupNameParam, siteNameParam, webAppSiteNameParam, discoverySiteDataSourceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		w.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		w.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		w.beginDelete.remove(req)
	}

	return resp, nil
}

func (w *WebAppDiscoverySiteDataSourcesControllerServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if w.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/masterSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/webAppSites/(?P<webAppSiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/discoverySiteDataSources/(?P<discoverySiteDataSourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	webAppSiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("webAppSiteName")])
	if err != nil {
		return nil, err
	}
	discoverySiteDataSourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("discoverySiteDataSourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.Get(req.Context(), resourceGroupNameParam, siteNameParam, webAppSiteNameParam, discoverySiteDataSourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DiscoverySiteDataSource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WebAppDiscoverySiteDataSourcesControllerServerTransport) dispatchNewListByWebAppSitePager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListByWebAppSitePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByWebAppSitePager not implemented")}
	}
	newListByWebAppSitePager := w.newListByWebAppSitePager.get(req)
	if newListByWebAppSitePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/masterSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/webAppSites/(?P<webAppSiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/discoverySiteDataSources`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		webAppSiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("webAppSiteName")])
		if err != nil {
			return nil, err
		}
		resp := w.srv.NewListByWebAppSitePager(resourceGroupNameParam, siteNameParam, webAppSiteNameParam, nil)
		newListByWebAppSitePager = &resp
		w.newListByWebAppSitePager.add(req, newListByWebAppSitePager)
		server.PagerResponderInjectNextLinks(newListByWebAppSitePager, req, func(page *armmigrate.WebAppDiscoverySiteDataSourcesControllerClientListByWebAppSiteResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByWebAppSitePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListByWebAppSitePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByWebAppSitePager) {
		w.newListByWebAppSitePager.remove(req)
	}
	return resp, nil
}
