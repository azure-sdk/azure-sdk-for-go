//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquota

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GroupQuotaSubscriptionQuotaAllocationClient contains the methods for the GroupQuotaSubscriptionQuotaAllocation group.
// Don't use this type directly, use NewGroupQuotaSubscriptionQuotaAllocationClient() instead.
type GroupQuotaSubscriptionQuotaAllocationClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewGroupQuotaSubscriptionQuotaAllocationClient creates a new instance of GroupQuotaSubscriptionQuotaAllocationClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGroupQuotaSubscriptionQuotaAllocationClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GroupQuotaSubscriptionQuotaAllocationClient, error) {
	cl, err := arm.NewClient(moduleName+".GroupQuotaSubscriptionQuotaAllocationClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GroupQuotaSubscriptionQuotaAllocationClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions
// can also reduce the quota assigned to subscription to give back the group back to MG. The
// quota assignment back to MG groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused
// quota assigned back to MG groupQuota will be the groupQuota assigned to the
// subscriptions. So, this API can used to assign Quota to subscriptions and assign back unused quota, which was previously
// assigned from MG groupQuota to subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - mgID - Management Group Id.
//   - resourceProviderScope - Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so
//     can be skipped in scope. For most of the resources require -
//     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}.
//     This
//     extension enables to specify resources for any all the RPs.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - allocateQuotaRequest - Quota requests payload.
//   - options - GroupQuotaSubscriptionQuotaAllocationClientBeginCreateOrUpdateOptions contains the optional parameters for the
//     GroupQuotaSubscriptionQuotaAllocationClient.BeginCreateOrUpdate method.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) BeginCreateOrUpdate(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginCreateOrUpdateOptions) (*runtime.Poller[GroupQuotaSubscriptionQuotaAllocationClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, mgID, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[GroupQuotaSubscriptionQuotaAllocationClientCreateOrUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[GroupQuotaSubscriptionQuotaAllocationClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions
// can also reduce the quota assigned to subscription to give back the group back to MG. The
// quota assignment back to MG groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused
// quota assigned back to MG groupQuota will be the groupQuota assigned to the
// subscriptions. So, this API can used to assign Quota to subscriptions and assign back unused quota, which was previously
// assigned from MG groupQuota to subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
func (client *GroupQuotaSubscriptionQuotaAllocationClient) createOrUpdate(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, mgID, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) createOrUpdateCreateRequest(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}"
	if mgID == "" {
		return nil, errors.New("parameter mgID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mgId}", url.PathEscape(mgID))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceProviderScope == "" {
		return nil, errors.New("parameter resourceProviderScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderScope}", url.PathEscape(resourceProviderScope))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, allocateQuotaRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will include
// the GroupQuota and total quota assigned to the subscription. Only the Group quota
// assigned to the subscription can be assigned back to the MG Group Quota.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - mgID - Management Group Id.
//   - resourceProviderScope - Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so
//     can be skipped in scope. For most of the resources require -
//     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}.
//     This
//     extension enables to specify resources for any all the RPs.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - options - GroupQuotaSubscriptionQuotaAllocationClientGetOptions contains the optional parameters for the GroupQuotaSubscriptionQuotaAllocationClient.Get
//     method.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) Get(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, resourceName string, options *GroupQuotaSubscriptionQuotaAllocationClientGetOptions) (GroupQuotaSubscriptionQuotaAllocationClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, mgID, resourceProviderScope, groupQuotaName, resourceName, options)
	if err != nil {
		return GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) getCreateRequest(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, resourceName string, options *GroupQuotaSubscriptionQuotaAllocationClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}"
	if mgID == "" {
		return nil, errors.New("parameter mgID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mgId}", url.PathEscape(mgID))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceProviderScope == "" {
		return nil, errors.New("parameter resourceProviderScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderScope}", url.PathEscape(resourceProviderScope))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) getHandleResponse(resp *http.Response) (GroupQuotaSubscriptionQuotaAllocationClientGetResponse, error) {
	result := GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionQuotaAllocations); err != nil {
		return GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include
// the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned
// to the subscription can be assigned back to the MG Group Quota.
//
// Generated from API version 2023-06-01-preview
//   - mgID - Management Group Id.
//   - resourceProviderScope - Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so
//     can be skipped in scope. For most of the resources require -
//     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}.
//     This
//     extension enables to specify resources for any all the RPs.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - options - GroupQuotaSubscriptionQuotaAllocationClientListOptions contains the optional parameters for the GroupQuotaSubscriptionQuotaAllocationClient.NewListPager
//     method.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) NewListPager(mgID string, resourceProviderScope string, groupQuotaName string, options *GroupQuotaSubscriptionQuotaAllocationClientListOptions) *runtime.Pager[GroupQuotaSubscriptionQuotaAllocationClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[GroupQuotaSubscriptionQuotaAllocationClientListResponse]{
		More: func(page GroupQuotaSubscriptionQuotaAllocationClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GroupQuotaSubscriptionQuotaAllocationClientListResponse) (GroupQuotaSubscriptionQuotaAllocationClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, mgID, resourceProviderScope, groupQuotaName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return GroupQuotaSubscriptionQuotaAllocationClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return GroupQuotaSubscriptionQuotaAllocationClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return GroupQuotaSubscriptionQuotaAllocationClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) listCreateRequest(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, options *GroupQuotaSubscriptionQuotaAllocationClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations"
	if mgID == "" {
		return nil, errors.New("parameter mgID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mgId}", url.PathEscape(mgID))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceProviderScope == "" {
		return nil, errors.New("parameter resourceProviderScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderScope}", url.PathEscape(resourceProviderScope))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) listHandleResponse(resp *http.Response) (GroupQuotaSubscriptionQuotaAllocationClientListResponse, error) {
	result := GroupQuotaSubscriptionQuotaAllocationClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionQuotaAllocationsList); err != nil {
		return GroupQuotaSubscriptionQuotaAllocationClientListResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
// assigned to subscription to give back the group back to MG. The quota assignment back to MG
// groupQuota is limited by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota
// to subscriptions and assign back unused quota, which was previously assigned
// from MG groupQuota to subscription(s).
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - mgID - Management Group Id.
//   - resourceProviderScope - Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so
//     can be skipped in scope. For most of the resources require -
//     providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}.
//     This
//     extension enables to specify resources for any all the RPs.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - allocateQuotaRequest - Quota requests payload.
//   - options - GroupQuotaSubscriptionQuotaAllocationClientBeginUpdateOptions contains the optional parameters for the GroupQuotaSubscriptionQuotaAllocationClient.BeginUpdate
//     method.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) BeginUpdate(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginUpdateOptions) (*runtime.Poller[GroupQuotaSubscriptionQuotaAllocationClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, mgID, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[GroupQuotaSubscriptionQuotaAllocationClientUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[GroupQuotaSubscriptionQuotaAllocationClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota assigned
// to subscription to give back the group back to MG. The quota assignment back to MG
// groupQuota is limited by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota
// to subscriptions and assign back unused quota, which was previously assigned
// from MG groupQuota to subscription(s).
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
func (client *GroupQuotaSubscriptionQuotaAllocationClient) update(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, mgID, resourceProviderScope, groupQuotaName, resourceName, allocateQuotaRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) updateCreateRequest(ctx context.Context, mgID string, resourceProviderScope string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}"
	if mgID == "" {
		return nil, errors.New("parameter mgID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mgId}", url.PathEscape(mgID))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceProviderScope == "" {
		return nil, errors.New("parameter resourceProviderScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderScope}", url.PathEscape(resourceProviderScope))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, allocateQuotaRequest); err != nil {
		return nil, err
	}
	return req, nil
}
