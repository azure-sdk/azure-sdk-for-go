// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devcenter/armdevcenter/v2"
	"net/http"
	"net/url"
	"regexp"
)

// CatalogImageDefinitionBuildServer is a fake server for instances of the armdevcenter.CatalogImageDefinitionBuildClient type.
type CatalogImageDefinitionBuildServer struct {
	// BeginCancel is the fake for method CatalogImageDefinitionBuildClient.BeginCancel
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginCancel func(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, buildName string, options *armdevcenter.CatalogImageDefinitionBuildClientBeginCancelOptions) (resp azfake.PollerResponder[armdevcenter.CatalogImageDefinitionBuildClientCancelResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method CatalogImageDefinitionBuildClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, buildName string, options *armdevcenter.CatalogImageDefinitionBuildClientGetOptions) (resp azfake.Responder[armdevcenter.CatalogImageDefinitionBuildClientGetResponse], errResp azfake.ErrorResponder)

	// GetBuildDetails is the fake for method CatalogImageDefinitionBuildClient.GetBuildDetails
	// HTTP status codes to indicate success: http.StatusOK
	GetBuildDetails func(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, buildName string, options *armdevcenter.CatalogImageDefinitionBuildClientGetBuildDetailsOptions) (resp azfake.Responder[armdevcenter.CatalogImageDefinitionBuildClientGetBuildDetailsResponse], errResp azfake.ErrorResponder)
}

// NewCatalogImageDefinitionBuildServerTransport creates a new instance of CatalogImageDefinitionBuildServerTransport with the provided implementation.
// The returned CatalogImageDefinitionBuildServerTransport instance is connected to an instance of armdevcenter.CatalogImageDefinitionBuildClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCatalogImageDefinitionBuildServerTransport(srv *CatalogImageDefinitionBuildServer) *CatalogImageDefinitionBuildServerTransport {
	return &CatalogImageDefinitionBuildServerTransport{
		srv:         srv,
		beginCancel: newTracker[azfake.PollerResponder[armdevcenter.CatalogImageDefinitionBuildClientCancelResponse]](),
	}
}

// CatalogImageDefinitionBuildServerTransport connects instances of armdevcenter.CatalogImageDefinitionBuildClient to instances of CatalogImageDefinitionBuildServer.
// Don't use this type directly, use NewCatalogImageDefinitionBuildServerTransport instead.
type CatalogImageDefinitionBuildServerTransport struct {
	srv         *CatalogImageDefinitionBuildServer
	beginCancel *tracker[azfake.PollerResponder[armdevcenter.CatalogImageDefinitionBuildClientCancelResponse]]
}

// Do implements the policy.Transporter interface for CatalogImageDefinitionBuildServerTransport.
func (c *CatalogImageDefinitionBuildServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *CatalogImageDefinitionBuildServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if catalogImageDefinitionBuildServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = catalogImageDefinitionBuildServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "CatalogImageDefinitionBuildClient.BeginCancel":
				res.resp, res.err = c.dispatchBeginCancel(req)
			case "CatalogImageDefinitionBuildClient.Get":
				res.resp, res.err = c.dispatchGet(req)
			case "CatalogImageDefinitionBuildClient.GetBuildDetails":
				res.resp, res.err = c.dispatchGetBuildDetails(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *CatalogImageDefinitionBuildServerTransport) dispatchBeginCancel(req *http.Request) (*http.Response, error) {
	if c.srv.BeginCancel == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCancel not implemented")}
	}
	beginCancel := c.beginCancel.get(req)
	if beginCancel == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/devcenters/(?P<devCenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions/(?P<imageDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/builds/(?P<buildName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/cancel`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		devCenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("devCenterName")])
		if err != nil {
			return nil, err
		}
		catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
		if err != nil {
			return nil, err
		}
		imageDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageDefinitionName")])
		if err != nil {
			return nil, err
		}
		buildNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("buildName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginCancel(req.Context(), resourceGroupNameParam, devCenterNameParam, catalogNameParam, imageDefinitionNameParam, buildNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCancel = &respr
		c.beginCancel.add(req, beginCancel)
	}

	resp, err := server.PollerResponderNext(beginCancel, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		c.beginCancel.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCancel) {
		c.beginCancel.remove(req)
	}

	return resp, nil
}

func (c *CatalogImageDefinitionBuildServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/devcenters/(?P<devCenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions/(?P<imageDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/builds/(?P<buildName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	devCenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("devCenterName")])
	if err != nil {
		return nil, err
	}
	catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
	if err != nil {
		return nil, err
	}
	imageDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageDefinitionName")])
	if err != nil {
		return nil, err
	}
	buildNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("buildName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), resourceGroupNameParam, devCenterNameParam, catalogNameParam, imageDefinitionNameParam, buildNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ImageDefinitionBuild, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CatalogImageDefinitionBuildServerTransport) dispatchGetBuildDetails(req *http.Request) (*http.Response, error) {
	if c.srv.GetBuildDetails == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBuildDetails not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/devcenters/(?P<devCenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions/(?P<imageDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/builds/(?P<buildName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getBuildDetails`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	devCenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("devCenterName")])
	if err != nil {
		return nil, err
	}
	catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
	if err != nil {
		return nil, err
	}
	imageDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageDefinitionName")])
	if err != nil {
		return nil, err
	}
	buildNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("buildName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.GetBuildDetails(req.Context(), resourceGroupNameParam, devCenterNameParam, catalogNameParam, imageDefinitionNameParam, buildNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ImageDefinitionBuildDetails, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to CatalogImageDefinitionBuildServerTransport
var catalogImageDefinitionBuildServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
