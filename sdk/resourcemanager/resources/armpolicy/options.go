//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicy

// AssignmentsClientCreateByIDOptions contains the optional parameters for the AssignmentsClient.CreateByID method.
type AssignmentsClientCreateByIDOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientCreateOptions contains the optional parameters for the AssignmentsClient.Create method.
type AssignmentsClientCreateOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientDeleteByIDOptions contains the optional parameters for the AssignmentsClient.DeleteByID method.
type AssignmentsClientDeleteByIDOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientDeleteOptions contains the optional parameters for the AssignmentsClient.Delete method.
type AssignmentsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientGetByIDOptions contains the optional parameters for the AssignmentsClient.GetByID method.
type AssignmentsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientGetOptions contains the optional parameters for the AssignmentsClient.Get method.
type AssignmentsClientGetOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string
}

// AssignmentsClientListForManagementGroupOptions contains the optional parameters for the AssignmentsClient.NewListForManagementGroupPager
// method.
type AssignmentsClientListForManagementGroupOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// AssignmentsClientListForResourceGroupOptions contains the optional parameters for the AssignmentsClient.NewListForResourceGroupPager
// method.
type AssignmentsClientListForResourceGroupOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// AssignmentsClientListForResourceOptions contains the optional parameters for the AssignmentsClient.NewListForResourcePager
// method.
type AssignmentsClientListForResourceOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// AssignmentsClientListOptions contains the optional parameters for the AssignmentsClient.NewListPager method.
type AssignmentsClientListOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// AssignmentsClientUpdateByIDOptions contains the optional parameters for the AssignmentsClient.UpdateByID method.
type AssignmentsClientUpdateByIDOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientUpdateOptions contains the optional parameters for the AssignmentsClient.Update method.
type AssignmentsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the DefinitionVersionsClient.CreateOrUpdateAtManagementGroup
// method.
type DefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientCreateOrUpdateOptions contains the optional parameters for the DefinitionVersionsClient.CreateOrUpdate
// method.
type DefinitionVersionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientDeleteAtManagementGroupOptions contains the optional parameters for the DefinitionVersionsClient.DeleteAtManagementGroup
// method.
type DefinitionVersionsClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientDeleteOptions contains the optional parameters for the DefinitionVersionsClient.Delete method.
type DefinitionVersionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientGetAtManagementGroupOptions contains the optional parameters for the DefinitionVersionsClient.GetAtManagementGroup
// method.
type DefinitionVersionsClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientGetBuiltInOptions contains the optional parameters for the DefinitionVersionsClient.GetBuiltIn
// method.
type DefinitionVersionsClientGetBuiltInOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientGetOptions contains the optional parameters for the DefinitionVersionsClient.Get method.
type DefinitionVersionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientListAllAtManagementGroupOptions contains the optional parameters for the DefinitionVersionsClient.ListAllAtManagementGroup
// method.
type DefinitionVersionsClientListAllAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientListAllBuiltinsOptions contains the optional parameters for the DefinitionVersionsClient.ListAllBuiltins
// method.
type DefinitionVersionsClientListAllBuiltinsOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientListAllOptions contains the optional parameters for the DefinitionVersionsClient.ListAll method.
type DefinitionVersionsClientListAllOptions struct {
	// placeholder for future optional parameters
}

// DefinitionVersionsClientListBuiltInOptions contains the optional parameters for the DefinitionVersionsClient.NewListBuiltInPager
// method.
type DefinitionVersionsClientListBuiltInOptions struct {
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// DefinitionVersionsClientListByManagementGroupOptions contains the optional parameters for the DefinitionVersionsClient.NewListByManagementGroupPager
// method.
type DefinitionVersionsClientListByManagementGroupOptions struct {
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// DefinitionVersionsClientListOptions contains the optional parameters for the DefinitionVersionsClient.NewListPager method.
type DefinitionVersionsClientListOptions struct {
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// DefinitionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the DefinitionsClient.CreateOrUpdateAtManagementGroup
// method.
type DefinitionsClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientCreateOrUpdateOptions contains the optional parameters for the DefinitionsClient.CreateOrUpdate method.
type DefinitionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientDeleteAtManagementGroupOptions contains the optional parameters for the DefinitionsClient.DeleteAtManagementGroup
// method.
type DefinitionsClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientDeleteOptions contains the optional parameters for the DefinitionsClient.Delete method.
type DefinitionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientGetAtManagementGroupOptions contains the optional parameters for the DefinitionsClient.GetAtManagementGroup
// method.
type DefinitionsClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientGetBuiltInOptions contains the optional parameters for the DefinitionsClient.GetBuiltIn method.
type DefinitionsClientGetBuiltInOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientGetOptions contains the optional parameters for the DefinitionsClient.Get method.
type DefinitionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientListBuiltInOptions contains the optional parameters for the DefinitionsClient.NewListBuiltInPager method.
type DefinitionsClientListBuiltInOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// DefinitionsClientListByManagementGroupOptions contains the optional parameters for the DefinitionsClient.NewListByManagementGroupPager
// method.
type DefinitionsClientListByManagementGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// DefinitionsClientListOptions contains the optional parameters for the DefinitionsClient.NewListPager method.
type DefinitionsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SetDefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the SetDefinitionVersionsClient.CreateOrUpdateAtManagementGroup
// method.
type SetDefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionVersionsClientCreateOrUpdateOptions contains the optional parameters for the SetDefinitionVersionsClient.CreateOrUpdate
// method.
type SetDefinitionVersionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionVersionsClientDeleteAtManagementGroupOptions contains the optional parameters for the SetDefinitionVersionsClient.DeleteAtManagementGroup
// method.
type SetDefinitionVersionsClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionVersionsClientDeleteOptions contains the optional parameters for the SetDefinitionVersionsClient.Delete method.
type SetDefinitionVersionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionVersionsClientGetAtManagementGroupOptions contains the optional parameters for the SetDefinitionVersionsClient.GetAtManagementGroup
// method.
type SetDefinitionVersionsClientGetAtManagementGroupOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string
}

// SetDefinitionVersionsClientGetBuiltInOptions contains the optional parameters for the SetDefinitionVersionsClient.GetBuiltIn
// method.
type SetDefinitionVersionsClientGetBuiltInOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string
}

// SetDefinitionVersionsClientGetOptions contains the optional parameters for the SetDefinitionVersionsClient.Get method.
type SetDefinitionVersionsClientGetOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string
}

// SetDefinitionVersionsClientListAllAtManagementGroupOptions contains the optional parameters for the SetDefinitionVersionsClient.ListAllAtManagementGroup
// method.
type SetDefinitionVersionsClientListAllAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionVersionsClientListAllBuiltinsOptions contains the optional parameters for the SetDefinitionVersionsClient.ListAllBuiltins
// method.
type SetDefinitionVersionsClientListAllBuiltinsOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionVersionsClientListAllOptions contains the optional parameters for the SetDefinitionVersionsClient.ListAll
// method.
type SetDefinitionVersionsClientListAllOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionVersionsClientListBuiltInOptions contains the optional parameters for the SetDefinitionVersionsClient.NewListBuiltInPager
// method.
type SetDefinitionVersionsClientListBuiltInOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SetDefinitionVersionsClientListByManagementGroupOptions contains the optional parameters for the SetDefinitionVersionsClient.NewListByManagementGroupPager
// method.
type SetDefinitionVersionsClientListByManagementGroupOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SetDefinitionVersionsClientListOptions contains the optional parameters for the SetDefinitionVersionsClient.NewListPager
// method.
type SetDefinitionVersionsClientListOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SetDefinitionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the SetDefinitionsClient.CreateOrUpdateAtManagementGroup
// method.
type SetDefinitionsClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientCreateOrUpdateOptions contains the optional parameters for the SetDefinitionsClient.CreateOrUpdate
// method.
type SetDefinitionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientDeleteAtManagementGroupOptions contains the optional parameters for the SetDefinitionsClient.DeleteAtManagementGroup
// method.
type SetDefinitionsClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientDeleteOptions contains the optional parameters for the SetDefinitionsClient.Delete method.
type SetDefinitionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientGetAtManagementGroupOptions contains the optional parameters for the SetDefinitionsClient.GetAtManagementGroup
// method.
type SetDefinitionsClientGetAtManagementGroupOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string
}

// SetDefinitionsClientGetBuiltInOptions contains the optional parameters for the SetDefinitionsClient.GetBuiltIn method.
type SetDefinitionsClientGetBuiltInOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string
}

// SetDefinitionsClientGetOptions contains the optional parameters for the SetDefinitionsClient.Get method.
type SetDefinitionsClientGetOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string
}

// SetDefinitionsClientListBuiltInOptions contains the optional parameters for the SetDefinitionsClient.NewListBuiltInPager
// method.
type SetDefinitionsClientListBuiltInOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SetDefinitionsClientListByManagementGroupOptions contains the optional parameters for the SetDefinitionsClient.NewListByManagementGroupPager
// method.
type SetDefinitionsClientListByManagementGroupOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SetDefinitionsClientListOptions contains the optional parameters for the SetDefinitionsClient.NewListPager method.
type SetDefinitionsClientListOptions struct {
	// Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion,
	// EffectiveDefinitionVersion'.
	Expand *string

	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}
