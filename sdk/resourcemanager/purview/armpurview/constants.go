//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpurview

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/purview/armpurview"
	moduleVersion = "v2.0.0-beta.1"
)

// AccountProvisioningState - Gets the account status code.
type AccountProvisioningState string

const (
	AccountProvisioningStateCanceled     AccountProvisioningState = "Canceled"
	AccountProvisioningStateCreating     AccountProvisioningState = "Creating"
	AccountProvisioningStateDeleting     AccountProvisioningState = "Deleting"
	AccountProvisioningStateFailed       AccountProvisioningState = "Failed"
	AccountProvisioningStateMoving       AccountProvisioningState = "Moving"
	AccountProvisioningStateSoftDeleted  AccountProvisioningState = "SoftDeleted"
	AccountProvisioningStateSoftDeleting AccountProvisioningState = "SoftDeleting"
	AccountProvisioningStateSucceeded    AccountProvisioningState = "Succeeded"
	AccountProvisioningStateUnknown      AccountProvisioningState = "Unknown"
	AccountProvisioningStateUpdating     AccountProvisioningState = "Updating"
)

// PossibleAccountProvisioningStateValues returns the possible values for the AccountProvisioningState const type.
func PossibleAccountProvisioningStateValues() []AccountProvisioningState {
	return []AccountProvisioningState{
		AccountProvisioningStateCanceled,
		AccountProvisioningStateCreating,
		AccountProvisioningStateDeleting,
		AccountProvisioningStateFailed,
		AccountProvisioningStateMoving,
		AccountProvisioningStateSoftDeleted,
		AccountProvisioningStateSoftDeleting,
		AccountProvisioningStateSucceeded,
		AccountProvisioningStateUnknown,
		AccountProvisioningStateUpdating,
	}
}

// AccountSKUName - Gets or sets the sku name.
type AccountSKUName string

const (
	AccountSKUNameFree     AccountSKUName = "Free"
	AccountSKUNameStandard AccountSKUName = "Standard"
)

// PossibleAccountSKUNameValues returns the possible values for the AccountSKUName const type.
func PossibleAccountSKUNameValues() []AccountSKUName {
	return []AccountSKUName{
		AccountSKUNameFree,
		AccountSKUNameStandard,
	}
}

// ConsentKind - Gets or sets the consent kind.
type ConsentKind string

const (
	ConsentKindGovernance ConsentKind = "Governance"
	ConsentKindMetadata   ConsentKind = "Metadata"
)

// PossibleConsentKindValues returns the possible values for the ConsentKind const type.
func PossibleConsentKindValues() []ConsentKind {
	return []ConsentKind{
		ConsentKindGovernance,
		ConsentKindMetadata,
	}
}

// ConsentScopeType - Defines consent scope type.
type ConsentScopeType string

const (
	ConsentScopeTypeAzure      ConsentScopeType = "Azure"
	ConsentScopeTypeDatabricks ConsentScopeType = "Databricks"
	ConsentScopeTypeFabric     ConsentScopeType = "Fabric"
	ConsentScopeTypeS3         ConsentScopeType = "S3"
	ConsentScopeTypeSnowflake  ConsentScopeType = "Snowflake"
)

// PossibleConsentScopeTypeValues returns the possible values for the ConsentScopeType const type.
func PossibleConsentScopeTypeValues() []ConsentScopeType {
	return []ConsentScopeType{
		ConsentScopeTypeAzure,
		ConsentScopeTypeDatabricks,
		ConsentScopeTypeFabric,
		ConsentScopeTypeS3,
		ConsentScopeTypeSnowflake,
	}
}

// ConsentStatus - Defines consent status.
type ConsentStatus string

const (
	ConsentStatusDisabled     ConsentStatus = "Disabled"
	ConsentStatusEnabled      ConsentStatus = "Enabled"
	ConsentStatusNotSpecified ConsentStatus = "NotSpecified"
)

// PossibleConsentStatusValues returns the possible values for the ConsentStatus const type.
func PossibleConsentStatusValues() []ConsentStatus {
	return []ConsentStatus{
		ConsentStatusDisabled,
		ConsentStatusEnabled,
		ConsentStatusNotSpecified,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DomainUsageStatus - Domain Usage Status
type DomainUsageStatus string

const (
	DomainUsageStatusNone       DomainUsageStatus = "None"
	DomainUsageStatusPending    DomainUsageStatus = "Pending"
	DomainUsageStatusReadyToUse DomainUsageStatus = "ReadyToUse"
)

// PossibleDomainUsageStatusValues returns the possible values for the DomainUsageStatus const type.
func PossibleDomainUsageStatusValues() []DomainUsageStatus {
	return []DomainUsageStatus{
		DomainUsageStatusNone,
		DomainUsageStatusPending,
		DomainUsageStatusReadyToUse,
	}
}

// EventHubType - The event hub type.
type EventHubType string

const (
	EventHubTypeHook         EventHubType = "Hook"
	EventHubTypeNotification EventHubType = "Notification"
)

// PossibleEventHubTypeValues returns the possible values for the EventHubType const type.
func PossibleEventHubTypeValues() []EventHubType {
	return []EventHubType{
		EventHubTypeHook,
		EventHubTypeNotification,
	}
}

// EventStreamingState - The state of the event streaming service
type EventStreamingState string

const (
	EventStreamingStateDisabled EventStreamingState = "Disabled"
	EventStreamingStateEnabled  EventStreamingState = "Enabled"
)

// PossibleEventStreamingStateValues returns the possible values for the EventStreamingState const type.
func PossibleEventStreamingStateValues() []EventStreamingState {
	return []EventStreamingState{
		EventStreamingStateDisabled,
		EventStreamingStateEnabled,
	}
}

// EventStreamingType - The event streaming service type
type EventStreamingType string

const (
	EventStreamingTypeAzure   EventStreamingType = "Azure"
	EventStreamingTypeManaged EventStreamingType = "Managed"
	EventStreamingTypeNone    EventStreamingType = "None"
)

// PossibleEventStreamingTypeValues returns the possible values for the EventStreamingType const type.
func PossibleEventStreamingTypeValues() []EventStreamingType {
	return []EventStreamingType{
		EventStreamingTypeAzure,
		EventStreamingTypeManaged,
		EventStreamingTypeNone,
	}
}

// KafkaConfigurationIdentityType - Identity Type.
type KafkaConfigurationIdentityType string

const (
	KafkaConfigurationIdentityTypeNone           KafkaConfigurationIdentityType = "None"
	KafkaConfigurationIdentityTypeSystemAssigned KafkaConfigurationIdentityType = "SystemAssigned"
	KafkaConfigurationIdentityTypeUserAssigned   KafkaConfigurationIdentityType = "UserAssigned"
)

// PossibleKafkaConfigurationIdentityTypeValues returns the possible values for the KafkaConfigurationIdentityType const type.
func PossibleKafkaConfigurationIdentityTypeValues() []KafkaConfigurationIdentityType {
	return []KafkaConfigurationIdentityType{
		KafkaConfigurationIdentityTypeNone,
		KafkaConfigurationIdentityTypeSystemAssigned,
		KafkaConfigurationIdentityTypeUserAssigned,
	}
}

// LastModifiedByType - The type of identity that last modified the resource.
type LastModifiedByType string

const (
	LastModifiedByTypeApplication     LastModifiedByType = "Application"
	LastModifiedByTypeKey             LastModifiedByType = "Key"
	LastModifiedByTypeManagedIdentity LastModifiedByType = "ManagedIdentity"
	LastModifiedByTypeUser            LastModifiedByType = "User"
)

// PossibleLastModifiedByTypeValues returns the possible values for the LastModifiedByType const type.
func PossibleLastModifiedByTypeValues() []LastModifiedByType {
	return []LastModifiedByType{
		LastModifiedByTypeApplication,
		LastModifiedByTypeKey,
		LastModifiedByTypeManagedIdentity,
		LastModifiedByTypeUser,
	}
}

// ManagedEventHubState - Gets or sets the state of managed eventhub. If enabled managed eventhub will be created, if disabled
// the managed eventhub will be removed.
type ManagedEventHubState string

const (
	ManagedEventHubStateDisabled     ManagedEventHubState = "Disabled"
	ManagedEventHubStateEnabled      ManagedEventHubState = "Enabled"
	ManagedEventHubStateNotSpecified ManagedEventHubState = "NotSpecified"
)

// PossibleManagedEventHubStateValues returns the possible values for the ManagedEventHubState const type.
func PossibleManagedEventHubStateValues() []ManagedEventHubState {
	return []ManagedEventHubState{
		ManagedEventHubStateDisabled,
		ManagedEventHubStateEnabled,
		ManagedEventHubStateNotSpecified,
	}
}

// ManagedIdentityType - Identity Type
type ManagedIdentityType string

const (
	ManagedIdentityTypeNone           ManagedIdentityType = "None"
	ManagedIdentityTypeSystemAssigned ManagedIdentityType = "SystemAssigned"
	ManagedIdentityTypeUserAssigned   ManagedIdentityType = "UserAssigned"
)

// PossibleManagedIdentityTypeValues returns the possible values for the ManagedIdentityType const type.
func PossibleManagedIdentityTypeValues() []ManagedIdentityType {
	return []ManagedIdentityType{
		ManagedIdentityTypeNone,
		ManagedIdentityTypeSystemAssigned,
		ManagedIdentityTypeUserAssigned,
	}
}

// MergeAccountType - The type of account this account is for the merge operation.
type MergeAccountType string

const (
	MergeAccountTypePrimary   MergeAccountType = "Primary"
	MergeAccountTypeSecondary MergeAccountType = "Secondary"
)

// PossibleMergeAccountTypeValues returns the possible values for the MergeAccountType const type.
func PossibleMergeAccountTypeValues() []MergeAccountType {
	return []MergeAccountType{
		MergeAccountTypePrimary,
		MergeAccountTypeSecondary,
	}
}

// MergeStatus - The status of the merge operation.
type MergeStatus string

const (
	MergeStatusFailed     MergeStatus = "Failed"
	MergeStatusInProgress MergeStatus = "InProgress"
	MergeStatusSucceeded  MergeStatus = "Succeeded"
)

// PossibleMergeStatusValues returns the possible values for the MergeStatus const type.
func PossibleMergeStatusValues() []MergeStatus {
	return []MergeStatus{
		MergeStatusFailed,
		MergeStatusInProgress,
		MergeStatusSucceeded,
	}
}

// PrivateEndpointConnectionStatus - The status.
type PrivateEndpointConnectionStatus string

const (
	PrivateEndpointConnectionStatusApproved     PrivateEndpointConnectionStatus = "Approved"
	PrivateEndpointConnectionStatusDisconnected PrivateEndpointConnectionStatus = "Disconnected"
	PrivateEndpointConnectionStatusPending      PrivateEndpointConnectionStatus = "Pending"
	PrivateEndpointConnectionStatusRejected     PrivateEndpointConnectionStatus = "Rejected"
	PrivateEndpointConnectionStatusUnknown      PrivateEndpointConnectionStatus = "Unknown"
)

// PossiblePrivateEndpointConnectionStatusValues returns the possible values for the PrivateEndpointConnectionStatus const type.
func PossiblePrivateEndpointConnectionStatusValues() []PrivateEndpointConnectionStatus {
	return []PrivateEndpointConnectionStatus{
		PrivateEndpointConnectionStatusApproved,
		PrivateEndpointConnectionStatusDisconnected,
		PrivateEndpointConnectionStatusPending,
		PrivateEndpointConnectionStatusRejected,
		PrivateEndpointConnectionStatusUnknown,
	}
}

// ProvisioningState - Gets or sets the state of the provisioning.
type ProvisioningState string

const (
	ProvisioningStateCanceled     ProvisioningState = "Canceled"
	ProvisioningStateCreating     ProvisioningState = "Creating"
	ProvisioningStateDeleting     ProvisioningState = "Deleting"
	ProvisioningStateFailed       ProvisioningState = "Failed"
	ProvisioningStateMoving       ProvisioningState = "Moving"
	ProvisioningStateSoftDeleted  ProvisioningState = "SoftDeleted"
	ProvisioningStateSoftDeleting ProvisioningState = "SoftDeleting"
	ProvisioningStateSucceeded    ProvisioningState = "Succeeded"
	ProvisioningStateUnknown      ProvisioningState = "Unknown"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCanceled,
		ProvisioningStateCreating,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateMoving,
		ProvisioningStateSoftDeleted,
		ProvisioningStateSoftDeleting,
		ProvisioningStateSucceeded,
		ProvisioningStateUnknown,
	}
}

// PublicNetworkAccess - Gets or sets the public network access for managed resources.
type PublicNetworkAccess string

const (
	PublicNetworkAccessDisabled     PublicNetworkAccess = "Disabled"
	PublicNetworkAccessEnabled      PublicNetworkAccess = "Enabled"
	PublicNetworkAccessNotSpecified PublicNetworkAccess = "NotSpecified"
)

// PossiblePublicNetworkAccessValues returns the possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{
		PublicNetworkAccessDisabled,
		PublicNetworkAccessEnabled,
		PublicNetworkAccessNotSpecified,
	}
}

// Reason - The reason the name is not available.
type Reason string

const (
	ReasonAlreadyExists Reason = "AlreadyExists"
	ReasonInvalid       Reason = "Invalid"
)

// PossibleReasonValues returns the possible values for the Reason const type.
func PossibleReasonValues() []Reason {
	return []Reason{
		ReasonAlreadyExists,
		ReasonInvalid,
	}
}

// ScopeType - The scope where the default account is set.
type ScopeType string

const (
	ScopeTypeSubscription ScopeType = "Subscription"
	ScopeTypeTenant       ScopeType = "Tenant"
)

// PossibleScopeTypeValues returns the possible values for the ScopeType const type.
func PossibleScopeTypeValues() []ScopeType {
	return []ScopeType{
		ScopeTypeSubscription,
		ScopeTypeTenant,
	}
}

// TenantEndpointState - Gets or sets the state of tenant endpoint.
type TenantEndpointState string

const (
	TenantEndpointStateDisabled     TenantEndpointState = "Disabled"
	TenantEndpointStateEnabled      TenantEndpointState = "Enabled"
	TenantEndpointStateNotSpecified TenantEndpointState = "NotSpecified"
)

// PossibleTenantEndpointStateValues returns the possible values for the TenantEndpointState const type.
func PossibleTenantEndpointStateValues() []TenantEndpointState {
	return []TenantEndpointState{
		TenantEndpointStateDisabled,
		TenantEndpointStateEnabled,
		TenantEndpointStateNotSpecified,
	}
}
