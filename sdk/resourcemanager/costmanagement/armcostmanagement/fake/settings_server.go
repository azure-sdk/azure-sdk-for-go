//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/costmanagement/armcostmanagement/v3"
	"net/http"
	"net/url"
	"regexp"
)

// SettingsServer is a fake server for instances of the armcostmanagement.SettingsClient type.
type SettingsServer struct {
	// CreateOrUpdateByScope is the fake for method SettingsClient.CreateOrUpdateByScope
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdateByScope func(ctx context.Context, scope string, typeParam armcostmanagement.SettingType, setting armcostmanagement.SettingClassification, options *armcostmanagement.SettingsClientCreateOrUpdateByScopeOptions) (resp azfake.Responder[armcostmanagement.SettingsClientCreateOrUpdateByScopeResponse], errResp azfake.ErrorResponder)

	// DeleteByScope is the fake for method SettingsClient.DeleteByScope
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	DeleteByScope func(ctx context.Context, scope string, typeParam armcostmanagement.SettingType, options *armcostmanagement.SettingsClientDeleteByScopeOptions) (resp azfake.Responder[armcostmanagement.SettingsClientDeleteByScopeResponse], errResp azfake.ErrorResponder)

	// GetByScope is the fake for method SettingsClient.GetByScope
	// HTTP status codes to indicate success: http.StatusOK
	GetByScope func(ctx context.Context, scope string, typeParam armcostmanagement.SettingType, options *armcostmanagement.SettingsClientGetByScopeOptions) (resp azfake.Responder[armcostmanagement.SettingsClientGetByScopeResponse], errResp azfake.ErrorResponder)

	// List is the fake for method SettingsClient.List
	// HTTP status codes to indicate success: http.StatusOK
	List func(ctx context.Context, scope string, options *armcostmanagement.SettingsClientListOptions) (resp azfake.Responder[armcostmanagement.SettingsClientListResponse], errResp azfake.ErrorResponder)
}

// NewSettingsServerTransport creates a new instance of SettingsServerTransport with the provided implementation.
// The returned SettingsServerTransport instance is connected to an instance of armcostmanagement.SettingsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSettingsServerTransport(srv *SettingsServer) *SettingsServerTransport {
	return &SettingsServerTransport{srv: srv}
}

// SettingsServerTransport connects instances of armcostmanagement.SettingsClient to instances of SettingsServer.
// Don't use this type directly, use NewSettingsServerTransport instead.
type SettingsServerTransport struct {
	srv *SettingsServer
}

// Do implements the policy.Transporter interface for SettingsServerTransport.
func (s *SettingsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SettingsClient.CreateOrUpdateByScope":
		resp, err = s.dispatchCreateOrUpdateByScope(req)
	case "SettingsClient.DeleteByScope":
		resp, err = s.dispatchDeleteByScope(req)
	case "SettingsClient.GetByScope":
		resp, err = s.dispatchGetByScope(req)
	case "SettingsClient.List":
		resp, err = s.dispatchList(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SettingsServerTransport) dispatchCreateOrUpdateByScope(req *http.Request) (*http.Response, error) {
	if s.srv.CreateOrUpdateByScope == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdateByScope not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CostManagement/settings/(?P<type>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalSettingClassification(raw)
	if err != nil {
		return nil, err
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	typeParamParam, err := parseWithCast(matches[regex.SubexpIndex("type")], func(v string) (armcostmanagement.SettingType, error) {
		p, unescapeErr := url.PathUnescape(v)
		if unescapeErr != nil {
			return "", unescapeErr
		}
		return armcostmanagement.SettingType(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.CreateOrUpdateByScope(req.Context(), scopeParam, typeParamParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SettingClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SettingsServerTransport) dispatchDeleteByScope(req *http.Request) (*http.Response, error) {
	if s.srv.DeleteByScope == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteByScope not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CostManagement/settings/(?P<type>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	typeParamParam, err := parseWithCast(matches[regex.SubexpIndex("type")], func(v string) (armcostmanagement.SettingType, error) {
		p, unescapeErr := url.PathUnescape(v)
		if unescapeErr != nil {
			return "", unescapeErr
		}
		return armcostmanagement.SettingType(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.DeleteByScope(req.Context(), scopeParam, typeParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SettingsServerTransport) dispatchGetByScope(req *http.Request) (*http.Response, error) {
	if s.srv.GetByScope == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetByScope not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CostManagement/settings/(?P<type>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	typeParamParam, err := parseWithCast(matches[regex.SubexpIndex("type")], func(v string) (armcostmanagement.SettingType, error) {
		p, unescapeErr := url.PathUnescape(v)
		if unescapeErr != nil {
			return "", unescapeErr
		}
		return armcostmanagement.SettingType(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.GetByScope(req.Context(), scopeParam, typeParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SettingClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SettingsServerTransport) dispatchList(req *http.Request) (*http.Response, error) {
	if s.srv.List == nil {
		return nil, &nonRetriableError{errors.New("fake for method List not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CostManagement/settings`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.List(req.Context(), scopeParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SettingsListResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
