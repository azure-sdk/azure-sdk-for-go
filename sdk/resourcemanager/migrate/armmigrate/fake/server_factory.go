// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armmigrate.ClientFactory type.
type ServerFactory struct {
	// AssessedMachinesV2OperationsServer contains the fakes for client AssessedMachinesV2OperationsClient
	AssessedMachinesV2OperationsServer AssessedMachinesV2OperationsServer

	// MachineAssessmentV2SummaryOperationsServer contains the fakes for client MachineAssessmentV2SummaryOperationsClient
	MachineAssessmentV2SummaryOperationsServer MachineAssessmentV2SummaryOperationsServer

	// MachineAssessmentsV2OperationsServer contains the fakes for client MachineAssessmentsV2OperationsClient
	MachineAssessmentsV2OperationsServer MachineAssessmentsV2OperationsServer

	// MachineGraphAssessmentOptionsOperationsServer contains the fakes for client MachineGraphAssessmentOptionsOperationsClient
	MachineGraphAssessmentOptionsOperationsServer MachineGraphAssessmentOptionsOperationsServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armmigrate.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armmigrate.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                             *ServerFactory
	trMu                                            sync.Mutex
	trAssessedMachinesV2OperationsServer            *AssessedMachinesV2OperationsServerTransport
	trMachineAssessmentV2SummaryOperationsServer    *MachineAssessmentV2SummaryOperationsServerTransport
	trMachineAssessmentsV2OperationsServer          *MachineAssessmentsV2OperationsServerTransport
	trMachineGraphAssessmentOptionsOperationsServer *MachineGraphAssessmentOptionsOperationsServerTransport
	trOperationsServer                              *OperationsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AssessedMachinesV2OperationsClient":
		initServer(s, &s.trAssessedMachinesV2OperationsServer, func() *AssessedMachinesV2OperationsServerTransport {
			return NewAssessedMachinesV2OperationsServerTransport(&s.srv.AssessedMachinesV2OperationsServer)
		})
		resp, err = s.trAssessedMachinesV2OperationsServer.Do(req)
	case "MachineAssessmentV2SummaryOperationsClient":
		initServer(s, &s.trMachineAssessmentV2SummaryOperationsServer, func() *MachineAssessmentV2SummaryOperationsServerTransport {
			return NewMachineAssessmentV2SummaryOperationsServerTransport(&s.srv.MachineAssessmentV2SummaryOperationsServer)
		})
		resp, err = s.trMachineAssessmentV2SummaryOperationsServer.Do(req)
	case "MachineAssessmentsV2OperationsClient":
		initServer(s, &s.trMachineAssessmentsV2OperationsServer, func() *MachineAssessmentsV2OperationsServerTransport {
			return NewMachineAssessmentsV2OperationsServerTransport(&s.srv.MachineAssessmentsV2OperationsServer)
		})
		resp, err = s.trMachineAssessmentsV2OperationsServer.Do(req)
	case "MachineGraphAssessmentOptionsOperationsClient":
		initServer(s, &s.trMachineGraphAssessmentOptionsOperationsServer, func() *MachineGraphAssessmentOptionsOperationsServerTransport {
			return NewMachineGraphAssessmentOptionsOperationsServerTransport(&s.srv.MachineGraphAssessmentOptionsOperationsServer)
		})
		resp, err = s.trMachineGraphAssessmentOptionsOperationsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
