//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcostmanagement

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AllSavingsBenefitDetails.
func (a AllSavingsBenefitDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "averageUtilizationPercentage", a.AverageUtilizationPercentage)
	populate(objectMap, "benefitCost", a.BenefitCost)
	populate(objectMap, "commitmentAmount", a.CommitmentAmount)
	populate(objectMap, "coveragePercentage", a.CoveragePercentage)
	populate(objectMap, "overageCost", a.OverageCost)
	populate(objectMap, "savingsAmount", a.SavingsAmount)
	populate(objectMap, "savingsPercentage", a.SavingsPercentage)
	populate(objectMap, "totalCost", a.TotalCost)
	populate(objectMap, "wastageCost", a.WastageCost)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AllSavingsBenefitDetails.
func (a *AllSavingsBenefitDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "averageUtilizationPercentage":
			err = unpopulate(val, "AverageUtilizationPercentage", &a.AverageUtilizationPercentage)
			delete(rawMsg, key)
		case "benefitCost":
			err = unpopulate(val, "BenefitCost", &a.BenefitCost)
			delete(rawMsg, key)
		case "commitmentAmount":
			err = unpopulate(val, "CommitmentAmount", &a.CommitmentAmount)
			delete(rawMsg, key)
		case "coveragePercentage":
			err = unpopulate(val, "CoveragePercentage", &a.CoveragePercentage)
			delete(rawMsg, key)
		case "overageCost":
			err = unpopulate(val, "OverageCost", &a.OverageCost)
			delete(rawMsg, key)
		case "savingsAmount":
			err = unpopulate(val, "SavingsAmount", &a.SavingsAmount)
			delete(rawMsg, key)
		case "savingsPercentage":
			err = unpopulate(val, "SavingsPercentage", &a.SavingsPercentage)
			delete(rawMsg, key)
		case "totalCost":
			err = unpopulate(val, "TotalCost", &a.TotalCost)
			delete(rawMsg, key)
		case "wastageCost":
			err = unpopulate(val, "WastageCost", &a.WastageCost)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AllSavingsList.
func (a AllSavingsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AllSavingsList.
func (a *AllSavingsList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &a.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &a.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BenefitRecommendationModel.
func (b BenefitRecommendationModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	populate(objectMap, "kind", b.Kind)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BenefitRecommendationModel.
func (b *BenefitRecommendationModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &b.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, "Kind", &b.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &b.Name)
			delete(rawMsg, key)
		case "properties":
			b.Properties, err = unmarshalBenefitRecommendationPropertiesClassification(val)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BenefitRecommendationProperties.
func (b BenefitRecommendationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allRecommendationDetails", b.AllRecommendationDetails)
	populate(objectMap, "armSkuName", b.ArmSKUName)
	populate(objectMap, "commitmentGranularity", b.CommitmentGranularity)
	populate(objectMap, "costWithoutBenefit", b.CostWithoutBenefit)
	populate(objectMap, "currencyCode", b.CurrencyCode)
	populate(objectMap, "firstConsumptionDate", b.FirstConsumptionDate)
	populate(objectMap, "lastConsumptionDate", b.LastConsumptionDate)
	populate(objectMap, "lookBackPeriod", b.LookBackPeriod)
	populate(objectMap, "recommendationDetails", b.RecommendationDetails)
	objectMap["scope"] = b.Scope
	populate(objectMap, "term", b.Term)
	populate(objectMap, "totalHours", b.TotalHours)
	populate(objectMap, "usage", b.Usage)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BenefitRecommendationProperties.
func (b *BenefitRecommendationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "allRecommendationDetails":
			err = unpopulate(val, "AllRecommendationDetails", &b.AllRecommendationDetails)
			delete(rawMsg, key)
		case "armSkuName":
			err = unpopulate(val, "ArmSKUName", &b.ArmSKUName)
			delete(rawMsg, key)
		case "commitmentGranularity":
			err = unpopulate(val, "CommitmentGranularity", &b.CommitmentGranularity)
			delete(rawMsg, key)
		case "costWithoutBenefit":
			err = unpopulate(val, "CostWithoutBenefit", &b.CostWithoutBenefit)
			delete(rawMsg, key)
		case "currencyCode":
			err = unpopulate(val, "CurrencyCode", &b.CurrencyCode)
			delete(rawMsg, key)
		case "firstConsumptionDate":
			err = unpopulate(val, "FirstConsumptionDate", &b.FirstConsumptionDate)
			delete(rawMsg, key)
		case "lastConsumptionDate":
			err = unpopulate(val, "LastConsumptionDate", &b.LastConsumptionDate)
			delete(rawMsg, key)
		case "lookBackPeriod":
			err = unpopulate(val, "LookBackPeriod", &b.LookBackPeriod)
			delete(rawMsg, key)
		case "recommendationDetails":
			err = unpopulate(val, "RecommendationDetails", &b.RecommendationDetails)
			delete(rawMsg, key)
		case "scope":
			err = unpopulate(val, "Scope", &b.Scope)
			delete(rawMsg, key)
		case "term":
			err = unpopulate(val, "Term", &b.Term)
			delete(rawMsg, key)
		case "totalHours":
			err = unpopulate(val, "TotalHours", &b.TotalHours)
			delete(rawMsg, key)
		case "usage":
			err = unpopulate(val, "Usage", &b.Usage)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BenefitRecommendationsListResult.
func (b BenefitRecommendationsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BenefitRecommendationsListResult.
func (b *BenefitRecommendationsListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &b.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &b.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BenefitUtilizationResource.
func (b BenefitUtilizationResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BenefitUtilizationResource.
func (b *BenefitUtilizationResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &b.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &b.Name)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BenefitUtilizationSummariesListResult.
func (b BenefitUtilizationSummariesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BenefitUtilizationSummariesListResult.
func (b *BenefitUtilizationSummariesListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &b.NextLink)
			delete(rawMsg, key)
		case "value":
			b.Value, err = unmarshalBenefitUtilizationSummaryClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BenefitUtilizationSummary.
func (b BenefitUtilizationSummary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	objectMap["kind"] = b.Kind
	populate(objectMap, "name", b.Name)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BenefitUtilizationSummary.
func (b *BenefitUtilizationSummary) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &b.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, "Kind", &b.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &b.Name)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BenefitUtilizationSummaryProperties.
func (b BenefitUtilizationSummaryProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "armSkuName", b.ArmSKUName)
	populate(objectMap, "benefitId", b.BenefitID)
	populate(objectMap, "benefitOrderId", b.BenefitOrderID)
	populate(objectMap, "benefitType", b.BenefitType)
	populateTimeRFC3339(objectMap, "usageDate", b.UsageDate)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BenefitUtilizationSummaryProperties.
func (b *BenefitUtilizationSummaryProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "armSkuName":
			err = unpopulate(val, "ArmSKUName", &b.ArmSKUName)
			delete(rawMsg, key)
		case "benefitId":
			err = unpopulate(val, "BenefitID", &b.BenefitID)
			delete(rawMsg, key)
		case "benefitOrderId":
			err = unpopulate(val, "BenefitOrderID", &b.BenefitOrderID)
			delete(rawMsg, key)
		case "benefitType":
			err = unpopulate(val, "BenefitType", &b.BenefitType)
			delete(rawMsg, key)
		case "usageDate":
			err = unpopulateTimeRFC3339(val, "UsageDate", &b.UsageDate)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BlobInfo.
func (b BlobInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "blobLink", b.BlobLink)
	populate(objectMap, "byteCount", b.ByteCount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobInfo.
func (b *BlobInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "blobLink":
			err = unpopulate(val, "BlobLink", &b.BlobLink)
			delete(rawMsg, key)
		case "byteCount":
			err = unpopulate(val, "ByteCount", &b.ByteCount)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CostDetailsOperationResults.
func (c CostDetailsOperationResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", c.Error)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "manifest", c.Manifest)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "status", c.Status)
	populate(objectMap, "type", c.Type)
	populateTimeRFC3339(objectMap, "validTill", c.ValidTill)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CostDetailsOperationResults.
func (c *CostDetailsOperationResults) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, "Error", &c.Error)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &c.ID)
			delete(rawMsg, key)
		case "manifest":
			err = unpopulate(val, "Manifest", &c.Manifest)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &c.Name)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &c.Status)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &c.Type)
			delete(rawMsg, key)
		case "validTill":
			err = unpopulateTimeRFC3339(val, "ValidTill", &c.ValidTill)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CostDetailsTimePeriod.
func (c CostDetailsTimePeriod) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "end", c.End)
	populate(objectMap, "start", c.Start)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CostDetailsTimePeriod.
func (c *CostDetailsTimePeriod) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "end":
			err = unpopulate(val, "End", &c.End)
			delete(rawMsg, key)
		case "start":
			err = unpopulate(val, "Start", &c.Start)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetails.
func (e ErrorDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "message", e.Message)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ErrorDetails.
func (e *ErrorDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			err = unpopulate(val, "Code", &e.Code)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, "Message", &e.Message)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponse.
func (e ErrorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", e.Error)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ErrorResponse.
func (e *ErrorResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, "Error", &e.Error)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GenerateCostDetailsReportErrorResponse.
func (g GenerateCostDetailsReportErrorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", g.Error)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GenerateCostDetailsReportErrorResponse.
func (g *GenerateCostDetailsReportErrorResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, "Error", &g.Error)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GenerateCostDetailsReportRequestDefinition.
func (g GenerateCostDetailsReportRequestDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billingPeriod", g.BillingPeriod)
	populate(objectMap, "invoiceId", g.InvoiceID)
	populate(objectMap, "metric", g.Metric)
	populate(objectMap, "timePeriod", g.TimePeriod)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GenerateCostDetailsReportRequestDefinition.
func (g *GenerateCostDetailsReportRequestDefinition) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "billingPeriod":
			err = unpopulate(val, "BillingPeriod", &g.BillingPeriod)
			delete(rawMsg, key)
		case "invoiceId":
			err = unpopulate(val, "InvoiceID", &g.InvoiceID)
			delete(rawMsg, key)
		case "metric":
			err = unpopulate(val, "Metric", &g.Metric)
			delete(rawMsg, key)
		case "timePeriod":
			err = unpopulate(val, "TimePeriod", &g.TimePeriod)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IncludedQuantityUtilizationSummary.
func (i IncludedQuantityUtilizationSummary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", i.ID)
	objectMap["kind"] = BenefitUtilizationSummaryKindIncludedQuantity
	populate(objectMap, "name", i.Name)
	populate(objectMap, "properties", i.Properties)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IncludedQuantityUtilizationSummary.
func (i *IncludedQuantityUtilizationSummary) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &i.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, "Kind", &i.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &i.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &i.Properties)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &i.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IncludedQuantityUtilizationSummaryProperties.
func (i IncludedQuantityUtilizationSummaryProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "armSkuName", i.ArmSKUName)
	populate(objectMap, "benefitId", i.BenefitID)
	populate(objectMap, "benefitOrderId", i.BenefitOrderID)
	populate(objectMap, "benefitType", i.BenefitType)
	populateTimeRFC3339(objectMap, "usageDate", i.UsageDate)
	populate(objectMap, "utilizationPercentage", i.UtilizationPercentage)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IncludedQuantityUtilizationSummaryProperties.
func (i *IncludedQuantityUtilizationSummaryProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "armSkuName":
			err = unpopulate(val, "ArmSKUName", &i.ArmSKUName)
			delete(rawMsg, key)
		case "benefitId":
			err = unpopulate(val, "BenefitID", &i.BenefitID)
			delete(rawMsg, key)
		case "benefitOrderId":
			err = unpopulate(val, "BenefitOrderID", &i.BenefitOrderID)
			delete(rawMsg, key)
		case "benefitType":
			err = unpopulate(val, "BenefitType", &i.BenefitType)
			delete(rawMsg, key)
		case "usageDate":
			err = unpopulateTimeRFC3339(val, "UsageDate", &i.UsageDate)
			delete(rawMsg, key)
		case "utilizationPercentage":
			err = unpopulate(val, "UtilizationPercentage", &i.UtilizationPercentage)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ProxyResource.
func (p ProxyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "eTag", p.ETag)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProxyResource.
func (p *ProxyResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "eTag":
			err = unpopulate(val, "ETag", &p.ETag)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &p.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &p.Name)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationUsageDetails.
func (r RecommendationUsageDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "charges", r.Charges)
	populate(objectMap, "usageGrain", r.UsageGrain)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecommendationUsageDetails.
func (r *RecommendationUsageDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "charges":
			err = unpopulate(val, "Charges", &r.Charges)
			delete(rawMsg, key)
		case "usageGrain":
			err = unpopulate(val, "UsageGrain", &r.UsageGrain)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ReportManifest.
func (r ReportManifest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "blobCount", r.BlobCount)
	populate(objectMap, "blobs", r.Blobs)
	populate(objectMap, "byteCount", r.ByteCount)
	populate(objectMap, "compressData", r.CompressData)
	populate(objectMap, "dataFormat", r.DataFormat)
	populate(objectMap, "manifestVersion", r.ManifestVersion)
	populate(objectMap, "requestContext", r.RequestContext)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ReportManifest.
func (r *ReportManifest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "blobCount":
			err = unpopulate(val, "BlobCount", &r.BlobCount)
			delete(rawMsg, key)
		case "blobs":
			err = unpopulate(val, "Blobs", &r.Blobs)
			delete(rawMsg, key)
		case "byteCount":
			err = unpopulate(val, "ByteCount", &r.ByteCount)
			delete(rawMsg, key)
		case "compressData":
			err = unpopulate(val, "CompressData", &r.CompressData)
			delete(rawMsg, key)
		case "dataFormat":
			err = unpopulate(val, "DataFormat", &r.DataFormat)
			delete(rawMsg, key)
		case "manifestVersion":
			err = unpopulate(val, "ManifestVersion", &r.ManifestVersion)
			delete(rawMsg, key)
		case "requestContext":
			err = unpopulate(val, "RequestContext", &r.RequestContext)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RequestContext.
func (r RequestContext) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "requestBody", r.RequestBody)
	populate(objectMap, "requestScope", r.RequestScope)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RequestContext.
func (r *RequestContext) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "requestBody":
			err = unpopulate(val, "RequestBody", &r.RequestBody)
			delete(rawMsg, key)
		case "requestScope":
			err = unpopulate(val, "RequestScope", &r.RequestScope)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "kind", r.Kind)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Resource.
func (r *Resource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &r.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, "Kind", &r.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &r.Name)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &r.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SavingsPlanUtilizationSummary.
func (s SavingsPlanUtilizationSummary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = BenefitUtilizationSummaryKindSavingsPlan
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SavingsPlanUtilizationSummary.
func (s *SavingsPlanUtilizationSummary) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, "Kind", &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &s.Properties)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SavingsPlanUtilizationSummaryProperties.
func (s SavingsPlanUtilizationSummaryProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "armSkuName", s.ArmSKUName)
	populate(objectMap, "avgUtilizationPercentage", s.AvgUtilizationPercentage)
	populate(objectMap, "benefitId", s.BenefitID)
	populate(objectMap, "benefitOrderId", s.BenefitOrderID)
	populate(objectMap, "benefitType", s.BenefitType)
	populate(objectMap, "maxUtilizationPercentage", s.MaxUtilizationPercentage)
	populate(objectMap, "minUtilizationPercentage", s.MinUtilizationPercentage)
	populateTimeRFC3339(objectMap, "usageDate", s.UsageDate)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SavingsPlanUtilizationSummaryProperties.
func (s *SavingsPlanUtilizationSummaryProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "armSkuName":
			err = unpopulate(val, "ArmSKUName", &s.ArmSKUName)
			delete(rawMsg, key)
		case "avgUtilizationPercentage":
			err = unpopulate(val, "AvgUtilizationPercentage", &s.AvgUtilizationPercentage)
			delete(rawMsg, key)
		case "benefitId":
			err = unpopulate(val, "BenefitID", &s.BenefitID)
			delete(rawMsg, key)
		case "benefitOrderId":
			err = unpopulate(val, "BenefitOrderID", &s.BenefitOrderID)
			delete(rawMsg, key)
		case "benefitType":
			err = unpopulate(val, "BenefitType", &s.BenefitType)
			delete(rawMsg, key)
		case "maxUtilizationPercentage":
			err = unpopulate(val, "MaxUtilizationPercentage", &s.MaxUtilizationPercentage)
			delete(rawMsg, key)
		case "minUtilizationPercentage":
			err = unpopulate(val, "MinUtilizationPercentage", &s.MinUtilizationPercentage)
			delete(rawMsg, key)
		case "usageDate":
			err = unpopulateTimeRFC3339(val, "UsageDate", &s.UsageDate)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SharedScopeBenefitRecommendationProperties.
func (s SharedScopeBenefitRecommendationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allRecommendationDetails", s.AllRecommendationDetails)
	populate(objectMap, "armSkuName", s.ArmSKUName)
	populate(objectMap, "commitmentGranularity", s.CommitmentGranularity)
	populate(objectMap, "costWithoutBenefit", s.CostWithoutBenefit)
	populate(objectMap, "currencyCode", s.CurrencyCode)
	populate(objectMap, "firstConsumptionDate", s.FirstConsumptionDate)
	populate(objectMap, "lastConsumptionDate", s.LastConsumptionDate)
	populate(objectMap, "lookBackPeriod", s.LookBackPeriod)
	populate(objectMap, "recommendationDetails", s.RecommendationDetails)
	objectMap["scope"] = ScopeShared
	populate(objectMap, "term", s.Term)
	populate(objectMap, "totalHours", s.TotalHours)
	populate(objectMap, "usage", s.Usage)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SharedScopeBenefitRecommendationProperties.
func (s *SharedScopeBenefitRecommendationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "allRecommendationDetails":
			err = unpopulate(val, "AllRecommendationDetails", &s.AllRecommendationDetails)
			delete(rawMsg, key)
		case "armSkuName":
			err = unpopulate(val, "ArmSKUName", &s.ArmSKUName)
			delete(rawMsg, key)
		case "commitmentGranularity":
			err = unpopulate(val, "CommitmentGranularity", &s.CommitmentGranularity)
			delete(rawMsg, key)
		case "costWithoutBenefit":
			err = unpopulate(val, "CostWithoutBenefit", &s.CostWithoutBenefit)
			delete(rawMsg, key)
		case "currencyCode":
			err = unpopulate(val, "CurrencyCode", &s.CurrencyCode)
			delete(rawMsg, key)
		case "firstConsumptionDate":
			err = unpopulate(val, "FirstConsumptionDate", &s.FirstConsumptionDate)
			delete(rawMsg, key)
		case "lastConsumptionDate":
			err = unpopulate(val, "LastConsumptionDate", &s.LastConsumptionDate)
			delete(rawMsg, key)
		case "lookBackPeriod":
			err = unpopulate(val, "LookBackPeriod", &s.LookBackPeriod)
			delete(rawMsg, key)
		case "recommendationDetails":
			err = unpopulate(val, "RecommendationDetails", &s.RecommendationDetails)
			delete(rawMsg, key)
		case "scope":
			err = unpopulate(val, "Scope", &s.Scope)
			delete(rawMsg, key)
		case "term":
			err = unpopulate(val, "Term", &s.Term)
			delete(rawMsg, key)
		case "totalHours":
			err = unpopulate(val, "TotalHours", &s.TotalHours)
			delete(rawMsg, key)
		case "usage":
			err = unpopulate(val, "Usage", &s.Usage)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SingleScopeBenefitRecommendationProperties.
func (s SingleScopeBenefitRecommendationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allRecommendationDetails", s.AllRecommendationDetails)
	populate(objectMap, "armSkuName", s.ArmSKUName)
	populate(objectMap, "commitmentGranularity", s.CommitmentGranularity)
	populate(objectMap, "costWithoutBenefit", s.CostWithoutBenefit)
	populate(objectMap, "currencyCode", s.CurrencyCode)
	populate(objectMap, "firstConsumptionDate", s.FirstConsumptionDate)
	populate(objectMap, "lastConsumptionDate", s.LastConsumptionDate)
	populate(objectMap, "lookBackPeriod", s.LookBackPeriod)
	populate(objectMap, "recommendationDetails", s.RecommendationDetails)
	populate(objectMap, "resourceGroup", s.ResourceGroup)
	objectMap["scope"] = ScopeSingle
	populate(objectMap, "subscriptionId", s.SubscriptionID)
	populate(objectMap, "term", s.Term)
	populate(objectMap, "totalHours", s.TotalHours)
	populate(objectMap, "usage", s.Usage)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SingleScopeBenefitRecommendationProperties.
func (s *SingleScopeBenefitRecommendationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "allRecommendationDetails":
			err = unpopulate(val, "AllRecommendationDetails", &s.AllRecommendationDetails)
			delete(rawMsg, key)
		case "armSkuName":
			err = unpopulate(val, "ArmSKUName", &s.ArmSKUName)
			delete(rawMsg, key)
		case "commitmentGranularity":
			err = unpopulate(val, "CommitmentGranularity", &s.CommitmentGranularity)
			delete(rawMsg, key)
		case "costWithoutBenefit":
			err = unpopulate(val, "CostWithoutBenefit", &s.CostWithoutBenefit)
			delete(rawMsg, key)
		case "currencyCode":
			err = unpopulate(val, "CurrencyCode", &s.CurrencyCode)
			delete(rawMsg, key)
		case "firstConsumptionDate":
			err = unpopulate(val, "FirstConsumptionDate", &s.FirstConsumptionDate)
			delete(rawMsg, key)
		case "lastConsumptionDate":
			err = unpopulate(val, "LastConsumptionDate", &s.LastConsumptionDate)
			delete(rawMsg, key)
		case "lookBackPeriod":
			err = unpopulate(val, "LookBackPeriod", &s.LookBackPeriod)
			delete(rawMsg, key)
		case "recommendationDetails":
			err = unpopulate(val, "RecommendationDetails", &s.RecommendationDetails)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, "ResourceGroup", &s.ResourceGroup)
			delete(rawMsg, key)
		case "scope":
			err = unpopulate(val, "Scope", &s.Scope)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, "SubscriptionID", &s.SubscriptionID)
			delete(rawMsg, key)
		case "term":
			err = unpopulate(val, "Term", &s.Term)
			delete(rawMsg, key)
		case "totalHours":
			err = unpopulate(val, "TotalHours", &s.TotalHours)
			delete(rawMsg, key)
		case "usage":
			err = unpopulate(val, "Usage", &s.Usage)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
