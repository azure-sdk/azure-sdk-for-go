//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridonboarding

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ExtensionManagersClient contains the methods for the ExtensionManagers group.
// Don't use this type directly, use NewExtensionManagersClient() instead.
type ExtensionManagersClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewExtensionManagersClient creates a new instance of ExtensionManagersClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewExtensionManagersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ExtensionManagersClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ExtensionManagersClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginAddCustomLocation - Add a new custom location on extension(s)
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - extensionManagerName - Extension Manager resource
//   - body - The content of the action request
//   - options - ExtensionManagersClientBeginAddCustomLocationOptions contains the optional parameters for the ExtensionManagersClient.BeginAddCustomLocation
//     method.
func (client *ExtensionManagersClient) BeginAddCustomLocation(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*AddCustomLocationDetails, options *ExtensionManagersClientBeginAddCustomLocationOptions) (*runtime.Poller[ExtensionManagersClientAddCustomLocationResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.addCustomLocation(ctx, resourceGroupName, extensionManagerName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExtensionManagersClientAddCustomLocationResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExtensionManagersClientAddCustomLocationResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// AddCustomLocation - Add a new custom location on extension(s)
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *ExtensionManagersClient) addCustomLocation(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*AddCustomLocationDetails, options *ExtensionManagersClientBeginAddCustomLocationOptions) (*http.Response, error) {
	var err error
	const operationName = "ExtensionManagersClient.BeginAddCustomLocation"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.addCustomLocationCreateRequest(ctx, resourceGroupName, extensionManagerName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// addCustomLocationCreateRequest creates the AddCustomLocation request.
func (client *ExtensionManagersClient) addCustomLocationCreateRequest(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*AddCustomLocationDetails, options *ExtensionManagersClientBeginAddCustomLocationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}/addCustomLocation"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if extensionManagerName == "" {
		return nil, errors.New("parameter extensionManagerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{extensionManagerName}", url.PathEscape(extensionManagerName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginCreateOrUpdate - Create a ExtensionManager
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - extensionManagerName - Extension Manager resource
//   - resource - Resource create parameters.
//   - options - ExtensionManagersClientBeginCreateOrUpdateOptions contains the optional parameters for the ExtensionManagersClient.BeginCreateOrUpdate
//     method.
func (client *ExtensionManagersClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, extensionManagerName string, resource ExtensionManager, options *ExtensionManagersClientBeginCreateOrUpdateOptions) (*runtime.Poller[ExtensionManagersClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, extensionManagerName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExtensionManagersClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExtensionManagersClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a ExtensionManager
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *ExtensionManagersClient) createOrUpdate(ctx context.Context, resourceGroupName string, extensionManagerName string, resource ExtensionManager, options *ExtensionManagersClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ExtensionManagersClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, extensionManagerName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ExtensionManagersClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, extensionManagerName string, resource ExtensionManager, options *ExtensionManagersClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if extensionManagerName == "" {
		return nil, errors.New("parameter extensionManagerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{extensionManagerName}", url.PathEscape(extensionManagerName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a ExtensionManager
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - extensionManagerName - Extension Manager resource
//   - options - ExtensionManagersClientBeginDeleteOptions contains the optional parameters for the ExtensionManagersClient.BeginDelete
//     method.
func (client *ExtensionManagersClient) BeginDelete(ctx context.Context, resourceGroupName string, extensionManagerName string, options *ExtensionManagersClientBeginDeleteOptions) (*runtime.Poller[ExtensionManagersClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, extensionManagerName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExtensionManagersClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExtensionManagersClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a ExtensionManager
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *ExtensionManagersClient) deleteOperation(ctx context.Context, resourceGroupName string, extensionManagerName string, options *ExtensionManagersClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "ExtensionManagersClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, extensionManagerName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ExtensionManagersClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, extensionManagerName string, options *ExtensionManagersClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if extensionManagerName == "" {
		return nil, errors.New("parameter extensionManagerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{extensionManagerName}", url.PathEscape(extensionManagerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDisableExtensions - Disable extension(s) on the extension manager resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - extensionManagerName - Extension Manager resource
//   - body - The content of the action request
//   - options - ExtensionManagersClientBeginDisableExtensionsOptions contains the optional parameters for the ExtensionManagersClient.BeginDisableExtensions
//     method.
func (client *ExtensionManagersClient) BeginDisableExtensions(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*DisableExtensionsRequestDetails, options *ExtensionManagersClientBeginDisableExtensionsOptions) (*runtime.Poller[ExtensionManagersClientDisableExtensionsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.disableExtensions(ctx, resourceGroupName, extensionManagerName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExtensionManagersClientDisableExtensionsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExtensionManagersClientDisableExtensionsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DisableExtensions - Disable extension(s) on the extension manager resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *ExtensionManagersClient) disableExtensions(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*DisableExtensionsRequestDetails, options *ExtensionManagersClientBeginDisableExtensionsOptions) (*http.Response, error) {
	var err error
	const operationName = "ExtensionManagersClient.BeginDisableExtensions"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.disableExtensionsCreateRequest(ctx, resourceGroupName, extensionManagerName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// disableExtensionsCreateRequest creates the DisableExtensions request.
func (client *ExtensionManagersClient) disableExtensionsCreateRequest(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*DisableExtensionsRequestDetails, options *ExtensionManagersClientBeginDisableExtensionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}/disableExtensions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if extensionManagerName == "" {
		return nil, errors.New("parameter extensionManagerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{extensionManagerName}", url.PathEscape(extensionManagerName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginEnableExtensions - Enable extension(s) on the extension manager resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - extensionManagerName - Extension Manager resource
//   - body - The content of the action request
//   - options - ExtensionManagersClientBeginEnableExtensionsOptions contains the optional parameters for the ExtensionManagersClient.BeginEnableExtensions
//     method.
func (client *ExtensionManagersClient) BeginEnableExtensions(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*EnableExtensionsRequestDetails, options *ExtensionManagersClientBeginEnableExtensionsOptions) (*runtime.Poller[ExtensionManagersClientEnableExtensionsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.enableExtensions(ctx, resourceGroupName, extensionManagerName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExtensionManagersClientEnableExtensionsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExtensionManagersClientEnableExtensionsResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// EnableExtensions - Enable extension(s) on the extension manager resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *ExtensionManagersClient) enableExtensions(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*EnableExtensionsRequestDetails, options *ExtensionManagersClientBeginEnableExtensionsOptions) (*http.Response, error) {
	var err error
	const operationName = "ExtensionManagersClient.BeginEnableExtensions"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.enableExtensionsCreateRequest(ctx, resourceGroupName, extensionManagerName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// enableExtensionsCreateRequest creates the EnableExtensions request.
func (client *ExtensionManagersClient) enableExtensionsCreateRequest(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*EnableExtensionsRequestDetails, options *ExtensionManagersClientBeginEnableExtensionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}/enableExtensions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if extensionManagerName == "" {
		return nil, errors.New("parameter extensionManagerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{extensionManagerName}", url.PathEscape(extensionManagerName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Get a ExtensionManager
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - extensionManagerName - Extension Manager resource
//   - options - ExtensionManagersClientGetOptions contains the optional parameters for the ExtensionManagersClient.Get method.
func (client *ExtensionManagersClient) Get(ctx context.Context, resourceGroupName string, extensionManagerName string, options *ExtensionManagersClientGetOptions) (ExtensionManagersClientGetResponse, error) {
	var err error
	const operationName = "ExtensionManagersClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, extensionManagerName, options)
	if err != nil {
		return ExtensionManagersClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExtensionManagersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExtensionManagersClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ExtensionManagersClient) getCreateRequest(ctx context.Context, resourceGroupName string, extensionManagerName string, options *ExtensionManagersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if extensionManagerName == "" {
		return nil, errors.New("parameter extensionManagerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{extensionManagerName}", url.PathEscape(extensionManagerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ExtensionManagersClient) getHandleResponse(resp *http.Response) (ExtensionManagersClientGetResponse, error) {
	result := ExtensionManagersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExtensionManager); err != nil {
		return ExtensionManagersClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List ExtensionManager resources by resource group
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - ExtensionManagersClientListByResourceGroupOptions contains the optional parameters for the ExtensionManagersClient.NewListByResourceGroupPager
//     method.
func (client *ExtensionManagersClient) NewListByResourceGroupPager(resourceGroupName string, options *ExtensionManagersClientListByResourceGroupOptions) *runtime.Pager[ExtensionManagersClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[ExtensionManagersClientListByResourceGroupResponse]{
		More: func(page ExtensionManagersClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ExtensionManagersClientListByResourceGroupResponse) (ExtensionManagersClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ExtensionManagersClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return ExtensionManagersClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *ExtensionManagersClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *ExtensionManagersClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *ExtensionManagersClient) listByResourceGroupHandleResponse(resp *http.Response) (ExtensionManagersClientListByResourceGroupResponse, error) {
	result := ExtensionManagersClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExtensionManagerListResult); err != nil {
		return ExtensionManagersClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List ExtensionManager resources by subscription ID
//
// Generated from API version 2024-06-01-preview
//   - options - ExtensionManagersClientListBySubscriptionOptions contains the optional parameters for the ExtensionManagersClient.NewListBySubscriptionPager
//     method.
func (client *ExtensionManagersClient) NewListBySubscriptionPager(options *ExtensionManagersClientListBySubscriptionOptions) *runtime.Pager[ExtensionManagersClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[ExtensionManagersClientListBySubscriptionResponse]{
		More: func(page ExtensionManagersClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ExtensionManagersClientListBySubscriptionResponse) (ExtensionManagersClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ExtensionManagersClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ExtensionManagersClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *ExtensionManagersClient) listBySubscriptionCreateRequest(ctx context.Context, options *ExtensionManagersClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HybridOnboarding/extensionManagers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *ExtensionManagersClient) listBySubscriptionHandleResponse(resp *http.Response) (ExtensionManagersClientListBySubscriptionResponse, error) {
	result := ExtensionManagersClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExtensionManagerListResult); err != nil {
		return ExtensionManagersClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginRemoveCustomLocation - Remove a custom location from extension(s)
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - extensionManagerName - Extension Manager resource
//   - body - The content of the action request
//   - options - ExtensionManagersClientBeginRemoveCustomLocationOptions contains the optional parameters for the ExtensionManagersClient.BeginRemoveCustomLocation
//     method.
func (client *ExtensionManagersClient) BeginRemoveCustomLocation(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*RemoveCustomLocationDetails, options *ExtensionManagersClientBeginRemoveCustomLocationOptions) (*runtime.Poller[ExtensionManagersClientRemoveCustomLocationResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.removeCustomLocation(ctx, resourceGroupName, extensionManagerName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExtensionManagersClientRemoveCustomLocationResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExtensionManagersClientRemoveCustomLocationResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// RemoveCustomLocation - Remove a custom location from extension(s)
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *ExtensionManagersClient) removeCustomLocation(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*RemoveCustomLocationDetails, options *ExtensionManagersClientBeginRemoveCustomLocationOptions) (*http.Response, error) {
	var err error
	const operationName = "ExtensionManagersClient.BeginRemoveCustomLocation"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.removeCustomLocationCreateRequest(ctx, resourceGroupName, extensionManagerName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// removeCustomLocationCreateRequest creates the RemoveCustomLocation request.
func (client *ExtensionManagersClient) removeCustomLocationCreateRequest(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*RemoveCustomLocationDetails, options *ExtensionManagersClientBeginRemoveCustomLocationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}/removeCustomLocation"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if extensionManagerName == "" {
		return nil, errors.New("parameter extensionManagerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{extensionManagerName}", url.PathEscape(extensionManagerName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdate - Update a ExtensionManager
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - extensionManagerName - Extension Manager resource
//   - properties - The resource properties to be updated.
//   - options - ExtensionManagersClientBeginUpdateOptions contains the optional parameters for the ExtensionManagersClient.BeginUpdate
//     method.
func (client *ExtensionManagersClient) BeginUpdate(ctx context.Context, resourceGroupName string, extensionManagerName string, properties ExtensionManagerPatch, options *ExtensionManagersClientBeginUpdateOptions) (*runtime.Poller[ExtensionManagersClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, extensionManagerName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ExtensionManagersClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ExtensionManagersClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a ExtensionManager
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *ExtensionManagersClient) update(ctx context.Context, resourceGroupName string, extensionManagerName string, properties ExtensionManagerPatch, options *ExtensionManagersClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ExtensionManagersClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, extensionManagerName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *ExtensionManagersClient) updateCreateRequest(ctx context.Context, resourceGroupName string, extensionManagerName string, properties ExtensionManagerPatch, options *ExtensionManagersClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if extensionManagerName == "" {
		return nil, errors.New("parameter extensionManagerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{extensionManagerName}", url.PathEscape(extensionManagerName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
