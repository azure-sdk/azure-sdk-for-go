//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ManagementGroupGovernanceRulesExecuteStatusClient contains the methods for the ManagementGroupGovernanceRulesExecuteStatus group.
// Don't use this type directly, use NewManagementGroupGovernanceRulesExecuteStatusClient() instead.
type ManagementGroupGovernanceRulesExecuteStatusClient struct {
	host              string
	managementGroupID string
	pl                runtime.Pipeline
}

// NewManagementGroupGovernanceRulesExecuteStatusClient creates a new instance of ManagementGroupGovernanceRulesExecuteStatusClient with the specified values.
// managementGroupID - Azure Management Group ID
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewManagementGroupGovernanceRulesExecuteStatusClient(managementGroupID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ManagementGroupGovernanceRulesExecuteStatusClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &ManagementGroupGovernanceRulesExecuteStatusClient{
		managementGroupID: managementGroupID,
		host:              ep,
		pl:                pl,
	}
	return client, nil
}

// BeginGet - Get a specific governanceRule execution status for the requested scope by ruleId and operationId
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-01-01-preview
// ruleID - The GovernanceRule key - unique key for the standard GovernanceRule
// operationID - The GovernanceRule execution key - unique key for the execution of GovernanceRule
// options - ManagementGroupGovernanceRulesExecuteStatusClientBeginGetOptions contains the optional parameters for the ManagementGroupGovernanceRulesExecuteStatusClient.BeginGet
// method.
func (client *ManagementGroupGovernanceRulesExecuteStatusClient) BeginGet(ctx context.Context, ruleID string, operationID string, options *ManagementGroupGovernanceRulesExecuteStatusClientBeginGetOptions) (*runtime.Poller[ManagementGroupGovernanceRulesExecuteStatusClientGetResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.get(ctx, ruleID, operationID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[ManagementGroupGovernanceRulesExecuteStatusClientGetResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[ManagementGroupGovernanceRulesExecuteStatusClientGetResponse](options.ResumeToken, client.pl, nil)
	}
}

// Get - Get a specific governanceRule execution status for the requested scope by ruleId and operationId
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-01-01-preview
func (client *ManagementGroupGovernanceRulesExecuteStatusClient) get(ctx context.Context, ruleID string, operationID string, options *ManagementGroupGovernanceRulesExecuteStatusClientBeginGetOptions) (*http.Response, error) {
	req, err := client.getCreateRequest(ctx, ruleID, operationID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// getCreateRequest creates the Get request.
func (client *ManagementGroupGovernanceRulesExecuteStatusClient) getCreateRequest(ctx context.Context, ruleID string, operationID string, options *ManagementGroupGovernanceRulesExecuteStatusClientBeginGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}/execute/operationResults/{operationId}"
	if client.managementGroupID == "" {
		return nil, errors.New("parameter client.managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(client.managementGroupID))
	if ruleID == "" {
		return nil, errors.New("parameter ruleID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleId}", url.PathEscape(ruleID))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
