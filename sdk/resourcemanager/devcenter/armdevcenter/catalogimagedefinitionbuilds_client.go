// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevcenter

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CatalogImageDefinitionBuildsClient contains the methods for the DevCenterCatalogImageDefinitionBuilds group.
// Don't use this type directly, use NewCatalogImageDefinitionBuildsClient() instead.
type CatalogImageDefinitionBuildsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewCatalogImageDefinitionBuildsClient creates a new instance of CatalogImageDefinitionBuildsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCatalogImageDefinitionBuildsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CatalogImageDefinitionBuildsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CatalogImageDefinitionBuildsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// NewListByImageDefinitionPager - Lists builds for a specified image definition.
//
// Generated from API version 2025-04-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - devCenterName - The name of the devcenter.
//   - catalogName - The name of the Catalog.
//   - imageDefinitionName - The name of the Image Definition.
//   - options - CatalogImageDefinitionBuildsClientListByImageDefinitionOptions contains the optional parameters for the CatalogImageDefinitionBuildsClient.NewListByImageDefinitionPager
//     method.
func (client *CatalogImageDefinitionBuildsClient) NewListByImageDefinitionPager(resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, options *CatalogImageDefinitionBuildsClientListByImageDefinitionOptions) *runtime.Pager[CatalogImageDefinitionBuildsClientListByImageDefinitionResponse] {
	return runtime.NewPager(runtime.PagingHandler[CatalogImageDefinitionBuildsClientListByImageDefinitionResponse]{
		More: func(page CatalogImageDefinitionBuildsClientListByImageDefinitionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CatalogImageDefinitionBuildsClientListByImageDefinitionResponse) (CatalogImageDefinitionBuildsClientListByImageDefinitionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CatalogImageDefinitionBuildsClient.NewListByImageDefinitionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByImageDefinitionCreateRequest(ctx, resourceGroupName, devCenterName, catalogName, imageDefinitionName, options)
			}, nil)
			if err != nil {
				return CatalogImageDefinitionBuildsClientListByImageDefinitionResponse{}, err
			}
			return client.listByImageDefinitionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByImageDefinitionCreateRequest creates the ListByImageDefinition request.
func (client *CatalogImageDefinitionBuildsClient) listByImageDefinitionCreateRequest(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, _ *CatalogImageDefinitionBuildsClientListByImageDefinitionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}/builds"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if devCenterName == "" {
		return nil, errors.New("parameter devCenterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{devCenterName}", url.PathEscape(devCenterName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if imageDefinitionName == "" {
		return nil, errors.New("parameter imageDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{imageDefinitionName}", url.PathEscape(imageDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByImageDefinitionHandleResponse handles the ListByImageDefinition response.
func (client *CatalogImageDefinitionBuildsClient) listByImageDefinitionHandleResponse(resp *http.Response) (CatalogImageDefinitionBuildsClientListByImageDefinitionResponse, error) {
	result := CatalogImageDefinitionBuildsClientListByImageDefinitionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImageDefinitionBuildListResult); err != nil {
		return CatalogImageDefinitionBuildsClientListByImageDefinitionResponse{}, err
	}
	return result, nil
}
