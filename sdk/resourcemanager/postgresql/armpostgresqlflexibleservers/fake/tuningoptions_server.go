//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresqlflexibleservers/v4"
	"net/http"
	"net/url"
	"regexp"
)

// TuningOptionsServer is a fake server for instances of the armpostgresqlflexibleservers.TuningOptionsClient type.
type TuningOptionsServer struct {
	// Get is the fake for method TuningOptionsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, serverName string, tuningOption armpostgresqlflexibleservers.TuningOptionEnum, options *armpostgresqlflexibleservers.TuningOptionsClientGetOptions) (resp azfake.Responder[armpostgresqlflexibleservers.TuningOptionsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByServerPager is the fake for method TuningOptionsClient.NewListByServerPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByServerPager func(resourceGroupName string, serverName string, options *armpostgresqlflexibleservers.TuningOptionsClientListByServerOptions) (resp azfake.PagerResponder[armpostgresqlflexibleservers.TuningOptionsClientListByServerResponse])

	// NewListRecommendationsPager is the fake for method TuningOptionsClient.NewListRecommendationsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListRecommendationsPager func(resourceGroupName string, serverName string, tuningOption armpostgresqlflexibleservers.TuningOptionEnum, options *armpostgresqlflexibleservers.TuningOptionsClientListRecommendationsOptions) (resp azfake.PagerResponder[armpostgresqlflexibleservers.TuningOptionsClientListRecommendationsResponse])
}

// NewTuningOptionsServerTransport creates a new instance of TuningOptionsServerTransport with the provided implementation.
// The returned TuningOptionsServerTransport instance is connected to an instance of armpostgresqlflexibleservers.TuningOptionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTuningOptionsServerTransport(srv *TuningOptionsServer) *TuningOptionsServerTransport {
	return &TuningOptionsServerTransport{
		srv:                         srv,
		newListByServerPager:        newTracker[azfake.PagerResponder[armpostgresqlflexibleservers.TuningOptionsClientListByServerResponse]](),
		newListRecommendationsPager: newTracker[azfake.PagerResponder[armpostgresqlflexibleservers.TuningOptionsClientListRecommendationsResponse]](),
	}
}

// TuningOptionsServerTransport connects instances of armpostgresqlflexibleservers.TuningOptionsClient to instances of TuningOptionsServer.
// Don't use this type directly, use NewTuningOptionsServerTransport instead.
type TuningOptionsServerTransport struct {
	srv                         *TuningOptionsServer
	newListByServerPager        *tracker[azfake.PagerResponder[armpostgresqlflexibleservers.TuningOptionsClientListByServerResponse]]
	newListRecommendationsPager *tracker[azfake.PagerResponder[armpostgresqlflexibleservers.TuningOptionsClientListRecommendationsResponse]]
}

// Do implements the policy.Transporter interface for TuningOptionsServerTransport.
func (t *TuningOptionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "TuningOptionsClient.Get":
		resp, err = t.dispatchGet(req)
	case "TuningOptionsClient.NewListByServerPager":
		resp, err = t.dispatchNewListByServerPager(req)
	case "TuningOptionsClient.NewListRecommendationsPager":
		resp, err = t.dispatchNewListRecommendationsPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (t *TuningOptionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if t.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DBforPostgreSQL/flexibleServers/(?P<serverName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/tuningOptions/(?P<tuningOption>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	serverNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("serverName")])
	if err != nil {
		return nil, err
	}
	tuningOptionParam, err := parseWithCast(matches[regex.SubexpIndex("tuningOption")], func(v string) (armpostgresqlflexibleservers.TuningOptionEnum, error) {
		p, unescapeErr := url.PathUnescape(v)
		if unescapeErr != nil {
			return "", unescapeErr
		}
		return armpostgresqlflexibleservers.TuningOptionEnum(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.Get(req.Context(), resourceGroupNameParam, serverNameParam, tuningOptionParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TuningOptionsResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TuningOptionsServerTransport) dispatchNewListByServerPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListByServerPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByServerPager not implemented")}
	}
	newListByServerPager := t.newListByServerPager.get(req)
	if newListByServerPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DBforPostgreSQL/flexibleServers/(?P<serverName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/tuningOptions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		serverNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("serverName")])
		if err != nil {
			return nil, err
		}
		resp := t.srv.NewListByServerPager(resourceGroupNameParam, serverNameParam, nil)
		newListByServerPager = &resp
		t.newListByServerPager.add(req, newListByServerPager)
		server.PagerResponderInjectNextLinks(newListByServerPager, req, func(page *armpostgresqlflexibleservers.TuningOptionsClientListByServerResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByServerPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListByServerPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByServerPager) {
		t.newListByServerPager.remove(req)
	}
	return resp, nil
}

func (t *TuningOptionsServerTransport) dispatchNewListRecommendationsPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListRecommendationsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListRecommendationsPager not implemented")}
	}
	newListRecommendationsPager := t.newListRecommendationsPager.get(req)
	if newListRecommendationsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DBforPostgreSQL/flexibleServers/(?P<serverName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/tuningOptions/(?P<tuningOption>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/recommendations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		serverNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("serverName")])
		if err != nil {
			return nil, err
		}
		tuningOptionParam, err := parseWithCast(matches[regex.SubexpIndex("tuningOption")], func(v string) (armpostgresqlflexibleservers.TuningOptionEnum, error) {
			p, unescapeErr := url.PathUnescape(v)
			if unescapeErr != nil {
				return "", unescapeErr
			}
			return armpostgresqlflexibleservers.TuningOptionEnum(p), nil
		})
		if err != nil {
			return nil, err
		}
		recommendationTypeUnescaped, err := url.QueryUnescape(qp.Get("$recommendationType"))
		if err != nil {
			return nil, err
		}
		recommendationTypeParam := getOptional(armpostgresqlflexibleservers.RecommendationType(recommendationTypeUnescaped))
		var options *armpostgresqlflexibleservers.TuningOptionsClientListRecommendationsOptions
		if recommendationTypeParam != nil {
			options = &armpostgresqlflexibleservers.TuningOptionsClientListRecommendationsOptions{
				RecommendationType: recommendationTypeParam,
			}
		}
		resp := t.srv.NewListRecommendationsPager(resourceGroupNameParam, serverNameParam, tuningOptionParam, options)
		newListRecommendationsPager = &resp
		t.newListRecommendationsPager.add(req, newListRecommendationsPager)
		server.PagerResponderInjectNextLinks(newListRecommendationsPager, req, func(page *armpostgresqlflexibleservers.TuningOptionsClientListRecommendationsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListRecommendationsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListRecommendationsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListRecommendationsPager) {
		t.newListRecommendationsPager.remove(req)
	}
	return resp, nil
}
