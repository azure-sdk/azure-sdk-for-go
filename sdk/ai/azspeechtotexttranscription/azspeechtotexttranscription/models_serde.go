// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azspeechtotexttranscription

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type ChannelCombinedPhrases.
func (c ChannelCombinedPhrases) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "channel", c.Channel)
	populate(objectMap, "text", c.Text)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ChannelCombinedPhrases.
func (c *ChannelCombinedPhrases) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "channel":
			err = unpopulate(val, "Channel", &c.Channel)
			delete(rawMsg, key)
		case "text":
			err = unpopulate(val, "Text", &c.Text)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DiarizationProperties.
func (d DiarizationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "enabled", d.Enabled)
	populate(objectMap, "maxSpeakers", d.MaxSpeakers)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiarizationProperties.
func (d *DiarizationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "enabled":
			err = unpopulate(val, "Enabled", &d.Enabled)
			delete(rawMsg, key)
		case "maxSpeakers":
			err = unpopulate(val, "MaxSpeakers", &d.MaxSpeakers)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type EntityError.
func (e EntityError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "message", e.Message)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EntityError.
func (e *EntityError) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			err = unpopulate(val, "Code", &e.Code)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, "Message", &e.Message)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type EntityReference.
func (e EntityReference) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "self", e.Self)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EntityReference.
func (e *EntityReference) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "self":
			err = unpopulate(val, "Self", &e.Self)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FileLinks.
func (f FileLinks) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "contentUrl", f.ContentURL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FileLinks.
func (f *FileLinks) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", f, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "contentUrl":
			err = unpopulate(val, "ContentURL", &f.ContentURL)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", f, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FileProperties.
func (f FileProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "durationMilliseconds", f.DurationMilliseconds)
	populate(objectMap, "size", f.Size)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FileProperties.
func (f *FileProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", f, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "durationMilliseconds":
			err = unpopulate(val, "DurationMilliseconds", &f.DurationMilliseconds)
			delete(rawMsg, key)
		case "size":
			err = unpopulate(val, "Size", &f.Size)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", f, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LanguageIdentificationProperties.
func (l LanguageIdentificationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "candidateLocales", l.CandidateLocales)
	populate(objectMap, "mode", l.Mode)
	populate(objectMap, "speechModelMapping", l.SpeechModelMapping)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LanguageIdentificationProperties.
func (l *LanguageIdentificationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "candidateLocales":
			err = unpopulate(val, "CandidateLocales", &l.CandidateLocales)
			delete(rawMsg, key)
		case "mode":
			err = unpopulate(val, "Mode", &l.Mode)
			delete(rawMsg, key)
		case "speechModelMapping":
			err = unpopulate(val, "SpeechModelMapping", &l.SpeechModelMapping)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SpeechToTextCustomPageTranscriptionFile.
func (s SpeechToTextCustomPageTranscriptionFile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "@nextLink", s.NextLink)
	populate(objectMap, "values", s.Values)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SpeechToTextCustomPageTranscriptionFile.
func (s *SpeechToTextCustomPageTranscriptionFile) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "@nextLink":
			err = unpopulate(val, "NextLink", &s.NextLink)
			delete(rawMsg, key)
		case "values":
			err = unpopulate(val, "Values", &s.Values)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SpeechToTextCustomPageTranscriptionJob.
func (s SpeechToTextCustomPageTranscriptionJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "@nextLink", s.NextLink)
	populate(objectMap, "values", s.Values)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SpeechToTextCustomPageTranscriptionJob.
func (s *SpeechToTextCustomPageTranscriptionJob) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "@nextLink":
			err = unpopulate(val, "NextLink", &s.NextLink)
			delete(rawMsg, key)
		case "values":
			err = unpopulate(val, "Values", &s.Values)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscribeConfig.
func (t TranscribeConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "channels", t.ActiveChannels)
	populate(objectMap, "diarization", t.DiarizationProperties)
	populate(objectMap, "locales", t.Locales)
	populate(objectMap, "models", t.Models)
	populate(objectMap, "profanityFilterMode", t.ProfanityFilterMode)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscribeConfig.
func (t *TranscribeConfig) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "channels":
			err = unpopulate(val, "ActiveChannels", &t.ActiveChannels)
			delete(rawMsg, key)
		case "diarization":
			err = unpopulate(val, "DiarizationProperties", &t.DiarizationProperties)
			delete(rawMsg, key)
		case "locales":
			err = unpopulate(val, "Locales", &t.Locales)
			delete(rawMsg, key)
		case "models":
			err = unpopulate(val, "Models", &t.Models)
			delete(rawMsg, key)
		case "profanityFilterMode":
			err = unpopulate(val, "ProfanityFilterMode", &t.ProfanityFilterMode)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscribeDiarizationProperties.
func (t TranscribeDiarizationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "enabled", t.Enabled)
	populate(objectMap, "maxSpeakers", t.MaxSpeakers)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscribeDiarizationProperties.
func (t *TranscribeDiarizationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "enabled":
			err = unpopulate(val, "Enabled", &t.Enabled)
			delete(rawMsg, key)
		case "maxSpeakers":
			err = unpopulate(val, "MaxSpeakers", &t.MaxSpeakers)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscribeResult.
func (t TranscribeResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "combinedPhrases", t.CombinedPhrases)
	populate(objectMap, "durationMilliseconds", t.DurationMilliseconds)
	populate(objectMap, "phrases", t.Phrases)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscribeResult.
func (t *TranscribeResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "combinedPhrases":
			err = unpopulate(val, "CombinedPhrases", &t.CombinedPhrases)
			delete(rawMsg, key)
		case "durationMilliseconds":
			err = unpopulate(val, "DurationMilliseconds", &t.DurationMilliseconds)
			delete(rawMsg, key)
		case "phrases":
			err = unpopulate(val, "Phrases", &t.Phrases)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscribedPhrase.
func (t TranscribedPhrase) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "channel", t.Channel)
	populate(objectMap, "confidence", t.Confidence)
	populate(objectMap, "durationMilliseconds", t.DurationMilliseconds)
	populate(objectMap, "locale", t.Locale)
	populate(objectMap, "offsetMilliseconds", t.OffsetMilliseconds)
	populate(objectMap, "speaker", t.Speaker)
	populate(objectMap, "text", t.Text)
	populate(objectMap, "words", t.Words)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscribedPhrase.
func (t *TranscribedPhrase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "channel":
			err = unpopulate(val, "Channel", &t.Channel)
			delete(rawMsg, key)
		case "confidence":
			err = unpopulate(val, "Confidence", &t.Confidence)
			delete(rawMsg, key)
		case "durationMilliseconds":
			err = unpopulate(val, "DurationMilliseconds", &t.DurationMilliseconds)
			delete(rawMsg, key)
		case "locale":
			err = unpopulate(val, "Locale", &t.Locale)
			delete(rawMsg, key)
		case "offsetMilliseconds":
			err = unpopulate(val, "OffsetMilliseconds", &t.OffsetMilliseconds)
			delete(rawMsg, key)
		case "speaker":
			err = unpopulate(val, "Speaker", &t.Speaker)
			delete(rawMsg, key)
		case "text":
			err = unpopulate(val, "Text", &t.Text)
			delete(rawMsg, key)
		case "words":
			err = unpopulate(val, "Words", &t.Words)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscribedWord.
func (t TranscribedWord) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "durationMilliseconds", t.DurationMilliseconds)
	populate(objectMap, "offsetMilliseconds", t.OffsetMilliseconds)
	populate(objectMap, "text", t.Text)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscribedWord.
func (t *TranscribedWord) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "durationMilliseconds":
			err = unpopulate(val, "DurationMilliseconds", &t.DurationMilliseconds)
			delete(rawMsg, key)
		case "offsetMilliseconds":
			err = unpopulate(val, "OffsetMilliseconds", &t.OffsetMilliseconds)
			delete(rawMsg, key)
		case "text":
			err = unpopulate(val, "Text", &t.Text)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscriptionFile.
func (t TranscriptionFile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdDateTime", t.CreatedDateTime)
	populate(objectMap, "displayName", t.DisplayName)
	populate(objectMap, "kind", t.Kind)
	populate(objectMap, "links", t.Links)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "self", t.Self)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscriptionFile.
func (t *TranscriptionFile) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdDateTime":
			err = unpopulateDateTimeRFC3339(val, "CreatedDateTime", &t.CreatedDateTime)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &t.DisplayName)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, "Kind", &t.Kind)
			delete(rawMsg, key)
		case "links":
			err = unpopulate(val, "Links", &t.Links)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &t.Properties)
			delete(rawMsg, key)
		case "self":
			err = unpopulate(val, "Self", &t.Self)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscriptionJob.
func (t TranscriptionJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "contentContainerUrl", t.ContentContainerURL)
	populate(objectMap, "contentUrls", t.ContentUrls)
	populateDateTimeRFC3339(objectMap, "createdDateTime", t.CreatedDateTime)
	populate(objectMap, "customProperties", t.CustomProperties)
	populate(objectMap, "dataset", t.Dataset)
	populate(objectMap, "description", t.Description)
	populate(objectMap, "displayName", t.DisplayName)
	populate(objectMap, "id", t.ID)
	populateDateTimeRFC3339(objectMap, "lastActionDateTime", t.LastActionDateTime)
	populate(objectMap, "links", t.Links)
	populate(objectMap, "locale", t.Locale)
	populate(objectMap, "model", t.Model)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "self", t.Self)
	populate(objectMap, "status", t.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscriptionJob.
func (t *TranscriptionJob) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "contentContainerUrl":
			err = unpopulate(val, "ContentContainerURL", &t.ContentContainerURL)
			delete(rawMsg, key)
		case "contentUrls":
			err = unpopulate(val, "ContentUrls", &t.ContentUrls)
			delete(rawMsg, key)
		case "createdDateTime":
			err = unpopulateDateTimeRFC3339(val, "CreatedDateTime", &t.CreatedDateTime)
			delete(rawMsg, key)
		case "customProperties":
			err = unpopulate(val, "CustomProperties", &t.CustomProperties)
			delete(rawMsg, key)
		case "dataset":
			err = unpopulate(val, "Dataset", &t.Dataset)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, "Description", &t.Description)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &t.DisplayName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &t.ID)
			delete(rawMsg, key)
		case "lastActionDateTime":
			err = unpopulateDateTimeRFC3339(val, "LastActionDateTime", &t.LastActionDateTime)
			delete(rawMsg, key)
		case "links":
			err = unpopulate(val, "Links", &t.Links)
			delete(rawMsg, key)
		case "locale":
			err = unpopulate(val, "Locale", &t.Locale)
			delete(rawMsg, key)
		case "model":
			err = unpopulate(val, "Model", &t.Model)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &t.Properties)
			delete(rawMsg, key)
		case "self":
			err = unpopulate(val, "Self", &t.Self)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &t.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscriptionLinks.
func (t TranscriptionLinks) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "files", t.Files)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscriptionLinks.
func (t *TranscriptionLinks) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "files":
			err = unpopulate(val, "Files", &t.Files)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscriptionProperties.
func (t TranscriptionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "channels", t.Channels)
	populate(objectMap, "destinationContainerUrl", t.DestinationContainerURL)
	populate(objectMap, "diarization", t.Diarization)
	populate(objectMap, "displayFormWordLevelTimestampsEnabled", t.DisplayFormWordLevelTimestampsEnabled)
	populate(objectMap, "durationMilliseconds", t.DurationMilliseconds)
	populate(objectMap, "error", t.Error)
	populate(objectMap, "languageIdentification", t.LanguageIdentificationProperties)
	populate(objectMap, "profanityFilterMode", t.ProfanityFilterMode)
	populate(objectMap, "punctuationMode", t.PunctuationMode)
	populate(objectMap, "timeToLiveHours", t.TimeToLiveHours)
	populate(objectMap, "wordLevelTimestampsEnabled", t.WordLevelTimestampsEnabled)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscriptionProperties.
func (t *TranscriptionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "channels":
			err = unpopulate(val, "Channels", &t.Channels)
			delete(rawMsg, key)
		case "destinationContainerUrl":
			err = unpopulate(val, "DestinationContainerURL", &t.DestinationContainerURL)
			delete(rawMsg, key)
		case "diarization":
			err = unpopulate(val, "Diarization", &t.Diarization)
			delete(rawMsg, key)
		case "displayFormWordLevelTimestampsEnabled":
			err = unpopulate(val, "DisplayFormWordLevelTimestampsEnabled", &t.DisplayFormWordLevelTimestampsEnabled)
			delete(rawMsg, key)
		case "durationMilliseconds":
			err = unpopulate(val, "DurationMilliseconds", &t.DurationMilliseconds)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, "Error", &t.Error)
			delete(rawMsg, key)
		case "languageIdentification":
			err = unpopulate(val, "LanguageIdentificationProperties", &t.LanguageIdentificationProperties)
			delete(rawMsg, key)
		case "profanityFilterMode":
			err = unpopulate(val, "ProfanityFilterMode", &t.ProfanityFilterMode)
			delete(rawMsg, key)
		case "punctuationMode":
			err = unpopulate(val, "PunctuationMode", &t.PunctuationMode)
			delete(rawMsg, key)
		case "timeToLiveHours":
			err = unpopulate(val, "TimeToLiveHours", &t.TimeToLiveHours)
			delete(rawMsg, key)
		case "wordLevelTimestampsEnabled":
			err = unpopulate(val, "WordLevelTimestampsEnabled", &t.WordLevelTimestampsEnabled)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
