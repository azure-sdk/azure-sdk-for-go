//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azuredatatransfer/armazuredatatransfer"
	"net/http"
	"net/url"
	"regexp"
)

// FlowsServer is a fake server for instances of the armazuredatatransfer.FlowsClient type.
type FlowsServer struct {
	// BeginCreateOrUpdate is the fake for method FlowsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow armazuredatatransfer.Flow, options *armazuredatatransfer.FlowsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armazuredatatransfer.FlowsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method FlowsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *armazuredatatransfer.FlowsClientBeginDeleteOptions) (resp azfake.PollerResponder[armazuredatatransfer.FlowsClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginDisable is the fake for method FlowsClient.BeginDisable
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginDisable func(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *armazuredatatransfer.FlowsClientBeginDisableOptions) (resp azfake.PollerResponder[armazuredatatransfer.FlowsClientDisableResponse], errResp azfake.ErrorResponder)

	// BeginEnable is the fake for method FlowsClient.BeginEnable
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginEnable func(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *armazuredatatransfer.FlowsClientBeginEnableOptions) (resp azfake.PollerResponder[armazuredatatransfer.FlowsClientEnableResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method FlowsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, connectionName string, flowName string, options *armazuredatatransfer.FlowsClientGetOptions) (resp azfake.Responder[armazuredatatransfer.FlowsClientGetResponse], errResp azfake.ErrorResponder)

	// BeginLink is the fake for method FlowsClient.BeginLink
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginLink func(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow armazuredatatransfer.ResourceBody, options *armazuredatatransfer.FlowsClientBeginLinkOptions) (resp azfake.PollerResponder[armazuredatatransfer.FlowsClientLinkResponse], errResp azfake.ErrorResponder)

	// NewListByConnectionPager is the fake for method FlowsClient.NewListByConnectionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByConnectionPager func(resourceGroupName string, connectionName string, options *armazuredatatransfer.FlowsClientListByConnectionOptions) (resp azfake.PagerResponder[armazuredatatransfer.FlowsClientListByConnectionResponse])

	// BeginUpdate is the fake for method FlowsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, connectionName string, flowName string, flow armazuredatatransfer.FlowsPatch, options *armazuredatatransfer.FlowsClientBeginUpdateOptions) (resp azfake.PollerResponder[armazuredatatransfer.FlowsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewFlowsServerTransport creates a new instance of FlowsServerTransport with the provided implementation.
// The returned FlowsServerTransport instance is connected to an instance of armazuredatatransfer.FlowsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewFlowsServerTransport(srv *FlowsServer) *FlowsServerTransport {
	return &FlowsServerTransport{
		srv:                      srv,
		beginCreateOrUpdate:      newTracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientCreateOrUpdateResponse]](),
		beginDelete:              newTracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientDeleteResponse]](),
		beginDisable:             newTracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientDisableResponse]](),
		beginEnable:              newTracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientEnableResponse]](),
		beginLink:                newTracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientLinkResponse]](),
		newListByConnectionPager: newTracker[azfake.PagerResponder[armazuredatatransfer.FlowsClientListByConnectionResponse]](),
		beginUpdate:              newTracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientUpdateResponse]](),
	}
}

// FlowsServerTransport connects instances of armazuredatatransfer.FlowsClient to instances of FlowsServer.
// Don't use this type directly, use NewFlowsServerTransport instead.
type FlowsServerTransport struct {
	srv                      *FlowsServer
	beginCreateOrUpdate      *tracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientCreateOrUpdateResponse]]
	beginDelete              *tracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientDeleteResponse]]
	beginDisable             *tracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientDisableResponse]]
	beginEnable              *tracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientEnableResponse]]
	beginLink                *tracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientLinkResponse]]
	newListByConnectionPager *tracker[azfake.PagerResponder[armazuredatatransfer.FlowsClientListByConnectionResponse]]
	beginUpdate              *tracker[azfake.PollerResponder[armazuredatatransfer.FlowsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for FlowsServerTransport.
func (f *FlowsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "FlowsClient.BeginCreateOrUpdate":
		resp, err = f.dispatchBeginCreateOrUpdate(req)
	case "FlowsClient.BeginDelete":
		resp, err = f.dispatchBeginDelete(req)
	case "FlowsClient.BeginDisable":
		resp, err = f.dispatchBeginDisable(req)
	case "FlowsClient.BeginEnable":
		resp, err = f.dispatchBeginEnable(req)
	case "FlowsClient.Get":
		resp, err = f.dispatchGet(req)
	case "FlowsClient.BeginLink":
		resp, err = f.dispatchBeginLink(req)
	case "FlowsClient.NewListByConnectionPager":
		resp, err = f.dispatchNewListByConnectionPager(req)
	case "FlowsClient.BeginUpdate":
		resp, err = f.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (f *FlowsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if f.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := f.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/flows/(?P<flowName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.Flow](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		flowNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("flowName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, connectionNameParam, flowNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		f.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		f.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		f.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (f *FlowsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if f.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := f.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/flows/(?P<flowName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		flowNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("flowName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginDelete(req.Context(), resourceGroupNameParam, connectionNameParam, flowNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		f.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		f.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		f.beginDelete.remove(req)
	}

	return resp, nil
}

func (f *FlowsServerTransport) dispatchBeginDisable(req *http.Request) (*http.Response, error) {
	if f.srv.BeginDisable == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDisable not implemented")}
	}
	beginDisable := f.beginDisable.get(req)
	if beginDisable == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/flows/(?P<flowName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/disable`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		flowNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("flowName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginDisable(req.Context(), resourceGroupNameParam, connectionNameParam, flowNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDisable = &respr
		f.beginDisable.add(req, beginDisable)
	}

	resp, err := server.PollerResponderNext(beginDisable, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		f.beginDisable.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDisable) {
		f.beginDisable.remove(req)
	}

	return resp, nil
}

func (f *FlowsServerTransport) dispatchBeginEnable(req *http.Request) (*http.Response, error) {
	if f.srv.BeginEnable == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginEnable not implemented")}
	}
	beginEnable := f.beginEnable.get(req)
	if beginEnable == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/flows/(?P<flowName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enable`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		flowNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("flowName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginEnable(req.Context(), resourceGroupNameParam, connectionNameParam, flowNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginEnable = &respr
		f.beginEnable.add(req, beginEnable)
	}

	resp, err := server.PollerResponderNext(beginEnable, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		f.beginEnable.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginEnable) {
		f.beginEnable.remove(req)
	}

	return resp, nil
}

func (f *FlowsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if f.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/flows/(?P<flowName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
	if err != nil {
		return nil, err
	}
	flowNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("flowName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.Get(req.Context(), resourceGroupNameParam, connectionNameParam, flowNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Flow, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FlowsServerTransport) dispatchBeginLink(req *http.Request) (*http.Response, error) {
	if f.srv.BeginLink == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginLink not implemented")}
	}
	beginLink := f.beginLink.get(req)
	if beginLink == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/flows/(?P<flowName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/link`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.ResourceBody](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		flowNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("flowName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginLink(req.Context(), resourceGroupNameParam, connectionNameParam, flowNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginLink = &respr
		f.beginLink.add(req, beginLink)
	}

	resp, err := server.PollerResponderNext(beginLink, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		f.beginLink.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginLink) {
		f.beginLink.remove(req)
	}

	return resp, nil
}

func (f *FlowsServerTransport) dispatchNewListByConnectionPager(req *http.Request) (*http.Response, error) {
	if f.srv.NewListByConnectionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByConnectionPager not implemented")}
	}
	newListByConnectionPager := f.newListByConnectionPager.get(req)
	if newListByConnectionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/flows`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		resp := f.srv.NewListByConnectionPager(resourceGroupNameParam, connectionNameParam, nil)
		newListByConnectionPager = &resp
		f.newListByConnectionPager.add(req, newListByConnectionPager)
		server.PagerResponderInjectNextLinks(newListByConnectionPager, req, func(page *armazuredatatransfer.FlowsClientListByConnectionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByConnectionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		f.newListByConnectionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByConnectionPager) {
		f.newListByConnectionPager.remove(req)
	}
	return resp, nil
}

func (f *FlowsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if f.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := f.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/flows/(?P<flowName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.FlowsPatch](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		flowNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("flowName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginUpdate(req.Context(), resourceGroupNameParam, connectionNameParam, flowNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		f.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		f.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		f.beginUpdate.remove(req)
	}

	return resp, nil
}
