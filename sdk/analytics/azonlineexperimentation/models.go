// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azonlineexperimentation

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"time"
)

// AggregatedValue - An event property value aggregated by a metric.
type AggregatedValue struct {
	// REQUIRED; The name of the event.
	EventName *string

	// REQUIRED; The key of the event property to aggregate.
	EventProperty *string

	// [Optional] A condition to filter events.
	Filter *string
}

// AverageMetricDefinition - The definition of an Average metric definition. Calculates the average value of a specified event
// property.
type AverageMetricDefinition struct {
	// CONSTANT; The type of metric.
	// Field has constant value ExperimentMetricTypeAverage, any specified value is ignored.
	Type *ExperimentMetricType

	// REQUIRED; The value to aggregate.
	Value *AggregatedValue
}

// GetExperimentMetricDefinition implements the ExperimentMetricDefinitionClassification interface for type AverageMetricDefinition.
func (a *AverageMetricDefinition) GetExperimentMetricDefinition() *ExperimentMetricDefinition {
	return &ExperimentMetricDefinition{
		Type: a.Type,
	}
}

// DiagnosticDetail - Diagnostic details for validation errors.
type DiagnosticDetail struct {
	// READ-ONLY; The diagnostic error code.
	Code *DiagnosticCode

	// READ-ONLY; A human-readable error message.
	Message *string
}

// EventCountMetricDefinition - The definition of an EventCount metric definition. Counts the occurrences of a specified event.
type EventCountMetricDefinition struct {
	// REQUIRED; Event to observe.
	Event *ObservedEvent

	// CONSTANT; The type of metric.
	// Field has constant value ExperimentMetricTypeEventCount, any specified value is ignored.
	Type *ExperimentMetricType
}

// GetExperimentMetricDefinition implements the ExperimentMetricDefinitionClassification interface for type EventCountMetricDefinition.
func (e *EventCountMetricDefinition) GetExperimentMetricDefinition() *ExperimentMetricDefinition {
	return &ExperimentMetricDefinition{
		Type: e.Type,
	}
}

// EventRateMetricDefinition - The definition of an EventRate metric definition. Calculates the percentage of events satisfying
// a specified condition.
type EventRateMetricDefinition struct {
	// REQUIRED; Event to observe as the rate denominator.
	Event *ObservedEvent

	// REQUIRED; The event contributes to the rate numerator if it satisfies this condition.
	RateCondition *string

	// CONSTANT; The type of metric.
	// Field has constant value ExperimentMetricTypeEventRate, any specified value is ignored.
	Type *ExperimentMetricType
}

// GetExperimentMetricDefinition implements the ExperimentMetricDefinitionClassification interface for type EventRateMetricDefinition.
func (e *EventRateMetricDefinition) GetExperimentMetricDefinition() *ExperimentMetricDefinition {
	return &ExperimentMetricDefinition{
		Type: e.Type,
	}
}

// ExperimentMetric - Defines experiment metric metadata and computation details.
type ExperimentMetric struct {
	// REQUIRED; Categories associated with the experiment metric. Used for organizing and filtering metrics.
	Categories []string

	// REQUIRED; The metric definition specifying how the metric value is calculated from event data.
	Definition ExperimentMetricDefinitionClassification

	// REQUIRED; A detailed description of the experiment metric.
	Description *string

	// REQUIRED; The desired direction for changes in the metric value.
	DesiredDirection *DesiredDirection

	// REQUIRED; A user-friendly display name for the experiment metric shown in reports and dashboards.
	DisplayName *string

	// REQUIRED; Determines whether it is included in experiment analysis.
	Lifecycle *LifecycleStage

	// READ-ONLY; ETag of the experiment metric.
	ETag *azcore.ETag

	// READ-ONLY; Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters,
	// numbers, and underscores.
	ID *string

	// READ-ONLY; The timestamp (UTC) of the last modification to the experiment metric resource.
	LastModifiedAt *time.Time
}

// ExperimentMetricDefinition - The metric definition, which determines how the metric value is calculated from event data.
type ExperimentMetricDefinition struct {
	// REQUIRED; Discriminator property for ExperimentMetricDefinition.
	Type *ExperimentMetricType
}

// GetExperimentMetricDefinition implements the ExperimentMetricDefinitionClassification interface for type ExperimentMetricDefinition.
func (e *ExperimentMetricDefinition) GetExperimentMetricDefinition() *ExperimentMetricDefinition {
	return e
}

// ExperimentMetricValidationResult - The result of validating an experiment metric.
type ExperimentMetricValidationResult struct {
	// REQUIRED; Indicates whether the experiment metric is valid.
	IsValid *bool

	// READ-ONLY; Diagnostic details from the validation process.
	Diagnostics []DiagnosticDetail
}

// ObservedEvent - An event observed by a metric.
type ObservedEvent struct {
	// REQUIRED; The name of the event.
	EventName *string

	// [Optional] A condition to filter events.
	Filter *string
}

// PagedExperimentMetric - Paged collection of ExperimentMetric items
type PagedExperimentMetric struct {
	// REQUIRED; The ExperimentMetric items on this page
	Value []ExperimentMetric

	// The link to the next page of items
	NextLink *string
}

// PercentileMetricDefinition - The definition of a Percentile metric definition. Calculates a specified percentile of an
// event property.
type PercentileMetricDefinition struct {
	// REQUIRED; The percentile to measure.
	Percentile *float64

	// CONSTANT; The type of metric.
	// Field has constant value ExperimentMetricTypePercentile, any specified value is ignored.
	Type *ExperimentMetricType

	// REQUIRED; The value to aggregate, including the event name and property to measure.
	Value *AggregatedValue
}

// GetExperimentMetricDefinition implements the ExperimentMetricDefinitionClassification interface for type PercentileMetricDefinition.
func (p *PercentileMetricDefinition) GetExperimentMetricDefinition() *ExperimentMetricDefinition {
	return &ExperimentMetricDefinition{
		Type: p.Type,
	}
}

// SumMetricDefinition - The definition of a Sum metric definition. Calculates the sum of a specified event property. Experiment
// analysis accounts for unequal traffic allocation.
type SumMetricDefinition struct {
	// CONSTANT; The type of metric.
	// Field has constant value ExperimentMetricTypeSum, any specified value is ignored.
	Type *ExperimentMetricType

	// REQUIRED; The value to aggregate.
	Value *AggregatedValue
}

// GetExperimentMetricDefinition implements the ExperimentMetricDefinitionClassification interface for type SumMetricDefinition.
func (s *SumMetricDefinition) GetExperimentMetricDefinition() *ExperimentMetricDefinition {
	return &ExperimentMetricDefinition{
		Type: s.Type,
	}
}

// UserCountMetricDefinition - The definition of a UserCount metric definition. Counts unique users who encounter a specified
// event.
type UserCountMetricDefinition struct {
	// REQUIRED; Event to observe.
	Event *ObservedEvent

	// CONSTANT; The type of metric.
	// Field has constant value ExperimentMetricTypeUserCount, any specified value is ignored.
	Type *ExperimentMetricType
}

// GetExperimentMetricDefinition implements the ExperimentMetricDefinitionClassification interface for type UserCountMetricDefinition.
func (u *UserCountMetricDefinition) GetExperimentMetricDefinition() *ExperimentMetricDefinition {
	return &ExperimentMetricDefinition{
		Type: u.Type,
	}
}

// UserRateMetricDefinition - The definition of a UserRate metric definition. Calculates the percentage of users who encounter
// a start event and subsequently an end event. Users must encounter events in the specified order.
type UserRateMetricDefinition struct {
	// REQUIRED; The end event to observe, which is a condition for the rate numerator.
	EndEvent *ObservedEvent

	// REQUIRED; The start event to observe as the rate denominator.
	StartEvent *ObservedEvent

	// CONSTANT; The type of metric.
	// Field has constant value ExperimentMetricTypeUserRate, any specified value is ignored.
	Type *ExperimentMetricType
}

// GetExperimentMetricDefinition implements the ExperimentMetricDefinitionClassification interface for type UserRateMetricDefinition.
func (u *UserRateMetricDefinition) GetExperimentMetricDefinition() *ExperimentMetricDefinition {
	return &ExperimentMetricDefinition{
		Type: u.Type,
	}
}
