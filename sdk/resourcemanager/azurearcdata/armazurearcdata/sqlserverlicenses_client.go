//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SQLServerLicensesClient contains the methods for the SQLServerLicenses group.
// Don't use this type directly, use NewSQLServerLicensesClient() instead.
type SQLServerLicensesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSQLServerLicensesClient creates a new instance of SQLServerLicensesClient with the specified values.
//   - subscriptionID - The ID of the Azure subscription
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSQLServerLicensesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SQLServerLicensesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SQLServerLicensesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Create - Creates or replaces a SQL Server license resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerLicenseName - Name of SQL Server License
//   - sqlServerLicense - The SQL Server license to be created or updated.
//   - options - SQLServerLicensesClientCreateOptions contains the optional parameters for the SQLServerLicensesClient.Create
//     method.
func (client *SQLServerLicensesClient) Create(ctx context.Context, resourceGroupName string, sqlServerLicenseName string, sqlServerLicense SQLServerLicense, options *SQLServerLicensesClientCreateOptions) (SQLServerLicensesClientCreateResponse, error) {
	var err error
	const operationName = "SQLServerLicensesClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, sqlServerLicenseName, sqlServerLicense, options)
	if err != nil {
		return SQLServerLicensesClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerLicensesClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerLicensesClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *SQLServerLicensesClient) createCreateRequest(ctx context.Context, resourceGroupName string, sqlServerLicenseName string, sqlServerLicense SQLServerLicense, options *SQLServerLicensesClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses/{sqlServerLicenseName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerLicenseName == "" {
		return nil, errors.New("parameter sqlServerLicenseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerLicenseName}", url.PathEscape(sqlServerLicenseName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, sqlServerLicense); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *SQLServerLicensesClient) createHandleResponse(resp *http.Response) (SQLServerLicensesClientCreateResponse, error) {
	result := SQLServerLicensesClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerLicense); err != nil {
		return SQLServerLicensesClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes a SQL Server license resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerLicenseName - Name of SQL Server License
//   - options - SQLServerLicensesClientDeleteOptions contains the optional parameters for the SQLServerLicensesClient.Delete
//     method.
func (client *SQLServerLicensesClient) Delete(ctx context.Context, resourceGroupName string, sqlServerLicenseName string, options *SQLServerLicensesClientDeleteOptions) (SQLServerLicensesClientDeleteResponse, error) {
	var err error
	const operationName = "SQLServerLicensesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, sqlServerLicenseName, options)
	if err != nil {
		return SQLServerLicensesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerLicensesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerLicensesClientDeleteResponse{}, err
	}
	return SQLServerLicensesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SQLServerLicensesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, sqlServerLicenseName string, options *SQLServerLicensesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses/{sqlServerLicenseName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerLicenseName == "" {
		return nil, errors.New("parameter sqlServerLicenseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerLicenseName}", url.PathEscape(sqlServerLicenseName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieves a SQL Server license resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerLicenseName - Name of SQL Server License
//   - options - SQLServerLicensesClientGetOptions contains the optional parameters for the SQLServerLicensesClient.Get method.
func (client *SQLServerLicensesClient) Get(ctx context.Context, resourceGroupName string, sqlServerLicenseName string, options *SQLServerLicensesClientGetOptions) (SQLServerLicensesClientGetResponse, error) {
	var err error
	const operationName = "SQLServerLicensesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, sqlServerLicenseName, options)
	if err != nil {
		return SQLServerLicensesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerLicensesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerLicensesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SQLServerLicensesClient) getCreateRequest(ctx context.Context, resourceGroupName string, sqlServerLicenseName string, options *SQLServerLicensesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses/{sqlServerLicenseName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerLicenseName == "" {
		return nil, errors.New("parameter sqlServerLicenseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerLicenseName}", url.PathEscape(sqlServerLicenseName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SQLServerLicensesClient) getHandleResponse(resp *http.Response) (SQLServerLicensesClientGetResponse, error) {
	result := SQLServerLicensesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerLicense); err != nil {
		return SQLServerLicensesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List sqlServerLicense resources in the subscription
//
// Generated from API version 2024-05-01-preview
//   - options - SQLServerLicensesClientListOptions contains the optional parameters for the SQLServerLicensesClient.NewListPager
//     method.
func (client *SQLServerLicensesClient) NewListPager(options *SQLServerLicensesClientListOptions) *runtime.Pager[SQLServerLicensesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SQLServerLicensesClientListResponse]{
		More: func(page SQLServerLicensesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SQLServerLicensesClientListResponse) (SQLServerLicensesClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SQLServerLicensesClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return SQLServerLicensesClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *SQLServerLicensesClient) listCreateRequest(ctx context.Context, options *SQLServerLicensesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/sqlServerLicenses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SQLServerLicensesClient) listHandleResponse(resp *http.Response) (SQLServerLicensesClientListResponse, error) {
	result := SQLServerLicensesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerLicenseListResult); err != nil {
		return SQLServerLicensesClientListResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets all sqlServerLicenses in a resource group.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - options - SQLServerLicensesClientListByResourceGroupOptions contains the optional parameters for the SQLServerLicensesClient.NewListByResourceGroupPager
//     method.
func (client *SQLServerLicensesClient) NewListByResourceGroupPager(resourceGroupName string, options *SQLServerLicensesClientListByResourceGroupOptions) *runtime.Pager[SQLServerLicensesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[SQLServerLicensesClientListByResourceGroupResponse]{
		More: func(page SQLServerLicensesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SQLServerLicensesClientListByResourceGroupResponse) (SQLServerLicensesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SQLServerLicensesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return SQLServerLicensesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *SQLServerLicensesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *SQLServerLicensesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *SQLServerLicensesClient) listByResourceGroupHandleResponse(resp *http.Response) (SQLServerLicensesClientListByResourceGroupResponse, error) {
	result := SQLServerLicensesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerLicenseListResult); err != nil {
		return SQLServerLicensesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// Update - Updates a SQL Server license resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerLicenseName - Name of SQL Server License
//   - parameters - The SQL Server license.
//   - options - SQLServerLicensesClientUpdateOptions contains the optional parameters for the SQLServerLicensesClient.Update
//     method.
func (client *SQLServerLicensesClient) Update(ctx context.Context, resourceGroupName string, sqlServerLicenseName string, parameters SQLServerLicenseUpdate, options *SQLServerLicensesClientUpdateOptions) (SQLServerLicensesClientUpdateResponse, error) {
	var err error
	const operationName = "SQLServerLicensesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, sqlServerLicenseName, parameters, options)
	if err != nil {
		return SQLServerLicensesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerLicensesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerLicensesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *SQLServerLicensesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, sqlServerLicenseName string, parameters SQLServerLicenseUpdate, options *SQLServerLicensesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses/{sqlServerLicenseName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerLicenseName == "" {
		return nil, errors.New("parameter sqlServerLicenseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerLicenseName}", url.PathEscape(sqlServerLicenseName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *SQLServerLicensesClient) updateHandleResponse(resp *http.Response) (SQLServerLicensesClientUpdateResponse, error) {
	result := SQLServerLicensesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerLicense); err != nil {
		return SQLServerLicensesClientUpdateResponse{}, err
	}
	return result, nil
}
