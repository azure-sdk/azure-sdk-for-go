//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgezones

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureExtendedZonesClient contains the methods for the AzureExtendedZones group.
// Don't use this type directly, use NewAzureExtendedZonesClient() instead.
type AzureExtendedZonesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAzureExtendedZonesClient creates a new instance of AzureExtendedZonesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureExtendedZonesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureExtendedZonesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureExtendedZonesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get an Azure Extended Zone for a subscription
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-04-01-preview
//   - azureExtendedZoneName - The name of the AzureExtendedZone
//   - options - AzureExtendedZonesClientGetOptions contains the optional parameters for the AzureExtendedZonesClient.Get method.
func (client *AzureExtendedZonesClient) Get(ctx context.Context, azureExtendedZoneName string, options *AzureExtendedZonesClientGetOptions) (AzureExtendedZonesClientGetResponse, error) {
	var err error
	const operationName = "AzureExtendedZonesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, azureExtendedZoneName, options)
	if err != nil {
		return AzureExtendedZonesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureExtendedZonesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureExtendedZonesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzureExtendedZonesClient) getCreateRequest(ctx context.Context, azureExtendedZoneName string, options *AzureExtendedZonesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeZones/azureExtendedZones/{azureExtendedZoneName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if azureExtendedZoneName == "" {
		return nil, errors.New("parameter azureExtendedZoneName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureExtendedZoneName}", url.PathEscape(azureExtendedZoneName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureExtendedZonesClient) getHandleResponse(resp *http.Response) (AzureExtendedZonesClientGetResponse, error) {
	result := AzureExtendedZonesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureExtendedZone); err != nil {
		return AzureExtendedZonesClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Lists the Azure Extended Zones for a subscription
//
// Generated from API version 2024-04-01-preview
//   - options - AzureExtendedZonesClientListBySubscriptionOptions contains the optional parameters for the AzureExtendedZonesClient.NewListBySubscriptionPager
//     method.
func (client *AzureExtendedZonesClient) NewListBySubscriptionPager(options *AzureExtendedZonesClientListBySubscriptionOptions) *runtime.Pager[AzureExtendedZonesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureExtendedZonesClientListBySubscriptionResponse]{
		More: func(page AzureExtendedZonesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureExtendedZonesClientListBySubscriptionResponse) (AzureExtendedZonesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureExtendedZonesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return AzureExtendedZonesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AzureExtendedZonesClient) listBySubscriptionCreateRequest(ctx context.Context, options *AzureExtendedZonesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeZones/azureExtendedZones"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AzureExtendedZonesClient) listBySubscriptionHandleResponse(resp *http.Response) (AzureExtendedZonesClientListBySubscriptionResponse, error) {
	result := AzureExtendedZonesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureExtendedZoneListResult); err != nil {
		return AzureExtendedZonesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Register - Registers a subscription for an Azure Extended Zone
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-04-01-preview
//   - azureExtendedZoneName - The name of the AzureExtendedZone
//   - options - AzureExtendedZonesClientRegisterOptions contains the optional parameters for the AzureExtendedZonesClient.Register
//     method.
func (client *AzureExtendedZonesClient) Register(ctx context.Context, azureExtendedZoneName string, options *AzureExtendedZonesClientRegisterOptions) (AzureExtendedZonesClientRegisterResponse, error) {
	var err error
	const operationName = "AzureExtendedZonesClient.Register"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.registerCreateRequest(ctx, azureExtendedZoneName, options)
	if err != nil {
		return AzureExtendedZonesClientRegisterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureExtendedZonesClientRegisterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureExtendedZonesClientRegisterResponse{}, err
	}
	resp, err := client.registerHandleResponse(httpResp)
	return resp, err
}

// registerCreateRequest creates the Register request.
func (client *AzureExtendedZonesClient) registerCreateRequest(ctx context.Context, azureExtendedZoneName string, options *AzureExtendedZonesClientRegisterOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeZones/azureExtendedZones/{azureExtendedZoneName}/register"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if azureExtendedZoneName == "" {
		return nil, errors.New("parameter azureExtendedZoneName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureExtendedZoneName}", url.PathEscape(azureExtendedZoneName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// registerHandleResponse handles the Register response.
func (client *AzureExtendedZonesClient) registerHandleResponse(resp *http.Response) (AzureExtendedZonesClientRegisterResponse, error) {
	result := AzureExtendedZonesClientRegisterResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureExtendedZone); err != nil {
		return AzureExtendedZonesClientRegisterResponse{}, err
	}
	return result, nil
}

// Unregister - Unregisters a subscription for an Azure Extended Zone
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-04-01-preview
//   - azureExtendedZoneName - The name of the AzureExtendedZone
//   - options - AzureExtendedZonesClientUnregisterOptions contains the optional parameters for the AzureExtendedZonesClient.Unregister
//     method.
func (client *AzureExtendedZonesClient) Unregister(ctx context.Context, azureExtendedZoneName string, options *AzureExtendedZonesClientUnregisterOptions) (AzureExtendedZonesClientUnregisterResponse, error) {
	var err error
	const operationName = "AzureExtendedZonesClient.Unregister"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unregisterCreateRequest(ctx, azureExtendedZoneName, options)
	if err != nil {
		return AzureExtendedZonesClientUnregisterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureExtendedZonesClientUnregisterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureExtendedZonesClientUnregisterResponse{}, err
	}
	resp, err := client.unregisterHandleResponse(httpResp)
	return resp, err
}

// unregisterCreateRequest creates the Unregister request.
func (client *AzureExtendedZonesClient) unregisterCreateRequest(ctx context.Context, azureExtendedZoneName string, options *AzureExtendedZonesClientUnregisterOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeZones/azureExtendedZones/{azureExtendedZoneName}/unregister"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if azureExtendedZoneName == "" {
		return nil, errors.New("parameter azureExtendedZoneName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureExtendedZoneName}", url.PathEscape(azureExtendedZoneName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// unregisterHandleResponse handles the Unregister response.
func (client *AzureExtendedZonesClient) unregisterHandleResponse(resp *http.Response) (AzureExtendedZonesClientUnregisterResponse, error) {
	result := AzureExtendedZonesClientUnregisterResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureExtendedZone); err != nil {
		return AzureExtendedZonesClientUnregisterResponse{}, err
	}
	return result, nil
}
