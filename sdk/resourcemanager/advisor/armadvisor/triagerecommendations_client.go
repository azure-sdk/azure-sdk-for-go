// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armadvisor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// TriageRecommendationsClient contains the methods for the TriageRecommendations group.
// Don't use this type directly, use NewTriageRecommendationsClient() instead.
type TriageRecommendationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewTriageRecommendationsClient creates a new instance of TriageRecommendationsClient with the specified values.
//   - subscriptionID - The Azure subscription ID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewTriageRecommendationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*TriageRecommendationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &TriageRecommendationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// ApproveTriageRecommendation - Approve a triage recommendation for a given id.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-18-preview
//   - reviewID - Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - recommendationID - Existing triage recommendation id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - options - TriageRecommendationsClientApproveTriageRecommendationOptions contains the optional parameters for the TriageRecommendationsClient.ApproveTriageRecommendation
//     method.
func (client *TriageRecommendationsClient) ApproveTriageRecommendation(ctx context.Context, reviewID string, recommendationID string, options *TriageRecommendationsClientApproveTriageRecommendationOptions) (TriageRecommendationsClientApproveTriageRecommendationResponse, error) {
	var err error
	const operationName = "TriageRecommendationsClient.ApproveTriageRecommendation"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.approveTriageRecommendationCreateRequest(ctx, reviewID, recommendationID, options)
	if err != nil {
		return TriageRecommendationsClientApproveTriageRecommendationResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TriageRecommendationsClientApproveTriageRecommendationResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TriageRecommendationsClientApproveTriageRecommendationResponse{}, err
	}
	return TriageRecommendationsClientApproveTriageRecommendationResponse{}, nil
}

// approveTriageRecommendationCreateRequest creates the ApproveTriageRecommendation request.
func (client *TriageRecommendationsClient) approveTriageRecommendationCreateRequest(ctx context.Context, reviewID string, recommendationID string, _ *TriageRecommendationsClientApproveTriageRecommendationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/approve"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if reviewID == "" {
		return nil, errors.New("parameter reviewID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reviewId}", url.PathEscape(reviewID))
	if recommendationID == "" {
		return nil, errors.New("parameter recommendationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recommendationId}", url.PathEscape(recommendationID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-18-preview
//   - reviewID - Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - recommendationID - Existing triage recommendation id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - options - TriageRecommendationsClientGetOptions contains the optional parameters for the TriageRecommendationsClient.Get
//     method.
func (client *TriageRecommendationsClient) Get(ctx context.Context, reviewID string, recommendationID string, options *TriageRecommendationsClientGetOptions) (TriageRecommendationsClientGetResponse, error) {
	var err error
	const operationName = "TriageRecommendationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, reviewID, recommendationID, options)
	if err != nil {
		return TriageRecommendationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TriageRecommendationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TriageRecommendationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *TriageRecommendationsClient) getCreateRequest(ctx context.Context, reviewID string, recommendationID string, _ *TriageRecommendationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if reviewID == "" {
		return nil, errors.New("parameter reviewID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reviewId}", url.PathEscape(reviewID))
	if recommendationID == "" {
		return nil, errors.New("parameter recommendationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recommendationId}", url.PathEscape(recommendationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *TriageRecommendationsClient) getHandleResponse(resp *http.Response) (TriageRecommendationsClientGetResponse, error) {
	result := TriageRecommendationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TriageRecommendation); err != nil {
		return TriageRecommendationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
//
// Generated from API version 2024-11-18-preview
//   - reviewID - Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - options - TriageRecommendationsClientListOptions contains the optional parameters for the TriageRecommendationsClient.NewListPager
//     method.
func (client *TriageRecommendationsClient) NewListPager(reviewID string, options *TriageRecommendationsClientListOptions) *runtime.Pager[TriageRecommendationsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[TriageRecommendationsClientListResponse]{
		More: func(page TriageRecommendationsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *TriageRecommendationsClientListResponse) (TriageRecommendationsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "TriageRecommendationsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, reviewID, options)
			}, nil)
			if err != nil {
				return TriageRecommendationsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *TriageRecommendationsClient) listCreateRequest(ctx context.Context, reviewID string, options *TriageRecommendationsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if reviewID == "" {
		return nil, errors.New("parameter reviewID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reviewId}", url.PathEscape(reviewID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-11-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *TriageRecommendationsClient) listHandleResponse(resp *http.Response) (TriageRecommendationsClientListResponse, error) {
	result := TriageRecommendationsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TriageRecommendationCollection); err != nil {
		return TriageRecommendationsClientListResponse{}, err
	}
	return result, nil
}

// RejectTriageRecommendation - Reject an existing triage recommendation for a given id.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-18-preview
//   - reviewID - Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - recommendationID - Existing triage recommendation id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - recommendationRejectBody - JSON object that contains reason for rejecting triage recommendation.
//   - options - TriageRecommendationsClientRejectTriageRecommendationOptions contains the optional parameters for the TriageRecommendationsClient.RejectTriageRecommendation
//     method.
func (client *TriageRecommendationsClient) RejectTriageRecommendation(ctx context.Context, reviewID string, recommendationID string, recommendationRejectBody RecommendationRejectBody, options *TriageRecommendationsClientRejectTriageRecommendationOptions) (TriageRecommendationsClientRejectTriageRecommendationResponse, error) {
	var err error
	const operationName = "TriageRecommendationsClient.RejectTriageRecommendation"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.rejectTriageRecommendationCreateRequest(ctx, reviewID, recommendationID, recommendationRejectBody, options)
	if err != nil {
		return TriageRecommendationsClientRejectTriageRecommendationResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TriageRecommendationsClientRejectTriageRecommendationResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TriageRecommendationsClientRejectTriageRecommendationResponse{}, err
	}
	return TriageRecommendationsClientRejectTriageRecommendationResponse{}, nil
}

// rejectTriageRecommendationCreateRequest creates the RejectTriageRecommendation request.
func (client *TriageRecommendationsClient) rejectTriageRecommendationCreateRequest(ctx context.Context, reviewID string, recommendationID string, recommendationRejectBody RecommendationRejectBody, _ *TriageRecommendationsClientRejectTriageRecommendationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/reject"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if reviewID == "" {
		return nil, errors.New("parameter reviewID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reviewId}", url.PathEscape(reviewID))
	if recommendationID == "" {
		return nil, errors.New("parameter recommendationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recommendationId}", url.PathEscape(recommendationID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, recommendationRejectBody); err != nil {
		return nil, err
	}
	return req, nil
}

// ResetTriageRecommendation - Reset an existing triage recommendation for a given id.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-18-preview
//   - reviewID - Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - recommendationID - Existing triage recommendation id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - options - TriageRecommendationsClientResetTriageRecommendationOptions contains the optional parameters for the TriageRecommendationsClient.ResetTriageRecommendation
//     method.
func (client *TriageRecommendationsClient) ResetTriageRecommendation(ctx context.Context, reviewID string, recommendationID string, options *TriageRecommendationsClientResetTriageRecommendationOptions) (TriageRecommendationsClientResetTriageRecommendationResponse, error) {
	var err error
	const operationName = "TriageRecommendationsClient.ResetTriageRecommendation"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.resetTriageRecommendationCreateRequest(ctx, reviewID, recommendationID, options)
	if err != nil {
		return TriageRecommendationsClientResetTriageRecommendationResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TriageRecommendationsClientResetTriageRecommendationResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TriageRecommendationsClientResetTriageRecommendationResponse{}, err
	}
	return TriageRecommendationsClientResetTriageRecommendationResponse{}, nil
}

// resetTriageRecommendationCreateRequest creates the ResetTriageRecommendation request.
func (client *TriageRecommendationsClient) resetTriageRecommendationCreateRequest(ctx context.Context, reviewID string, recommendationID string, _ *TriageRecommendationsClientResetTriageRecommendationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/reset"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if reviewID == "" {
		return nil, errors.New("parameter reviewID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reviewId}", url.PathEscape(reviewID))
	if recommendationID == "" {
		return nil, errors.New("parameter recommendationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recommendationId}", url.PathEscape(recommendationID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
