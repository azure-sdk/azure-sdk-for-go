//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DataScannersClient contains the methods for the DataScanners group.
// Don't use this type directly, use NewDataScannersClient() instead.
type DataScannersClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDataScannersClient creates a new instance of DataScannersClient with the specified values.
//   - subscriptionID - Azure subscription ID
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDataScannersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DataScannersClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DataScannersClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a security data scanner
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - dataScannerName - Name of the data scanner.
//   - options - DataScannersClientCreateOrUpdateOptions contains the optional parameters for the DataScannersClient.CreateOrUpdate
//     method.
func (client *DataScannersClient) CreateOrUpdate(ctx context.Context, dataScannerName string, options *DataScannersClientCreateOrUpdateOptions) (DataScannersClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "DataScannersClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, dataScannerName, options)
	if err != nil {
		return DataScannersClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataScannersClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return DataScannersClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DataScannersClient) createOrUpdateCreateRequest(ctx context.Context, dataScannerName string, options *DataScannersClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/dataScanners/{dataScannerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if dataScannerName == "" {
		return nil, errors.New("parameter dataScannerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataScannerName}", url.PathEscape(dataScannerName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *DataScannersClient) createOrUpdateHandleResponse(resp *http.Response) (DataScannersClientCreateOrUpdateResponse, error) {
	result := DataScannersClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataScanner); err != nil {
		return DataScannersClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a security data scanners.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - dataScannerName - Security data scanner name
//   - options - DataScannersClientDeleteOptions contains the optional parameters for the DataScannersClient.Delete method.
func (client *DataScannersClient) Delete(ctx context.Context, dataScannerName string, options *DataScannersClientDeleteOptions) (DataScannersClientDeleteResponse, error) {
	var err error
	const operationName = "DataScannersClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, dataScannerName, options)
	if err != nil {
		return DataScannersClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataScannersClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DataScannersClientDeleteResponse{}, err
	}
	return DataScannersClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DataScannersClient) deleteCreateRequest(ctx context.Context, dataScannerName string, options *DataScannersClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/dataScanners/{dataScannerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if dataScannerName == "" {
		return nil, errors.New("parameter dataScannerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataScannerName}", url.PathEscape(dataScannerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a specific security data scanner for the requested scope
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - dataScannerName - Security data scanner name
//   - options - DataScannersClientGetOptions contains the optional parameters for the DataScannersClient.Get method.
func (client *DataScannersClient) Get(ctx context.Context, dataScannerName string, options *DataScannersClientGetOptions) (DataScannersClientGetResponse, error) {
	var err error
	const operationName = "DataScannersClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, dataScannerName, options)
	if err != nil {
		return DataScannersClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataScannersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataScannersClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DataScannersClient) getCreateRequest(ctx context.Context, dataScannerName string, options *DataScannersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/dataScanners/{dataScannerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if dataScannerName == "" {
		return nil, errors.New("parameter dataScannerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataScannerName}", url.PathEscape(dataScannerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DataScannersClient) getHandleResponse(resp *http.Response) (DataScannersClientGetResponse, error) {
	result := DataScannersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataScanner); err != nil {
		return DataScannersClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get a list of all relevant security data scanners over a subscription level scope.
//
// Generated from API version 2024-01-01-preview
//   - options - DataScannersClientListBySubscriptionOptions contains the optional parameters for the DataScannersClient.NewListBySubscriptionPager
//     method.
func (client *DataScannersClient) NewListBySubscriptionPager(options *DataScannersClientListBySubscriptionOptions) *runtime.Pager[DataScannersClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[DataScannersClientListBySubscriptionResponse]{
		More: func(page DataScannersClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DataScannersClientListBySubscriptionResponse) (DataScannersClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataScannersClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return DataScannersClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *DataScannersClient) listBySubscriptionCreateRequest(ctx context.Context, options *DataScannersClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/dataScanners"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *DataScannersClient) listBySubscriptionHandleResponse(resp *http.Response) (DataScannersClientListBySubscriptionResponse, error) {
	result := DataScannersClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataScannersList); err != nil {
		return DataScannersClientListBySubscriptionResponse{}, err
	}
	return result, nil
}
