// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azuredatatransfer/armazuredatatransfer"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// PipelinesServer is a fake server for instances of the armazuredatatransfer.PipelinesClient type.
type PipelinesServer struct {
	// BeginApproveConnection is the fake for method PipelinesClient.BeginApproveConnection
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginApproveConnection func(ctx context.Context, resourceGroupName string, pipelineName string, body armazuredatatransfer.ResourceBody, options *armazuredatatransfer.PipelinesClientBeginApproveConnectionOptions) (resp azfake.PollerResponder[armazuredatatransfer.PipelinesClientApproveConnectionResponse], errResp azfake.ErrorResponder)

	// BeginCreateOrUpdate is the fake for method PipelinesClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, pipelineName string, resource armazuredatatransfer.Pipeline, options *armazuredatatransfer.PipelinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armazuredatatransfer.PipelinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method PipelinesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, pipelineName string, options *armazuredatatransfer.PipelinesClientBeginDeleteOptions) (resp azfake.PollerResponder[armazuredatatransfer.PipelinesClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginExecuteAction is the fake for method PipelinesClient.BeginExecuteAction
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginExecuteAction func(ctx context.Context, resourceGroupName string, pipelineName string, body armazuredatatransfer.Action, options *armazuredatatransfer.PipelinesClientBeginExecuteActionOptions) (resp azfake.PollerResponder[armazuredatatransfer.PipelinesClientExecuteActionResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method PipelinesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, pipelineName string, options *armazuredatatransfer.PipelinesClientGetOptions) (resp azfake.Responder[armazuredatatransfer.PipelinesClientGetResponse], errResp azfake.ErrorResponder)

	// List is the fake for method PipelinesClient.List
	// HTTP status codes to indicate success: http.StatusOK
	List func(ctx context.Context, resourceGroupName string, pipelineName string, options *armazuredatatransfer.PipelinesClientListOptions) (resp azfake.Responder[armazuredatatransfer.PipelinesClientListResponse], errResp azfake.ErrorResponder)

	// NewListByResourceGroupPager is the fake for method PipelinesClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armazuredatatransfer.PipelinesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armazuredatatransfer.PipelinesClientListByResourceGroupResponse])

	// NewListBySubscriptionPager is the fake for method PipelinesClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armazuredatatransfer.PipelinesClientListBySubscriptionOptions) (resp azfake.PagerResponder[armazuredatatransfer.PipelinesClientListBySubscriptionResponse])

	// ListSchemasList is the fake for method PipelinesClient.ListSchemasList
	// HTTP status codes to indicate success: http.StatusOK
	ListSchemasList func(ctx context.Context, resourceGroupName string, pipelineName string, body armazuredatatransfer.Schema, options *armazuredatatransfer.PipelinesClientListSchemasListOptions) (resp azfake.Responder[armazuredatatransfer.PipelinesClientListSchemasListResponse], errResp azfake.ErrorResponder)

	// BeginRejectConnection is the fake for method PipelinesClient.BeginRejectConnection
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginRejectConnection func(ctx context.Context, resourceGroupName string, pipelineName string, body armazuredatatransfer.ResourceBody, options *armazuredatatransfer.PipelinesClientBeginRejectConnectionOptions) (resp azfake.PollerResponder[armazuredatatransfer.PipelinesClientRejectConnectionResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method PipelinesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, pipelineName string, properties armazuredatatransfer.PipelinesPatch, options *armazuredatatransfer.PipelinesClientBeginUpdateOptions) (resp azfake.PollerResponder[armazuredatatransfer.PipelinesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewPipelinesServerTransport creates a new instance of PipelinesServerTransport with the provided implementation.
// The returned PipelinesServerTransport instance is connected to an instance of armazuredatatransfer.PipelinesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPipelinesServerTransport(srv *PipelinesServer) *PipelinesServerTransport {
	return &PipelinesServerTransport{
		srv:                         srv,
		beginApproveConnection:      newTracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientApproveConnectionResponse]](),
		beginCreateOrUpdate:         newTracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientCreateOrUpdateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientDeleteResponse]](),
		beginExecuteAction:          newTracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientExecuteActionResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armazuredatatransfer.PipelinesClientListByResourceGroupResponse]](),
		newListBySubscriptionPager:  newTracker[azfake.PagerResponder[armazuredatatransfer.PipelinesClientListBySubscriptionResponse]](),
		beginRejectConnection:       newTracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientRejectConnectionResponse]](),
		beginUpdate:                 newTracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientUpdateResponse]](),
	}
}

// PipelinesServerTransport connects instances of armazuredatatransfer.PipelinesClient to instances of PipelinesServer.
// Don't use this type directly, use NewPipelinesServerTransport instead.
type PipelinesServerTransport struct {
	srv                         *PipelinesServer
	beginApproveConnection      *tracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientApproveConnectionResponse]]
	beginCreateOrUpdate         *tracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientCreateOrUpdateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientDeleteResponse]]
	beginExecuteAction          *tracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientExecuteActionResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armazuredatatransfer.PipelinesClientListByResourceGroupResponse]]
	newListBySubscriptionPager  *tracker[azfake.PagerResponder[armazuredatatransfer.PipelinesClientListBySubscriptionResponse]]
	beginRejectConnection       *tracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientRejectConnectionResponse]]
	beginUpdate                 *tracker[azfake.PollerResponder[armazuredatatransfer.PipelinesClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for PipelinesServerTransport.
func (p *PipelinesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PipelinesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if pipelinesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = pipelinesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PipelinesClient.BeginApproveConnection":
				res.resp, res.err = p.dispatchBeginApproveConnection(req)
			case "PipelinesClient.BeginCreateOrUpdate":
				res.resp, res.err = p.dispatchBeginCreateOrUpdate(req)
			case "PipelinesClient.BeginDelete":
				res.resp, res.err = p.dispatchBeginDelete(req)
			case "PipelinesClient.BeginExecuteAction":
				res.resp, res.err = p.dispatchBeginExecuteAction(req)
			case "PipelinesClient.Get":
				res.resp, res.err = p.dispatchGet(req)
			case "PipelinesClient.List":
				res.resp, res.err = p.dispatchList(req)
			case "PipelinesClient.NewListByResourceGroupPager":
				res.resp, res.err = p.dispatchNewListByResourceGroupPager(req)
			case "PipelinesClient.NewListBySubscriptionPager":
				res.resp, res.err = p.dispatchNewListBySubscriptionPager(req)
			case "PipelinesClient.ListSchemasList":
				res.resp, res.err = p.dispatchListSchemasList(req)
			case "PipelinesClient.BeginRejectConnection":
				res.resp, res.err = p.dispatchBeginRejectConnection(req)
			case "PipelinesClient.BeginUpdate":
				res.resp, res.err = p.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PipelinesServerTransport) dispatchBeginApproveConnection(req *http.Request) (*http.Response, error) {
	if p.srv.BeginApproveConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginApproveConnection not implemented")}
	}
	beginApproveConnection := p.beginApproveConnection.get(req)
	if beginApproveConnection == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/approveConnection`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.ResourceBody](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginApproveConnection(req.Context(), resourceGroupNameParam, pipelineNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginApproveConnection = &respr
		p.beginApproveConnection.add(req, beginApproveConnection)
	}

	resp, err := server.PollerResponderNext(beginApproveConnection, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		p.beginApproveConnection.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginApproveConnection) {
		p.beginApproveConnection.remove(req)
	}

	return resp, nil
}

func (p *PipelinesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if p.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := p.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.Pipeline](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, pipelineNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		p.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		p.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		p.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (p *PipelinesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if p.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := p.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginDelete(req.Context(), resourceGroupNameParam, pipelineNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		p.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		p.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		p.beginDelete.remove(req)
	}

	return resp, nil
}

func (p *PipelinesServerTransport) dispatchBeginExecuteAction(req *http.Request) (*http.Response, error) {
	if p.srv.BeginExecuteAction == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginExecuteAction not implemented")}
	}
	beginExecuteAction := p.beginExecuteAction.get(req)
	if beginExecuteAction == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/executeAction`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.Action](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginExecuteAction(req.Context(), resourceGroupNameParam, pipelineNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginExecuteAction = &respr
		p.beginExecuteAction.add(req, beginExecuteAction)
	}

	resp, err := server.PollerResponderNext(beginExecuteAction, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		p.beginExecuteAction.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginExecuteAction) {
		p.beginExecuteAction.remove(req)
	}

	return resp, nil
}

func (p *PipelinesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), resourceGroupNameParam, pipelineNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Pipeline, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelinesServerTransport) dispatchList(req *http.Request) (*http.Response, error) {
	if p.srv.List == nil {
		return nil, &nonRetriableError{errors.New("fake for method List not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listFlows`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.ConnectionIDList](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
	if err != nil {
		return nil, err
	}
	var options *armazuredatatransfer.PipelinesClientListOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armazuredatatransfer.PipelinesClientListOptions{
			Connections: &body,
		}
	}
	respr, errRespr := p.srv.List(req.Context(), resourceGroupNameParam, pipelineNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ListFlowsByPipelineResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelinesServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := p.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		p.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armazuredatatransfer.PipelinesClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		p.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (p *PipelinesServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := p.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := p.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		p.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armazuredatatransfer.PipelinesClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		p.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (p *PipelinesServerTransport) dispatchListSchemasList(req *http.Request) (*http.Response, error) {
	if p.srv.ListSchemasList == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListSchemasList not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listSchemas`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.Schema](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.ListSchemasList(req.Context(), resourceGroupNameParam, pipelineNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SchemasListResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelinesServerTransport) dispatchBeginRejectConnection(req *http.Request) (*http.Response, error) {
	if p.srv.BeginRejectConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRejectConnection not implemented")}
	}
	beginRejectConnection := p.beginRejectConnection.get(req)
	if beginRejectConnection == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/rejectConnection`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.ResourceBody](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginRejectConnection(req.Context(), resourceGroupNameParam, pipelineNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRejectConnection = &respr
		p.beginRejectConnection.add(req, beginRejectConnection)
	}

	resp, err := server.PollerResponderNext(beginRejectConnection, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		p.beginRejectConnection.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRejectConnection) {
		p.beginRejectConnection.remove(req)
	}

	return resp, nil
}

func (p *PipelinesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if p.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := p.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureDataTransfer/pipelines/(?P<pipelineName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazuredatatransfer.PipelinesPatch](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		pipelineNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginUpdate(req.Context(), resourceGroupNameParam, pipelineNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		p.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		p.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		p.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to PipelinesServerTransport
var pipelinesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
