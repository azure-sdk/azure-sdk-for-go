//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armchaos

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PrivateAccessesClient contains the methods for the PrivateAccesses group.
// Don't use this type directly, use NewPrivateAccessesClient() instead.
type PrivateAccessesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPrivateAccessesClient creates a new instance of PrivateAccessesClient with the specified values.
//   - subscriptionID - GUID that represents an Azure subscription ID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPrivateAccessesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PrivateAccessesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PrivateAccessesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create or update a private access
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - privateAccess - private access resource to be created or updated.
//   - options - PrivateAccessesClientBeginCreateOrUpdateOptions contains the optional parameters for the PrivateAccessesClient.BeginCreateOrUpdate
//     method.
func (client *PrivateAccessesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, privateAccessName string, privateAccess PrivateAccess, options *PrivateAccessesClientBeginCreateOrUpdateOptions) (*runtime.Poller[PrivateAccessesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, privateAccessName, privateAccess, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PrivateAccessesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PrivateAccessesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create or update a private access
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
func (client *PrivateAccessesClient) createOrUpdate(ctx context.Context, resourceGroupName string, privateAccessName string, privateAccess PrivateAccess, options *PrivateAccessesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "PrivateAccessesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, privateAccessName, privateAccess, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PrivateAccessesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, privateAccess PrivateAccess, options *PrivateAccessesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, privateAccess); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a private access
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - options - PrivateAccessesClientBeginDeleteOptions contains the optional parameters for the PrivateAccessesClient.BeginDelete
//     method.
func (client *PrivateAccessesClient) BeginDelete(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientBeginDeleteOptions) (*runtime.Poller[PrivateAccessesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, privateAccessName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PrivateAccessesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PrivateAccessesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a private access
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
func (client *PrivateAccessesClient) deleteOperation(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "PrivateAccessesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, privateAccessName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PrivateAccessesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDeleteAPrivateEndpointConnection - Deletes a private endpoint connection under a private access resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - privateEndpointConnectionName - The name of the private endpoint connection.
//   - options - PrivateAccessesClientBeginDeleteAPrivateEndpointConnectionOptions contains the optional parameters for the PrivateAccessesClient.BeginDeleteAPrivateEndpointConnection
//     method.
func (client *PrivateAccessesClient) BeginDeleteAPrivateEndpointConnection(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (*runtime.Poller[PrivateAccessesClientDeleteAPrivateEndpointConnectionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteAPrivateEndpointConnection(ctx, resourceGroupName, privateAccessName, privateEndpointConnectionName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PrivateAccessesClientDeleteAPrivateEndpointConnectionResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PrivateAccessesClientDeleteAPrivateEndpointConnectionResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DeleteAPrivateEndpointConnection - Deletes a private endpoint connection under a private access resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
func (client *PrivateAccessesClient) deleteAPrivateEndpointConnection(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (*http.Response, error) {
	var err error
	const operationName = "PrivateAccessesClient.BeginDeleteAPrivateEndpointConnection"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteAPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, privateAccessName, privateEndpointConnectionName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteAPrivateEndpointConnectionCreateRequest creates the DeleteAPrivateEndpointConnection request.
func (client *PrivateAccessesClient) deleteAPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections/{privateEndpointConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	if privateEndpointConnectionName == "" {
		return nil, errors.New("parameter privateEndpointConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateEndpointConnectionName}", url.PathEscape(privateEndpointConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a private access resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - options - PrivateAccessesClientGetOptions contains the optional parameters for the PrivateAccessesClient.Get method.
func (client *PrivateAccessesClient) Get(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientGetOptions) (PrivateAccessesClientGetResponse, error) {
	var err error
	const operationName = "PrivateAccessesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, privateAccessName, options)
	if err != nil {
		return PrivateAccessesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateAccessesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateAccessesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PrivateAccessesClient) getCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PrivateAccessesClient) getHandleResponse(resp *http.Response) (PrivateAccessesClientGetResponse, error) {
	result := PrivateAccessesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateAccess); err != nil {
		return PrivateAccessesClientGetResponse{}, err
	}
	return result, nil
}

// GetAPrivateEndpointConnection - Gets information about a private endpoint connection under a private access resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - privateEndpointConnectionName - The name of the private endpoint connection.
//   - options - PrivateAccessesClientGetAPrivateEndpointConnectionOptions contains the optional parameters for the PrivateAccessesClient.GetAPrivateEndpointConnection
//     method.
func (client *PrivateAccessesClient) GetAPrivateEndpointConnection(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientGetAPrivateEndpointConnectionOptions) (PrivateAccessesClientGetAPrivateEndpointConnectionResponse, error) {
	var err error
	const operationName = "PrivateAccessesClient.GetAPrivateEndpointConnection"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, privateAccessName, privateEndpointConnectionName, options)
	if err != nil {
		return PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}, err
	}
	resp, err := client.getAPrivateEndpointConnectionHandleResponse(httpResp)
	return resp, err
}

// getAPrivateEndpointConnectionCreateRequest creates the GetAPrivateEndpointConnection request.
func (client *PrivateAccessesClient) getAPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, privateEndpointConnectionName string, options *PrivateAccessesClientGetAPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections/{privateEndpointConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	if privateEndpointConnectionName == "" {
		return nil, errors.New("parameter privateEndpointConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateEndpointConnectionName}", url.PathEscape(privateEndpointConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAPrivateEndpointConnectionHandleResponse handles the GetAPrivateEndpointConnection response.
func (client *PrivateAccessesClient) getAPrivateEndpointConnectionHandleResponse(resp *http.Response) (PrivateAccessesClientGetAPrivateEndpointConnectionResponse, error) {
	result := PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnection); err != nil {
		return PrivateAccessesClientGetAPrivateEndpointConnectionResponse{}, err
	}
	return result, nil
}

// NewGetPrivateLinkResourcesPager - Gets the private link resources possible under private access resource
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - options - PrivateAccessesClientGetPrivateLinkResourcesOptions contains the optional parameters for the PrivateAccessesClient.NewGetPrivateLinkResourcesPager
//     method.
func (client *PrivateAccessesClient) NewGetPrivateLinkResourcesPager(resourceGroupName string, privateAccessName string, options *PrivateAccessesClientGetPrivateLinkResourcesOptions) *runtime.Pager[PrivateAccessesClientGetPrivateLinkResourcesResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateAccessesClientGetPrivateLinkResourcesResponse]{
		More: func(page PrivateAccessesClientGetPrivateLinkResourcesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateAccessesClientGetPrivateLinkResourcesResponse) (PrivateAccessesClientGetPrivateLinkResourcesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PrivateAccessesClient.NewGetPrivateLinkResourcesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.getPrivateLinkResourcesCreateRequest(ctx, resourceGroupName, privateAccessName, options)
			}, nil)
			if err != nil {
				return PrivateAccessesClientGetPrivateLinkResourcesResponse{}, err
			}
			return client.getPrivateLinkResourcesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// getPrivateLinkResourcesCreateRequest creates the GetPrivateLinkResources request.
func (client *PrivateAccessesClient) getPrivateLinkResourcesCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientGetPrivateLinkResourcesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateLinkResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPrivateLinkResourcesHandleResponse handles the GetPrivateLinkResources response.
func (client *PrivateAccessesClient) getPrivateLinkResourcesHandleResponse(resp *http.Response) (PrivateAccessesClientGetPrivateLinkResourcesResponse, error) {
	result := PrivateAccessesClientGetPrivateLinkResourcesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateLinkResourceListResult); err != nil {
		return PrivateAccessesClientGetPrivateLinkResourcesResponse{}, err
	}
	return result, nil
}

// NewListPager - Get a list of private access resources in a resource group.
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - options - PrivateAccessesClientListOptions contains the optional parameters for the PrivateAccessesClient.NewListPager
//     method.
func (client *PrivateAccessesClient) NewListPager(resourceGroupName string, options *PrivateAccessesClientListOptions) *runtime.Pager[PrivateAccessesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateAccessesClientListResponse]{
		More: func(page PrivateAccessesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateAccessesClientListResponse) (PrivateAccessesClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PrivateAccessesClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return PrivateAccessesClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *PrivateAccessesClient) listCreateRequest(ctx context.Context, resourceGroupName string, options *PrivateAccessesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PrivateAccessesClient) listHandleResponse(resp *http.Response) (PrivateAccessesClientListResponse, error) {
	result := PrivateAccessesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateAccessListResult); err != nil {
		return PrivateAccessesClientListResponse{}, err
	}
	return result, nil
}

// NewListAllPager - Get a list of private access resources in a subscription.
//
// Generated from API version 2024-03-22-preview
//   - options - PrivateAccessesClientListAllOptions contains the optional parameters for the PrivateAccessesClient.NewListAllPager
//     method.
func (client *PrivateAccessesClient) NewListAllPager(options *PrivateAccessesClientListAllOptions) *runtime.Pager[PrivateAccessesClientListAllResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateAccessesClientListAllResponse]{
		More: func(page PrivateAccessesClientListAllResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateAccessesClientListAllResponse) (PrivateAccessesClientListAllResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PrivateAccessesClient.NewListAllPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listAllCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PrivateAccessesClientListAllResponse{}, err
			}
			return client.listAllHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listAllCreateRequest creates the ListAll request.
func (client *PrivateAccessesClient) listAllCreateRequest(ctx context.Context, options *PrivateAccessesClientListAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/privateAccesses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *PrivateAccessesClient) listAllHandleResponse(resp *http.Response) (PrivateAccessesClientListAllResponse, error) {
	result := PrivateAccessesClientListAllResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateAccessListResult); err != nil {
		return PrivateAccessesClientListAllResponse{}, err
	}
	return result, nil
}

// NewListPrivateEndpointConnectionsPager - List information about private endpoint connections under a private access resource
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - options - PrivateAccessesClientListPrivateEndpointConnectionsOptions contains the optional parameters for the PrivateAccessesClient.NewListPrivateEndpointConnectionsPager
//     method.
func (client *PrivateAccessesClient) NewListPrivateEndpointConnectionsPager(resourceGroupName string, privateAccessName string, options *PrivateAccessesClientListPrivateEndpointConnectionsOptions) *runtime.Pager[PrivateAccessesClientListPrivateEndpointConnectionsResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateAccessesClientListPrivateEndpointConnectionsResponse]{
		More: func(page PrivateAccessesClientListPrivateEndpointConnectionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateAccessesClientListPrivateEndpointConnectionsResponse) (PrivateAccessesClientListPrivateEndpointConnectionsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PrivateAccessesClient.NewListPrivateEndpointConnectionsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listPrivateEndpointConnectionsCreateRequest(ctx, resourceGroupName, privateAccessName, options)
			}, nil)
			if err != nil {
				return PrivateAccessesClientListPrivateEndpointConnectionsResponse{}, err
			}
			return client.listPrivateEndpointConnectionsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listPrivateEndpointConnectionsCreateRequest creates the ListPrivateEndpointConnections request.
func (client *PrivateAccessesClient) listPrivateEndpointConnectionsCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, options *PrivateAccessesClientListPrivateEndpointConnectionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listPrivateEndpointConnectionsHandleResponse handles the ListPrivateEndpointConnections response.
func (client *PrivateAccessesClient) listPrivateEndpointConnectionsHandleResponse(resp *http.Response) (PrivateAccessesClientListPrivateEndpointConnectionsResponse, error) {
	result := PrivateAccessesClientListPrivateEndpointConnectionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnectionListResult); err != nil {
		return PrivateAccessesClientListPrivateEndpointConnectionsResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Patch a private access tags
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
//   - resourceGroupName - String that represents an Azure resource group.
//   - privateAccessName - The name of the private access resource that is being created. Supported characters for the name are
//     a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
//   - privateAccessPatch - private access resource's tags to be updated.
//   - options - PrivateAccessesClientBeginUpdateOptions contains the optional parameters for the PrivateAccessesClient.BeginUpdate
//     method.
func (client *PrivateAccessesClient) BeginUpdate(ctx context.Context, resourceGroupName string, privateAccessName string, privateAccessPatch PrivateAccessPatch, options *PrivateAccessesClientBeginUpdateOptions) (*runtime.Poller[PrivateAccessesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, privateAccessName, privateAccessPatch, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PrivateAccessesClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PrivateAccessesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Patch a private access tags
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-22-preview
func (client *PrivateAccessesClient) update(ctx context.Context, resourceGroupName string, privateAccessName string, privateAccessPatch PrivateAccessPatch, options *PrivateAccessesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "PrivateAccessesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, privateAccessName, privateAccessPatch, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *PrivateAccessesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, privateAccessName string, privateAccessPatch PrivateAccessPatch, options *PrivateAccessesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateAccessName == "" {
		return nil, errors.New("parameter privateAccessName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateAccessName}", url.PathEscape(privateAccessName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-22-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, privateAccessPatch); err != nil {
		return nil, err
	}
	return req, nil
}
