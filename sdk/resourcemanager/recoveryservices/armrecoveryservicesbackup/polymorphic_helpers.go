//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicesbackup

import "encoding/json"

func unmarshalCrrAccessTokenClassification(rawMsg json.RawMessage) (CrrAccessTokenClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b CrrAccessTokenClassification
	switch m["objectType"] {
	case "WorkloadCrrAccessToken":
		b = &WorkloadCrrAccessToken{}
	default:
		b = &CrrAccessToken{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalJobClassification(rawMsg json.RawMessage) (JobClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b JobClassification
	switch m["jobType"] {
	case "AzureIaaSVMJob":
		b = &AzureIaaSVMJob{}
	case "AzureStorageJob":
		b = &AzureStorageJob{}
	case "AzureWorkloadJob":
		b = &AzureWorkloadJob{}
	case "DpmJob":
		b = &DpmJob{}
	case "MabJob":
		b = &MabJob{}
	default:
		b = &Job{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalOperationStatusExtendedInfoClassification(rawMsg json.RawMessage) (OperationStatusExtendedInfoClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b OperationStatusExtendedInfoClassification
	switch m["objectType"] {
	case "OperationStatusJobExtendedInfo":
		b = &OperationStatusJobExtendedInfo{}
	case "OperationStatusJobsExtendedInfo":
		b = &OperationStatusJobsExtendedInfo{}
	case "OperationStatusProvisionILRExtendedInfo":
		b = &OperationStatusProvisionILRExtendedInfo{}
	case "OperationStatusRecoveryPointExtendedInfo":
		b = &OperationStatusRecoveryPointExtendedInfo{}
	default:
		b = &OperationStatusExtendedInfo{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalProtectedItemClassification(rawMsg json.RawMessage) (ProtectedItemClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ProtectedItemClassification
	switch m["protectedItemType"] {
	case "AzureFileShareProtectedItem":
		b = &AzureFileshareProtectedItem{}
	case "AzureIaaSVMProtectedItem":
		b = &AzureIaaSVMProtectedItem{}
	case "AzureVmWorkloadProtectedItem":
		b = &AzureVMWorkloadProtectedItem{}
	case "AzureVmWorkloadSAPAseDatabase":
		b = &AzureVMWorkloadSAPAseDatabaseProtectedItem{}
	case "AzureVmWorkloadSAPHanaDatabase":
		b = &AzureVMWorkloadSAPHanaDatabaseProtectedItem{}
	case "AzureVmWorkloadSQLDatabase":
		b = &AzureVMWorkloadSQLDatabaseProtectedItem{}
	case "DPMProtectedItem":
		b = &DPMProtectedItem{}
	case "GenericProtectedItem":
		b = &GenericProtectedItem{}
	case "MabFileFolderProtectedItem":
		b = &MabFileFolderProtectedItem{}
	case "Microsoft.ClassicCompute/virtualMachines":
		b = &AzureIaaSClassicComputeVMProtectedItem{}
	case "Microsoft.Compute/virtualMachines":
		b = &AzureIaaSComputeVMProtectedItem{}
	case "Microsoft.Sql/servers/databases":
		b = &AzureSQLProtectedItem{}
	default:
		b = &ProtectedItem{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalRecoveryPointClassification(rawMsg json.RawMessage) (RecoveryPointClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RecoveryPointClassification
	switch m["objectType"] {
	case "AzureFileShareRecoveryPoint":
		b = &AzureFileShareRecoveryPoint{}
	case "AzureWorkloadPointInTimeRecoveryPoint":
		b = &AzureWorkloadPointInTimeRecoveryPoint{}
	case "AzureWorkloadRecoveryPoint":
		b = &AzureWorkloadRecoveryPoint{}
	case "AzureWorkloadSAPHanaPointInTimeRecoveryPoint":
		b = &AzureWorkloadSAPHanaPointInTimeRecoveryPoint{}
	case "AzureWorkloadSAPHanaRecoveryPoint":
		b = &AzureWorkloadSAPHanaRecoveryPoint{}
	case "AzureWorkloadSQLPointInTimeRecoveryPoint":
		b = &AzureWorkloadSQLPointInTimeRecoveryPoint{}
	case "AzureWorkloadSQLRecoveryPoint":
		b = &AzureWorkloadSQLRecoveryPoint{}
	case "GenericRecoveryPoint":
		b = &GenericRecoveryPoint{}
	case "IaasVMRecoveryPoint":
		b = &IaasVMRecoveryPoint{}
	default:
		b = &RecoveryPoint{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalRestoreRequestClassification(rawMsg json.RawMessage) (RestoreRequestClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RestoreRequestClassification
	switch m["objectType"] {
	case "AzureFileShareRestoreRequest":
		b = &AzureFileShareRestoreRequest{}
	case "AzureWorkloadPointInTimeRestoreRequest":
		b = &AzureWorkloadPointInTimeRestoreRequest{}
	case "AzureWorkloadRestoreRequest":
		b = &AzureWorkloadRestoreRequest{}
	case "AzureWorkloadSAPHanaPointInTimeRestoreRequest":
		b = &AzureWorkloadSAPHanaPointInTimeRestoreRequest{}
	case "AzureWorkloadSAPHanaRestoreRequest":
		b = &AzureWorkloadSAPHanaRestoreRequest{}
	case "AzureWorkloadSQLPointInTimeRestoreRequest":
		b = &AzureWorkloadSQLPointInTimeRestoreRequest{}
	case "AzureWorkloadSQLRestoreRequest":
		b = &AzureWorkloadSQLRestoreRequest{}
	case "IaasVMRestoreRequest":
		b = &IaasVMRestoreRequest{}
	default:
		b = &RestoreRequest{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
