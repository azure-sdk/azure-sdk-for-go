//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/videoanalyzer/armvideoanalyzer"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// PipelineTopologiesServer is a fake server for instances of the armvideoanalyzer.PipelineTopologiesClient type.
type PipelineTopologiesServer struct {
	// CreateOrUpdate is the fake for method PipelineTopologiesClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, accountName string, pipelineTopologyName string, parameters armvideoanalyzer.PipelineTopology, options *armvideoanalyzer.PipelineTopologiesClientCreateOrUpdateOptions) (resp azfake.Responder[armvideoanalyzer.PipelineTopologiesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method PipelineTopologiesClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, accountName string, pipelineTopologyName string, options *armvideoanalyzer.PipelineTopologiesClientDeleteOptions) (resp azfake.Responder[armvideoanalyzer.PipelineTopologiesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method PipelineTopologiesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, accountName string, pipelineTopologyName string, options *armvideoanalyzer.PipelineTopologiesClientGetOptions) (resp azfake.Responder[armvideoanalyzer.PipelineTopologiesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method PipelineTopologiesClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, accountName string, options *armvideoanalyzer.PipelineTopologiesClientListOptions) (resp azfake.PagerResponder[armvideoanalyzer.PipelineTopologiesClientListResponse])

	// Update is the fake for method PipelineTopologiesClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, accountName string, pipelineTopologyName string, parameters armvideoanalyzer.PipelineTopologyUpdate, options *armvideoanalyzer.PipelineTopologiesClientUpdateOptions) (resp azfake.Responder[armvideoanalyzer.PipelineTopologiesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewPipelineTopologiesServerTransport creates a new instance of PipelineTopologiesServerTransport with the provided implementation.
// The returned PipelineTopologiesServerTransport instance is connected to an instance of armvideoanalyzer.PipelineTopologiesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPipelineTopologiesServerTransport(srv *PipelineTopologiesServer) *PipelineTopologiesServerTransport {
	return &PipelineTopologiesServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armvideoanalyzer.PipelineTopologiesClientListResponse]](),
	}
}

// PipelineTopologiesServerTransport connects instances of armvideoanalyzer.PipelineTopologiesClient to instances of PipelineTopologiesServer.
// Don't use this type directly, use NewPipelineTopologiesServerTransport instead.
type PipelineTopologiesServerTransport struct {
	srv          *PipelineTopologiesServer
	newListPager *tracker[azfake.PagerResponder[armvideoanalyzer.PipelineTopologiesClientListResponse]]
}

// Do implements the policy.Transporter interface for PipelineTopologiesServerTransport.
func (p *PipelineTopologiesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PipelineTopologiesClient.CreateOrUpdate":
		resp, err = p.dispatchCreateOrUpdate(req)
	case "PipelineTopologiesClient.Delete":
		resp, err = p.dispatchDelete(req)
	case "PipelineTopologiesClient.Get":
		resp, err = p.dispatchGet(req)
	case "PipelineTopologiesClient.NewListPager":
		resp, err = p.dispatchNewListPager(req)
	case "PipelineTopologiesClient.Update":
		resp, err = p.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PipelineTopologiesServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if p.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/pipelineTopologies/(?P<pipelineTopologyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armvideoanalyzer.PipelineTopology](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	pipelineTopologyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineTopologyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, accountNameParam, pipelineTopologyNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PipelineTopology, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelineTopologiesServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if p.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/pipelineTopologies/(?P<pipelineTopologyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	pipelineTopologyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineTopologyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Delete(req.Context(), resourceGroupNameParam, accountNameParam, pipelineTopologyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelineTopologiesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/pipelineTopologies/(?P<pipelineTopologyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	pipelineTopologyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineTopologyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), resourceGroupNameParam, accountNameParam, pipelineTopologyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PipelineTopology, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelineTopologiesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := p.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/pipelineTopologies`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		topUnescaped, err := url.QueryUnescape(qp.Get("$top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armvideoanalyzer.PipelineTopologiesClientListOptions
		if filterParam != nil || topParam != nil {
			options = &armvideoanalyzer.PipelineTopologiesClientListOptions{
				Filter: filterParam,
				Top:    topParam,
			}
		}
		resp := p.srv.NewListPager(resourceGroupNameParam, accountNameParam, options)
		newListPager = &resp
		p.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armvideoanalyzer.PipelineTopologiesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		p.newListPager.remove(req)
	}
	return resp, nil
}

func (p *PipelineTopologiesServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if p.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Media/videoAnalyzers/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/pipelineTopologies/(?P<pipelineTopologyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armvideoanalyzer.PipelineTopologyUpdate](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	pipelineTopologyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pipelineTopologyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Update(req.Context(), resourceGroupNameParam, accountNameParam, pipelineTopologyNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PipelineTopology, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
