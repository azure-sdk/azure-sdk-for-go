//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// VMwareOperationsStatusClient contains the methods for the VMwareOperationsStatus group.
// Don't use this type directly, use NewVMwareOperationsStatusClient() instead.
type VMwareOperationsStatusClient struct {
	host string
	pl   runtime.Pipeline
}

// NewVMwareOperationsStatusClient creates a new instance of VMwareOperationsStatusClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewVMwareOperationsStatusClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*VMwareOperationsStatusClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &VMwareOperationsStatusClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// GetOperationStatus - Method to get operation status.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - operationStatusName - Operation status ARM name.
//   - options - VMwareOperationsStatusClientGetOperationStatusOptions contains the optional parameters for the VMwareOperationsStatusClient.GetOperationStatus
//     method.
func (client *VMwareOperationsStatusClient) GetOperationStatus(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, operationStatusName string, options *VMwareOperationsStatusClientGetOperationStatusOptions) (VMwareOperationsStatusClientGetOperationStatusResponse, error) {
	req, err := client.getOperationStatusCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, operationStatusName, options)
	if err != nil {
		return VMwareOperationsStatusClientGetOperationStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return VMwareOperationsStatusClientGetOperationStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return VMwareOperationsStatusClientGetOperationStatusResponse{}, runtime.NewResponseError(resp)
	}
	return client.getOperationStatusHandleResponse(resp)
}

// getOperationStatusCreateRequest creates the GetOperationStatus request.
func (client *VMwareOperationsStatusClient) getOperationStatusCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, operationStatusName string, options *VMwareOperationsStatusClientGetOperationStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/operationsStatus/{operationStatusName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if operationStatusName == "" {
		return nil, errors.New("parameter operationStatusName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationStatusName}", url.PathEscape(operationStatusName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getOperationStatusHandleResponse handles the GetOperationStatus response.
func (client *VMwareOperationsStatusClient) getOperationStatusHandleResponse(resp *http.Response) (VMwareOperationsStatusClientGetOperationStatusResponse, error) {
	result := VMwareOperationsStatusClientGetOperationStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationStatus); err != nil {
		return VMwareOperationsStatusClientGetOperationStatusResponse{}, err
	}
	return result, nil
}
