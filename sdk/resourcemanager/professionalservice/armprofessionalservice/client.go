//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armprofessionalservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// Client contains the methods for the ProfessionalService group.
// Don't use this type directly, use NewClient() instead.
type Client struct {
	host           string
	billingAccount string
	pl             runtime.Pipeline
}

// NewClient creates a new instance of Client with the specified values.
// billingAccount - The billing account id.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewClient(billingAccount string, credential azcore.TokenCredential, options *arm.ClientOptions) (*Client, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &Client{
		billingAccount: billingAccount,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates a ProfessionalService resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2020-05-01
// billingProfile - The biling profile id.
// invoiceSection - The invoice section id.
// resourceName - The name of the resource.
// parameters - Parameters supplied to the create or update ProfessionalService operation.
// options - ClientBeginCreateOrUpdateOptions contains the optional parameters for the Client.BeginCreateOrUpdate method.
func (client *Client) BeginCreateOrUpdate(ctx context.Context, billingProfile string, invoiceSection string, resourceName string, parameters ResourceCreation, options *ClientBeginCreateOrUpdateOptions) (*runtime.Poller[ClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, billingProfile, invoiceSection, resourceName, parameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[ClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[ClientCreateOrUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// CreateOrUpdate - Creates or updates a ProfessionalService resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2020-05-01
func (client *Client) createOrUpdate(ctx context.Context, billingProfile string, invoiceSection string, resourceName string, parameters ResourceCreation, options *ClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, billingProfile, invoiceSection, resourceName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *Client) createOrUpdateCreateRequest(ctx context.Context, billingProfile string, invoiceSection string, resourceName string, parameters ResourceCreation, options *ClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccount}/billingProfiles/{billingProfile}/invoiceSections/{invoiceSection}/providers/Microsoft.ProfessionalService/resources/{resourceName}"
	if client.billingAccount == "" {
		return nil, errors.New("parameter client.billingAccount cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccount}", url.PathEscape(client.billingAccount))
	if billingProfile == "" {
		return nil, errors.New("parameter billingProfile cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfile}", url.PathEscape(billingProfile))
	if invoiceSection == "" {
		return nil, errors.New("parameter invoiceSection cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceSection}", url.PathEscape(invoiceSection))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// BeginDelete - Deletes the specified ProfessionalService.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2020-05-01
// billingProfile - The biling profile id.
// invoiceSection - The invoice section id.
// resourceName - The name of the resource.
// options - ClientBeginDeleteOptions contains the optional parameters for the Client.BeginDelete method.
func (client *Client) BeginDelete(ctx context.Context, billingProfile string, invoiceSection string, resourceName string, options *ClientBeginDeleteOptions) (*runtime.Poller[ClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, billingProfile, invoiceSection, resourceName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[ClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[ClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Deletes the specified ProfessionalService.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2020-05-01
func (client *Client) deleteOperation(ctx context.Context, billingProfile string, invoiceSection string, resourceName string, options *ClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, billingProfile, invoiceSection, resourceName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *Client) deleteCreateRequest(ctx context.Context, billingProfile string, invoiceSection string, resourceName string, options *ClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccount}/billingProfiles/{billingProfile}/invoiceSections/{invoiceSection}/providers/Microsoft.ProfessionalService/resources/{resourceName}"
	if client.billingAccount == "" {
		return nil, errors.New("parameter client.billingAccount cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccount}", url.PathEscape(client.billingAccount))
	if billingProfile == "" {
		return nil, errors.New("parameter billingProfile cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfile}", url.PathEscape(billingProfile))
	if invoiceSection == "" {
		return nil, errors.New("parameter invoiceSection cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceSection}", url.PathEscape(invoiceSection))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets information about the specified Professional Service.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2020-05-01
// billingProfile - The biling profile id.
// invoiceSection - The invoice section id.
// resourceName - The name of the resource.
// options - ClientGetOptions contains the optional parameters for the Client.Get method.
func (client *Client) Get(ctx context.Context, billingProfile string, invoiceSection string, resourceName string, options *ClientGetOptions) (ClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, billingProfile, invoiceSection, resourceName, options)
	if err != nil {
		return ClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *Client) getCreateRequest(ctx context.Context, billingProfile string, invoiceSection string, resourceName string, options *ClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccount}/billingProfiles/{billingProfile}/invoiceSections/{invoiceSection}/providers/Microsoft.ProfessionalService/resources/{resourceName}"
	if client.billingAccount == "" {
		return nil, errors.New("parameter client.billingAccount cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccount}", url.PathEscape(client.billingAccount))
	if billingProfile == "" {
		return nil, errors.New("parameter billingProfile cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfile}", url.PathEscape(billingProfile))
	if invoiceSection == "" {
		return nil, errors.New("parameter invoiceSection cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceSection}", url.PathEscape(invoiceSection))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *Client) getHandleResponse(resp *http.Response) (ClientGetResponse, error) {
	result := ClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Resource); err != nil {
		return ClientGetResponse{}, err
	}
	return result, nil
}
