//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/avs/armavs/v2"
	"net/http"
	"net/url"
	"regexp"
)

// ProvisionedNetworksServer is a fake server for instances of the armavs.ProvisionedNetworksClient type.
type ProvisionedNetworksServer struct {
	// Get is the fake for method ProvisionedNetworksClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, privateCloudName string, provisionedNetworkName string, options *armavs.ProvisionedNetworksClientGetOptions) (resp azfake.Responder[armavs.ProvisionedNetworksClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByPrivateCloudPager is the fake for method ProvisionedNetworksClient.NewListByPrivateCloudPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByPrivateCloudPager func(resourceGroupName string, privateCloudName string, options *armavs.ProvisionedNetworksClientListByPrivateCloudOptions) (resp azfake.PagerResponder[armavs.ProvisionedNetworksClientListByPrivateCloudResponse])
}

// NewProvisionedNetworksServerTransport creates a new instance of ProvisionedNetworksServerTransport with the provided implementation.
// The returned ProvisionedNetworksServerTransport instance is connected to an instance of armavs.ProvisionedNetworksClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProvisionedNetworksServerTransport(srv *ProvisionedNetworksServer) *ProvisionedNetworksServerTransport {
	return &ProvisionedNetworksServerTransport{
		srv:                        srv,
		newListByPrivateCloudPager: newTracker[azfake.PagerResponder[armavs.ProvisionedNetworksClientListByPrivateCloudResponse]](),
	}
}

// ProvisionedNetworksServerTransport connects instances of armavs.ProvisionedNetworksClient to instances of ProvisionedNetworksServer.
// Don't use this type directly, use NewProvisionedNetworksServerTransport instead.
type ProvisionedNetworksServerTransport struct {
	srv                        *ProvisionedNetworksServer
	newListByPrivateCloudPager *tracker[azfake.PagerResponder[armavs.ProvisionedNetworksClientListByPrivateCloudResponse]]
}

// Do implements the policy.Transporter interface for ProvisionedNetworksServerTransport.
func (p *ProvisionedNetworksServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ProvisionedNetworksClient.Get":
		resp, err = p.dispatchGet(req)
	case "ProvisionedNetworksClient.NewListByPrivateCloudPager":
		resp, err = p.dispatchNewListByPrivateCloudPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *ProvisionedNetworksServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/provisionedNetworks/(?P<provisionedNetworkName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
	if err != nil {
		return nil, err
	}
	provisionedNetworkNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisionedNetworkName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), resourceGroupNameParam, privateCloudNameParam, provisionedNetworkNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProvisionedNetwork, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProvisionedNetworksServerTransport) dispatchNewListByPrivateCloudPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListByPrivateCloudPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByPrivateCloudPager not implemented")}
	}
	newListByPrivateCloudPager := p.newListByPrivateCloudPager.get(req)
	if newListByPrivateCloudPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/provisionedNetworks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewListByPrivateCloudPager(resourceGroupNameParam, privateCloudNameParam, nil)
		newListByPrivateCloudPager = &resp
		p.newListByPrivateCloudPager.add(req, newListByPrivateCloudPager)
		server.PagerResponderInjectNextLinks(newListByPrivateCloudPager, req, func(page *armavs.ProvisionedNetworksClientListByPrivateCloudResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByPrivateCloudPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListByPrivateCloudPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByPrivateCloudPager) {
		p.newListByPrivateCloudPager.remove(req)
	}
	return resp, nil
}
