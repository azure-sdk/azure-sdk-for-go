//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armprogrammableconnectivity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// OpenAPIGatewaysClient contains the methods for the OpenAPIGateways group.
// Don't use this type directly, use NewOpenAPIGatewaysClient() instead.
type OpenAPIGatewaysClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewOpenAPIGatewaysClient creates a new instance of OpenAPIGatewaysClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewOpenAPIGatewaysClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*OpenAPIGatewaysClient, error) {
	cl, err := arm.NewClient(moduleName+".OpenAPIGatewaysClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &OpenAPIGatewaysClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a OpenApiGateway
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - APC OpenAPI Gateway Name
//   - resource - Resource create parameters.
//   - options - OpenAPIGatewaysClientBeginCreateOrUpdateOptions contains the optional parameters for the OpenAPIGatewaysClient.BeginCreateOrUpdate
//     method.
func (client *OpenAPIGatewaysClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, name string, resource OpenAPIGateway, options *OpenAPIGatewaysClientBeginCreateOrUpdateOptions) (*runtime.Poller[OpenAPIGatewaysClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, name, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OpenAPIGatewaysClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[OpenAPIGatewaysClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Create a OpenApiGateway
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
func (client *OpenAPIGatewaysClient) createOrUpdate(ctx context.Context, resourceGroupName string, name string, resource OpenAPIGateway, options *OpenAPIGatewaysClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, name, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *OpenAPIGatewaysClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, name string, resource OpenAPIGateway, options *OpenAPIGatewaysClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/openApiGateways/{name}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a OpenApiGateway
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - APC OpenAPI Gateway Name
//   - options - OpenAPIGatewaysClientBeginDeleteOptions contains the optional parameters for the OpenAPIGatewaysClient.BeginDelete
//     method.
func (client *OpenAPIGatewaysClient) BeginDelete(ctx context.Context, resourceGroupName string, name string, options *OpenAPIGatewaysClientBeginDeleteOptions) (*runtime.Poller[OpenAPIGatewaysClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, name, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OpenAPIGatewaysClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[OpenAPIGatewaysClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a OpenApiGateway
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
func (client *OpenAPIGatewaysClient) deleteOperation(ctx context.Context, resourceGroupName string, name string, options *OpenAPIGatewaysClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *OpenAPIGatewaysClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, name string, options *OpenAPIGatewaysClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/openApiGateways/{name}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a OpenApiGateway
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - APC OpenAPI Gateway Name
//   - options - OpenAPIGatewaysClientGetOptions contains the optional parameters for the OpenAPIGatewaysClient.Get method.
func (client *OpenAPIGatewaysClient) Get(ctx context.Context, resourceGroupName string, name string, options *OpenAPIGatewaysClientGetOptions) (OpenAPIGatewaysClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return OpenAPIGatewaysClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OpenAPIGatewaysClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OpenAPIGatewaysClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *OpenAPIGatewaysClient) getCreateRequest(ctx context.Context, resourceGroupName string, name string, options *OpenAPIGatewaysClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/openApiGateways/{name}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *OpenAPIGatewaysClient) getHandleResponse(resp *http.Response) (OpenAPIGatewaysClientGetResponse, error) {
	result := OpenAPIGatewaysClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OpenAPIGateway); err != nil {
		return OpenAPIGatewaysClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List OpenApiGateway resources by resource group
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - OpenAPIGatewaysClientListByResourceGroupOptions contains the optional parameters for the OpenAPIGatewaysClient.NewListByResourceGroupPager
//     method.
func (client *OpenAPIGatewaysClient) NewListByResourceGroupPager(resourceGroupName string, options *OpenAPIGatewaysClientListByResourceGroupOptions) *runtime.Pager[OpenAPIGatewaysClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[OpenAPIGatewaysClientListByResourceGroupResponse]{
		More: func(page OpenAPIGatewaysClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OpenAPIGatewaysClientListByResourceGroupResponse) (OpenAPIGatewaysClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return OpenAPIGatewaysClientListByResourceGroupResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return OpenAPIGatewaysClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return OpenAPIGatewaysClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *OpenAPIGatewaysClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *OpenAPIGatewaysClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/openApiGateways"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *OpenAPIGatewaysClient) listByResourceGroupHandleResponse(resp *http.Response) (OpenAPIGatewaysClientListByResourceGroupResponse, error) {
	result := OpenAPIGatewaysClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OpenAPIGatewayListResult); err != nil {
		return OpenAPIGatewaysClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List OpenApiGateway resources by subscription ID
//
// Generated from API version 2023-11-01-preview
//   - options - OpenAPIGatewaysClientListBySubscriptionOptions contains the optional parameters for the OpenAPIGatewaysClient.NewListBySubscriptionPager
//     method.
func (client *OpenAPIGatewaysClient) NewListBySubscriptionPager(options *OpenAPIGatewaysClientListBySubscriptionOptions) *runtime.Pager[OpenAPIGatewaysClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[OpenAPIGatewaysClientListBySubscriptionResponse]{
		More: func(page OpenAPIGatewaysClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OpenAPIGatewaysClientListBySubscriptionResponse) (OpenAPIGatewaysClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return OpenAPIGatewaysClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return OpenAPIGatewaysClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return OpenAPIGatewaysClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *OpenAPIGatewaysClient) listBySubscriptionCreateRequest(ctx context.Context, options *OpenAPIGatewaysClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/openApiGateways"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *OpenAPIGatewaysClient) listBySubscriptionHandleResponse(resp *http.Response) (OpenAPIGatewaysClientListBySubscriptionResponse, error) {
	result := OpenAPIGatewaysClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OpenAPIGatewayListResult); err != nil {
		return OpenAPIGatewaysClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginResetConnection - A long-running resource action that returns no content. DEPRECATED: Use 'ArmResourceActionNoResponseContentAsync'
// instead
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - APC OpenAPI Gateway Name
//   - body - The content of the action request
//   - options - OpenAPIGatewaysClientBeginResetConnectionOptions contains the optional parameters for the OpenAPIGatewaysClient.BeginResetConnection
//     method.
func (client *OpenAPIGatewaysClient) BeginResetConnection(ctx context.Context, resourceGroupName string, name string, body OpenAPIGateway, options *OpenAPIGatewaysClientBeginResetConnectionOptions) (*runtime.Poller[OpenAPIGatewaysClientResetConnectionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.resetConnection(ctx, resourceGroupName, name, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OpenAPIGatewaysClientResetConnectionResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[OpenAPIGatewaysClientResetConnectionResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// ResetConnection - A long-running resource action that returns no content. DEPRECATED: Use 'ArmResourceActionNoResponseContentAsync'
// instead
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
func (client *OpenAPIGatewaysClient) resetConnection(ctx context.Context, resourceGroupName string, name string, body OpenAPIGateway, options *OpenAPIGatewaysClientBeginResetConnectionOptions) (*http.Response, error) {
	var err error
	req, err := client.resetConnectionCreateRequest(ctx, resourceGroupName, name, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// resetConnectionCreateRequest creates the ResetConnection request.
func (client *OpenAPIGatewaysClient) resetConnectionCreateRequest(ctx context.Context, resourceGroupName string, name string, body OpenAPIGateway, options *OpenAPIGatewaysClientBeginResetConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/openApiGateways/{name}/resetConnection"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdate - Update a OpenApiGateway
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - APC OpenAPI Gateway Name
//   - properties - The resource properties to be updated.
//   - options - OpenAPIGatewaysClientBeginUpdateOptions contains the optional parameters for the OpenAPIGatewaysClient.BeginUpdate
//     method.
func (client *OpenAPIGatewaysClient) BeginUpdate(ctx context.Context, resourceGroupName string, name string, properties OpenAPIGatewayUpdate, options *OpenAPIGatewaysClientBeginUpdateOptions) (*runtime.Poller[OpenAPIGatewaysClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, name, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OpenAPIGatewaysClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[OpenAPIGatewaysClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Update a OpenApiGateway
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
func (client *OpenAPIGatewaysClient) update(ctx context.Context, resourceGroupName string, name string, properties OpenAPIGatewayUpdate, options *OpenAPIGatewaysClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, resourceGroupName, name, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *OpenAPIGatewaysClient) updateCreateRequest(ctx context.Context, resourceGroupName string, name string, properties OpenAPIGatewayUpdate, options *OpenAPIGatewaysClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/openApiGateways/{name}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdateCredentials - A long-running resource action.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - APC OpenAPI Gateway Name
//   - body - The content of the action request
//   - options - OpenAPIGatewaysClientBeginUpdateCredentialsOptions contains the optional parameters for the OpenAPIGatewaysClient.BeginUpdateCredentials
//     method.
func (client *OpenAPIGatewaysClient) BeginUpdateCredentials(ctx context.Context, resourceGroupName string, name string, body AppCredentials, options *OpenAPIGatewaysClientBeginUpdateCredentialsOptions) (*runtime.Poller[OpenAPIGatewaysClientUpdateCredentialsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateCredentials(ctx, resourceGroupName, name, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OpenAPIGatewaysClientUpdateCredentialsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[OpenAPIGatewaysClientUpdateCredentialsResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// UpdateCredentials - A long-running resource action.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
func (client *OpenAPIGatewaysClient) updateCredentials(ctx context.Context, resourceGroupName string, name string, body AppCredentials, options *OpenAPIGatewaysClientBeginUpdateCredentialsOptions) (*http.Response, error) {
	var err error
	req, err := client.updateCredentialsCreateRequest(ctx, resourceGroupName, name, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCredentialsCreateRequest creates the UpdateCredentials request.
func (client *OpenAPIGatewaysClient) updateCredentialsCreateRequest(ctx context.Context, resourceGroupName string, name string, body AppCredentials, options *OpenAPIGatewaysClientBeginUpdateCredentialsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/openApiGateways/{name}/updateCredentials"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
