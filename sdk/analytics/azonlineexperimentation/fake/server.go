// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/analytics/azonlineexperimentation"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"time"
)

// Server is a fake server for instances of the azonlineexperimentation.Client type.
type Server struct {
	// CreateOrUpdateMetric is the fake for method Client.CreateOrUpdateMetric
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdateMetric func(ctx context.Context, experimentMetricID string, resource azonlineexperimentation.ExperimentMetric, options *azonlineexperimentation.CreateOrUpdateMetricOptions) (resp azfake.Responder[azonlineexperimentation.CreateOrUpdateMetricResponse], errResp azfake.ErrorResponder)

	// DeleteMetric is the fake for method Client.DeleteMetric
	// HTTP status codes to indicate success: http.StatusNoContent
	DeleteMetric func(ctx context.Context, experimentMetricID string, options *azonlineexperimentation.DeleteMetricOptions) (resp azfake.Responder[azonlineexperimentation.DeleteMetricResponse], errResp azfake.ErrorResponder)

	// GetMetric is the fake for method Client.GetMetric
	// HTTP status codes to indicate success: http.StatusOK
	GetMetric func(ctx context.Context, experimentMetricID string, options *azonlineexperimentation.GetMetricOptions) (resp azfake.Responder[azonlineexperimentation.GetMetricResponse], errResp azfake.ErrorResponder)

	// NewListMetricsPager is the fake for method Client.NewListMetricsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMetricsPager func(options *azonlineexperimentation.ListMetricsOptions) (resp azfake.PagerResponder[azonlineexperimentation.ListMetricsResponse])

	// ValidateMetric is the fake for method Client.ValidateMetric
	// HTTP status codes to indicate success: http.StatusOK
	ValidateMetric func(ctx context.Context, body azonlineexperimentation.ExperimentMetric, options *azonlineexperimentation.ValidateMetricOptions) (resp azfake.Responder[azonlineexperimentation.ValidateMetricResponse], errResp azfake.ErrorResponder)
}

// NewServerTransport creates a new instance of ServerTransport with the provided implementation.
// The returned ServerTransport instance is connected to an instance of azonlineexperimentation.Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerTransport(srv *Server) *ServerTransport {
	return &ServerTransport{
		srv:                 srv,
		newListMetricsPager: newTracker[azfake.PagerResponder[azonlineexperimentation.ListMetricsResponse]](),
	}
}

// ServerTransport connects instances of azonlineexperimentation.Client to instances of Server.
// Don't use this type directly, use NewServerTransport instead.
type ServerTransport struct {
	srv                 *Server
	newListMetricsPager *tracker[azfake.PagerResponder[azonlineexperimentation.ListMetricsResponse]]
}

// Do implements the policy.Transporter interface for ServerTransport.
func (s *ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *ServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if serverTransportInterceptor != nil {
			res.resp, res.err, intercepted = serverTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "Client.CreateOrUpdateMetric":
				res.resp, res.err = s.dispatchCreateOrUpdateMetric(req)
			case "Client.DeleteMetric":
				res.resp, res.err = s.dispatchDeleteMetric(req)
			case "Client.GetMetric":
				res.resp, res.err = s.dispatchGetMetric(req)
			case "Client.NewListMetricsPager":
				res.resp, res.err = s.dispatchNewListMetricsPager(req)
			case "Client.ValidateMetric":
				res.resp, res.err = s.dispatchValidateMetric(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *ServerTransport) dispatchCreateOrUpdateMetric(req *http.Request) (*http.Response, error) {
	if s.srv.CreateOrUpdateMetric == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdateMetric not implemented")}
	}
	const regexStr = `/experiment-metrics/(?P<experimentMetricId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azonlineexperimentation.ExperimentMetric](req)
	if err != nil {
		return nil, err
	}
	experimentMetricIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("experimentMetricId")])
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	clientRequestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azonlineexperimentation.CreateOrUpdateMetricOptions
	if ifMatchParam != nil || ifNoneMatchParam != nil || ifUnmodifiedSinceParam != nil || ifModifiedSinceParam != nil || clientRequestIDParam != nil {
		options = &azonlineexperimentation.CreateOrUpdateMetricOptions{
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfModifiedSince:   ifModifiedSinceParam,
			ClientRequestID:   clientRequestIDParam,
		}
	}
	respr, errRespr := s.srv.CreateOrUpdateMetric(req.Context(), experimentMetricIDParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExperimentMetric, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).XMSClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	return resp, nil
}

func (s *ServerTransport) dispatchDeleteMetric(req *http.Request) (*http.Response, error) {
	if s.srv.DeleteMetric == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteMetric not implemented")}
	}
	const regexStr = `/experiment-metrics/(?P<experimentMetricId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	experimentMetricIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("experimentMetricId")])
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	clientRequestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azonlineexperimentation.DeleteMetricOptions
	if ifMatchParam != nil || ifNoneMatchParam != nil || ifUnmodifiedSinceParam != nil || ifModifiedSinceParam != nil || clientRequestIDParam != nil {
		options = &azonlineexperimentation.DeleteMetricOptions{
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfModifiedSince:   ifModifiedSinceParam,
			ClientRequestID:   clientRequestIDParam,
		}
	}
	respr, errRespr := s.srv.DeleteMetric(req.Context(), experimentMetricIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).XMSClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	return resp, nil
}

func (s *ServerTransport) dispatchGetMetric(req *http.Request) (*http.Response, error) {
	if s.srv.GetMetric == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMetric not implemented")}
	}
	const regexStr = `/experiment-metrics/(?P<experimentMetricId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	experimentMetricIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("experimentMetricId")])
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	clientRequestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azonlineexperimentation.GetMetricOptions
	if ifMatchParam != nil || ifNoneMatchParam != nil || ifUnmodifiedSinceParam != nil || ifModifiedSinceParam != nil || clientRequestIDParam != nil {
		options = &azonlineexperimentation.GetMetricOptions{
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfModifiedSince:   ifModifiedSinceParam,
			ClientRequestID:   clientRequestIDParam,
		}
	}
	respr, errRespr := s.srv.GetMetric(req.Context(), experimentMetricIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExperimentMetric, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).XMSClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	return resp, nil
}

func (s *ServerTransport) dispatchNewListMetricsPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListMetricsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMetricsPager not implemented")}
	}
	newListMetricsPager := s.newListMetricsPager.get(req)
	if newListMetricsPager == nil {
		qp := req.URL.Query()
		topUnescaped, err := url.QueryUnescape(qp.Get("top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		skipUnescaped, err := url.QueryUnescape(qp.Get("skip"))
		if err != nil {
			return nil, err
		}
		skipParam, err := parseOptional(skipUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		maxpagesizeUnescaped, err := url.QueryUnescape(qp.Get("maxpagesize"))
		if err != nil {
			return nil, err
		}
		maxpagesizeParam, err := parseOptional(maxpagesizeUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		clientRequestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
		var options *azonlineexperimentation.ListMetricsOptions
		if topParam != nil || skipParam != nil || maxpagesizeParam != nil || clientRequestIDParam != nil {
			options = &azonlineexperimentation.ListMetricsOptions{
				Top:             topParam,
				Skip:            skipParam,
				Maxpagesize:     maxpagesizeParam,
				ClientRequestID: clientRequestIDParam,
			}
		}
		resp := s.srv.NewListMetricsPager(options)
		newListMetricsPager = &resp
		s.newListMetricsPager.add(req, newListMetricsPager)
		server.PagerResponderInjectNextLinks(newListMetricsPager, req, func(page *azonlineexperimentation.ListMetricsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListMetricsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListMetricsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMetricsPager) {
		s.newListMetricsPager.remove(req)
	}
	return resp, nil
}

func (s *ServerTransport) dispatchValidateMetric(req *http.Request) (*http.Response, error) {
	if s.srv.ValidateMetric == nil {
		return nil, &nonRetriableError{errors.New("fake for method ValidateMetric not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azonlineexperimentation.ExperimentMetric](req)
	if err != nil {
		return nil, err
	}
	clientRequestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azonlineexperimentation.ValidateMetricOptions
	if clientRequestIDParam != nil {
		options = &azonlineexperimentation.ValidateMetricOptions{
			ClientRequestID: clientRequestIDParam,
		}
	}
	respr, errRespr := s.srv.ValidateMetric(req.Context(), body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExperimentMetricValidationResult, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).XMSClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ServerTransport
var serverTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
