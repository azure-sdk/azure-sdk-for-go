// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armchaos

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ExperimentExecutionsClient contains the methods for the ExperimentExecutions group.
// Don't use this type directly, use NewExperimentExecutionsClient() instead.
type ExperimentExecutionsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewExperimentExecutionsClient creates a new instance of ExperimentExecutionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewExperimentExecutionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ExperimentExecutionsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ExperimentExecutionsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// GetExecution - Get an execution of an Experiment resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - experimentName - String that represents a Experiment resource name.
//   - executionID - GUID that represents a Experiment execution detail.
//   - options - ExperimentExecutionsClientGetExecutionOptions contains the optional parameters for the ExperimentExecutionsClient.GetExecution
//     method.
func (client *ExperimentExecutionsClient) GetExecution(ctx context.Context, resourceGroupName string, experimentName string, executionID string, options *ExperimentExecutionsClientGetExecutionOptions) (ExperimentExecutionsClientGetExecutionResponse, error) {
	var err error
	const operationName = "ExperimentExecutionsClient.GetExecution"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getExecutionCreateRequest(ctx, resourceGroupName, experimentName, executionID, options)
	if err != nil {
		return ExperimentExecutionsClientGetExecutionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExperimentExecutionsClientGetExecutionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExperimentExecutionsClientGetExecutionResponse{}, err
	}
	resp, err := client.getExecutionHandleResponse(httpResp)
	return resp, err
}

// getExecutionCreateRequest creates the GetExecution request.
func (client *ExperimentExecutionsClient) getExecutionCreateRequest(ctx context.Context, resourceGroupName string, experimentName string, executionID string, _ *ExperimentExecutionsClientGetExecutionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions/{executionId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if experimentName == "" {
		return nil, errors.New("parameter experimentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{experimentName}", url.PathEscape(experimentName))
	if executionID == "" {
		return nil, errors.New("parameter executionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{executionId}", url.PathEscape(executionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getExecutionHandleResponse handles the GetExecution response.
func (client *ExperimentExecutionsClient) getExecutionHandleResponse(resp *http.Response) (ExperimentExecutionsClientGetExecutionResponse, error) {
	result := ExperimentExecutionsClientGetExecutionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExperimentExecution); err != nil {
		return ExperimentExecutionsClientGetExecutionResponse{}, err
	}
	return result, nil
}

// GetExecutionDetails - Execution details of an experiment resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - experimentName - String that represents a Experiment resource name.
//   - executionID - GUID that represents a Experiment execution detail.
//   - options - ExperimentExecutionsClientGetExecutionDetailsOptions contains the optional parameters for the ExperimentExecutionsClient.GetExecutionDetails
//     method.
func (client *ExperimentExecutionsClient) GetExecutionDetails(ctx context.Context, resourceGroupName string, experimentName string, executionID string, options *ExperimentExecutionsClientGetExecutionDetailsOptions) (ExperimentExecutionsClientGetExecutionDetailsResponse, error) {
	var err error
	const operationName = "ExperimentExecutionsClient.GetExecutionDetails"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getExecutionDetailsCreateRequest(ctx, resourceGroupName, experimentName, executionID, options)
	if err != nil {
		return ExperimentExecutionsClientGetExecutionDetailsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExperimentExecutionsClientGetExecutionDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExperimentExecutionsClientGetExecutionDetailsResponse{}, err
	}
	resp, err := client.getExecutionDetailsHandleResponse(httpResp)
	return resp, err
}

// getExecutionDetailsCreateRequest creates the GetExecutionDetails request.
func (client *ExperimentExecutionsClient) getExecutionDetailsCreateRequest(ctx context.Context, resourceGroupName string, experimentName string, executionID string, _ *ExperimentExecutionsClientGetExecutionDetailsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions/{executionId}/getExecutionDetails"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if experimentName == "" {
		return nil, errors.New("parameter experimentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{experimentName}", url.PathEscape(experimentName))
	if executionID == "" {
		return nil, errors.New("parameter executionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{executionId}", url.PathEscape(executionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getExecutionDetailsHandleResponse handles the GetExecutionDetails response.
func (client *ExperimentExecutionsClient) getExecutionDetailsHandleResponse(resp *http.Response) (ExperimentExecutionsClientGetExecutionDetailsResponse, error) {
	result := ExperimentExecutionsClientGetExecutionDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExperimentExecutionDetails); err != nil {
		return ExperimentExecutionsClientGetExecutionDetailsResponse{}, err
	}
	return result, nil
}

// NewListAllExecutionsPager - Get a list of executions of an Experiment resource.
//
// Generated from API version 2025-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - experimentName - String that represents a Experiment resource name.
//   - options - ExperimentExecutionsClientListAllExecutionsOptions contains the optional parameters for the ExperimentExecutionsClient.NewListAllExecutionsPager
//     method.
func (client *ExperimentExecutionsClient) NewListAllExecutionsPager(resourceGroupName string, experimentName string, options *ExperimentExecutionsClientListAllExecutionsOptions) *runtime.Pager[ExperimentExecutionsClientListAllExecutionsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ExperimentExecutionsClientListAllExecutionsResponse]{
		More: func(page ExperimentExecutionsClientListAllExecutionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ExperimentExecutionsClientListAllExecutionsResponse) (ExperimentExecutionsClientListAllExecutionsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ExperimentExecutionsClient.NewListAllExecutionsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listAllExecutionsCreateRequest(ctx, resourceGroupName, experimentName, options)
			}, nil)
			if err != nil {
				return ExperimentExecutionsClientListAllExecutionsResponse{}, err
			}
			return client.listAllExecutionsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listAllExecutionsCreateRequest creates the ListAllExecutions request.
func (client *ExperimentExecutionsClient) listAllExecutionsCreateRequest(ctx context.Context, resourceGroupName string, experimentName string, _ *ExperimentExecutionsClientListAllExecutionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if experimentName == "" {
		return nil, errors.New("parameter experimentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{experimentName}", url.PathEscape(experimentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllExecutionsHandleResponse handles the ListAllExecutions response.
func (client *ExperimentExecutionsClient) listAllExecutionsHandleResponse(resp *http.Response) (ExperimentExecutionsClientListAllExecutionsResponse, error) {
	result := ExperimentExecutionsClientListAllExecutionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExperimentExecutionListResult); err != nil {
		return ExperimentExecutionsClientListAllExecutionsResponse{}, err
	}
	return result, nil
}
