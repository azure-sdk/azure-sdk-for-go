// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/ai/azspeechtranscription/azspeechtranscription"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/streaming"
	"io"
	"mime"
	"mime/multipart"
	"net/http"
)

// TranscriptionServer is a fake server for instances of the azspeechtranscription.TranscriptionClient type.
type TranscriptionServer struct {
	// Transcribe is the fake for method TranscriptionClient.Transcribe
	// HTTP status codes to indicate success: http.StatusOK
	Transcribe func(ctx context.Context, body azspeechtranscription.TranscribeRequest, options *azspeechtranscription.TranscriptionClientTranscribeOptions) (resp azfake.Responder[azspeechtranscription.TranscriptionClientTranscribeResponse], errResp azfake.ErrorResponder)
}

// NewTranscriptionServerTransport creates a new instance of TranscriptionServerTransport with the provided implementation.
// The returned TranscriptionServerTransport instance is connected to an instance of azspeechtranscription.TranscriptionClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTranscriptionServerTransport(srv *TranscriptionServer) *TranscriptionServerTransport {
	return &TranscriptionServerTransport{srv: srv}
}

// TranscriptionServerTransport connects instances of azspeechtranscription.TranscriptionClient to instances of TranscriptionServer.
// Don't use this type directly, use NewTranscriptionServerTransport instead.
type TranscriptionServerTransport struct {
	srv *TranscriptionServer
}

// Do implements the policy.Transporter interface for TranscriptionServerTransport.
func (t *TranscriptionServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return t.dispatchToMethodFake(req, method)
}

func (t *TranscriptionServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if transcriptionServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = transcriptionServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "TranscriptionClient.Transcribe":
				res.resp, res.err = t.dispatchTranscribe(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (t *TranscriptionServerTransport) dispatchTranscribe(req *http.Request) (*http.Response, error) {
	if t.srv.Transcribe == nil {
		return nil, &nonRetriableError{errors.New("fake for method Transcribe not implemented")}
	}
	_, params, err := mime.ParseMediaType(req.Header.Get("Content-Type"))
	if err != nil {
		return nil, err
	}
	reader := multipart.NewReader(req.Body, params["boundary"])
	var body azspeechtranscription.TranscribeRequest
	for {
		var part *multipart.Part
		part, err = reader.NextPart()
		if errors.Is(err, io.EOF) {
			break
		} else if err != nil {
			return nil, err
		}
		var content []byte
		switch fn := part.FormName(); fn {
		case "audio":
			content, err = io.ReadAll(part)
			if err != nil {
				return nil, err
			}
			body.Audio.Body = streaming.NopCloser(bytes.NewReader(content))
			body.Audio.ContentType = part.Header.Get("Content-Type")
			body.Audio.Filename = part.FileName()
		case "definition":
			content, err = io.ReadAll(part)
			if err != nil {
				return nil, err
			}
			if err = json.Unmarshal(content, &body.Options); err != nil {
				return nil, err
			}
		default:
			return nil, fmt.Errorf("unexpected part %s", fn)
		}
	}
	respr, errRespr := t.srv.Transcribe(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TranscriptionResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to TranscriptionServerTransport
var transcriptionServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
