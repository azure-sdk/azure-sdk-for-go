// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armadvisor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// TriageResourcesClient contains the methods for the TriageResources group.
// Don't use this type directly, use NewTriageResourcesClient() instead.
type TriageResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewTriageResourcesClient creates a new instance of TriageResourcesClient with the specified values.
//   - subscriptionID - The Azure subscription ID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewTriageResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*TriageResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &TriageResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get a triage resource for a given review and recommendation.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-18-preview
//   - reviewID - Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - recommendationID - Existing triage recommendation id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - recommendationResourceID - Existing recommendation triage resource associated with a triage recommendation. This is a GUID-formatted
//     string (e.g. 00000000-0000-0000-0000-000000000000).
//   - options - TriageResourcesClientGetOptions contains the optional parameters for the TriageResourcesClient.Get method.
func (client *TriageResourcesClient) Get(ctx context.Context, reviewID string, recommendationID string, recommendationResourceID string, options *TriageResourcesClientGetOptions) (TriageResourcesClientGetResponse, error) {
	var err error
	const operationName = "TriageResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, reviewID, recommendationID, recommendationResourceID, options)
	if err != nil {
		return TriageResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TriageResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TriageResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *TriageResourcesClient) getCreateRequest(ctx context.Context, reviewID string, recommendationID string, recommendationResourceID string, _ *TriageResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/providers/Microsoft.Advisor/triageResources/{recommendationResourceId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if reviewID == "" {
		return nil, errors.New("parameter reviewID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reviewId}", url.PathEscape(reviewID))
	if recommendationID == "" {
		return nil, errors.New("parameter recommendationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recommendationId}", url.PathEscape(recommendationID))
	if recommendationResourceID == "" {
		return nil, errors.New("parameter recommendationResourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recommendationResourceId}", url.PathEscape(recommendationResourceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *TriageResourcesClient) getHandleResponse(resp *http.Response) (TriageResourcesClientGetResponse, error) {
	result := TriageResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TriageResource); err != nil {
		return TriageResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List all triage resources that belong to a review and recommendation.
//
// Generated from API version 2024-11-18-preview
//   - reviewID - Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - recommendationID - Existing triage recommendation id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
//   - options - TriageResourcesClientListOptions contains the optional parameters for the TriageResourcesClient.NewListPager
//     method.
func (client *TriageResourcesClient) NewListPager(reviewID string, recommendationID string, options *TriageResourcesClientListOptions) *runtime.Pager[TriageResourcesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[TriageResourcesClientListResponse]{
		More: func(page TriageResourcesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *TriageResourcesClientListResponse) (TriageResourcesClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "TriageResourcesClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, reviewID, recommendationID, options)
			}, nil)
			if err != nil {
				return TriageResourcesClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *TriageResourcesClient) listCreateRequest(ctx context.Context, reviewID string, recommendationID string, _ *TriageResourcesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/providers/Microsoft.Advisor/triageResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if reviewID == "" {
		return nil, errors.New("parameter reviewID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reviewId}", url.PathEscape(reviewID))
	if recommendationID == "" {
		return nil, errors.New("parameter recommendationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recommendationId}", url.PathEscape(recommendationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *TriageResourcesClient) listHandleResponse(resp *http.Response) (TriageResourcesClientListResponse, error) {
	result := TriageResourcesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TriageResourceCollection); err != nil {
		return TriageResourcesClientListResponse{}, err
	}
	return result, nil
}
