//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SitesClient contains the methods for the Sites group.
// Don't use this type directly, use NewSitesClient() instead.
type SitesClient struct {
	host string
	pl   runtime.Pipeline
}

// NewSitesClient creates a new instance of SitesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSitesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SitesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &SitesClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// DeleteSite - Method to delete a site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - SitesClientDeleteSiteOptions contains the optional parameters for the SitesClient.DeleteSite method.
func (client *SitesClient) DeleteSite(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientDeleteSiteOptions) (SitesClientDeleteSiteResponse, error) {
	req, err := client.deleteSiteCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, options)
	if err != nil {
		return SitesClientDeleteSiteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SitesClientDeleteSiteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SitesClientDeleteSiteResponse{}, runtime.NewResponseError(resp)
	}
	return SitesClientDeleteSiteResponse{}, nil
}

// deleteSiteCreateRequest creates the DeleteSite request.
func (client *SitesClient) deleteSiteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientDeleteSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// GetSite - Method to get a site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - SitesClientGetSiteOptions contains the optional parameters for the SitesClient.GetSite method.
func (client *SitesClient) GetSite(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientGetSiteOptions) (SitesClientGetSiteResponse, error) {
	req, err := client.getSiteCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, options)
	if err != nil {
		return SitesClientGetSiteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SitesClientGetSiteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SitesClientGetSiteResponse{}, runtime.NewResponseError(resp)
	}
	return client.getSiteHandleResponse(resp)
}

// getSiteCreateRequest creates the GetSite request.
func (client *SitesClient) getSiteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientGetSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSiteHandleResponse handles the GetSite response.
func (client *SitesClient) getSiteHandleResponse(resp *http.Response) (SitesClientGetSiteResponse, error) {
	result := SitesClientGetSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMwareSite); err != nil {
		return SitesClientGetSiteResponse{}, err
	}
	return result, nil
}

// NewGetSiteHealthSummaryPager - Method to get site health summary.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - SitesClientGetSiteHealthSummaryOptions contains the optional parameters for the SitesClient.NewGetSiteHealthSummaryPager
//     method.
func (client *SitesClient) NewGetSiteHealthSummaryPager(subscriptionID string, resourceGroupName string, siteName string, options *SitesClientGetSiteHealthSummaryOptions) *runtime.Pager[SitesClientGetSiteHealthSummaryResponse] {
	return runtime.NewPager(runtime.PagingHandler[SitesClientGetSiteHealthSummaryResponse]{
		More: func(page SitesClientGetSiteHealthSummaryResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SitesClientGetSiteHealthSummaryResponse) (SitesClientGetSiteHealthSummaryResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getSiteHealthSummaryCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SitesClientGetSiteHealthSummaryResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return SitesClientGetSiteHealthSummaryResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SitesClientGetSiteHealthSummaryResponse{}, runtime.NewResponseError(resp)
			}
			return client.getSiteHealthSummaryHandleResponse(resp)
		},
	})
}

// getSiteHealthSummaryCreateRequest creates the GetSiteHealthSummary request.
func (client *SitesClient) getSiteHealthSummaryCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientGetSiteHealthSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/healthSummary"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSiteHealthSummaryHandleResponse handles the GetSiteHealthSummary response.
func (client *SitesClient) getSiteHealthSummaryHandleResponse(resp *http.Response) (SitesClientGetSiteHealthSummaryResponse, error) {
	result := SitesClientGetSiteHealthSummaryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SiteHealthSummaryCollection); err != nil {
		return SitesClientGetSiteHealthSummaryResponse{}, err
	}
	return result, nil
}

// GetSiteUsage - Method to get site usage/summary.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - SitesClientGetSiteUsageOptions contains the optional parameters for the SitesClient.GetSiteUsage method.
func (client *SitesClient) GetSiteUsage(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientGetSiteUsageOptions) (SitesClientGetSiteUsageResponse, error) {
	req, err := client.getSiteUsageCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, options)
	if err != nil {
		return SitesClientGetSiteUsageResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SitesClientGetSiteUsageResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SitesClientGetSiteUsageResponse{}, runtime.NewResponseError(resp)
	}
	return client.getSiteUsageHandleResponse(resp)
}

// getSiteUsageCreateRequest creates the GetSiteUsage request.
func (client *SitesClient) getSiteUsageCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientGetSiteUsageOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/summary"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSiteUsageHandleResponse handles the GetSiteUsage response.
func (client *SitesClient) getSiteUsageHandleResponse(resp *http.Response) (SitesClientGetSiteUsageResponse, error) {
	result := SitesClientGetSiteUsageResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMwareSiteUsage); err != nil {
		return SitesClientGetSiteUsageResponse{}, err
	}
	return result, nil
}

// PatchSite - Method to update an existing site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - body - Body with site details.
//   - options - SitesClientPatchSiteOptions contains the optional parameters for the SitesClient.PatchSite method.
func (client *SitesClient) PatchSite(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, body VMwareSite, options *SitesClientPatchSiteOptions) (SitesClientPatchSiteResponse, error) {
	req, err := client.patchSiteCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, body, options)
	if err != nil {
		return SitesClientPatchSiteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SitesClientPatchSiteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return SitesClientPatchSiteResponse{}, runtime.NewResponseError(resp)
	}
	return client.patchSiteHandleResponse(resp)
}

// patchSiteCreateRequest creates the PatchSite request.
func (client *SitesClient) patchSiteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, body VMwareSite, options *SitesClientPatchSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// patchSiteHandleResponse handles the PatchSite response.
func (client *SitesClient) patchSiteHandleResponse(resp *http.Response) (SitesClientPatchSiteResponse, error) {
	result := SitesClientPatchSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMwareSite); err != nil {
		return SitesClientPatchSiteResponse{}, err
	}
	return result, nil
}

// PutSite - Method to create or update a site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - body - Body with site details.
//   - options - SitesClientPutSiteOptions contains the optional parameters for the SitesClient.PutSite method.
func (client *SitesClient) PutSite(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, body VMwareSite, options *SitesClientPutSiteOptions) (SitesClientPutSiteResponse, error) {
	req, err := client.putSiteCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, body, options)
	if err != nil {
		return SitesClientPutSiteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SitesClientPutSiteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return SitesClientPutSiteResponse{}, runtime.NewResponseError(resp)
	}
	return client.putSiteHandleResponse(resp)
}

// putSiteCreateRequest creates the PutSite request.
func (client *SitesClient) putSiteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, body VMwareSite, options *SitesClientPutSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// putSiteHandleResponse handles the PutSite response.
func (client *SitesClient) putSiteHandleResponse(resp *http.Response) (SitesClientPutSiteResponse, error) {
	result := SitesClientPutSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMwareSite); err != nil {
		return SitesClientPutSiteResponse{}, err
	}
	return result, nil
}

// RefreshSite - Method to refresh a site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - SitesClientRefreshSiteOptions contains the optional parameters for the SitesClient.RefreshSite method.
func (client *SitesClient) RefreshSite(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientRefreshSiteOptions) (SitesClientRefreshSiteResponse, error) {
	req, err := client.refreshSiteCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, options)
	if err != nil {
		return SitesClientRefreshSiteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SitesClientRefreshSiteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return SitesClientRefreshSiteResponse{}, runtime.NewResponseError(resp)
	}
	return client.refreshSiteHandleResponse(resp)
}

// refreshSiteCreateRequest creates the RefreshSite request.
func (client *SitesClient) refreshSiteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *SitesClientRefreshSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/refresh"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// refreshSiteHandleResponse handles the RefreshSite response.
func (client *SitesClient) refreshSiteHandleResponse(resp *http.Response) (SitesClientRefreshSiteResponse, error) {
	result := SitesClientRefreshSiteResponse{}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	return result, nil
}
