//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armedgeorder

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HciFlightCatalogProjectClient contains the methods for the HciFlightCatalogProject group.
// Don't use this type directly, use NewHciFlightCatalogProjectClient() instead.
type HciFlightCatalogProjectClient struct {
	internal *arm.Client
}

// NewHciFlightCatalogProjectClient creates a new instance of HciFlightCatalogProjectClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHciFlightCatalogProjectClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*HciFlightCatalogProjectClient, error) {
	cl, err := arm.NewClient(moduleName+".HciFlightCatalogProjectClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HciFlightCatalogProjectClient{
		internal: cl,
	}
	return client, nil
}

// Create - Create a project. Existing project cannot be updated with this api and should instead be updated with the Update
// project API.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - location - The name of Azure region.
//   - projectName - The name of the project Resource. project names must be between 3 and 72 characters in length and use any
//     alphanumeric and underscore only.
//   - projectResource - Project details from request body.
//   - options - HciFlightCatalogProjectClientCreateOptions contains the optional parameters for the HciFlightCatalogProjectClient.Create
//     method.
func (client *HciFlightCatalogProjectClient) Create(ctx context.Context, catalogName string, location string, projectName string, projectResource ProjectResource, options *HciFlightCatalogProjectClientCreateOptions) (HciFlightCatalogProjectClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, catalogName, location, projectName, projectResource, options)
	if err != nil {
		return HciFlightCatalogProjectClientCreateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciFlightCatalogProjectClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return HciFlightCatalogProjectClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *HciFlightCatalogProjectClient) createCreateRequest(ctx context.Context, catalogName string, location string, projectName string, projectResource ProjectResource, options *HciFlightCatalogProjectClientCreateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, projectResource)
}

// createHandleResponse handles the Create response.
func (client *HciFlightCatalogProjectClient) createHandleResponse(resp *http.Response) (HciFlightCatalogProjectClientCreateResponse, error) {
	result := HciFlightCatalogProjectClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProjectResource); err != nil {
		return HciFlightCatalogProjectClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a project by id.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - location - The name of Azure region.
//   - projectName - The name of the project Resource. project names must be between 3 and 72 characters in length and use any
//     alphanumeric and underscore only.
//   - options - HciFlightCatalogProjectClientDeleteOptions contains the optional parameters for the HciFlightCatalogProjectClient.Delete
//     method.
func (client *HciFlightCatalogProjectClient) Delete(ctx context.Context, catalogName string, location string, projectName string, options *HciFlightCatalogProjectClientDeleteOptions) (HciFlightCatalogProjectClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, catalogName, location, projectName, options)
	if err != nil {
		return HciFlightCatalogProjectClientDeleteResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciFlightCatalogProjectClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return HciFlightCatalogProjectClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return HciFlightCatalogProjectClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *HciFlightCatalogProjectClient) deleteCreateRequest(ctx context.Context, catalogName string, location string, projectName string, options *HciFlightCatalogProjectClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - location - The name of Azure region.
//   - projectName - The name of the project Resource. project names must be between 3 and 72 characters in length and use any
//     alphanumeric and underscore only.
//   - options - HciFlightCatalogProjectClientGetOptions contains the optional parameters for the HciFlightCatalogProjectClient.Get
//     method.
func (client *HciFlightCatalogProjectClient) Get(ctx context.Context, catalogName string, location string, projectName string, options *HciFlightCatalogProjectClientGetOptions) (HciFlightCatalogProjectClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, catalogName, location, projectName, options)
	if err != nil {
		return HciFlightCatalogProjectClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciFlightCatalogProjectClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HciFlightCatalogProjectClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *HciFlightCatalogProjectClient) getCreateRequest(ctx context.Context, catalogName string, location string, projectName string, options *HciFlightCatalogProjectClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HciFlightCatalogProjectClient) getHandleResponse(resp *http.Response) (HciFlightCatalogProjectClientGetResponse, error) {
	result := HciFlightCatalogProjectClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProjectResource); err != nil {
		return HciFlightCatalogProjectClientGetResponse{}, err
	}
	return result, nil
}

// SolutionRecommendations - Get solution recommendation for the Project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - location - The name of Azure region.
//   - projectName - The name of the project Resource. project names must be between 3 and 72 characters in length and use any
//     alphanumeric and underscore only.
//   - options - HciFlightCatalogProjectClientSolutionRecommendationsOptions contains the optional parameters for the HciFlightCatalogProjectClient.SolutionRecommendations
//     method.
func (client *HciFlightCatalogProjectClient) SolutionRecommendations(ctx context.Context, catalogName string, location string, projectName string, options *HciFlightCatalogProjectClientSolutionRecommendationsOptions) (HciFlightCatalogProjectClientSolutionRecommendationsResponse, error) {
	req, err := client.solutionRecommendationsCreateRequest(ctx, catalogName, location, projectName, options)
	if err != nil {
		return HciFlightCatalogProjectClientSolutionRecommendationsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciFlightCatalogProjectClientSolutionRecommendationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HciFlightCatalogProjectClientSolutionRecommendationsResponse{}, runtime.NewResponseError(resp)
	}
	return client.solutionRecommendationsHandleResponse(resp)
}

// solutionRecommendationsCreateRequest creates the SolutionRecommendations request.
func (client *HciFlightCatalogProjectClient) solutionRecommendationsCreateRequest(ctx context.Context, catalogName string, location string, projectName string, options *HciFlightCatalogProjectClientSolutionRecommendationsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}/solutionRecommendations"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// solutionRecommendationsHandleResponse handles the SolutionRecommendations response.
func (client *HciFlightCatalogProjectClient) solutionRecommendationsHandleResponse(resp *http.Response) (HciFlightCatalogProjectClientSolutionRecommendationsResponse, error) {
	result := HciFlightCatalogProjectClientSolutionRecommendationsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RecommendedSolutionArray); err != nil {
		return HciFlightCatalogProjectClientSolutionRecommendationsResponse{}, err
	}
	return result, nil
}

// Update - Update the properties of an existing project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - location - The name of Azure region.
//   - projectName - The name of the project Resource. project names must be between 3 and 72 characters in length and use any
//     alphanumeric and underscore only.
//   - projectUpdateParameter - Project update parameters from request body.
//   - options - HciFlightCatalogProjectClientUpdateOptions contains the optional parameters for the HciFlightCatalogProjectClient.Update
//     method.
func (client *HciFlightCatalogProjectClient) Update(ctx context.Context, catalogName string, location string, projectName string, projectUpdateParameter ProjectUpdateParameter, options *HciFlightCatalogProjectClientUpdateOptions) (HciFlightCatalogProjectClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, catalogName, location, projectName, projectUpdateParameter, options)
	if err != nil {
		return HciFlightCatalogProjectClientUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciFlightCatalogProjectClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HciFlightCatalogProjectClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *HciFlightCatalogProjectClient) updateCreateRequest(ctx context.Context, catalogName string, location string, projectName string, projectUpdateParameter ProjectUpdateParameter, options *HciFlightCatalogProjectClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, projectUpdateParameter)
}

// updateHandleResponse handles the Update response.
func (client *HciFlightCatalogProjectClient) updateHandleResponse(resp *http.Response) (HciFlightCatalogProjectClientUpdateResponse, error) {
	result := HciFlightCatalogProjectClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProjectResource); err != nil {
		return HciFlightCatalogProjectClientUpdateResponse{}, err
	}
	return result, nil
}
