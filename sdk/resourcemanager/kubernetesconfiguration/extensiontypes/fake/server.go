//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kubernetesconfiguration/extensiontypes"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// Server is a fake server for instances of the extensiontypes.Client type.
type Server struct {
	// ClusterGetVersion is the fake for method Client.ClusterGetVersion
	// HTTP status codes to indicate success: http.StatusOK
	ClusterGetVersion func(ctx context.Context, resourceGroupName string, clusterRp string, clusterResourceName string, clusterName string, extensionTypeName string, versionNumber string, options *extensiontypes.ClientClusterGetVersionOptions) (resp azfake.Responder[extensiontypes.ClientClusterGetVersionResponse], errResp azfake.ErrorResponder)

	// NewClusterListVersionsPager is the fake for method Client.NewClusterListVersionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewClusterListVersionsPager func(resourceGroupName string, clusterRp string, clusterResourceName string, clusterName string, extensionTypeName string, options *extensiontypes.ClientClusterListVersionsOptions) (resp azfake.PagerResponder[extensiontypes.ClientClusterListVersionsResponse])

	// Get is the fake for method Client.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, clusterRp string, clusterResourceName string, clusterName string, extensionTypeName string, options *extensiontypes.ClientGetOptions) (resp azfake.Responder[extensiontypes.ClientGetResponse], errResp azfake.ErrorResponder)

	// GetVersion is the fake for method Client.GetVersion
	// HTTP status codes to indicate success: http.StatusOK
	GetVersion func(ctx context.Context, location string, extensionTypeName string, versionNumber string, options *extensiontypes.ClientGetVersionOptions) (resp azfake.Responder[extensiontypes.ClientGetVersionResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method Client.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, clusterRp string, clusterResourceName string, clusterName string, options *extensiontypes.ClientListOptions) (resp azfake.PagerResponder[extensiontypes.ClientListResponse])

	// NewListVersionsPager is the fake for method Client.NewListVersionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListVersionsPager func(location string, extensionTypeName string, options *extensiontypes.ClientListVersionsOptions) (resp azfake.PagerResponder[extensiontypes.ClientListVersionsResponse])

	// LocationGet is the fake for method Client.LocationGet
	// HTTP status codes to indicate success: http.StatusOK
	LocationGet func(ctx context.Context, location string, extensionTypeName string, options *extensiontypes.ClientLocationGetOptions) (resp azfake.Responder[extensiontypes.ClientLocationGetResponse], errResp azfake.ErrorResponder)

	// NewLocationListPager is the fake for method Client.NewLocationListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewLocationListPager func(location string, options *extensiontypes.ClientLocationListOptions) (resp azfake.PagerResponder[extensiontypes.ClientLocationListResponse])
}

// NewServerTransport creates a new instance of ServerTransport with the provided implementation.
// The returned ServerTransport instance is connected to an instance of extensiontypes.Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerTransport(srv *Server) *ServerTransport {
	return &ServerTransport{
		srv:                         srv,
		newClusterListVersionsPager: newTracker[azfake.PagerResponder[extensiontypes.ClientClusterListVersionsResponse]](),
		newListPager:                newTracker[azfake.PagerResponder[extensiontypes.ClientListResponse]](),
		newListVersionsPager:        newTracker[azfake.PagerResponder[extensiontypes.ClientListVersionsResponse]](),
		newLocationListPager:        newTracker[azfake.PagerResponder[extensiontypes.ClientLocationListResponse]](),
	}
}

// ServerTransport connects instances of extensiontypes.Client to instances of Server.
// Don't use this type directly, use NewServerTransport instead.
type ServerTransport struct {
	srv                         *Server
	newClusterListVersionsPager *tracker[azfake.PagerResponder[extensiontypes.ClientClusterListVersionsResponse]]
	newListPager                *tracker[azfake.PagerResponder[extensiontypes.ClientListResponse]]
	newListVersionsPager        *tracker[azfake.PagerResponder[extensiontypes.ClientListVersionsResponse]]
	newLocationListPager        *tracker[azfake.PagerResponder[extensiontypes.ClientLocationListResponse]]
}

// Do implements the policy.Transporter interface for ServerTransport.
func (s *ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "Client.ClusterGetVersion":
		resp, err = s.dispatchClusterGetVersion(req)
	case "Client.NewClusterListVersionsPager":
		resp, err = s.dispatchNewClusterListVersionsPager(req)
	case "Client.Get":
		resp, err = s.dispatchGet(req)
	case "Client.GetVersion":
		resp, err = s.dispatchGetVersion(req)
	case "Client.NewListPager":
		resp, err = s.dispatchNewListPager(req)
	case "Client.NewListVersionsPager":
		resp, err = s.dispatchNewListVersionsPager(req)
	case "Client.LocationGet":
		resp, err = s.dispatchLocationGet(req)
	case "Client.NewLocationListPager":
		resp, err = s.dispatchNewLocationListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *ServerTransport) dispatchClusterGetVersion(req *http.Request) (*http.Response, error) {
	if s.srv.ClusterGetVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method ClusterGetVersion not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<clusterRp>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<clusterResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<clusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KubernetesConfiguration/extensionTypes/(?P<extensionTypeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions/(?P<versionNumber>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 7 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	clusterRpParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterRp")])
	if err != nil {
		return nil, err
	}
	clusterResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterResourceName")])
	if err != nil {
		return nil, err
	}
	clusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterName")])
	if err != nil {
		return nil, err
	}
	extensionTypeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionTypeName")])
	if err != nil {
		return nil, err
	}
	versionNumberParam, err := url.PathUnescape(matches[regex.SubexpIndex("versionNumber")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.ClusterGetVersion(req.Context(), resourceGroupNameParam, clusterRpParam, clusterResourceNameParam, clusterNameParam, extensionTypeNameParam, versionNumberParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExtensionTypeVersionForReleaseTrain, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchNewClusterListVersionsPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewClusterListVersionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewClusterListVersionsPager not implemented")}
	}
	newClusterListVersionsPager := s.newClusterListVersionsPager.get(req)
	if newClusterListVersionsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<clusterRp>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<clusterResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<clusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KubernetesConfiguration/extensionTypes/(?P<extensionTypeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		clusterRpParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterRp")])
		if err != nil {
			return nil, err
		}
		clusterResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterResourceName")])
		if err != nil {
			return nil, err
		}
		clusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterName")])
		if err != nil {
			return nil, err
		}
		extensionTypeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionTypeName")])
		if err != nil {
			return nil, err
		}
		releaseTrainUnescaped, err := url.QueryUnescape(qp.Get("releaseTrain"))
		if err != nil {
			return nil, err
		}
		releaseTrainParam := getOptional(releaseTrainUnescaped)
		majorVersionUnescaped, err := url.QueryUnescape(qp.Get("majorVersion"))
		if err != nil {
			return nil, err
		}
		majorVersionParam := getOptional(majorVersionUnescaped)
		showLatestUnescaped, err := url.QueryUnescape(qp.Get("showLatest"))
		if err != nil {
			return nil, err
		}
		showLatestParam, err := parseOptional(showLatestUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *extensiontypes.ClientClusterListVersionsOptions
		if releaseTrainParam != nil || majorVersionParam != nil || showLatestParam != nil {
			options = &extensiontypes.ClientClusterListVersionsOptions{
				ReleaseTrain: releaseTrainParam,
				MajorVersion: majorVersionParam,
				ShowLatest:   showLatestParam,
			}
		}
		resp := s.srv.NewClusterListVersionsPager(resourceGroupNameParam, clusterRpParam, clusterResourceNameParam, clusterNameParam, extensionTypeNameParam, options)
		newClusterListVersionsPager = &resp
		s.newClusterListVersionsPager.add(req, newClusterListVersionsPager)
		server.PagerResponderInjectNextLinks(newClusterListVersionsPager, req, func(page *extensiontypes.ClientClusterListVersionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newClusterListVersionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newClusterListVersionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newClusterListVersionsPager) {
		s.newClusterListVersionsPager.remove(req)
	}
	return resp, nil
}

func (s *ServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<clusterRp>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<clusterResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<clusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KubernetesConfiguration/extensionTypes/(?P<extensionTypeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	clusterRpParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterRp")])
	if err != nil {
		return nil, err
	}
	clusterResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterResourceName")])
	if err != nil {
		return nil, err
	}
	clusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterName")])
	if err != nil {
		return nil, err
	}
	extensionTypeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionTypeName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, clusterRpParam, clusterResourceNameParam, clusterNameParam, extensionTypeNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExtensionType, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchGetVersion(req *http.Request) (*http.Response, error) {
	if s.srv.GetVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetVersion not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KubernetesConfiguration/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/extensionTypes/(?P<extensionTypeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions/(?P<versionNumber>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	extensionTypeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionTypeName")])
	if err != nil {
		return nil, err
	}
	versionNumberParam, err := url.PathUnescape(matches[regex.SubexpIndex("versionNumber")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.GetVersion(req.Context(), locationParam, extensionTypeNameParam, versionNumberParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExtensionTypeVersionForReleaseTrain, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := s.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<clusterRp>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<clusterResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<clusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KubernetesConfiguration/extensionTypes`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		clusterRpParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterRp")])
		if err != nil {
			return nil, err
		}
		clusterResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterResourceName")])
		if err != nil {
			return nil, err
		}
		clusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterName")])
		if err != nil {
			return nil, err
		}
		publisherIDUnescaped, err := url.QueryUnescape(qp.Get("publisherId"))
		if err != nil {
			return nil, err
		}
		publisherIDParam := getOptional(publisherIDUnescaped)
		offerIDUnescaped, err := url.QueryUnescape(qp.Get("offerId"))
		if err != nil {
			return nil, err
		}
		offerIDParam := getOptional(offerIDUnescaped)
		planIDUnescaped, err := url.QueryUnescape(qp.Get("planId"))
		if err != nil {
			return nil, err
		}
		planIDParam := getOptional(planIDUnescaped)
		releaseTrainUnescaped, err := url.QueryUnescape(qp.Get("releaseTrain"))
		if err != nil {
			return nil, err
		}
		releaseTrainParam := getOptional(releaseTrainUnescaped)
		var options *extensiontypes.ClientListOptions
		if publisherIDParam != nil || offerIDParam != nil || planIDParam != nil || releaseTrainParam != nil {
			options = &extensiontypes.ClientListOptions{
				PublisherID:  publisherIDParam,
				OfferID:      offerIDParam,
				PlanID:       planIDParam,
				ReleaseTrain: releaseTrainParam,
			}
		}
		resp := s.srv.NewListPager(resourceGroupNameParam, clusterRpParam, clusterResourceNameParam, clusterNameParam, options)
		newListPager = &resp
		s.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *extensiontypes.ClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		s.newListPager.remove(req)
	}
	return resp, nil
}

func (s *ServerTransport) dispatchNewListVersionsPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListVersionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListVersionsPager not implemented")}
	}
	newListVersionsPager := s.newListVersionsPager.get(req)
	if newListVersionsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KubernetesConfiguration/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/extensionTypes/(?P<extensionTypeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		extensionTypeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionTypeName")])
		if err != nil {
			return nil, err
		}
		releaseTrainUnescaped, err := url.QueryUnescape(qp.Get("releaseTrain"))
		if err != nil {
			return nil, err
		}
		releaseTrainParam := getOptional(releaseTrainUnescaped)
		clusterTypeUnescaped, err := url.QueryUnescape(qp.Get("clusterType"))
		if err != nil {
			return nil, err
		}
		clusterTypeParam := getOptional(clusterTypeUnescaped)
		majorVersionUnescaped, err := url.QueryUnescape(qp.Get("majorVersion"))
		if err != nil {
			return nil, err
		}
		majorVersionParam := getOptional(majorVersionUnescaped)
		showLatestUnescaped, err := url.QueryUnescape(qp.Get("showLatest"))
		if err != nil {
			return nil, err
		}
		showLatestParam, err := parseOptional(showLatestUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *extensiontypes.ClientListVersionsOptions
		if releaseTrainParam != nil || clusterTypeParam != nil || majorVersionParam != nil || showLatestParam != nil {
			options = &extensiontypes.ClientListVersionsOptions{
				ReleaseTrain: releaseTrainParam,
				ClusterType:  clusterTypeParam,
				MajorVersion: majorVersionParam,
				ShowLatest:   showLatestParam,
			}
		}
		resp := s.srv.NewListVersionsPager(locationParam, extensionTypeNameParam, options)
		newListVersionsPager = &resp
		s.newListVersionsPager.add(req, newListVersionsPager)
		server.PagerResponderInjectNextLinks(newListVersionsPager, req, func(page *extensiontypes.ClientListVersionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListVersionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListVersionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListVersionsPager) {
		s.newListVersionsPager.remove(req)
	}
	return resp, nil
}

func (s *ServerTransport) dispatchLocationGet(req *http.Request) (*http.Response, error) {
	if s.srv.LocationGet == nil {
		return nil, &nonRetriableError{errors.New("fake for method LocationGet not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KubernetesConfiguration/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/extensionTypes/(?P<extensionTypeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	extensionTypeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionTypeName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.LocationGet(req.Context(), locationParam, extensionTypeNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExtensionType, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ServerTransport) dispatchNewLocationListPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewLocationListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewLocationListPager not implemented")}
	}
	newLocationListPager := s.newLocationListPager.get(req)
	if newLocationListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KubernetesConfiguration/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/extensionTypes`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		publisherIDUnescaped, err := url.QueryUnescape(qp.Get("publisherId"))
		if err != nil {
			return nil, err
		}
		publisherIDParam := getOptional(publisherIDUnescaped)
		offerIDUnescaped, err := url.QueryUnescape(qp.Get("offerId"))
		if err != nil {
			return nil, err
		}
		offerIDParam := getOptional(offerIDUnescaped)
		planIDUnescaped, err := url.QueryUnescape(qp.Get("planId"))
		if err != nil {
			return nil, err
		}
		planIDParam := getOptional(planIDUnescaped)
		releaseTrainUnescaped, err := url.QueryUnescape(qp.Get("releaseTrain"))
		if err != nil {
			return nil, err
		}
		releaseTrainParam := getOptional(releaseTrainUnescaped)
		clusterTypeUnescaped, err := url.QueryUnescape(qp.Get("clusterType"))
		if err != nil {
			return nil, err
		}
		clusterTypeParam := getOptional(clusterTypeUnescaped)
		var options *extensiontypes.ClientLocationListOptions
		if publisherIDParam != nil || offerIDParam != nil || planIDParam != nil || releaseTrainParam != nil || clusterTypeParam != nil {
			options = &extensiontypes.ClientLocationListOptions{
				PublisherID:  publisherIDParam,
				OfferID:      offerIDParam,
				PlanID:       planIDParam,
				ReleaseTrain: releaseTrainParam,
				ClusterType:  clusterTypeParam,
			}
		}
		resp := s.srv.NewLocationListPager(locationParam, options)
		newLocationListPager = &resp
		s.newLocationListPager.add(req, newLocationListPager)
		server.PagerResponderInjectNextLinks(newLocationListPager, req, func(page *extensiontypes.ClientLocationListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newLocationListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newLocationListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newLocationListPager) {
		s.newLocationListPager.remove(req)
	}
	return resp, nil
}
