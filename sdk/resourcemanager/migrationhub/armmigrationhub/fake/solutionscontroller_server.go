// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// SolutionsControllerServer is a fake server for instances of the armmigrationhub.SolutionsControllerClient type.
type SolutionsControllerServer struct {
	// CleanupData is the fake for method SolutionsControllerClient.CleanupData
	// HTTP status codes to indicate success: http.StatusOK
	CleanupData func(ctx context.Context, resourceGroupName string, migrateProjectName string, solutionName string, options *armmigrationhub.SolutionsControllerClientCleanupDataOptions) (resp azfake.Responder[armmigrationhub.SolutionsControllerClientCleanupDataResponse], errResp azfake.ErrorResponder)

	// Create is the fake for method SolutionsControllerClient.Create
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Create func(ctx context.Context, resourceGroupName string, migrateProjectName string, solutionName string, solutionInput armmigrationhub.Solution, options *armmigrationhub.SolutionsControllerClientCreateOptions) (resp azfake.Responder[armmigrationhub.SolutionsControllerClientCreateResponse], errResp azfake.ErrorResponder)

	// DeleteSolution is the fake for method SolutionsControllerClient.DeleteSolution
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	DeleteSolution func(ctx context.Context, resourceGroupName string, migrateProjectName string, solutionName string, options *armmigrationhub.SolutionsControllerClientDeleteSolutionOptions) (resp azfake.Responder[armmigrationhub.SolutionsControllerClientDeleteSolutionResponse], errResp azfake.ErrorResponder)

	// GetConfig is the fake for method SolutionsControllerClient.GetConfig
	// HTTP status codes to indicate success: http.StatusOK
	GetConfig func(ctx context.Context, resourceGroupName string, migrateProjectName string, solutionName string, options *armmigrationhub.SolutionsControllerClientGetConfigOptions) (resp azfake.Responder[armmigrationhub.SolutionsControllerClientGetConfigResponse], errResp azfake.ErrorResponder)

	// GetSolution is the fake for method SolutionsControllerClient.GetSolution
	// HTTP status codes to indicate success: http.StatusOK
	GetSolution func(ctx context.Context, resourceGroupName string, migrateProjectName string, solutionName string, options *armmigrationhub.SolutionsControllerClientGetSolutionOptions) (resp azfake.Responder[armmigrationhub.SolutionsControllerClientGetSolutionResponse], errResp azfake.ErrorResponder)

	// NewListSolutionsPager is the fake for method SolutionsControllerClient.NewListSolutionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListSolutionsPager func(resourceGroupName string, migrateProjectName string, options *armmigrationhub.SolutionsControllerClientListSolutionsOptions) (resp azfake.PagerResponder[armmigrationhub.SolutionsControllerClientListSolutionsResponse])

	// Update is the fake for method SolutionsControllerClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, migrateProjectName string, solutionName string, solutionInput armmigrationhub.Solution, options *armmigrationhub.SolutionsControllerClientUpdateOptions) (resp azfake.Responder[armmigrationhub.SolutionsControllerClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewSolutionsControllerServerTransport creates a new instance of SolutionsControllerServerTransport with the provided implementation.
// The returned SolutionsControllerServerTransport instance is connected to an instance of armmigrationhub.SolutionsControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSolutionsControllerServerTransport(srv *SolutionsControllerServer) *SolutionsControllerServerTransport {
	return &SolutionsControllerServerTransport{
		srv:                   srv,
		newListSolutionsPager: newTracker[azfake.PagerResponder[armmigrationhub.SolutionsControllerClientListSolutionsResponse]](),
	}
}

// SolutionsControllerServerTransport connects instances of armmigrationhub.SolutionsControllerClient to instances of SolutionsControllerServer.
// Don't use this type directly, use NewSolutionsControllerServerTransport instead.
type SolutionsControllerServerTransport struct {
	srv                   *SolutionsControllerServer
	newListSolutionsPager *tracker[azfake.PagerResponder[armmigrationhub.SolutionsControllerClientListSolutionsResponse]]
}

// Do implements the policy.Transporter interface for SolutionsControllerServerTransport.
func (s *SolutionsControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SolutionsControllerServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if solutionsControllerServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = solutionsControllerServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SolutionsControllerClient.CleanupData":
				res.resp, res.err = s.dispatchCleanupData(req)
			case "SolutionsControllerClient.Create":
				res.resp, res.err = s.dispatchCreate(req)
			case "SolutionsControllerClient.DeleteSolution":
				res.resp, res.err = s.dispatchDeleteSolution(req)
			case "SolutionsControllerClient.GetConfig":
				res.resp, res.err = s.dispatchGetConfig(req)
			case "SolutionsControllerClient.GetSolution":
				res.resp, res.err = s.dispatchGetSolution(req)
			case "SolutionsControllerClient.NewListSolutionsPager":
				res.resp, res.err = s.dispatchNewListSolutionsPager(req)
			case "SolutionsControllerClient.Update":
				res.resp, res.err = s.dispatchUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SolutionsControllerServerTransport) dispatchCleanupData(req *http.Request) (*http.Response, error) {
	if s.srv.CleanupData == nil {
		return nil, &nonRetriableError{errors.New("fake for method CleanupData not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/cleanupData`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	solutionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.CleanupData(req.Context(), resourceGroupNameParam, migrateProjectNameParam, solutionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Interface, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SolutionsControllerServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if s.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.Solution](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	solutionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Create(req.Context(), resourceGroupNameParam, migrateProjectNameParam, solutionNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Solution, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).RetryAfter; val != nil {
		resp.Header.Set("Retry-After", strconv.FormatInt(int64(*val), 10))
	}
	return resp, nil
}

func (s *SolutionsControllerServerTransport) dispatchDeleteSolution(req *http.Request) (*http.Response, error) {
	if s.srv.DeleteSolution == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteSolution not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	solutionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.DeleteSolution(req.Context(), resourceGroupNameParam, migrateProjectNameParam, solutionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Interface, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SolutionsControllerServerTransport) dispatchGetConfig(req *http.Request) (*http.Response, error) {
	if s.srv.GetConfig == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetConfig not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getConfig`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	solutionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.GetConfig(req.Context(), resourceGroupNameParam, migrateProjectNameParam, solutionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SolutionConfig, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SolutionsControllerServerTransport) dispatchGetSolution(req *http.Request) (*http.Response, error) {
	if s.srv.GetSolution == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetSolution not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	solutionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.GetSolution(req.Context(), resourceGroupNameParam, migrateProjectNameParam, solutionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Solution, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SolutionsControllerServerTransport) dispatchNewListSolutionsPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListSolutionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListSolutionsPager not implemented")}
	}
	newListSolutionsPager := s.newListSolutionsPager.get(req)
	if newListSolutionsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListSolutionsPager(resourceGroupNameParam, migrateProjectNameParam, nil)
		newListSolutionsPager = &resp
		s.newListSolutionsPager.add(req, newListSolutionsPager)
		server.PagerResponderInjectNextLinks(newListSolutionsPager, req, func(page *armmigrationhub.SolutionsControllerClientListSolutionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListSolutionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListSolutionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListSolutionsPager) {
		s.newListSolutionsPager.remove(req)
	}
	return resp, nil
}

func (s *SolutionsControllerServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.Solution](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	solutionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Update(req.Context(), resourceGroupNameParam, migrateProjectNameParam, solutionNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Solution, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SolutionsControllerServerTransport
var solutionsControllerServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
