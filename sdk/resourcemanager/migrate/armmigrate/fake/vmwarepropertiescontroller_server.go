//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate/v2"
	"net/http"
	"net/url"
	"regexp"
)

// VmwarePropertiesControllerServer is a fake server for instances of the armmigrate.VmwarePropertiesControllerClient type.
type VmwarePropertiesControllerServer struct {
	// BeginUpdateDependencyMapStatus is the fake for method VmwarePropertiesControllerClient.BeginUpdateDependencyMapStatus
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdateDependencyMapStatus func(ctx context.Context, resourceGroupName string, siteName string, updateMachineDepMapStatus armmigrate.UpdateMachineDepMapStatus, options *armmigrate.VmwarePropertiesControllerClientBeginUpdateDependencyMapStatusOptions) (resp azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateDependencyMapStatusResponse], errResp azfake.ErrorResponder)

	// BeginUpdateProperties is the fake for method VmwarePropertiesControllerClient.BeginUpdateProperties
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdateProperties func(ctx context.Context, resourceGroupName string, siteName string, metaData armmigrate.MachineMetadataCollection, options *armmigrate.VmwarePropertiesControllerClientBeginUpdatePropertiesOptions) (resp azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdatePropertiesResponse], errResp azfake.ErrorResponder)

	// BeginUpdateRunAsAccount is the fake for method VmwarePropertiesControllerClient.BeginUpdateRunAsAccount
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdateRunAsAccount func(ctx context.Context, resourceGroupName string, siteName string, updateMachineRunAsAccount armmigrate.UpdateMachineRunAsAccount, options *armmigrate.VmwarePropertiesControllerClientBeginUpdateRunAsAccountOptions) (resp azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateRunAsAccountResponse], errResp azfake.ErrorResponder)

	// BeginUpdateTags is the fake for method VmwarePropertiesControllerClient.BeginUpdateTags
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdateTags func(ctx context.Context, resourceGroupName string, siteName string, updateMachineTags armmigrate.UpdateMachineTags, options *armmigrate.VmwarePropertiesControllerClientBeginUpdateTagsOptions) (resp azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateTagsResponse], errResp azfake.ErrorResponder)
}

// NewVmwarePropertiesControllerServerTransport creates a new instance of VmwarePropertiesControllerServerTransport with the provided implementation.
// The returned VmwarePropertiesControllerServerTransport instance is connected to an instance of armmigrate.VmwarePropertiesControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVmwarePropertiesControllerServerTransport(srv *VmwarePropertiesControllerServer) *VmwarePropertiesControllerServerTransport {
	return &VmwarePropertiesControllerServerTransport{
		srv:                            srv,
		beginUpdateDependencyMapStatus: newTracker[azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateDependencyMapStatusResponse]](),
		beginUpdateProperties:          newTracker[azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdatePropertiesResponse]](),
		beginUpdateRunAsAccount:        newTracker[azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateRunAsAccountResponse]](),
		beginUpdateTags:                newTracker[azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateTagsResponse]](),
	}
}

// VmwarePropertiesControllerServerTransport connects instances of armmigrate.VmwarePropertiesControllerClient to instances of VmwarePropertiesControllerServer.
// Don't use this type directly, use NewVmwarePropertiesControllerServerTransport instead.
type VmwarePropertiesControllerServerTransport struct {
	srv                            *VmwarePropertiesControllerServer
	beginUpdateDependencyMapStatus *tracker[azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateDependencyMapStatusResponse]]
	beginUpdateProperties          *tracker[azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdatePropertiesResponse]]
	beginUpdateRunAsAccount        *tracker[azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateRunAsAccountResponse]]
	beginUpdateTags                *tracker[azfake.PollerResponder[armmigrate.VmwarePropertiesControllerClientUpdateTagsResponse]]
}

// Do implements the policy.Transporter interface for VmwarePropertiesControllerServerTransport.
func (v *VmwarePropertiesControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VmwarePropertiesControllerClient.BeginUpdateDependencyMapStatus":
		resp, err = v.dispatchBeginUpdateDependencyMapStatus(req)
	case "VmwarePropertiesControllerClient.BeginUpdateProperties":
		resp, err = v.dispatchBeginUpdateProperties(req)
	case "VmwarePropertiesControllerClient.BeginUpdateRunAsAccount":
		resp, err = v.dispatchBeginUpdateRunAsAccount(req)
	case "VmwarePropertiesControllerClient.BeginUpdateTags":
		resp, err = v.dispatchBeginUpdateTags(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VmwarePropertiesControllerServerTransport) dispatchBeginUpdateDependencyMapStatus(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdateDependencyMapStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateDependencyMapStatus not implemented")}
	}
	beginUpdateDependencyMapStatus := v.beginUpdateDependencyMapStatus.get(req)
	if beginUpdateDependencyMapStatus == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateDependencyMapStatus`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.UpdateMachineDepMapStatus](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginUpdateDependencyMapStatus(req.Context(), resourceGroupNameParam, siteNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateDependencyMapStatus = &respr
		v.beginUpdateDependencyMapStatus.add(req, beginUpdateDependencyMapStatus)
	}

	resp, err := server.PollerResponderNext(beginUpdateDependencyMapStatus, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginUpdateDependencyMapStatus.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateDependencyMapStatus) {
		v.beginUpdateDependencyMapStatus.remove(req)
	}

	return resp, nil
}

func (v *VmwarePropertiesControllerServerTransport) dispatchBeginUpdateProperties(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdateProperties == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateProperties not implemented")}
	}
	beginUpdateProperties := v.beginUpdateProperties.get(req)
	if beginUpdateProperties == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateProperties`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.MachineMetadataCollection](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginUpdateProperties(req.Context(), resourceGroupNameParam, siteNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateProperties = &respr
		v.beginUpdateProperties.add(req, beginUpdateProperties)
	}

	resp, err := server.PollerResponderNext(beginUpdateProperties, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginUpdateProperties.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateProperties) {
		v.beginUpdateProperties.remove(req)
	}

	return resp, nil
}

func (v *VmwarePropertiesControllerServerTransport) dispatchBeginUpdateRunAsAccount(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdateRunAsAccount == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateRunAsAccount not implemented")}
	}
	beginUpdateRunAsAccount := v.beginUpdateRunAsAccount.get(req)
	if beginUpdateRunAsAccount == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateRunAsAccount`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.UpdateMachineRunAsAccount](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginUpdateRunAsAccount(req.Context(), resourceGroupNameParam, siteNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateRunAsAccount = &respr
		v.beginUpdateRunAsAccount.add(req, beginUpdateRunAsAccount)
	}

	resp, err := server.PollerResponderNext(beginUpdateRunAsAccount, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginUpdateRunAsAccount.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateRunAsAccount) {
		v.beginUpdateRunAsAccount.remove(req)
	}

	return resp, nil
}

func (v *VmwarePropertiesControllerServerTransport) dispatchBeginUpdateTags(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdateTags == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateTags not implemented")}
	}
	beginUpdateTags := v.beginUpdateTags.get(req)
	if beginUpdateTags == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateTags`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.UpdateMachineTags](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginUpdateTags(req.Context(), resourceGroupNameParam, siteNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateTags = &respr
		v.beginUpdateTags.add(req, beginUpdateTags)
	}

	resp, err := server.PollerResponderNext(beginUpdateTags, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginUpdateTags.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateTags) {
		v.beginUpdateTags.remove(req)
	}

	return resp, nil
}
