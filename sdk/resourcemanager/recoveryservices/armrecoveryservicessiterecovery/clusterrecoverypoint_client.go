//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicessiterecovery

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ClusterRecoveryPointClient contains the methods for the ClusterRecoveryPoint group.
// Don't use this type directly, use NewClusterRecoveryPointClient() instead.
type ClusterRecoveryPointClient struct {
	internal                         *arm.Client
	resourceName                     string
	subscriptionID                   string
	fabricName                       string
	protectionContainerName          string
	replicationProtectionClusterName string
}

// NewClusterRecoveryPointClient creates a new instance of ClusterRecoveryPointClient with the specified values.
//   - resourceName - The name of the recovery services vault.
//   - subscriptionID - The subscription Id.
//   - fabricName - Fabric name.
//   - protectionContainerName - Protection container name.
//   - replicationProtectionClusterName - Replication protection cluster name.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewClusterRecoveryPointClient(resourceName string, subscriptionID string, fabricName string, protectionContainerName string, replicationProtectionClusterName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ClusterRecoveryPointClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ClusterRecoveryPointClient{
		resourceName:                     resourceName,
		subscriptionID:                   subscriptionID,
		fabricName:                       fabricName,
		protectionContainerName:          protectionContainerName,
		replicationProtectionClusterName: replicationProtectionClusterName,
		internal:                         cl,
	}
	return client, nil
}

// Get - Get the details of specified recovery point.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-04-01
//   - resourceGroupName - The name of the resource group where the recovery services vault is present.
//   - recoveryPointName - The recovery point name.
//   - options - ClusterRecoveryPointClientGetOptions contains the optional parameters for the ClusterRecoveryPointClient.Get
//     method.
func (client *ClusterRecoveryPointClient) Get(ctx context.Context, resourceGroupName string, recoveryPointName string, options *ClusterRecoveryPointClientGetOptions) (ClusterRecoveryPointClientGetResponse, error) {
	var err error
	const operationName = "ClusterRecoveryPointClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, recoveryPointName, options)
	if err != nil {
		return ClusterRecoveryPointClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClusterRecoveryPointClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ClusterRecoveryPointClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ClusterRecoveryPointClient) getCreateRequest(ctx context.Context, resourceGroupName string, recoveryPointName string, options *ClusterRecoveryPointClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/recoveryPoints/{recoveryPointName}"
	if client.resourceName == "" {
		return nil, errors.New("parameter client.resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(client.resourceName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.fabricName == "" {
		return nil, errors.New("parameter client.fabricName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fabricName}", url.PathEscape(client.fabricName))
	if client.protectionContainerName == "" {
		return nil, errors.New("parameter client.protectionContainerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{protectionContainerName}", url.PathEscape(client.protectionContainerName))
	if client.replicationProtectionClusterName == "" {
		return nil, errors.New("parameter client.replicationProtectionClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{replicationProtectionClusterName}", url.PathEscape(client.replicationProtectionClusterName))
	if recoveryPointName == "" {
		return nil, errors.New("parameter recoveryPointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recoveryPointName}", url.PathEscape(recoveryPointName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ClusterRecoveryPointClient) getHandleResponse(resp *http.Response) (ClusterRecoveryPointClientGetResponse, error) {
	result := ClusterRecoveryPointClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClusterRecoveryPoint); err != nil {
		return ClusterRecoveryPointClientGetResponse{}, err
	}
	return result, nil
}
