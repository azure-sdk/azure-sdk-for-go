//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armpurview.ClientFactory type.
type ServerFactory struct {
	AccountsServer                            AccountsServer
	DefaultAccountsServer                     DefaultAccountsServer
	FeaturesServer                            FeaturesServer
	IngestionPrivateEndpointConnectionsServer IngestionPrivateEndpointConnectionsServer
	KafkaConfigurationsServer                 KafkaConfigurationsServer
	OperationsServer                          OperationsServer
	PrivateEndpointConnectionsServer          PrivateEndpointConnectionsServer
	PrivateLinkResourcesServer                PrivateLinkResourcesServer
	UsagesServer                              UsagesServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armpurview.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armpurview.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                         *ServerFactory
	trMu                                        sync.Mutex
	trAccountsServer                            *AccountsServerTransport
	trDefaultAccountsServer                     *DefaultAccountsServerTransport
	trFeaturesServer                            *FeaturesServerTransport
	trIngestionPrivateEndpointConnectionsServer *IngestionPrivateEndpointConnectionsServerTransport
	trKafkaConfigurationsServer                 *KafkaConfigurationsServerTransport
	trOperationsServer                          *OperationsServerTransport
	trPrivateEndpointConnectionsServer          *PrivateEndpointConnectionsServerTransport
	trPrivateLinkResourcesServer                *PrivateLinkResourcesServerTransport
	trUsagesServer                              *UsagesServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AccountsClient":
		initServer(s, &s.trAccountsServer, func() *AccountsServerTransport { return NewAccountsServerTransport(&s.srv.AccountsServer) })
		resp, err = s.trAccountsServer.Do(req)
	case "DefaultAccountsClient":
		initServer(s, &s.trDefaultAccountsServer, func() *DefaultAccountsServerTransport {
			return NewDefaultAccountsServerTransport(&s.srv.DefaultAccountsServer)
		})
		resp, err = s.trDefaultAccountsServer.Do(req)
	case "FeaturesClient":
		initServer(s, &s.trFeaturesServer, func() *FeaturesServerTransport { return NewFeaturesServerTransport(&s.srv.FeaturesServer) })
		resp, err = s.trFeaturesServer.Do(req)
	case "IngestionPrivateEndpointConnectionsClient":
		initServer(s, &s.trIngestionPrivateEndpointConnectionsServer, func() *IngestionPrivateEndpointConnectionsServerTransport {
			return NewIngestionPrivateEndpointConnectionsServerTransport(&s.srv.IngestionPrivateEndpointConnectionsServer)
		})
		resp, err = s.trIngestionPrivateEndpointConnectionsServer.Do(req)
	case "KafkaConfigurationsClient":
		initServer(s, &s.trKafkaConfigurationsServer, func() *KafkaConfigurationsServerTransport {
			return NewKafkaConfigurationsServerTransport(&s.srv.KafkaConfigurationsServer)
		})
		resp, err = s.trKafkaConfigurationsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrivateEndpointConnectionsClient":
		initServer(s, &s.trPrivateEndpointConnectionsServer, func() *PrivateEndpointConnectionsServerTransport {
			return NewPrivateEndpointConnectionsServerTransport(&s.srv.PrivateEndpointConnectionsServer)
		})
		resp, err = s.trPrivateEndpointConnectionsServer.Do(req)
	case "PrivateLinkResourcesClient":
		initServer(s, &s.trPrivateLinkResourcesServer, func() *PrivateLinkResourcesServerTransport {
			return NewPrivateLinkResourcesServerTransport(&s.srv.PrivateLinkResourcesServer)
		})
		resp, err = s.trPrivateLinkResourcesServer.Do(req)
	case "UsagesClient":
		initServer(s, &s.trUsagesServer, func() *UsagesServerTransport { return NewUsagesServerTransport(&s.srv.UsagesServer) })
		resp, err = s.trUsagesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
