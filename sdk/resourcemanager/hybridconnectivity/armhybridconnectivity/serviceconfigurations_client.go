//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armhybridconnectivity

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// ServiceconfigurationsClient contains the methods for the Serviceconfigurations group.
// Don't use this type directly, use NewServiceconfigurationsClient() instead.
type ServiceconfigurationsClient struct {
	host string
	pl   runtime.Pipeline
}

// NewServiceconfigurationsClient creates a new instance of ServiceconfigurationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewServiceconfigurationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*ServiceconfigurationsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &ServiceconfigurationsClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// Create - Create a service in serviceConfiguration for the endpoint resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource to be connected.
//   - endpointName - The endpoint name.
//   - serviceConfigurationName - The service name.
//   - serviceConfigurationResource - Service details
//   - options - ServiceconfigurationsClientCreateOptions contains the optional parameters for the ServiceconfigurationsClient.Create
//     method.
func (client *ServiceconfigurationsClient) Create(ctx context.Context, resourceURI string, endpointName string, serviceConfigurationName string, serviceConfigurationResource ServiceConfigurationResource, options *ServiceconfigurationsClientCreateOptions) (ServiceconfigurationsClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceURI, endpointName, serviceConfigurationName, serviceConfigurationResource, options)
	if err != nil {
		return ServiceconfigurationsClientCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServiceconfigurationsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServiceconfigurationsClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *ServiceconfigurationsClient) createCreateRequest(ctx context.Context, resourceURI string, endpointName string, serviceConfigurationName string, serviceConfigurationResource ServiceConfigurationResource, options *ServiceconfigurationsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	urlPath = strings.ReplaceAll(urlPath, "{endpointName}", endpointName)
	urlPath = strings.ReplaceAll(urlPath, "{serviceConfigurationName}", serviceConfigurationName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, serviceConfigurationResource)
}

// createHandleResponse handles the Create response.
func (client *ServiceconfigurationsClient) createHandleResponse(resp *http.Response) (ServiceconfigurationsClientCreateResponse, error) {
	result := ServiceconfigurationsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceConfigurationResource); err != nil {
		return ServiceconfigurationsClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the service details to the target resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource to be connected.
//   - endpointName - The endpoint name.
//   - serviceConfigurationName - The service name.
//   - options - ServiceconfigurationsClientDeleteOptions contains the optional parameters for the ServiceconfigurationsClient.Delete
//     method.
func (client *ServiceconfigurationsClient) Delete(ctx context.Context, resourceURI string, endpointName string, serviceConfigurationName string, options *ServiceconfigurationsClientDeleteOptions) (ServiceconfigurationsClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceURI, endpointName, serviceConfigurationName, options)
	if err != nil {
		return ServiceconfigurationsClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServiceconfigurationsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ServiceconfigurationsClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return ServiceconfigurationsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ServiceconfigurationsClient) deleteCreateRequest(ctx context.Context, resourceURI string, endpointName string, serviceConfigurationName string, options *ServiceconfigurationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	urlPath = strings.ReplaceAll(urlPath, "{endpointName}", endpointName)
	urlPath = strings.ReplaceAll(urlPath, "{serviceConfigurationName}", serviceConfigurationName)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the details about the service to the resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource to be connected.
//   - endpointName - The endpoint name.
//   - serviceConfigurationName - The service name.
//   - options - ServiceconfigurationsClientGetOptions contains the optional parameters for the ServiceconfigurationsClient.Get
//     method.
func (client *ServiceconfigurationsClient) Get(ctx context.Context, resourceURI string, endpointName string, serviceConfigurationName string, options *ServiceconfigurationsClientGetOptions) (ServiceconfigurationsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceURI, endpointName, serviceConfigurationName, options)
	if err != nil {
		return ServiceconfigurationsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServiceconfigurationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServiceconfigurationsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ServiceconfigurationsClient) getCreateRequest(ctx context.Context, resourceURI string, endpointName string, serviceConfigurationName string, options *ServiceconfigurationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	urlPath = strings.ReplaceAll(urlPath, "{endpointName}", endpointName)
	urlPath = strings.ReplaceAll(urlPath, "{serviceConfigurationName}", serviceConfigurationName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ServiceconfigurationsClient) getHandleResponse(resp *http.Response) (ServiceconfigurationsClientGetResponse, error) {
	result := ServiceconfigurationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceConfigurationResource); err != nil {
		return ServiceconfigurationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByEndpointResourcePager - API to enumerate registered services in service configurations under a Endpoint Resource
//
// Generated from API version 2023-03-15
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource to be connected.
//   - endpointName - The endpoint name.
//   - options - ServiceconfigurationsClientListByEndpointResourceOptions contains the optional parameters for the ServiceconfigurationsClient.NewListByEndpointResourcePager
//     method.
func (client *ServiceconfigurationsClient) NewListByEndpointResourcePager(resourceURI string, endpointName string, options *ServiceconfigurationsClientListByEndpointResourceOptions) *runtime.Pager[ServiceconfigurationsClientListByEndpointResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[ServiceconfigurationsClientListByEndpointResourceResponse]{
		More: func(page ServiceconfigurationsClientListByEndpointResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ServiceconfigurationsClientListByEndpointResourceResponse) (ServiceconfigurationsClientListByEndpointResourceResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByEndpointResourceCreateRequest(ctx, resourceURI, endpointName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ServiceconfigurationsClientListByEndpointResourceResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ServiceconfigurationsClientListByEndpointResourceResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ServiceconfigurationsClientListByEndpointResourceResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByEndpointResourceHandleResponse(resp)
		},
	})
}

// listByEndpointResourceCreateRequest creates the ListByEndpointResource request.
func (client *ServiceconfigurationsClient) listByEndpointResourceCreateRequest(ctx context.Context, resourceURI string, endpointName string, options *ServiceconfigurationsClientListByEndpointResourceOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	urlPath = strings.ReplaceAll(urlPath, "{endpointName}", endpointName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByEndpointResourceHandleResponse handles the ListByEndpointResource response.
func (client *ServiceconfigurationsClient) listByEndpointResourceHandleResponse(resp *http.Response) (ServiceconfigurationsClientListByEndpointResourceResponse, error) {
	result := ServiceconfigurationsClientListByEndpointResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceConfigurationList); err != nil {
		return ServiceconfigurationsClientListByEndpointResourceResponse{}, err
	}
	return result, nil
}

// Update - Update the service details in the service configurations of the target resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource to be connected.
//   - endpointName - The endpoint name.
//   - serviceConfigurationName - The service name.
//   - serviceConfigurationResource - Service details
//   - options - ServiceconfigurationsClientUpdateOptions contains the optional parameters for the ServiceconfigurationsClient.Update
//     method.
func (client *ServiceconfigurationsClient) Update(ctx context.Context, resourceURI string, endpointName string, serviceConfigurationName string, serviceConfigurationResource ServiceConfigurationResourcePatch, options *ServiceconfigurationsClientUpdateOptions) (ServiceconfigurationsClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceURI, endpointName, serviceConfigurationName, serviceConfigurationResource, options)
	if err != nil {
		return ServiceconfigurationsClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServiceconfigurationsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServiceconfigurationsClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *ServiceconfigurationsClient) updateCreateRequest(ctx context.Context, resourceURI string, endpointName string, serviceConfigurationName string, serviceConfigurationResource ServiceConfigurationResourcePatch, options *ServiceconfigurationsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	urlPath = strings.ReplaceAll(urlPath, "{endpointName}", endpointName)
	urlPath = strings.ReplaceAll(urlPath, "{serviceConfigurationName}", serviceConfigurationName)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, serviceConfigurationResource)
}

// updateHandleResponse handles the Update response.
func (client *ServiceconfigurationsClient) updateHandleResponse(resp *http.Response) (ServiceconfigurationsClientUpdateResponse, error) {
	result := ServiceconfigurationsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceConfigurationResource); err != nil {
		return ServiceconfigurationsClientUpdateResponse{}, err
	}
	return result, nil
}
