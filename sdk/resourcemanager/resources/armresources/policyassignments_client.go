//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PolicyAssignmentsClient contains the methods for the PolicyAssignments group.
// Don't use this type directly, use NewPolicyAssignmentsClient() instead.
type PolicyAssignmentsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPolicyAssignmentsClient creates a new instance of PolicyAssignmentsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPolicyAssignmentsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PolicyAssignmentsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PolicyAssignmentsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Create - This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply
// to all resources contained within their scope. For example, when you assign a policy at
// resource group scope, that policy applies to all resources in the group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - scope - The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
//     or resource (format:
//     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
//   - policyAssignmentName - The name of the policy assignment.
//   - parameters - Parameters for the policy assignment.
//   - options - PolicyAssignmentsClientCreateOptions contains the optional parameters for the PolicyAssignmentsClient.Create
//     method.
func (client *PolicyAssignmentsClient) Create(ctx context.Context, scope string, policyAssignmentName string, parameters PolicyAssignment, options *PolicyAssignmentsClientCreateOptions) (PolicyAssignmentsClientCreateResponse, error) {
	var err error
	const operationName = "PolicyAssignmentsClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, scope, policyAssignmentName, parameters, options)
	if err != nil {
		return PolicyAssignmentsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyAssignmentsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PolicyAssignmentsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *PolicyAssignmentsClient) createCreateRequest(ctx context.Context, scope string, policyAssignmentName string, parameters PolicyAssignment, options *PolicyAssignmentsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyAssignmentName == "" {
		return nil, errors.New("parameter policyAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentName}", url.PathEscape(policyAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *PolicyAssignmentsClient) createHandleResponse(resp *http.Response) (PolicyAssignmentsClientCreateResponse, error) {
	result := PolicyAssignmentsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsClientCreateResponse{}, err
	}
	return result, nil
}

// CreateByID - This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope
// apply to all resources contained in that scope. For example, when you assign a policy to a
// resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// Valid
// scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription
// (format: '/subscriptions/{subscriptionId}'), resource group (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policyAssignmentID - The ID of the policy assignment to create. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
//   - parameters - Parameters for policy assignment.
//   - options - PolicyAssignmentsClientCreateByIDOptions contains the optional parameters for the PolicyAssignmentsClient.CreateByID
//     method.
func (client *PolicyAssignmentsClient) CreateByID(ctx context.Context, policyAssignmentID string, parameters PolicyAssignment, options *PolicyAssignmentsClientCreateByIDOptions) (PolicyAssignmentsClientCreateByIDResponse, error) {
	var err error
	const operationName = "PolicyAssignmentsClient.CreateByID"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createByIDCreateRequest(ctx, policyAssignmentID, parameters, options)
	if err != nil {
		return PolicyAssignmentsClientCreateByIDResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyAssignmentsClientCreateByIDResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PolicyAssignmentsClientCreateByIDResponse{}, err
	}
	resp, err := client.createByIDHandleResponse(httpResp)
	return resp, err
}

// createByIDCreateRequest creates the CreateByID request.
func (client *PolicyAssignmentsClient) createByIDCreateRequest(ctx context.Context, policyAssignmentID string, parameters PolicyAssignment, options *PolicyAssignmentsClientCreateByIDOptions) (*policy.Request, error) {
	urlPath := "/{policyAssignmentId}"
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", policyAssignmentID)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createByIDHandleResponse handles the CreateByID response.
func (client *PolicyAssignmentsClient) createByIDHandleResponse(resp *http.Response) (PolicyAssignmentsClientCreateByIDResponse, error) {
	result := PolicyAssignmentsClientCreateByIDResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsClientCreateByIDResponse{}, err
	}
	return result, nil
}

// Delete - This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy
// assignment is the part of its ID preceding
// '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - scope - The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
//     or resource (format:
//     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
//   - policyAssignmentName - The name of the policy assignment to delete.
//   - options - PolicyAssignmentsClientDeleteOptions contains the optional parameters for the PolicyAssignmentsClient.Delete
//     method.
func (client *PolicyAssignmentsClient) Delete(ctx context.Context, scope string, policyAssignmentName string, options *PolicyAssignmentsClientDeleteOptions) (PolicyAssignmentsClientDeleteResponse, error) {
	var err error
	const operationName = "PolicyAssignmentsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, scope, policyAssignmentName, options)
	if err != nil {
		return PolicyAssignmentsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyAssignmentsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PolicyAssignmentsClientDeleteResponse{}, err
	}
	resp, err := client.deleteHandleResponse(httpResp)
	return resp, err
}

// deleteCreateRequest creates the Delete request.
func (client *PolicyAssignmentsClient) deleteCreateRequest(ctx context.Context, scope string, policyAssignmentName string, options *PolicyAssignmentsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyAssignmentName == "" {
		return nil, errors.New("parameter policyAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentName}", url.PathEscape(policyAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *PolicyAssignmentsClient) deleteHandleResponse(resp *http.Response) (PolicyAssignmentsClientDeleteResponse, error) {
	result := PolicyAssignmentsClientDeleteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsClientDeleteResponse{}, err
	}
	return result, nil
}

// DeleteByID - This operation deletes the policy with the given ID. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// Valid formats for
// {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management group), '/subscriptions/{subscriptionId}'
// (subscription),
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
// (resource).
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policyAssignmentID - The ID of the policy assignment to delete. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
//   - options - PolicyAssignmentsClientDeleteByIDOptions contains the optional parameters for the PolicyAssignmentsClient.DeleteByID
//     method.
func (client *PolicyAssignmentsClient) DeleteByID(ctx context.Context, policyAssignmentID string, options *PolicyAssignmentsClientDeleteByIDOptions) (PolicyAssignmentsClientDeleteByIDResponse, error) {
	var err error
	const operationName = "PolicyAssignmentsClient.DeleteByID"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteByIDCreateRequest(ctx, policyAssignmentID, options)
	if err != nil {
		return PolicyAssignmentsClientDeleteByIDResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyAssignmentsClientDeleteByIDResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PolicyAssignmentsClientDeleteByIDResponse{}, err
	}
	resp, err := client.deleteByIDHandleResponse(httpResp)
	return resp, err
}

// deleteByIDCreateRequest creates the DeleteByID request.
func (client *PolicyAssignmentsClient) deleteByIDCreateRequest(ctx context.Context, policyAssignmentID string, options *PolicyAssignmentsClientDeleteByIDOptions) (*policy.Request, error) {
	urlPath := "/{policyAssignmentId}"
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", policyAssignmentID)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// deleteByIDHandleResponse handles the DeleteByID response.
func (client *PolicyAssignmentsClient) deleteByIDHandleResponse(resp *http.Response) (PolicyAssignmentsClientDeleteByIDResponse, error) {
	result := PolicyAssignmentsClientDeleteByIDResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsClientDeleteByIDResponse{}, err
	}
	return result, nil
}

// Get - This operation retrieves a single policy assignment, given its name and the scope it was created at.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - scope - The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
//     or resource (format:
//     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
//   - policyAssignmentName - The name of the policy assignment to get.
//   - options - PolicyAssignmentsClientGetOptions contains the optional parameters for the PolicyAssignmentsClient.Get method.
func (client *PolicyAssignmentsClient) Get(ctx context.Context, scope string, policyAssignmentName string, options *PolicyAssignmentsClientGetOptions) (PolicyAssignmentsClientGetResponse, error) {
	var err error
	const operationName = "PolicyAssignmentsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, scope, policyAssignmentName, options)
	if err != nil {
		return PolicyAssignmentsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyAssignmentsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyAssignmentsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PolicyAssignmentsClient) getCreateRequest(ctx context.Context, scope string, policyAssignmentName string, options *PolicyAssignmentsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyAssignmentName == "" {
		return nil, errors.New("parameter policyAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentName}", url.PathEscape(policyAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PolicyAssignmentsClient) getHandleResponse(resp *http.Response) (PolicyAssignmentsClientGetResponse, error) {
	result := PolicyAssignmentsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsClientGetResponse{}, err
	}
	return result, nil
}

// GetByID - The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// Valid
// scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription
// (format: '/subscriptions/{subscriptionId}'), resource group (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policyAssignmentID - The ID of the policy assignment to get. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
//   - options - PolicyAssignmentsClientGetByIDOptions contains the optional parameters for the PolicyAssignmentsClient.GetByID
//     method.
func (client *PolicyAssignmentsClient) GetByID(ctx context.Context, policyAssignmentID string, options *PolicyAssignmentsClientGetByIDOptions) (PolicyAssignmentsClientGetByIDResponse, error) {
	var err error
	const operationName = "PolicyAssignmentsClient.GetByID"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getByIDCreateRequest(ctx, policyAssignmentID, options)
	if err != nil {
		return PolicyAssignmentsClientGetByIDResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyAssignmentsClientGetByIDResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyAssignmentsClientGetByIDResponse{}, err
	}
	resp, err := client.getByIDHandleResponse(httpResp)
	return resp, err
}

// getByIDCreateRequest creates the GetByID request.
func (client *PolicyAssignmentsClient) getByIDCreateRequest(ctx context.Context, policyAssignmentID string, options *PolicyAssignmentsClientGetByIDOptions) (*policy.Request, error) {
	urlPath := "/{policyAssignmentId}"
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", policyAssignmentID)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getByIDHandleResponse handles the GetByID response.
func (client *PolicyAssignmentsClient) getByIDHandleResponse(resp *http.Response) (PolicyAssignmentsClientGetByIDResponse, error) {
	result := PolicyAssignmentsClientGetByIDResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsClientGetByIDResponse{}, err
	}
	return result, nil
}

// NewListPager - This operation retrieves the list of all policy assignments associated with the given subscription that
// match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or
// 'policyDefinitionId eq '{value}”. If $filter is not provided, the unfiltered list includes all policy assignments associated
// with the subscription, including those that apply directly or from
// management groups that contain the given subscription, as well as any applied to objects contained within the subscription.
// If $filter=atScope() is provided, the returned list includes all policy
// assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects
// contained within the subscription. If $filter=atExactScope() is provided, the
// returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '{value}'
// is provided, the returned list includes all policy assignments of the policy
// definition whose id is {value}.
//
// Generated from API version 2025-01-01
//   - options - PolicyAssignmentsClientListOptions contains the optional parameters for the PolicyAssignmentsClient.NewListPager
//     method.
func (client *PolicyAssignmentsClient) NewListPager(options *PolicyAssignmentsClientListOptions) *runtime.Pager[PolicyAssignmentsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicyAssignmentsClientListResponse]{
		More: func(page PolicyAssignmentsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicyAssignmentsClientListResponse) (PolicyAssignmentsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicyAssignmentsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PolicyAssignmentsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *PolicyAssignmentsClient) listCreateRequest(ctx context.Context, options *PolicyAssignmentsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PolicyAssignmentsClient) listHandleResponse(resp *http.Response) (PolicyAssignmentsClientListResponse, error) {
	result := PolicyAssignmentsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignmentListResult); err != nil {
		return PolicyAssignmentsClientListResponse{}, err
	}
	return result, nil
}

// NewListForManagementGroupPager - This operation retrieves the list of all policy assignments applicable to the management
// group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or
// 'policyDefinitionId eq '{value}”. If $filter=atScope() is provided, the returned list includes all policy assignments
// that are assigned to the management group or the management group's ancestors. If
// $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group.
// If $filter=policyDefinitionId eq '{value}' is provided, the returned list
// includes all policy assignments of the policy definition whose id is {value} that apply to the management group.
//
// Generated from API version 2025-01-01
//   - managementGroupID - The ID of the management group.
//   - options - PolicyAssignmentsClientListForManagementGroupOptions contains the optional parameters for the PolicyAssignmentsClient.NewListForManagementGroupPager
//     method.
func (client *PolicyAssignmentsClient) NewListForManagementGroupPager(managementGroupID string, options *PolicyAssignmentsClientListForManagementGroupOptions) *runtime.Pager[PolicyAssignmentsClientListForManagementGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicyAssignmentsClientListForManagementGroupResponse]{
		More: func(page PolicyAssignmentsClientListForManagementGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicyAssignmentsClientListForManagementGroupResponse) (PolicyAssignmentsClientListForManagementGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicyAssignmentsClient.NewListForManagementGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listForManagementGroupCreateRequest(ctx, managementGroupID, options)
			}, nil)
			if err != nil {
				return PolicyAssignmentsClientListForManagementGroupResponse{}, err
			}
			return client.listForManagementGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listForManagementGroupCreateRequest creates the ListForManagementGroup request.
func (client *PolicyAssignmentsClient) listForManagementGroupCreateRequest(ctx context.Context, managementGroupID string, options *PolicyAssignmentsClientListForManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listForManagementGroupHandleResponse handles the ListForManagementGroup response.
func (client *PolicyAssignmentsClient) listForManagementGroupHandleResponse(resp *http.Response) (PolicyAssignmentsClientListForManagementGroupResponse, error) {
	result := PolicyAssignmentsClientListForManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignmentListResult); err != nil {
		return PolicyAssignmentsClientListForManagementGroupResponse{}, err
	}
	return result, nil
}

// NewListForResourcePager - This operation retrieves the list of all policy assignments associated with the specified resource
// in the given resource group and subscription that match the optional given $filter. Valid values for
// $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}”. If $filter is not provided, the unfiltered
// list includes all policy assignments associated with the resource, including
// those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource.
// If $filter=atScope() is provided, the returned list includes all policy
// assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained
// within the resource. If $filter=atExactScope() is provided, the returned
// list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '{value}' is provided,
// the returned list includes all policy assignments of the policy definition
// whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific
// resource. If the resource is not part of a parent resource (the more common
// case), the parent resource path should not be provided (or provided as ”). For example a web app could be specified as
// ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == ”,
// {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters
// should be provided. For example a virtual machine DNS name could be
// specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine',
// {resourceType} == 'domainNames', {resourceName} == 'MyComputerName'). A
// convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter,
// format: ({resourceProviderNamespace} == ”, {parentResourcePath} == ”,
// {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
//
// Generated from API version 2025-01-01
//   - resourceGroupName - The name of the resource group containing the resource.
//   - resourceProviderNamespace - The namespace of the resource provider. For example, the namespace of a virtual machine is
//     Microsoft.Compute (from Microsoft.Compute/virtualMachines)
//   - parentResourcePath - The parent resource path. Use empty string if there is none.
//   - resourceType - The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).
//   - resourceName - The name of the resource.
//   - options - PolicyAssignmentsClientListForResourceOptions contains the optional parameters for the PolicyAssignmentsClient.NewListForResourcePager
//     method.
func (client *PolicyAssignmentsClient) NewListForResourcePager(resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string, options *PolicyAssignmentsClientListForResourceOptions) *runtime.Pager[PolicyAssignmentsClientListForResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicyAssignmentsClientListForResourceResponse]{
		More: func(page PolicyAssignmentsClientListForResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicyAssignmentsClientListForResourceResponse) (PolicyAssignmentsClientListForResourceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicyAssignmentsClient.NewListForResourcePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listForResourceCreateRequest(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options)
			}, nil)
			if err != nil {
				return PolicyAssignmentsClientListForResourceResponse{}, err
			}
			return client.listForResourceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listForResourceCreateRequest creates the ListForResource request.
func (client *PolicyAssignmentsClient) listForResourceCreateRequest(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string, options *PolicyAssignmentsClientListForResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{parentResourcePath}", parentResourcePath)
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", resourceType)
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listForResourceHandleResponse handles the ListForResource response.
func (client *PolicyAssignmentsClient) listForResourceHandleResponse(resp *http.Response) (PolicyAssignmentsClientListForResourceResponse, error) {
	result := PolicyAssignmentsClientListForResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignmentListResult); err != nil {
		return PolicyAssignmentsClientListForResourceResponse{}, err
	}
	return result, nil
}

// NewListForResourceGroupPager - This operation retrieves the list of all policy assignments associated with the given resource
// group in the given subscription that match the optional given $filter. Valid values for $filter are:
// 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}”. If $filter is not provided, the unfiltered list includes
// all policy assignments associated with the resource group, including those
// that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource
// group. If $filter=atScope() is provided, the returned list includes all policy
// assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources
// contained within the resource group. If $filter=atExactScope() is provided,
// the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}'
// is provided, the returned list includes all policy assignments of the
// policy definition whose id is {value} that apply to the resource group.
//
// Generated from API version 2025-01-01
//   - resourceGroupName - The name of the resource group that contains policy assignments.
//   - options - PolicyAssignmentsClientListForResourceGroupOptions contains the optional parameters for the PolicyAssignmentsClient.NewListForResourceGroupPager
//     method.
func (client *PolicyAssignmentsClient) NewListForResourceGroupPager(resourceGroupName string, options *PolicyAssignmentsClientListForResourceGroupOptions) *runtime.Pager[PolicyAssignmentsClientListForResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicyAssignmentsClientListForResourceGroupResponse]{
		More: func(page PolicyAssignmentsClientListForResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicyAssignmentsClientListForResourceGroupResponse) (PolicyAssignmentsClientListForResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicyAssignmentsClient.NewListForResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listForResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return PolicyAssignmentsClientListForResourceGroupResponse{}, err
			}
			return client.listForResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listForResourceGroupCreateRequest creates the ListForResourceGroup request.
func (client *PolicyAssignmentsClient) listForResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *PolicyAssignmentsClientListForResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listForResourceGroupHandleResponse handles the ListForResourceGroup response.
func (client *PolicyAssignmentsClient) listForResourceGroupHandleResponse(resp *http.Response) (PolicyAssignmentsClientListForResourceGroupResponse, error) {
	result := PolicyAssignmentsClientListForResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignmentListResult); err != nil {
		return PolicyAssignmentsClientListForResourceGroupResponse{}, err
	}
	return result, nil
}

// Update - This operation updates a policy assignment with the given scope and name. Policy assignments apply to all resources
// contained within their scope. For example, when you assign a policy at resource
// group scope, that policy applies to all resources in the group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - scope - The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}',
//     or resource (format:
//     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
//   - policyAssignmentName - The name of the policy assignment.
//   - parameters - Parameters for policy assignment patch request.
//   - options - PolicyAssignmentsClientUpdateOptions contains the optional parameters for the PolicyAssignmentsClient.Update
//     method.
func (client *PolicyAssignmentsClient) Update(ctx context.Context, scope string, policyAssignmentName string, parameters PolicyAssignmentUpdate, options *PolicyAssignmentsClientUpdateOptions) (PolicyAssignmentsClientUpdateResponse, error) {
	var err error
	const operationName = "PolicyAssignmentsClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, scope, policyAssignmentName, parameters, options)
	if err != nil {
		return PolicyAssignmentsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyAssignmentsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyAssignmentsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *PolicyAssignmentsClient) updateCreateRequest(ctx context.Context, scope string, policyAssignmentName string, parameters PolicyAssignmentUpdate, options *PolicyAssignmentsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyAssignmentName == "" {
		return nil, errors.New("parameter policyAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentName}", url.PathEscape(policyAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *PolicyAssignmentsClient) updateHandleResponse(resp *http.Response) (PolicyAssignmentsClientUpdateResponse, error) {
	result := PolicyAssignmentsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsClientUpdateResponse{}, err
	}
	return result, nil
}

// UpdateByID - This operation updates the policy assignment with the given ID. Policy assignments made on a scope apply to
// all resources contained in that scope. For example, when you assign a policy to a resource
// group that policy applies to all resources in the group. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// Valid scopes are:
// management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
// '/subscriptions/{subscriptionId}'), resource group (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policyAssignmentID - The ID of the policy assignment to update. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
//   - parameters - Parameters for policy assignment patch request.
//   - options - PolicyAssignmentsClientUpdateByIDOptions contains the optional parameters for the PolicyAssignmentsClient.UpdateByID
//     method.
func (client *PolicyAssignmentsClient) UpdateByID(ctx context.Context, policyAssignmentID string, parameters PolicyAssignmentUpdate, options *PolicyAssignmentsClientUpdateByIDOptions) (PolicyAssignmentsClientUpdateByIDResponse, error) {
	var err error
	const operationName = "PolicyAssignmentsClient.UpdateByID"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateByIDCreateRequest(ctx, policyAssignmentID, parameters, options)
	if err != nil {
		return PolicyAssignmentsClientUpdateByIDResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyAssignmentsClientUpdateByIDResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyAssignmentsClientUpdateByIDResponse{}, err
	}
	resp, err := client.updateByIDHandleResponse(httpResp)
	return resp, err
}

// updateByIDCreateRequest creates the UpdateByID request.
func (client *PolicyAssignmentsClient) updateByIDCreateRequest(ctx context.Context, policyAssignmentID string, parameters PolicyAssignmentUpdate, options *PolicyAssignmentsClientUpdateByIDOptions) (*policy.Request, error) {
	urlPath := "/{policyAssignmentId}"
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", policyAssignmentID)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// updateByIDHandleResponse handles the UpdateByID response.
func (client *PolicyAssignmentsClient) updateByIDHandleResponse(resp *http.Response) (PolicyAssignmentsClientUpdateByIDResponse, error) {
	result := PolicyAssignmentsClientUpdateByIDResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsClientUpdateByIDResponse{}, err
	}
	return result, nil
}
