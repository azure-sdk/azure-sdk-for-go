//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearning/armmachinelearning/v4"
	"net/http"
	"net/url"
	"regexp"
)

// ConnectionServer is a fake server for instances of the armmachinelearning.ConnectionClient type.
type ConnectionServer struct {
	// BeginCreateOrUpdateDeployment is the fake for method ConnectionClient.BeginCreateOrUpdateDeployment
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdateDeployment func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, deploymentName string, body armmachinelearning.EndpointDeploymentResourcePropertiesBasicResource, options *armmachinelearning.ConnectionClientBeginCreateOrUpdateDeploymentOptions) (resp azfake.PollerResponder[armmachinelearning.ConnectionClientCreateOrUpdateDeploymentResponse], errResp azfake.ErrorResponder)

	// BeginDeleteDeployment is the fake for method ConnectionClient.BeginDeleteDeployment
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDeleteDeployment func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, deploymentName string, options *armmachinelearning.ConnectionClientBeginDeleteDeploymentOptions) (resp azfake.PollerResponder[armmachinelearning.ConnectionClientDeleteDeploymentResponse], errResp azfake.ErrorResponder)

	// GetDeployment is the fake for method ConnectionClient.GetDeployment
	// HTTP status codes to indicate success: http.StatusOK
	GetDeployment func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, deploymentName string, options *armmachinelearning.ConnectionClientGetDeploymentOptions) (resp azfake.Responder[armmachinelearning.ConnectionClientGetDeploymentResponse], errResp azfake.ErrorResponder)

	// NewGetModelsPager is the fake for method ConnectionClient.NewGetModelsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetModelsPager func(resourceGroupName string, workspaceName string, connectionName string, options *armmachinelearning.ConnectionClientGetModelsOptions) (resp azfake.PagerResponder[armmachinelearning.ConnectionClientGetModelsResponse])

	// NewListDeploymentsPager is the fake for method ConnectionClient.NewListDeploymentsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListDeploymentsPager func(resourceGroupName string, workspaceName string, connectionName string, options *armmachinelearning.ConnectionClientListDeploymentsOptions) (resp azfake.PagerResponder[armmachinelearning.ConnectionClientListDeploymentsResponse])

	// ListModels is the fake for method ConnectionClient.ListModels
	// HTTP status codes to indicate success: http.StatusOK
	ListModels func(ctx context.Context, resourceGroupName string, workspaceName string, options *armmachinelearning.ConnectionClientListModelsOptions) (resp azfake.Responder[armmachinelearning.ConnectionClientListModelsResponse], errResp azfake.ErrorResponder)
}

// NewConnectionServerTransport creates a new instance of ConnectionServerTransport with the provided implementation.
// The returned ConnectionServerTransport instance is connected to an instance of armmachinelearning.ConnectionClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewConnectionServerTransport(srv *ConnectionServer) *ConnectionServerTransport {
	return &ConnectionServerTransport{
		srv:                           srv,
		beginCreateOrUpdateDeployment: newTracker[azfake.PollerResponder[armmachinelearning.ConnectionClientCreateOrUpdateDeploymentResponse]](),
		beginDeleteDeployment:         newTracker[azfake.PollerResponder[armmachinelearning.ConnectionClientDeleteDeploymentResponse]](),
		newGetModelsPager:             newTracker[azfake.PagerResponder[armmachinelearning.ConnectionClientGetModelsResponse]](),
		newListDeploymentsPager:       newTracker[azfake.PagerResponder[armmachinelearning.ConnectionClientListDeploymentsResponse]](),
	}
}

// ConnectionServerTransport connects instances of armmachinelearning.ConnectionClient to instances of ConnectionServer.
// Don't use this type directly, use NewConnectionServerTransport instead.
type ConnectionServerTransport struct {
	srv                           *ConnectionServer
	beginCreateOrUpdateDeployment *tracker[azfake.PollerResponder[armmachinelearning.ConnectionClientCreateOrUpdateDeploymentResponse]]
	beginDeleteDeployment         *tracker[azfake.PollerResponder[armmachinelearning.ConnectionClientDeleteDeploymentResponse]]
	newGetModelsPager             *tracker[azfake.PagerResponder[armmachinelearning.ConnectionClientGetModelsResponse]]
	newListDeploymentsPager       *tracker[azfake.PagerResponder[armmachinelearning.ConnectionClientListDeploymentsResponse]]
}

// Do implements the policy.Transporter interface for ConnectionServerTransport.
func (c *ConnectionServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ConnectionClient.BeginCreateOrUpdateDeployment":
		resp, err = c.dispatchBeginCreateOrUpdateDeployment(req)
	case "ConnectionClient.BeginDeleteDeployment":
		resp, err = c.dispatchBeginDeleteDeployment(req)
	case "ConnectionClient.GetDeployment":
		resp, err = c.dispatchGetDeployment(req)
	case "ConnectionClient.NewGetModelsPager":
		resp, err = c.dispatchNewGetModelsPager(req)
	case "ConnectionClient.NewListDeploymentsPager":
		resp, err = c.dispatchNewListDeploymentsPager(req)
	case "ConnectionClient.ListModels":
		resp, err = c.dispatchListModels(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *ConnectionServerTransport) dispatchBeginCreateOrUpdateDeployment(req *http.Request) (*http.Response, error) {
	if c.srv.BeginCreateOrUpdateDeployment == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdateDeployment not implemented")}
	}
	beginCreateOrUpdateDeployment := c.beginCreateOrUpdateDeployment.get(req)
	if beginCreateOrUpdateDeployment == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deployments/(?P<deploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmachinelearning.EndpointDeploymentResourcePropertiesBasicResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		deploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginCreateOrUpdateDeployment(req.Context(), resourceGroupNameParam, workspaceNameParam, connectionNameParam, deploymentNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdateDeployment = &respr
		c.beginCreateOrUpdateDeployment.add(req, beginCreateOrUpdateDeployment)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdateDeployment, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		c.beginCreateOrUpdateDeployment.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdateDeployment) {
		c.beginCreateOrUpdateDeployment.remove(req)
	}

	return resp, nil
}

func (c *ConnectionServerTransport) dispatchBeginDeleteDeployment(req *http.Request) (*http.Response, error) {
	if c.srv.BeginDeleteDeployment == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteDeployment not implemented")}
	}
	beginDeleteDeployment := c.beginDeleteDeployment.get(req)
	if beginDeleteDeployment == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deployments/(?P<deploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		deploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginDeleteDeployment(req.Context(), resourceGroupNameParam, workspaceNameParam, connectionNameParam, deploymentNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteDeployment = &respr
		c.beginDeleteDeployment.add(req, beginDeleteDeployment)
	}

	resp, err := server.PollerResponderNext(beginDeleteDeployment, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		c.beginDeleteDeployment.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteDeployment) {
		c.beginDeleteDeployment.remove(req)
	}

	return resp, nil
}

func (c *ConnectionServerTransport) dispatchGetDeployment(req *http.Request) (*http.Response, error) {
	if c.srv.GetDeployment == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDeployment not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deployments/(?P<deploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
	if err != nil {
		return nil, err
	}
	deploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.GetDeployment(req.Context(), resourceGroupNameParam, workspaceNameParam, connectionNameParam, deploymentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EndpointDeploymentResourcePropertiesBasicResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConnectionServerTransport) dispatchNewGetModelsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewGetModelsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetModelsPager not implemented")}
	}
	newGetModelsPager := c.newGetModelsPager.get(req)
	if newGetModelsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/models`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewGetModelsPager(resourceGroupNameParam, workspaceNameParam, connectionNameParam, nil)
		newGetModelsPager = &resp
		c.newGetModelsPager.add(req, newGetModelsPager)
		server.PagerResponderInjectNextLinks(newGetModelsPager, req, func(page *armmachinelearning.ConnectionClientGetModelsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetModelsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newGetModelsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetModelsPager) {
		c.newGetModelsPager.remove(req)
	}
	return resp, nil
}

func (c *ConnectionServerTransport) dispatchNewListDeploymentsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListDeploymentsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListDeploymentsPager not implemented")}
	}
	newListDeploymentsPager := c.newListDeploymentsPager.get(req)
	if newListDeploymentsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deployments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListDeploymentsPager(resourceGroupNameParam, workspaceNameParam, connectionNameParam, nil)
		newListDeploymentsPager = &resp
		c.newListDeploymentsPager.add(req, newListDeploymentsPager)
		server.PagerResponderInjectNextLinks(newListDeploymentsPager, req, func(page *armmachinelearning.ConnectionClientListDeploymentsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListDeploymentsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListDeploymentsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListDeploymentsPager) {
		c.newListDeploymentsPager.remove(req)
	}
	return resp, nil
}

func (c *ConnectionServerTransport) dispatchListModels(req *http.Request) (*http.Response, error) {
	if c.srv.ListModels == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListModels not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listConnectionModels`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.ListModels(req.Context(), resourceGroupNameParam, workspaceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EndpointModels, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
