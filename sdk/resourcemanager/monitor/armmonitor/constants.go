//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
	moduleVersion = "v0.11.0"
)

// AlertSeverity - Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required
// only for rules of the kind LogAlert.
type AlertSeverity int64

const (
	AlertSeverityFour  AlertSeverity = 4
	AlertSeverityOne   AlertSeverity = 1
	AlertSeverityThree AlertSeverity = 3
	AlertSeverityTwo   AlertSeverity = 2
	AlertSeverityZero  AlertSeverity = 0
)

// PossibleAlertSeverityValues returns the possible values for the AlertSeverity const type.
func PossibleAlertSeverityValues() []AlertSeverity {
	return []AlertSeverity{
		AlertSeverityFour,
		AlertSeverityOne,
		AlertSeverityThree,
		AlertSeverityTwo,
		AlertSeverityZero,
	}
}

// ConditionOperator - The criteria operator. Relevant and required only for rules of the kind LogAlert.
type ConditionOperator string

const (
	ConditionOperatorEquals             ConditionOperator = "Equals"
	ConditionOperatorGreaterOrLessThan  ConditionOperator = "GreaterOrLessThan"
	ConditionOperatorGreaterThan        ConditionOperator = "GreaterThan"
	ConditionOperatorGreaterThanOrEqual ConditionOperator = "GreaterThanOrEqual"
	ConditionOperatorLessThan           ConditionOperator = "LessThan"
	ConditionOperatorLessThanOrEqual    ConditionOperator = "LessThanOrEqual"
)

// PossibleConditionOperatorValues returns the possible values for the ConditionOperator const type.
func PossibleConditionOperatorValues() []ConditionOperator {
	return []ConditionOperator{
		ConditionOperatorEquals,
		ConditionOperatorGreaterOrLessThan,
		ConditionOperatorGreaterThan,
		ConditionOperatorGreaterThanOrEqual,
		ConditionOperatorLessThan,
		ConditionOperatorLessThanOrEqual,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// CriterionType - Specifies the type of threshold criteria
type CriterionType string

const (
	CriterionTypeDynamicThresholdCriterion CriterionType = "DynamicThresholdCriterion"
	CriterionTypeStaticThresholdCriterion  CriterionType = "StaticThresholdCriterion"
)

// PossibleCriterionTypeValues returns the possible values for the CriterionType const type.
func PossibleCriterionTypeValues() []CriterionType {
	return []CriterionType{
		CriterionTypeDynamicThresholdCriterion,
		CriterionTypeStaticThresholdCriterion,
	}
}

// DimensionOperator - Operator for dimension values
type DimensionOperator string

const (
	DimensionOperatorExclude DimensionOperator = "Exclude"
	DimensionOperatorInclude DimensionOperator = "Include"
)

// PossibleDimensionOperatorValues returns the possible values for the DimensionOperator const type.
func PossibleDimensionOperatorValues() []DimensionOperator {
	return []DimensionOperator{
		DimensionOperatorExclude,
		DimensionOperatorInclude,
	}
}

// IdentityType - Type of managed service identity.
type IdentityType string

const (
	IdentityTypeNone           IdentityType = "None"
	IdentityTypeSystemAssigned IdentityType = "SystemAssigned"
	IdentityTypeUserAssigned   IdentityType = "UserAssigned"
)

// PossibleIdentityTypeValues returns the possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{
		IdentityTypeNone,
		IdentityTypeSystemAssigned,
		IdentityTypeUserAssigned,
	}
}

// IncidentManagementService - The incident management service type
type IncidentManagementService string

const (
	IncidentManagementServiceIcm IncidentManagementService = "Icm"
)

// PossibleIncidentManagementServiceValues returns the possible values for the IncidentManagementService const type.
func PossibleIncidentManagementServiceValues() []IncidentManagementService {
	return []IncidentManagementService{
		IncidentManagementServiceIcm,
	}
}

// Kind - Indicates the type of scheduled query rule. The default is LogAlert.
type Kind string

const (
	KindEventLogAlert Kind = "EventLogAlert"
	KindLogAlert      Kind = "LogAlert"
	KindLogToMetric   Kind = "LogToMetric"
)

// PossibleKindValues returns the possible values for the Kind const type.
func PossibleKindValues() []Kind {
	return []Kind{
		KindEventLogAlert,
		KindLogAlert,
		KindLogToMetric,
	}
}

// ManagedServiceIdentityType - Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                       ManagedServiceIdentityType = "None"
	ManagedServiceIdentityTypeSystemAssigned             ManagedServiceIdentityType = "SystemAssigned"
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned,UserAssigned"
	ManagedServiceIdentityTypeUserAssigned               ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns the possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{
		ManagedServiceIdentityTypeNone,
		ManagedServiceIdentityTypeSystemAssigned,
		ManagedServiceIdentityTypeSystemAssignedUserAssigned,
		ManagedServiceIdentityTypeUserAssigned,
	}
}

// ReceiverStatus - Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.
type ReceiverStatus string

const (
	ReceiverStatusDisabled     ReceiverStatus = "Disabled"
	ReceiverStatusEnabled      ReceiverStatus = "Enabled"
	ReceiverStatusNotSpecified ReceiverStatus = "NotSpecified"
)

// PossibleReceiverStatusValues returns the possible values for the ReceiverStatus const type.
func PossibleReceiverStatusValues() []ReceiverStatus {
	return []ReceiverStatus{
		ReceiverStatusDisabled,
		ReceiverStatusEnabled,
		ReceiverStatusNotSpecified,
	}
}

// TimeAggregation - Aggregation type. Relevant and required only for rules of the kind LogAlert.
type TimeAggregation string

const (
	TimeAggregationAverage TimeAggregation = "Average"
	TimeAggregationCount   TimeAggregation = "Count"
	TimeAggregationMaximum TimeAggregation = "Maximum"
	TimeAggregationMinimum TimeAggregation = "Minimum"
	TimeAggregationTotal   TimeAggregation = "Total"
)

// PossibleTimeAggregationValues returns the possible values for the TimeAggregation const type.
func PossibleTimeAggregationValues() []TimeAggregation {
	return []TimeAggregation{
		TimeAggregationAverage,
		TimeAggregationCount,
		TimeAggregationMaximum,
		TimeAggregationMinimum,
		TimeAggregationTotal,
	}
}
