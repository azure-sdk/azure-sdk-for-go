//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// NspLoggingConfigurationClient contains the methods for the NspLoggingConfiguration group.
// Don't use this type directly, use NewNspLoggingConfigurationClient() instead.
type NspLoggingConfigurationClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewNspLoggingConfigurationClient creates a new instance of NspLoggingConfigurationClient with the specified values.
//   - subscriptionID - The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription
//     ID forms part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNspLoggingConfigurationClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*NspLoggingConfigurationClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NspLoggingConfigurationClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates NSP logging configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - loggingConfigurationName - The name of the NSP logging configuration. Accepts 'instance' as name.
//   - parameters - Parameters that hold the NspLoggingConfiguration to be created/updated.
//   - options - NspLoggingConfigurationClientCreateOrUpdateOptions contains the optional parameters for the NspLoggingConfigurationClient.CreateOrUpdate
//     method.
func (client *NspLoggingConfigurationClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, loggingConfigurationName string, parameters NspLoggingConfiguration, options *NspLoggingConfigurationClientCreateOrUpdateOptions) (NspLoggingConfigurationClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "NspLoggingConfigurationClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, loggingConfigurationName, parameters, options)
	if err != nil {
		return NspLoggingConfigurationClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NspLoggingConfigurationClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return NspLoggingConfigurationClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *NspLoggingConfigurationClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, loggingConfigurationName string, parameters NspLoggingConfiguration, options *NspLoggingConfigurationClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/loggingConfigurations/{loggingConfigurationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if loggingConfigurationName == "" {
		return nil, errors.New("parameter loggingConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loggingConfigurationName}", url.PathEscape(loggingConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *NspLoggingConfigurationClient) createOrUpdateHandleResponse(resp *http.Response) (NspLoggingConfigurationClientCreateOrUpdateResponse, error) {
	result := NspLoggingConfigurationClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NspLoggingConfiguration); err != nil {
		return NspLoggingConfigurationClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes an NSP Logging configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - loggingConfigurationName - The name of the NSP logging configuration. Accepts 'instance' as name.
//   - options - NspLoggingConfigurationClientDeleteOptions contains the optional parameters for the NspLoggingConfigurationClient.Delete
//     method.
func (client *NspLoggingConfigurationClient) Delete(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, loggingConfigurationName string, options *NspLoggingConfigurationClientDeleteOptions) (NspLoggingConfigurationClientDeleteResponse, error) {
	var err error
	const operationName = "NspLoggingConfigurationClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, loggingConfigurationName, options)
	if err != nil {
		return NspLoggingConfigurationClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NspLoggingConfigurationClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return NspLoggingConfigurationClientDeleteResponse{}, err
	}
	return NspLoggingConfigurationClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *NspLoggingConfigurationClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, loggingConfigurationName string, options *NspLoggingConfigurationClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/loggingConfigurations/{loggingConfigurationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if loggingConfigurationName == "" {
		return nil, errors.New("parameter loggingConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loggingConfigurationName}", url.PathEscape(loggingConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the NSP logging configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - loggingConfigurationName - The name of the NSP logging configuration. Accepts 'instance' as name.
//   - options - NspLoggingConfigurationClientGetOptions contains the optional parameters for the NspLoggingConfigurationClient.Get
//     method.
func (client *NspLoggingConfigurationClient) Get(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, loggingConfigurationName string, options *NspLoggingConfigurationClientGetOptions) (NspLoggingConfigurationClientGetResponse, error) {
	var err error
	const operationName = "NspLoggingConfigurationClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, loggingConfigurationName, options)
	if err != nil {
		return NspLoggingConfigurationClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NspLoggingConfigurationClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NspLoggingConfigurationClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *NspLoggingConfigurationClient) getCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, loggingConfigurationName string, options *NspLoggingConfigurationClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/loggingConfigurations/{loggingConfigurationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if loggingConfigurationName == "" {
		return nil, errors.New("parameter loggingConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loggingConfigurationName}", url.PathEscape(loggingConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NspLoggingConfigurationClient) getHandleResponse(resp *http.Response) (NspLoggingConfigurationClientGetResponse, error) {
	result := NspLoggingConfigurationClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NspLoggingConfiguration); err != nil {
		return NspLoggingConfigurationClientGetResponse{}, err
	}
	return result, nil
}
