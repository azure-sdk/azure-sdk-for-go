// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armdatadog

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MarketplaceAgreementsOperationGroupClient contains the methods for the MarketplaceAgreementsOperationGroup group.
// Don't use this type directly, use NewMarketplaceAgreementsOperationGroupClient() instead.
type MarketplaceAgreementsOperationGroupClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewMarketplaceAgreementsOperationGroupClient creates a new instance of MarketplaceAgreementsOperationGroupClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewMarketplaceAgreementsOperationGroupClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MarketplaceAgreementsOperationGroupClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &MarketplaceAgreementsOperationGroupClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create Datadog marketplace agreement in the subscription.
//
// Create Datadog marketplace agreement in the subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-20
//   - body - The request body
//   - options - MarketplaceAgreementsOperationGroupClientCreateOrUpdateOptions contains the optional parameters for the MarketplaceAgreementsOperationGroupClient.CreateOrUpdate
//     method.
func (client *MarketplaceAgreementsOperationGroupClient) CreateOrUpdate(ctx context.Context, body AgreementResource, options *MarketplaceAgreementsOperationGroupClientCreateOrUpdateOptions) (MarketplaceAgreementsOperationGroupClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "MarketplaceAgreementsOperationGroupClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, body, options)
	if err != nil {
		return MarketplaceAgreementsOperationGroupClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MarketplaceAgreementsOperationGroupClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MarketplaceAgreementsOperationGroupClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *MarketplaceAgreementsOperationGroupClient) createOrUpdateCreateRequest(ctx context.Context, body AgreementResource, _ *MarketplaceAgreementsOperationGroupClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements/default"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *MarketplaceAgreementsOperationGroupClient) createOrUpdateHandleResponse(resp *http.Response) (MarketplaceAgreementsOperationGroupClientCreateOrUpdateResponse, error) {
	result := MarketplaceAgreementsOperationGroupClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AgreementResource); err != nil {
		return MarketplaceAgreementsOperationGroupClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// NewListPager - List Datadog marketplace agreements in the subscription.
//
// List Datadog marketplace agreements in the subscription.
//
// Generated from API version 2023-10-20
//   - options - MarketplaceAgreementsOperationGroupClientListOptions contains the optional parameters for the MarketplaceAgreementsOperationGroupClient.NewListPager
//     method.
func (client *MarketplaceAgreementsOperationGroupClient) NewListPager(options *MarketplaceAgreementsOperationGroupClientListOptions) *runtime.Pager[MarketplaceAgreementsOperationGroupClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[MarketplaceAgreementsOperationGroupClientListResponse]{
		More: func(page MarketplaceAgreementsOperationGroupClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MarketplaceAgreementsOperationGroupClientListResponse) (MarketplaceAgreementsOperationGroupClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "MarketplaceAgreementsOperationGroupClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return MarketplaceAgreementsOperationGroupClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *MarketplaceAgreementsOperationGroupClient) listCreateRequest(ctx context.Context, _ *MarketplaceAgreementsOperationGroupClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *MarketplaceAgreementsOperationGroupClient) listHandleResponse(resp *http.Response) (MarketplaceAgreementsOperationGroupClientListResponse, error) {
	result := MarketplaceAgreementsOperationGroupClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AgreementResourceListResponse); err != nil {
		return MarketplaceAgreementsOperationGroupClientListResponse{}, err
	}
	return result, nil
}
