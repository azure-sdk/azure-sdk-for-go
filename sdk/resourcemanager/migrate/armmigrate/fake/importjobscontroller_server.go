//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate"
	"net/http"
	"net/url"
	"regexp"
)

// ImportJobsControllerServer is a fake server for instances of the armmigrate.ImportJobsControllerClient type.
type ImportJobsControllerServer struct {
	// Get is the fake for method ImportJobsControllerClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *armmigrate.ImportJobsControllerClientGetOptions) (resp azfake.Responder[armmigrate.ImportJobsControllerClientGetResponse], errResp azfake.ErrorResponder)

	// GetDeletejob is the fake for method ImportJobsControllerClient.GetDeletejob
	// HTTP status codes to indicate success: http.StatusOK
	GetDeletejob func(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *armmigrate.ImportJobsControllerClientGetDeletejobOptions) (resp azfake.Responder[armmigrate.ImportJobsControllerClientGetDeletejobResponse], errResp azfake.ErrorResponder)

	// GetExportjob is the fake for method ImportJobsControllerClient.GetExportjob
	// HTTP status codes to indicate success: http.StatusOK
	GetExportjob func(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *armmigrate.ImportJobsControllerClientGetExportjobOptions) (resp azfake.Responder[armmigrate.ImportJobsControllerClientGetExportjobResponse], errResp azfake.ErrorResponder)

	// GetImportjob is the fake for method ImportJobsControllerClient.GetImportjob
	// HTTP status codes to indicate success: http.StatusOK
	GetImportjob func(ctx context.Context, resourceGroupName string, siteName string, jobName string, options *armmigrate.ImportJobsControllerClientGetImportjobOptions) (resp azfake.Responder[armmigrate.ImportJobsControllerClientGetImportjobResponse], errResp azfake.ErrorResponder)

	// NewListByImportSitePager is the fake for method ImportJobsControllerClient.NewListByImportSitePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByImportSitePager func(resourceGroupName string, siteName string, options *armmigrate.ImportJobsControllerClientListByImportSiteOptions) (resp azfake.PagerResponder[armmigrate.ImportJobsControllerClientListByImportSiteResponse])

	// NewListDeletejobsPager is the fake for method ImportJobsControllerClient.NewListDeletejobsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListDeletejobsPager func(resourceGroupName string, siteName string, options *armmigrate.ImportJobsControllerClientListDeletejobsOptions) (resp azfake.PagerResponder[armmigrate.ImportJobsControllerClientListDeletejobsResponse])

	// NewListExportjobsPager is the fake for method ImportJobsControllerClient.NewListExportjobsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListExportjobsPager func(resourceGroupName string, siteName string, options *armmigrate.ImportJobsControllerClientListExportjobsOptions) (resp azfake.PagerResponder[armmigrate.ImportJobsControllerClientListExportjobsResponse])

	// NewListImportjobsPager is the fake for method ImportJobsControllerClient.NewListImportjobsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListImportjobsPager func(resourceGroupName string, siteName string, options *armmigrate.ImportJobsControllerClientListImportjobsOptions) (resp azfake.PagerResponder[armmigrate.ImportJobsControllerClientListImportjobsResponse])
}

// NewImportJobsControllerServerTransport creates a new instance of ImportJobsControllerServerTransport with the provided implementation.
// The returned ImportJobsControllerServerTransport instance is connected to an instance of armmigrate.ImportJobsControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewImportJobsControllerServerTransport(srv *ImportJobsControllerServer) *ImportJobsControllerServerTransport {
	return &ImportJobsControllerServerTransport{
		srv:                      srv,
		newListByImportSitePager: newTracker[azfake.PagerResponder[armmigrate.ImportJobsControllerClientListByImportSiteResponse]](),
		newListDeletejobsPager:   newTracker[azfake.PagerResponder[armmigrate.ImportJobsControllerClientListDeletejobsResponse]](),
		newListExportjobsPager:   newTracker[azfake.PagerResponder[armmigrate.ImportJobsControllerClientListExportjobsResponse]](),
		newListImportjobsPager:   newTracker[azfake.PagerResponder[armmigrate.ImportJobsControllerClientListImportjobsResponse]](),
	}
}

// ImportJobsControllerServerTransport connects instances of armmigrate.ImportJobsControllerClient to instances of ImportJobsControllerServer.
// Don't use this type directly, use NewImportJobsControllerServerTransport instead.
type ImportJobsControllerServerTransport struct {
	srv                      *ImportJobsControllerServer
	newListByImportSitePager *tracker[azfake.PagerResponder[armmigrate.ImportJobsControllerClientListByImportSiteResponse]]
	newListDeletejobsPager   *tracker[azfake.PagerResponder[armmigrate.ImportJobsControllerClientListDeletejobsResponse]]
	newListExportjobsPager   *tracker[azfake.PagerResponder[armmigrate.ImportJobsControllerClientListExportjobsResponse]]
	newListImportjobsPager   *tracker[azfake.PagerResponder[armmigrate.ImportJobsControllerClientListImportjobsResponse]]
}

// Do implements the policy.Transporter interface for ImportJobsControllerServerTransport.
func (i *ImportJobsControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ImportJobsControllerClient.Get":
		resp, err = i.dispatchGet(req)
	case "ImportJobsControllerClient.GetDeletejob":
		resp, err = i.dispatchGetDeletejob(req)
	case "ImportJobsControllerClient.GetExportjob":
		resp, err = i.dispatchGetExportjob(req)
	case "ImportJobsControllerClient.GetImportjob":
		resp, err = i.dispatchGetImportjob(req)
	case "ImportJobsControllerClient.NewListByImportSitePager":
		resp, err = i.dispatchNewListByImportSitePager(req)
	case "ImportJobsControllerClient.NewListDeletejobsPager":
		resp, err = i.dispatchNewListDeletejobsPager(req)
	case "ImportJobsControllerClient.NewListExportjobsPager":
		resp, err = i.dispatchNewListExportjobsPager(req)
	case "ImportJobsControllerClient.NewListImportjobsPager":
		resp, err = i.dispatchNewListImportjobsPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (i *ImportJobsControllerServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if i.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/importSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jobs/(?P<jobName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	jobNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jobName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Get(req.Context(), resourceGroupNameParam, siteNameParam, jobNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ImportJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImportJobsControllerServerTransport) dispatchGetDeletejob(req *http.Request) (*http.Response, error) {
	if i.srv.GetDeletejob == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDeletejob not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/importSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deleteJobs/(?P<jobName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	jobNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jobName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetDeletejob(req.Context(), resourceGroupNameParam, siteNameParam, jobNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeleteImportMachinesJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImportJobsControllerServerTransport) dispatchGetExportjob(req *http.Request) (*http.Response, error) {
	if i.srv.GetExportjob == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetExportjob not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/importSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/exportJobs/(?P<jobName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	jobNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jobName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetExportjob(req.Context(), resourceGroupNameParam, siteNameParam, jobNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExportImportedMachinesJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImportJobsControllerServerTransport) dispatchGetImportjob(req *http.Request) (*http.Response, error) {
	if i.srv.GetImportjob == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetImportjob not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/importSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/importJobs/(?P<jobName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	jobNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jobName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetImportjob(req.Context(), resourceGroupNameParam, siteNameParam, jobNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ImportMachinesJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImportJobsControllerServerTransport) dispatchNewListByImportSitePager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListByImportSitePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByImportSitePager not implemented")}
	}
	newListByImportSitePager := i.newListByImportSitePager.get(req)
	if newListByImportSitePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/importSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListByImportSitePager(resourceGroupNameParam, siteNameParam, nil)
		newListByImportSitePager = &resp
		i.newListByImportSitePager.add(req, newListByImportSitePager)
		server.PagerResponderInjectNextLinks(newListByImportSitePager, req, func(page *armmigrate.ImportJobsControllerClientListByImportSiteResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByImportSitePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListByImportSitePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByImportSitePager) {
		i.newListByImportSitePager.remove(req)
	}
	return resp, nil
}

func (i *ImportJobsControllerServerTransport) dispatchNewListDeletejobsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListDeletejobsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListDeletejobsPager not implemented")}
	}
	newListDeletejobsPager := i.newListDeletejobsPager.get(req)
	if newListDeletejobsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/importSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deleteJobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListDeletejobsPager(resourceGroupNameParam, siteNameParam, nil)
		newListDeletejobsPager = &resp
		i.newListDeletejobsPager.add(req, newListDeletejobsPager)
		server.PagerResponderInjectNextLinks(newListDeletejobsPager, req, func(page *armmigrate.ImportJobsControllerClientListDeletejobsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListDeletejobsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListDeletejobsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListDeletejobsPager) {
		i.newListDeletejobsPager.remove(req)
	}
	return resp, nil
}

func (i *ImportJobsControllerServerTransport) dispatchNewListExportjobsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListExportjobsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListExportjobsPager not implemented")}
	}
	newListExportjobsPager := i.newListExportjobsPager.get(req)
	if newListExportjobsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/importSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/exportJobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListExportjobsPager(resourceGroupNameParam, siteNameParam, nil)
		newListExportjobsPager = &resp
		i.newListExportjobsPager.add(req, newListExportjobsPager)
		server.PagerResponderInjectNextLinks(newListExportjobsPager, req, func(page *armmigrate.ImportJobsControllerClientListExportjobsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListExportjobsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListExportjobsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListExportjobsPager) {
		i.newListExportjobsPager.remove(req)
	}
	return resp, nil
}

func (i *ImportJobsControllerServerTransport) dispatchNewListImportjobsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListImportjobsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListImportjobsPager not implemented")}
	}
	newListImportjobsPager := i.newListImportjobsPager.get(req)
	if newListImportjobsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/importSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/importJobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListImportjobsPager(resourceGroupNameParam, siteNameParam, nil)
		newListImportjobsPager = &resp
		i.newListImportjobsPager.add(req, newListImportjobsPager)
		server.PagerResponderInjectNextLinks(newListImportjobsPager, req, func(page *armmigrate.ImportJobsControllerClientListImportjobsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListImportjobsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListImportjobsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListImportjobsPager) {
		i.newListImportjobsPager.remove(req)
	}
	return resp, nil
}
