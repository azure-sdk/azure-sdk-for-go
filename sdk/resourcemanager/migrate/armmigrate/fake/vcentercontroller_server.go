//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate/v2"
	"net/http"
	"net/url"
	"regexp"
)

// VcenterControllerServer is a fake server for instances of the armmigrate.VcenterControllerClient type.
type VcenterControllerServer struct {
	// BeginCreate is the fake for method VcenterControllerClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, siteName string, vcenterName string, body armmigrate.Vcenter, options *armmigrate.VcenterControllerClientBeginCreateOptions) (resp azfake.PollerResponder[armmigrate.VcenterControllerClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method VcenterControllerClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, siteName string, vcenterName string, options *armmigrate.VcenterControllerClientBeginDeleteOptions) (resp azfake.PollerResponder[armmigrate.VcenterControllerClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method VcenterControllerClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, siteName string, vcenterName string, options *armmigrate.VcenterControllerClientGetOptions) (resp azfake.Responder[armmigrate.VcenterControllerClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByVmwareSitePager is the fake for method VcenterControllerClient.NewListByVmwareSitePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByVmwareSitePager func(resourceGroupName string, siteName string, options *armmigrate.VcenterControllerClientListByVmwareSiteOptions) (resp azfake.PagerResponder[armmigrate.VcenterControllerClientListByVmwareSiteResponse])
}

// NewVcenterControllerServerTransport creates a new instance of VcenterControllerServerTransport with the provided implementation.
// The returned VcenterControllerServerTransport instance is connected to an instance of armmigrate.VcenterControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVcenterControllerServerTransport(srv *VcenterControllerServer) *VcenterControllerServerTransport {
	return &VcenterControllerServerTransport{
		srv:                      srv,
		beginCreate:              newTracker[azfake.PollerResponder[armmigrate.VcenterControllerClientCreateResponse]](),
		beginDelete:              newTracker[azfake.PollerResponder[armmigrate.VcenterControllerClientDeleteResponse]](),
		newListByVmwareSitePager: newTracker[azfake.PagerResponder[armmigrate.VcenterControllerClientListByVmwareSiteResponse]](),
	}
}

// VcenterControllerServerTransport connects instances of armmigrate.VcenterControllerClient to instances of VcenterControllerServer.
// Don't use this type directly, use NewVcenterControllerServerTransport instead.
type VcenterControllerServerTransport struct {
	srv                      *VcenterControllerServer
	beginCreate              *tracker[azfake.PollerResponder[armmigrate.VcenterControllerClientCreateResponse]]
	beginDelete              *tracker[azfake.PollerResponder[armmigrate.VcenterControllerClientDeleteResponse]]
	newListByVmwareSitePager *tracker[azfake.PagerResponder[armmigrate.VcenterControllerClientListByVmwareSiteResponse]]
}

// Do implements the policy.Transporter interface for VcenterControllerServerTransport.
func (v *VcenterControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VcenterControllerClient.BeginCreate":
		resp, err = v.dispatchBeginCreate(req)
	case "VcenterControllerClient.BeginDelete":
		resp, err = v.dispatchBeginDelete(req)
	case "VcenterControllerClient.Get":
		resp, err = v.dispatchGet(req)
	case "VcenterControllerClient.NewListByVmwareSitePager":
		resp, err = v.dispatchNewListByVmwareSitePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VcenterControllerServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := v.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/vcenters/(?P<vcenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.Vcenter](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		vcenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vcenterName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginCreate(req.Context(), resourceGroupNameParam, siteNameParam, vcenterNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		v.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		v.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		v.beginCreate.remove(req)
	}

	return resp, nil
}

func (v *VcenterControllerServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := v.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/vcenters/(?P<vcenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		vcenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vcenterName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginDelete(req.Context(), resourceGroupNameParam, siteNameParam, vcenterNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		v.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		v.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		v.beginDelete.remove(req)
	}

	return resp, nil
}

func (v *VcenterControllerServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/vcenters/(?P<vcenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	vcenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vcenterName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.Get(req.Context(), resourceGroupNameParam, siteNameParam, vcenterNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Vcenter, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VcenterControllerServerTransport) dispatchNewListByVmwareSitePager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListByVmwareSitePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByVmwareSitePager not implemented")}
	}
	newListByVmwareSitePager := v.newListByVmwareSitePager.get(req)
	if newListByVmwareSitePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/vcenters`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		var options *armmigrate.VcenterControllerClientListByVmwareSiteOptions
		if filterParam != nil {
			options = &armmigrate.VcenterControllerClientListByVmwareSiteOptions{
				Filter: filterParam,
			}
		}
		resp := v.srv.NewListByVmwareSitePager(resourceGroupNameParam, siteNameParam, options)
		newListByVmwareSitePager = &resp
		v.newListByVmwareSitePager.add(req, newListByVmwareSitePager)
		server.PagerResponderInjectNextLinks(newListByVmwareSitePager, req, func(page *armmigrate.VcenterControllerClientListByVmwareSiteResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByVmwareSitePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListByVmwareSitePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByVmwareSitePager) {
		v.newListByVmwareSitePager.remove(req)
	}
	return resp, nil
}
