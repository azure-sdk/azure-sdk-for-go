// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationmodernization

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// WorkloadInstanceClient contains the methods for the WorkloadInstance group.
// Don't use this type directly, use NewWorkloadInstanceClient() instead.
type WorkloadInstanceClient struct {
	internal *arm.Client
}

// NewWorkloadInstanceClient creates a new instance of WorkloadInstanceClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewWorkloadInstanceClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*WorkloadInstanceClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &WorkloadInstanceClient{
		internal: cl,
	}
	return client, nil
}

// Create - Creates the workload instance in the given modernizeProject.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadInstanceName - Workload instance name.
//   - body - Workload instance model.
//   - options - WorkloadInstanceClientCreateOptions contains the optional parameters for the WorkloadInstanceClient.Create method.
func (client *WorkloadInstanceClient) Create(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, body WorkloadInstanceModel, options *WorkloadInstanceClientCreateOptions) (WorkloadInstanceClientCreateResponse, error) {
	var err error
	const operationName = "WorkloadInstanceClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadInstanceName, body, options)
	if err != nil {
		return WorkloadInstanceClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkloadInstanceClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return WorkloadInstanceClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *WorkloadInstanceClient) createCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, body WorkloadInstanceModel, _ *WorkloadInstanceClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadInstanceName == "" {
		return nil, errors.New("parameter workloadInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadInstanceName}", url.PathEscape(workloadInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *WorkloadInstanceClient) createHandleResponse(resp *http.Response) (WorkloadInstanceClientCreateResponse, error) {
	result := WorkloadInstanceClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadInstanceModel); err != nil {
		return WorkloadInstanceClientCreateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Deletes the workload instance in the given modernizeProject.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject Name.
//   - workloadInstanceName - Workload instance name.
//   - options - WorkloadInstanceClientBeginDeleteOptions contains the optional parameters for the WorkloadInstanceClient.BeginDelete
//     method.
func (client *WorkloadInstanceClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, options *WorkloadInstanceClientBeginDeleteOptions) (*runtime.Poller[WorkloadInstanceClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadInstanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadInstanceClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadInstanceClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes the workload instance in the given modernizeProject.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *WorkloadInstanceClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, options *WorkloadInstanceClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadInstanceClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadInstanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *WorkloadInstanceClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, _ *WorkloadInstanceClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadInstanceName == "" {
		return nil, errors.New("parameter workloadInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadInstanceName}", url.PathEscape(workloadInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the details of the workload instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadInstanceName - Workload instance name.
//   - options - WorkloadInstanceClientGetOptions contains the optional parameters for the WorkloadInstanceClient.Get method.
func (client *WorkloadInstanceClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, options *WorkloadInstanceClientGetOptions) (WorkloadInstanceClientGetResponse, error) {
	var err error
	const operationName = "WorkloadInstanceClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadInstanceName, options)
	if err != nil {
		return WorkloadInstanceClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkloadInstanceClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WorkloadInstanceClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *WorkloadInstanceClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, _ *WorkloadInstanceClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadInstanceName == "" {
		return nil, errors.New("parameter workloadInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadInstanceName}", url.PathEscape(workloadInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *WorkloadInstanceClient) getHandleResponse(resp *http.Response) (WorkloadInstanceClientGetResponse, error) {
	result := WorkloadInstanceClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadInstanceModel); err != nil {
		return WorkloadInstanceClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets the list of workload instances in the given modernizeProject.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - options - WorkloadInstanceClientListOptions contains the optional parameters for the WorkloadInstanceClient.NewListPager
//     method.
func (client *WorkloadInstanceClient) NewListPager(subscriptionID string, resourceGroupName string, modernizeProjectName string, options *WorkloadInstanceClientListOptions) *runtime.Pager[WorkloadInstanceClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[WorkloadInstanceClientListResponse]{
		More: func(page WorkloadInstanceClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WorkloadInstanceClientListResponse) (WorkloadInstanceClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadInstanceClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, options)
			}, nil)
			if err != nil {
				return WorkloadInstanceClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *WorkloadInstanceClient) listCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, _ *WorkloadInstanceClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *WorkloadInstanceClient) listHandleResponse(resp *http.Response) (WorkloadInstanceClientListResponse, error) {
	result := WorkloadInstanceClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadInstanceModelCollection); err != nil {
		return WorkloadInstanceClientListResponse{}, err
	}
	return result, nil
}

// BeginMigrateComplete - Performs the complete migrate on the workload instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadInstanceName - Workload instance name.
//   - options - WorkloadInstanceClientBeginMigrateCompleteOptions contains the optional parameters for the WorkloadInstanceClient.BeginMigrateComplete
//     method.
func (client *WorkloadInstanceClient) BeginMigrateComplete(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, options *WorkloadInstanceClientBeginMigrateCompleteOptions) (*runtime.Poller[WorkloadInstanceClientMigrateCompleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.migrateComplete(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadInstanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadInstanceClientMigrateCompleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadInstanceClientMigrateCompleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// MigrateComplete - Performs the complete migrate on the workload instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *WorkloadInstanceClient) migrateComplete(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, options *WorkloadInstanceClientBeginMigrateCompleteOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadInstanceClient.BeginMigrateComplete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.migrateCompleteCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadInstanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// migrateCompleteCreateRequest creates the MigrateComplete request.
func (client *WorkloadInstanceClient) migrateCompleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, _ *WorkloadInstanceClientBeginMigrateCompleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}/completeMigration"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadInstanceName == "" {
		return nil, errors.New("parameter workloadInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadInstanceName}", url.PathEscape(workloadInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginStopReplicate - Performs the disable replicate on the workload instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadInstanceName - Workload instance name.
//   - options - WorkloadInstanceClientBeginStopReplicateOptions contains the optional parameters for the WorkloadInstanceClient.BeginStopReplicate
//     method.
func (client *WorkloadInstanceClient) BeginStopReplicate(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, options *WorkloadInstanceClientBeginStopReplicateOptions) (*runtime.Poller[WorkloadInstanceClientStopReplicateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.stopReplicate(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadInstanceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadInstanceClientStopReplicateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadInstanceClientStopReplicateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// StopReplicate - Performs the disable replicate on the workload instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *WorkloadInstanceClient) stopReplicate(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, options *WorkloadInstanceClientBeginStopReplicateOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadInstanceClient.BeginStopReplicate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.stopReplicateCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadInstanceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// stopReplicateCreateRequest creates the StopReplicate request.
func (client *WorkloadInstanceClient) stopReplicateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadInstanceName string, _ *WorkloadInstanceClientBeginStopReplicateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}/disableReplication"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadInstanceName == "" {
		return nil, errors.New("parameter workloadInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadInstanceName}", url.PathEscape(workloadInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
