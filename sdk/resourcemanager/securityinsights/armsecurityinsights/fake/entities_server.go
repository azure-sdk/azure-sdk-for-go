//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsights/armsecurityinsights/v2"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// EntitiesServer is a fake server for instances of the armsecurityinsights.EntitiesClient type.
type EntitiesServer struct {
	// RunPlaybook is the fake for method EntitiesClient.RunPlaybook
	// HTTP status codes to indicate success: http.StatusNoContent
	RunPlaybook func(ctx context.Context, resourceGroupName string, workspaceName string, entityIdentifier string, options *armsecurityinsights.EntitiesClientRunPlaybookOptions) (resp azfake.Responder[armsecurityinsights.EntitiesClientRunPlaybookResponse], errResp azfake.ErrorResponder)
}

// NewEntitiesServerTransport creates a new instance of EntitiesServerTransport with the provided implementation.
// The returned EntitiesServerTransport instance is connected to an instance of armsecurityinsights.EntitiesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEntitiesServerTransport(srv *EntitiesServer) *EntitiesServerTransport {
	return &EntitiesServerTransport{srv: srv}
}

// EntitiesServerTransport connects instances of armsecurityinsights.EntitiesClient to instances of EntitiesServer.
// Don't use this type directly, use NewEntitiesServerTransport instead.
type EntitiesServerTransport struct {
	srv *EntitiesServer
}

// Do implements the policy.Transporter interface for EntitiesServerTransport.
func (e *EntitiesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "EntitiesClient.RunPlaybook":
		resp, err = e.dispatchRunPlaybook(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (e *EntitiesServerTransport) dispatchRunPlaybook(req *http.Request) (*http.Response, error) {
	if e.srv.RunPlaybook == nil {
		return nil, &nonRetriableError{errors.New("fake for method RunPlaybook not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/entities/(?P<entityIdentifier>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/runPlaybook`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armsecurityinsights.EntityManualTriggerRequestBody](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	entityIdentifierParam, err := url.PathUnescape(matches[regex.SubexpIndex("entityIdentifier")])
	if err != nil {
		return nil, err
	}
	var options *armsecurityinsights.EntitiesClientRunPlaybookOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armsecurityinsights.EntitiesClientRunPlaybookOptions{
			RequestBody: &body,
		}
	}
	respr, errRespr := e.srv.RunPlaybook(req.Context(), resourceGroupNameParam, workspaceNameParam, entityIdentifierParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
