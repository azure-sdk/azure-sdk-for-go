//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsights

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// Client contains the methods for the SecurityInsights group.
// Don't use this type directly, use NewClient() instead.
type Client struct {
	internal       *arm.Client
	subscriptionID string
}

// NewClient creates a new instance of Client with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*Client, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &Client{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// ListGeodataByIP - Get geodata for a single IP address
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - enrichmentType - Enrichment type
//   - ipAddressBody - IP address (v4 or v6) to be enriched
//   - options - ClientListGeodataByIPOptions contains the optional parameters for the Client.ListGeodataByIP method.
func (client *Client) ListGeodataByIP(ctx context.Context, resourceGroupName string, workspaceName string, enrichmentType EnrichmentType, ipAddressBody EnrichmentIPAddressBody, options *ClientListGeodataByIPOptions) (ClientListGeodataByIPResponse, error) {
	var err error
	const operationName = "Client.ListGeodataByIP"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listGeodataByIPCreateRequest(ctx, resourceGroupName, workspaceName, enrichmentType, ipAddressBody, options)
	if err != nil {
		return ClientListGeodataByIPResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientListGeodataByIPResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ClientListGeodataByIPResponse{}, err
	}
	resp, err := client.listGeodataByIPHandleResponse(httpResp)
	return resp, err
}

// listGeodataByIPCreateRequest creates the ListGeodataByIP request.
func (client *Client) listGeodataByIPCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, enrichmentType EnrichmentType, ipAddressBody EnrichmentIPAddressBody, options *ClientListGeodataByIPOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/enrichment/{enrichmentType}/listGeodataByIp"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if enrichmentType == "" {
		return nil, errors.New("parameter enrichmentType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enrichmentType}", url.PathEscape(string(enrichmentType)))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, ipAddressBody); err != nil {
		return nil, err
	}
	return req, nil
}

// listGeodataByIPHandleResponse handles the ListGeodataByIP response.
func (client *Client) listGeodataByIPHandleResponse(resp *http.Response) (ClientListGeodataByIPResponse, error) {
	result := ClientListGeodataByIPResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnrichmentIPGeodata); err != nil {
		return ClientListGeodataByIPResponse{}, err
	}
	return result, nil
}

// ListWhoisByDomain - Get whois information for a single domain name
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - enrichmentType - Enrichment type
//   - domainBody - Domain name to be enriched. Only domain name is accepted
//   - options - ClientListWhoisByDomainOptions contains the optional parameters for the Client.ListWhoisByDomain method.
func (client *Client) ListWhoisByDomain(ctx context.Context, resourceGroupName string, workspaceName string, enrichmentType EnrichmentType, domainBody EnrichmentDomainBody, options *ClientListWhoisByDomainOptions) (ClientListWhoisByDomainResponse, error) {
	var err error
	const operationName = "Client.ListWhoisByDomain"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listWhoisByDomainCreateRequest(ctx, resourceGroupName, workspaceName, enrichmentType, domainBody, options)
	if err != nil {
		return ClientListWhoisByDomainResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientListWhoisByDomainResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ClientListWhoisByDomainResponse{}, err
	}
	resp, err := client.listWhoisByDomainHandleResponse(httpResp)
	return resp, err
}

// listWhoisByDomainCreateRequest creates the ListWhoisByDomain request.
func (client *Client) listWhoisByDomainCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, enrichmentType EnrichmentType, domainBody EnrichmentDomainBody, options *ClientListWhoisByDomainOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/enrichment/{enrichmentType}/listWhoisByDomain"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if enrichmentType == "" {
		return nil, errors.New("parameter enrichmentType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enrichmentType}", url.PathEscape(string(enrichmentType)))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, domainBody); err != nil {
		return nil, err
	}
	return req, nil
}

// listWhoisByDomainHandleResponse handles the ListWhoisByDomain response.
func (client *Client) listWhoisByDomainHandleResponse(resp *http.Response) (ClientListWhoisByDomainResponse, error) {
	result := ClientListWhoisByDomainResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnrichmentDomainWhois); err != nil {
		return ClientListWhoisByDomainResponse{}, err
	}
	return result, nil
}
