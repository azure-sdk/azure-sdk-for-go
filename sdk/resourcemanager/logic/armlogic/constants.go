// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogic

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/logic/armlogic"
	moduleVersion = "v2.0.0"
)

// APIDeploymentParameterVisibility - The Api deployment parameter visibility.
type APIDeploymentParameterVisibility string

const (
	// APIDeploymentParameterVisibilityDefault - Represents a default API deployment parameter visibility.
	APIDeploymentParameterVisibilityDefault APIDeploymentParameterVisibility = "Default"
	// APIDeploymentParameterVisibilityInternal - Represents an internal API deployment parameter visibility.
	APIDeploymentParameterVisibilityInternal APIDeploymentParameterVisibility = "Internal"
	// APIDeploymentParameterVisibilityNotSpecified - Represents a state where the value is not specified.
	APIDeploymentParameterVisibilityNotSpecified APIDeploymentParameterVisibility = "NotSpecified"
)

// PossibleAPIDeploymentParameterVisibilityValues returns the possible values for the APIDeploymentParameterVisibility const type.
func PossibleAPIDeploymentParameterVisibilityValues() []APIDeploymentParameterVisibility {
	return []APIDeploymentParameterVisibility{
		APIDeploymentParameterVisibilityDefault,
		APIDeploymentParameterVisibilityInternal,
		APIDeploymentParameterVisibilityNotSpecified,
	}
}

// APITier - The Api tier.
type APITier string

const (
	// APITierEnterprise - Represents an enterprise API tier.
	APITierEnterprise APITier = "Enterprise"
	// APITierNotSpecified - Represents a state where the value is not specified.
	APITierNotSpecified APITier = "NotSpecified"
	// APITierPremium - Represents a premium API tier.
	APITierPremium APITier = "Premium"
	// APITierStandard - Represents a standard API tier.
	APITierStandard APITier = "Standard"
)

// PossibleAPITierValues returns the possible values for the APITier const type.
func PossibleAPITierValues() []APITier {
	return []APITier{
		APITierEnterprise,
		APITierNotSpecified,
		APITierPremium,
		APITierStandard,
	}
}

// APIType - The API type.
type APIType string

const (
	// APITypeNotSpecified - Represents a state where the value is not specified.
	APITypeNotSpecified APIType = "NotSpecified"
	// APITypeRest - Represents a REST API type.
	APITypeRest APIType = "Rest"
	// APITypeSoap - Represents a SOAP API type.
	APITypeSoap APIType = "Soap"
)

// PossibleAPITypeValues returns the possible values for the APIType const type.
func PossibleAPITypeValues() []APIType {
	return []APIType{
		APITypeNotSpecified,
		APITypeRest,
		APITypeSoap,
	}
}

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// AgreementType - The agreement type.
type AgreementType string

const (
	// AgreementTypeAS2 - Represents an AS2 agreement type.
	AgreementTypeAS2 AgreementType = "AS2"
	// AgreementTypeEdifact - Represents an Edifact agreement type.
	AgreementTypeEdifact AgreementType = "Edifact"
	// AgreementTypeNotSpecified - Represents a not specified agreement type.
	AgreementTypeNotSpecified AgreementType = "NotSpecified"
	// AgreementTypeX12 - Represents an X12 agreement type.
	AgreementTypeX12 AgreementType = "X12"
)

// PossibleAgreementTypeValues returns the possible values for the AgreementType const type.
func PossibleAgreementTypeValues() []AgreementType {
	return []AgreementType{
		AgreementTypeAS2,
		AgreementTypeEdifact,
		AgreementTypeNotSpecified,
		AgreementTypeX12,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DayOfWeek - The day of the week.
type DayOfWeek string

const (
	// DayOfWeekFriday - Represents day of a week Friday.
	DayOfWeekFriday DayOfWeek = "Friday"
	// DayOfWeekMonday - Represents day of a week Monday.
	DayOfWeekMonday DayOfWeek = "Monday"
	// DayOfWeekSaturday - Represents day of a week Saturday.
	DayOfWeekSaturday DayOfWeek = "Saturday"
	// DayOfWeekSunday - Represents day of a week Sunday.
	DayOfWeekSunday DayOfWeek = "Sunday"
	// DayOfWeekThursday - Represents day of a week Thursday.
	DayOfWeekThursday DayOfWeek = "Thursday"
	// DayOfWeekTuesday - Represents day of a week Tuesday.
	DayOfWeekTuesday DayOfWeek = "Tuesday"
	// DayOfWeekWednesday - Represents day of a week Wednesday.
	DayOfWeekWednesday DayOfWeek = "Wednesday"
)

// PossibleDayOfWeekValues returns the possible values for the DayOfWeek const type.
func PossibleDayOfWeekValues() []DayOfWeek {
	return []DayOfWeek{
		DayOfWeekFriday,
		DayOfWeekMonday,
		DayOfWeekSaturday,
		DayOfWeekSunday,
		DayOfWeekThursday,
		DayOfWeekTuesday,
		DayOfWeekWednesday,
	}
}

// DaysOfWeek - The days of a week.
type DaysOfWeek string

const (
	// DaysOfWeekFriday - Represents day of a week Friday.
	DaysOfWeekFriday DaysOfWeek = "Friday"
	// DaysOfWeekMonday - Represents day of a week Monday.
	DaysOfWeekMonday DaysOfWeek = "Monday"
	// DaysOfWeekSaturday - Represents day of a week Saturday.
	DaysOfWeekSaturday DaysOfWeek = "Saturday"
	// DaysOfWeekSunday - Represents day of a week Sunday.
	DaysOfWeekSunday DaysOfWeek = "Sunday"
	// DaysOfWeekThursday - Represents day of a week Thursday.
	DaysOfWeekThursday DaysOfWeek = "Thursday"
	// DaysOfWeekTuesday - Represents day of a week Tuesday.
	DaysOfWeekTuesday DaysOfWeek = "Tuesday"
	// DaysOfWeekWednesday - Represents day of a week Wednesday.
	DaysOfWeekWednesday DaysOfWeek = "Wednesday"
)

// PossibleDaysOfWeekValues returns the possible values for the DaysOfWeek const type.
func PossibleDaysOfWeekValues() []DaysOfWeek {
	return []DaysOfWeek{
		DaysOfWeekFriday,
		DaysOfWeekMonday,
		DaysOfWeekSaturday,
		DaysOfWeekSunday,
		DaysOfWeekThursday,
		DaysOfWeekTuesday,
		DaysOfWeekWednesday,
	}
}

// EdifactCharacterSet - The edifact character set.
type EdifactCharacterSet string

const (
	// EdifactCharacterSetKECA - Represents the KECA Edifact character set.
	EdifactCharacterSetKECA EdifactCharacterSet = "KECA"
	// EdifactCharacterSetNotSpecified - Represents a state where the value is not specified.
	EdifactCharacterSetNotSpecified EdifactCharacterSet = "NotSpecified"
	// EdifactCharacterSetUNOA - Represents the UNOA Edifact character set.
	EdifactCharacterSetUNOA EdifactCharacterSet = "UNOA"
	// EdifactCharacterSetUNOB - Represents the UNOB Edifact character set.
	EdifactCharacterSetUNOB EdifactCharacterSet = "UNOB"
	// EdifactCharacterSetUNOC - Represents the UNOC Edifact character set.
	EdifactCharacterSetUNOC EdifactCharacterSet = "UNOC"
	// EdifactCharacterSetUNOD - Represents the UNOD Edifact character set.
	EdifactCharacterSetUNOD EdifactCharacterSet = "UNOD"
	// EdifactCharacterSetUNOE - Represents the UNOE Edifact character set.
	EdifactCharacterSetUNOE EdifactCharacterSet = "UNOE"
	// EdifactCharacterSetUNOF - Represents the UNOF Edifact character set.
	EdifactCharacterSetUNOF EdifactCharacterSet = "UNOF"
	// EdifactCharacterSetUNOG - Represents the UNOG Edifact character set.
	EdifactCharacterSetUNOG EdifactCharacterSet = "UNOG"
	// EdifactCharacterSetUNOH - Represents the UNOH Edifact character set.
	EdifactCharacterSetUNOH EdifactCharacterSet = "UNOH"
	// EdifactCharacterSetUNOI - Represents the UNOI Edifact character set.
	EdifactCharacterSetUNOI EdifactCharacterSet = "UNOI"
	// EdifactCharacterSetUNOJ - Represents the UNOJ Edifact character set.
	EdifactCharacterSetUNOJ EdifactCharacterSet = "UNOJ"
	// EdifactCharacterSetUNOK - Represents the UNOK Edifact character set.
	EdifactCharacterSetUNOK EdifactCharacterSet = "UNOK"
	// EdifactCharacterSetUNOX - Represents the UNOX Edifact character set.
	EdifactCharacterSetUNOX EdifactCharacterSet = "UNOX"
	// EdifactCharacterSetUNOY - Represents the UNOY Edifact character set.
	EdifactCharacterSetUNOY EdifactCharacterSet = "UNOY"
)

// PossibleEdifactCharacterSetValues returns the possible values for the EdifactCharacterSet const type.
func PossibleEdifactCharacterSetValues() []EdifactCharacterSet {
	return []EdifactCharacterSet{
		EdifactCharacterSetKECA,
		EdifactCharacterSetNotSpecified,
		EdifactCharacterSetUNOA,
		EdifactCharacterSetUNOB,
		EdifactCharacterSetUNOC,
		EdifactCharacterSetUNOD,
		EdifactCharacterSetUNOE,
		EdifactCharacterSetUNOF,
		EdifactCharacterSetUNOG,
		EdifactCharacterSetUNOH,
		EdifactCharacterSetUNOI,
		EdifactCharacterSetUNOJ,
		EdifactCharacterSetUNOK,
		EdifactCharacterSetUNOX,
		EdifactCharacterSetUNOY,
	}
}

// EdifactDecimalIndicator - The edifact decimal indicator.
type EdifactDecimalIndicator string

const (
	// EdifactDecimalIndicatorComma - Represents a comma edifact decimal indicator.
	EdifactDecimalIndicatorComma EdifactDecimalIndicator = "Comma"
	// EdifactDecimalIndicatorDecimal - Represents a decimal edifact decimal indicator.
	EdifactDecimalIndicatorDecimal EdifactDecimalIndicator = "Decimal"
	// EdifactDecimalIndicatorNotSpecified - Represents a not specified edifact decimal indicator.
	EdifactDecimalIndicatorNotSpecified EdifactDecimalIndicator = "NotSpecified"
)

// PossibleEdifactDecimalIndicatorValues returns the possible values for the EdifactDecimalIndicator const type.
func PossibleEdifactDecimalIndicatorValues() []EdifactDecimalIndicator {
	return []EdifactDecimalIndicator{
		EdifactDecimalIndicatorComma,
		EdifactDecimalIndicatorDecimal,
		EdifactDecimalIndicatorNotSpecified,
	}
}

// EncryptionAlgorithm - The encryption algorithm.
type EncryptionAlgorithm string

const (
	// EncryptionAlgorithmAES128 - Represents the AES-128 encryption algorithm.
	EncryptionAlgorithmAES128 EncryptionAlgorithm = "AES128"
	// EncryptionAlgorithmAES192 - Represents the AES-192 encryption algorithm.
	EncryptionAlgorithmAES192 EncryptionAlgorithm = "AES192"
	// EncryptionAlgorithmAES256 - Represents the AES-256 encryption algorithm.
	EncryptionAlgorithmAES256 EncryptionAlgorithm = "AES256"
	// EncryptionAlgorithmDES3 - Represents the DES3 encryption algorithm.
	EncryptionAlgorithmDES3 EncryptionAlgorithm = "DES3"
	// EncryptionAlgorithmNone - Represents no encryption algorithm.
	EncryptionAlgorithmNone EncryptionAlgorithm = "None"
	// EncryptionAlgorithmNotSpecified - Represents a state where the value is not specified.
	EncryptionAlgorithmNotSpecified EncryptionAlgorithm = "NotSpecified"
	// EncryptionAlgorithmRC2 - Represents the RC2 encryption algorithm.
	EncryptionAlgorithmRC2 EncryptionAlgorithm = "RC2"
)

// PossibleEncryptionAlgorithmValues returns the possible values for the EncryptionAlgorithm const type.
func PossibleEncryptionAlgorithmValues() []EncryptionAlgorithm {
	return []EncryptionAlgorithm{
		EncryptionAlgorithmAES128,
		EncryptionAlgorithmAES192,
		EncryptionAlgorithmAES256,
		EncryptionAlgorithmDES3,
		EncryptionAlgorithmNone,
		EncryptionAlgorithmNotSpecified,
		EncryptionAlgorithmRC2,
	}
}

// EventLevel - The event level.
type EventLevel string

const (
	// EventLevelCritical - Represents a critical event level.
	EventLevelCritical EventLevel = "Critical"
	// EventLevelError - Represents an error event level.
	EventLevelError EventLevel = "Error"
	// EventLevelInformational - Represents an information event level.
	EventLevelInformational EventLevel = "Informational"
	// EventLevelLogAlways - Represents a log always event level.
	EventLevelLogAlways EventLevel = "LogAlways"
	// EventLevelVerbose - Represents a verbose event level.
	EventLevelVerbose EventLevel = "Verbose"
	// EventLevelWarning - Represents a warning event level.
	EventLevelWarning EventLevel = "Warning"
)

// PossibleEventLevelValues returns the possible values for the EventLevel const type.
func PossibleEventLevelValues() []EventLevel {
	return []EventLevel{
		EventLevelCritical,
		EventLevelError,
		EventLevelInformational,
		EventLevelLogAlways,
		EventLevelVerbose,
		EventLevelWarning,
	}
}

// HashingAlgorithm - The signing or hashing algorithm.
type HashingAlgorithm string

const (
	// HashingAlgorithmMD5 - Represents the MD5 hashing algorithm.
	HashingAlgorithmMD5 HashingAlgorithm = "MD5"
	// HashingAlgorithmNone - Represents no hashing algorithm.
	HashingAlgorithmNone HashingAlgorithm = "None"
	// HashingAlgorithmNotSpecified - Represents a state where the value is not specified.
	HashingAlgorithmNotSpecified HashingAlgorithm = "NotSpecified"
	// HashingAlgorithmSHA1 - Represents the SHA1 hashing algorithm.
	HashingAlgorithmSHA1 HashingAlgorithm = "SHA1"
	// HashingAlgorithmSHA2256 - Represents the SHA2-256 hashing algorithm.
	HashingAlgorithmSHA2256 HashingAlgorithm = "SHA2256"
	// HashingAlgorithmSHA2384 - Represents the SHA2-384 hashing algorithm.
	HashingAlgorithmSHA2384 HashingAlgorithm = "SHA2384"
	// HashingAlgorithmSHA2512 - Represents the SHA2-512 hashing algorithm.
	HashingAlgorithmSHA2512 HashingAlgorithm = "SHA2512"
)

// PossibleHashingAlgorithmValues returns the possible values for the HashingAlgorithm const type.
func PossibleHashingAlgorithmValues() []HashingAlgorithm {
	return []HashingAlgorithm{
		HashingAlgorithmMD5,
		HashingAlgorithmNone,
		HashingAlgorithmNotSpecified,
		HashingAlgorithmSHA1,
		HashingAlgorithmSHA2256,
		HashingAlgorithmSHA2384,
		HashingAlgorithmSHA2512,
	}
}

// IntegrationAccountSKUName - The integration account sku name.
type IntegrationAccountSKUName string

const (
	// IntegrationAccountSKUNameBasic - Represents a basic integration account SKU.
	IntegrationAccountSKUNameBasic IntegrationAccountSKUName = "Basic"
	// IntegrationAccountSKUNameFree - Represents a free integration account SKU.
	IntegrationAccountSKUNameFree IntegrationAccountSKUName = "Free"
	// IntegrationAccountSKUNameNotSpecified - Represents a state where the value is not specified.
	IntegrationAccountSKUNameNotSpecified IntegrationAccountSKUName = "NotSpecified"
	// IntegrationAccountSKUNameStandard - Represents a standard integration account SKU.
	IntegrationAccountSKUNameStandard IntegrationAccountSKUName = "Standard"
)

// PossibleIntegrationAccountSKUNameValues returns the possible values for the IntegrationAccountSKUName const type.
func PossibleIntegrationAccountSKUNameValues() []IntegrationAccountSKUName {
	return []IntegrationAccountSKUName{
		IntegrationAccountSKUNameBasic,
		IntegrationAccountSKUNameFree,
		IntegrationAccountSKUNameNotSpecified,
		IntegrationAccountSKUNameStandard,
	}
}

// IntegrationServiceEnvironmentAccessEndpointType - The integration service environment access endpoint type.
type IntegrationServiceEnvironmentAccessEndpointType string

const (
	// IntegrationServiceEnvironmentAccessEndpointTypeExternal - Represents an external access endpoint type.
	IntegrationServiceEnvironmentAccessEndpointTypeExternal IntegrationServiceEnvironmentAccessEndpointType = "External"
	// IntegrationServiceEnvironmentAccessEndpointTypeInternal - Represents an internal access endpoint type.
	IntegrationServiceEnvironmentAccessEndpointTypeInternal IntegrationServiceEnvironmentAccessEndpointType = "Internal"
	// IntegrationServiceEnvironmentAccessEndpointTypeNotSpecified - Represents a state where the value is not specified.
	IntegrationServiceEnvironmentAccessEndpointTypeNotSpecified IntegrationServiceEnvironmentAccessEndpointType = "NotSpecified"
)

// PossibleIntegrationServiceEnvironmentAccessEndpointTypeValues returns the possible values for the IntegrationServiceEnvironmentAccessEndpointType const type.
func PossibleIntegrationServiceEnvironmentAccessEndpointTypeValues() []IntegrationServiceEnvironmentAccessEndpointType {
	return []IntegrationServiceEnvironmentAccessEndpointType{
		IntegrationServiceEnvironmentAccessEndpointTypeExternal,
		IntegrationServiceEnvironmentAccessEndpointTypeInternal,
		IntegrationServiceEnvironmentAccessEndpointTypeNotSpecified,
	}
}

// IntegrationServiceEnvironmentNetworkDependencyCategoryType - The integration service environment network dependency category
// type.
type IntegrationServiceEnvironmentNetworkDependencyCategoryType string

const (
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAccessEndpoints - Represents an Access Endpoints network dependency
	// category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAccessEndpoints IntegrationServiceEnvironmentNetworkDependencyCategoryType = "AccessEndpoints"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureActiveDirectory - Represents an Azure Active Directory network
	// dependency category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureActiveDirectory IntegrationServiceEnvironmentNetworkDependencyCategoryType = "AzureActiveDirectory"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureManagement - Represents an Azure Management network dependency
	// category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureManagement IntegrationServiceEnvironmentNetworkDependencyCategoryType = "AzureManagement"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureStorage - Represents an Azure Storage network dependency
	// category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureStorage IntegrationServiceEnvironmentNetworkDependencyCategoryType = "AzureStorage"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeDiagnosticLogsAndMetrics - Represents a Diagnostic Logs and Metrics
	// network dependency category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeDiagnosticLogsAndMetrics IntegrationServiceEnvironmentNetworkDependencyCategoryType = "DiagnosticLogsAndMetrics"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeIntegrationServiceEnvironmentConnectors - Represents an Integration
	// Service Environment Connectors network dependency category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeIntegrationServiceEnvironmentConnectors IntegrationServiceEnvironmentNetworkDependencyCategoryType = "IntegrationServiceEnvironmentConnectors"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeNotSpecified - Represents a state where the value is not specified.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeNotSpecified IntegrationServiceEnvironmentNetworkDependencyCategoryType = "NotSpecified"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRecoveryService - Represents a Recovery Service network dependency
	// category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRecoveryService IntegrationServiceEnvironmentNetworkDependencyCategoryType = "RecoveryService"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRedisCache - Represents a Redis Cache network dependency category
	// type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRedisCache IntegrationServiceEnvironmentNetworkDependencyCategoryType = "RedisCache"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRegionalService - Represents a Regional Service network dependency
	// category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRegionalService IntegrationServiceEnvironmentNetworkDependencyCategoryType = "RegionalService"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSQL - Represents a SQL network dependency category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSQL IntegrationServiceEnvironmentNetworkDependencyCategoryType = "SQL"
	// IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSSLCertificateVerification - Represents an SSL Certificate Verification
	// network dependency category type.
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSSLCertificateVerification IntegrationServiceEnvironmentNetworkDependencyCategoryType = "SSLCertificateVerification"
)

// PossibleIntegrationServiceEnvironmentNetworkDependencyCategoryTypeValues returns the possible values for the IntegrationServiceEnvironmentNetworkDependencyCategoryType const type.
func PossibleIntegrationServiceEnvironmentNetworkDependencyCategoryTypeValues() []IntegrationServiceEnvironmentNetworkDependencyCategoryType {
	return []IntegrationServiceEnvironmentNetworkDependencyCategoryType{
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAccessEndpoints,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureActiveDirectory,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureManagement,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureStorage,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeDiagnosticLogsAndMetrics,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeIntegrationServiceEnvironmentConnectors,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeNotSpecified,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRecoveryService,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRedisCache,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRegionalService,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSQL,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSSLCertificateVerification,
	}
}

// IntegrationServiceEnvironmentNetworkEndPointAccessibilityState - The integration service environment network endpoint accessibility
// state.
type IntegrationServiceEnvironmentNetworkEndPointAccessibilityState string

const (
	// IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable - Represents an available network endpoint accessibility
	// state.
	IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = "Available"
	// IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotAvailable - Represents a not available network endpoint
	// accessibility state.
	IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotAvailable IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = "NotAvailable"
	// IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotSpecified - Represents a state where the value is not
	// specified.
	IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotSpecified IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = "NotSpecified"
	// IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateUnknown - Represents an unknown network endpoint accessibility
	// state.
	IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateUnknown IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = "Unknown"
)

// PossibleIntegrationServiceEnvironmentNetworkEndPointAccessibilityStateValues returns the possible values for the IntegrationServiceEnvironmentNetworkEndPointAccessibilityState const type.
func PossibleIntegrationServiceEnvironmentNetworkEndPointAccessibilityStateValues() []IntegrationServiceEnvironmentNetworkEndPointAccessibilityState {
	return []IntegrationServiceEnvironmentNetworkEndPointAccessibilityState{
		IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable,
		IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotAvailable,
		IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotSpecified,
		IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateUnknown,
	}
}

// IntegrationServiceEnvironmentSKUName - The integration service environment sku name.
type IntegrationServiceEnvironmentSKUName string

const (
	// IntegrationServiceEnvironmentSKUNameDeveloper - Represents a developer integration service environment SKU.
	IntegrationServiceEnvironmentSKUNameDeveloper IntegrationServiceEnvironmentSKUName = "Developer"
	// IntegrationServiceEnvironmentSKUNameNotSpecified - Represents a state where the value is not specified.
	IntegrationServiceEnvironmentSKUNameNotSpecified IntegrationServiceEnvironmentSKUName = "NotSpecified"
	// IntegrationServiceEnvironmentSKUNamePremium - Represents a premium integration service environment SKU.
	IntegrationServiceEnvironmentSKUNamePremium IntegrationServiceEnvironmentSKUName = "Premium"
)

// PossibleIntegrationServiceEnvironmentSKUNameValues returns the possible values for the IntegrationServiceEnvironmentSKUName const type.
func PossibleIntegrationServiceEnvironmentSKUNameValues() []IntegrationServiceEnvironmentSKUName {
	return []IntegrationServiceEnvironmentSKUName{
		IntegrationServiceEnvironmentSKUNameDeveloper,
		IntegrationServiceEnvironmentSKUNameNotSpecified,
		IntegrationServiceEnvironmentSKUNamePremium,
	}
}

// IntegrationServiceEnvironmentSKUScaleType - The integration service environment sku scale type.
type IntegrationServiceEnvironmentSKUScaleType string

const (
	// IntegrationServiceEnvironmentSKUScaleTypeAutomatic - Represents an automatic scale type.
	IntegrationServiceEnvironmentSKUScaleTypeAutomatic IntegrationServiceEnvironmentSKUScaleType = "Automatic"
	// IntegrationServiceEnvironmentSKUScaleTypeManual - Represents a manual scale type.
	IntegrationServiceEnvironmentSKUScaleTypeManual IntegrationServiceEnvironmentSKUScaleType = "Manual"
	// IntegrationServiceEnvironmentSKUScaleTypeNone - Represents no scale type.
	IntegrationServiceEnvironmentSKUScaleTypeNone IntegrationServiceEnvironmentSKUScaleType = "None"
)

// PossibleIntegrationServiceEnvironmentSKUScaleTypeValues returns the possible values for the IntegrationServiceEnvironmentSKUScaleType const type.
func PossibleIntegrationServiceEnvironmentSKUScaleTypeValues() []IntegrationServiceEnvironmentSKUScaleType {
	return []IntegrationServiceEnvironmentSKUScaleType{
		IntegrationServiceEnvironmentSKUScaleTypeAutomatic,
		IntegrationServiceEnvironmentSKUScaleTypeManual,
		IntegrationServiceEnvironmentSKUScaleTypeNone,
	}
}

// KeyType - The key type.
type KeyType string

const (
	// KeyTypeNotSpecified - Represents a state where the value is not specified.
	KeyTypeNotSpecified KeyType = "NotSpecified"
	// KeyTypePrimary - Represents a primary key type.
	KeyTypePrimary KeyType = "Primary"
	// KeyTypeSecondary - Represents a secondary key type.
	KeyTypeSecondary KeyType = "Secondary"
)

// PossibleKeyTypeValues returns the possible values for the KeyType const type.
func PossibleKeyTypeValues() []KeyType {
	return []KeyType{
		KeyTypeNotSpecified,
		KeyTypePrimary,
		KeyTypeSecondary,
	}
}

// ManagedServiceIdentityType - Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                       ManagedServiceIdentityType = "None"
	ManagedServiceIdentityTypeSystemAssigned             ManagedServiceIdentityType = "SystemAssigned"
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned,UserAssigned"
	ManagedServiceIdentityTypeUserAssigned               ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns the possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{
		ManagedServiceIdentityTypeNone,
		ManagedServiceIdentityTypeSystemAssigned,
		ManagedServiceIdentityTypeSystemAssignedUserAssigned,
		ManagedServiceIdentityTypeUserAssigned,
	}
}

// MapType - The map type.
type MapType string

const (
	// MapTypeLiquid - Represents a Liquid map type.
	MapTypeLiquid MapType = "Liquid"
	// MapTypeNotSpecified - Represents a state where the value is not specified.
	MapTypeNotSpecified MapType = "NotSpecified"
	// MapTypeXslt - Represents an XSLT map type.
	MapTypeXslt MapType = "Xslt"
	// MapTypeXslt20 - Represents an XSLT 2.0 map type.
	MapTypeXslt20 MapType = "Xslt20"
	// MapTypeXslt30 - Represents an XSLT 3.0 map type.
	MapTypeXslt30 MapType = "Xslt30"
)

// PossibleMapTypeValues returns the possible values for the MapType const type.
func PossibleMapTypeValues() []MapType {
	return []MapType{
		MapTypeLiquid,
		MapTypeNotSpecified,
		MapTypeXslt,
		MapTypeXslt20,
		MapTypeXslt30,
	}
}

// MessageFilterType - The message filter type.
type MessageFilterType string

const (
	// MessageFilterTypeExclude - Represents an exclude message filter type.
	MessageFilterTypeExclude MessageFilterType = "Exclude"
	// MessageFilterTypeInclude - Represents an include message filter type.
	MessageFilterTypeInclude MessageFilterType = "Include"
	// MessageFilterTypeNotSpecified - Represents a state where the value is not specified.
	MessageFilterTypeNotSpecified MessageFilterType = "NotSpecified"
)

// PossibleMessageFilterTypeValues returns the possible values for the MessageFilterType const type.
func PossibleMessageFilterTypeValues() []MessageFilterType {
	return []MessageFilterType{
		MessageFilterTypeExclude,
		MessageFilterTypeInclude,
		MessageFilterTypeNotSpecified,
	}
}

// OpenAuthenticationProviderType - Open authentication policy provider type.
type OpenAuthenticationProviderType string

const (
	// OpenAuthenticationProviderTypeAAD - Represents Azure Active Directory (AAD) provider type.
	OpenAuthenticationProviderTypeAAD OpenAuthenticationProviderType = "AAD"
)

// PossibleOpenAuthenticationProviderTypeValues returns the possible values for the OpenAuthenticationProviderType const type.
func PossibleOpenAuthenticationProviderTypeValues() []OpenAuthenticationProviderType {
	return []OpenAuthenticationProviderType{
		OpenAuthenticationProviderTypeAAD,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// ParameterType - The parameter type.
type ParameterType string

const (
	// ParameterTypeArray - Represents an array parameter type.
	ParameterTypeArray ParameterType = "Array"
	// ParameterTypeBool - Represents a boolean parameter type.
	ParameterTypeBool ParameterType = "Bool"
	// ParameterTypeFloat - Represents a float parameter type.
	ParameterTypeFloat ParameterType = "Float"
	// ParameterTypeInt - Represents an integer parameter type.
	ParameterTypeInt ParameterType = "Int"
	// ParameterTypeNotSpecified - Represents a state where the value is not specified.
	ParameterTypeNotSpecified ParameterType = "NotSpecified"
	// ParameterTypeObject - Represents an object parameter type.
	ParameterTypeObject ParameterType = "Object"
	// ParameterTypeSecureObject - Represents a secure object parameter type.
	ParameterTypeSecureObject ParameterType = "SecureObject"
	// ParameterTypeSecureString - Represents a secure string parameter type.
	ParameterTypeSecureString ParameterType = "SecureString"
	// ParameterTypeString - Represents a string parameter type.
	ParameterTypeString ParameterType = "String"
)

// PossibleParameterTypeValues returns the possible values for the ParameterType const type.
func PossibleParameterTypeValues() []ParameterType {
	return []ParameterType{
		ParameterTypeArray,
		ParameterTypeBool,
		ParameterTypeFloat,
		ParameterTypeInt,
		ParameterTypeNotSpecified,
		ParameterTypeObject,
		ParameterTypeSecureObject,
		ParameterTypeSecureString,
		ParameterTypeString,
	}
}

// PartnerType - The partner type.
type PartnerType string

const (
	// PartnerTypeB2B - Represents a B2b partner type.
	PartnerTypeB2B PartnerType = "B2b"
	// PartnerTypeNotSpecified - Represents a state where the value is not specified.
	PartnerTypeNotSpecified PartnerType = "NotSpecified"
)

// PossiblePartnerTypeValues returns the possible values for the PartnerType const type.
func PossiblePartnerTypeValues() []PartnerType {
	return []PartnerType{
		PartnerTypeB2B,
		PartnerTypeNotSpecified,
	}
}

// RecurrenceFrequency - The recurrence frequency.
type RecurrenceFrequency string

const (
	// RecurrenceFrequencyDay - Represents a recurrence frequency of days.
	RecurrenceFrequencyDay RecurrenceFrequency = "Day"
	// RecurrenceFrequencyHour - Represents a recurrence frequency of hours.
	RecurrenceFrequencyHour RecurrenceFrequency = "Hour"
	// RecurrenceFrequencyMinute - Represents a recurrence frequency of minutes.
	RecurrenceFrequencyMinute RecurrenceFrequency = "Minute"
	// RecurrenceFrequencyMonth - Represents a recurrence frequency of months.
	RecurrenceFrequencyMonth RecurrenceFrequency = "Month"
	// RecurrenceFrequencyNotSpecified - Represents a state where the value is not specified.
	RecurrenceFrequencyNotSpecified RecurrenceFrequency = "NotSpecified"
	// RecurrenceFrequencySecond - Represents a recurrence frequency of seconds.
	RecurrenceFrequencySecond RecurrenceFrequency = "Second"
	// RecurrenceFrequencyWeek - Represents a recurrence frequency of weeks.
	RecurrenceFrequencyWeek RecurrenceFrequency = "Week"
	// RecurrenceFrequencyYear - Represents a recurrence frequency of years.
	RecurrenceFrequencyYear RecurrenceFrequency = "Year"
)

// PossibleRecurrenceFrequencyValues returns the possible values for the RecurrenceFrequency const type.
func PossibleRecurrenceFrequencyValues() []RecurrenceFrequency {
	return []RecurrenceFrequency{
		RecurrenceFrequencyDay,
		RecurrenceFrequencyHour,
		RecurrenceFrequencyMinute,
		RecurrenceFrequencyMonth,
		RecurrenceFrequencyNotSpecified,
		RecurrenceFrequencySecond,
		RecurrenceFrequencyWeek,
		RecurrenceFrequencyYear,
	}
}

// SKUName - The sku name.
type SKUName string

const (
	// SKUNameBasic - Represents a basic SKU.
	SKUNameBasic SKUName = "Basic"
	// SKUNameFree - Represents a free SKU.
	SKUNameFree SKUName = "Free"
	// SKUNameNotSpecified - Represents a state where the value is not specified.
	SKUNameNotSpecified SKUName = "NotSpecified"
	// SKUNamePremium - Represents a premium SKU.
	SKUNamePremium SKUName = "Premium"
	// SKUNameShared - Represents a shared SKU.
	SKUNameShared SKUName = "Shared"
	// SKUNameStandard - Represents a standard SKU.
	SKUNameStandard SKUName = "Standard"
)

// PossibleSKUNameValues returns the possible values for the SKUName const type.
func PossibleSKUNameValues() []SKUName {
	return []SKUName{
		SKUNameBasic,
		SKUNameFree,
		SKUNameNotSpecified,
		SKUNamePremium,
		SKUNameShared,
		SKUNameStandard,
	}
}

// SchemaType - The schema type.
type SchemaType string

const (
	// SchemaTypeNotSpecified - Represents a state where the value is not specified.
	SchemaTypeNotSpecified SchemaType = "NotSpecified"
	// SchemaTypeXML - Represents an XML schema type.
	SchemaTypeXML SchemaType = "Xml"
)

// PossibleSchemaTypeValues returns the possible values for the SchemaType const type.
func PossibleSchemaTypeValues() []SchemaType {
	return []SchemaType{
		SchemaTypeNotSpecified,
		SchemaTypeXML,
	}
}

// SegmentTerminatorSuffix - The segment terminator suffix.
type SegmentTerminatorSuffix string

const (
	// SegmentTerminatorSuffixCR - Represents a CR segment terminator suffix.
	SegmentTerminatorSuffixCR SegmentTerminatorSuffix = "CR"
	// SegmentTerminatorSuffixCRLF - Represents a CRLF segment terminator suffix.
	SegmentTerminatorSuffixCRLF SegmentTerminatorSuffix = "CRLF"
	// SegmentTerminatorSuffixLF - Represents a LF segment terminator suffix.
	SegmentTerminatorSuffixLF SegmentTerminatorSuffix = "LF"
	// SegmentTerminatorSuffixNone - Represents a none segment terminator suffix.
	SegmentTerminatorSuffixNone SegmentTerminatorSuffix = "None"
	// SegmentTerminatorSuffixNotSpecified - Represents a not specified segment terminator suffix.
	SegmentTerminatorSuffixNotSpecified SegmentTerminatorSuffix = "NotSpecified"
)

// PossibleSegmentTerminatorSuffixValues returns the possible values for the SegmentTerminatorSuffix const type.
func PossibleSegmentTerminatorSuffixValues() []SegmentTerminatorSuffix {
	return []SegmentTerminatorSuffix{
		SegmentTerminatorSuffixCR,
		SegmentTerminatorSuffixCRLF,
		SegmentTerminatorSuffixLF,
		SegmentTerminatorSuffixNone,
		SegmentTerminatorSuffixNotSpecified,
	}
}

// SigningAlgorithm - The signing or hashing algorithm.
type SigningAlgorithm string

const (
	// SigningAlgorithmDefault - Represents the default signing algorithm.
	SigningAlgorithmDefault SigningAlgorithm = "Default"
	// SigningAlgorithmNotSpecified - Represents a state where the value is not specified.
	SigningAlgorithmNotSpecified SigningAlgorithm = "NotSpecified"
	// SigningAlgorithmSHA1 - Represents the SHA1 signing algorithm.
	SigningAlgorithmSHA1 SigningAlgorithm = "SHA1"
	// SigningAlgorithmSHA2256 - Represents the SHA2-256 signing algorithm.
	SigningAlgorithmSHA2256 SigningAlgorithm = "SHA2256"
	// SigningAlgorithmSHA2384 - Represents the SHA2-384 signing algorithm.
	SigningAlgorithmSHA2384 SigningAlgorithm = "SHA2384"
	// SigningAlgorithmSHA2512 - Represents the SHA2-512 signing algorithm.
	SigningAlgorithmSHA2512 SigningAlgorithm = "SHA2512"
)

// PossibleSigningAlgorithmValues returns the possible values for the SigningAlgorithm const type.
func PossibleSigningAlgorithmValues() []SigningAlgorithm {
	return []SigningAlgorithm{
		SigningAlgorithmDefault,
		SigningAlgorithmNotSpecified,
		SigningAlgorithmSHA1,
		SigningAlgorithmSHA2256,
		SigningAlgorithmSHA2384,
		SigningAlgorithmSHA2512,
	}
}

// StatusAnnotation - The status annotation.
type StatusAnnotation string

const (
	// StatusAnnotationNotSpecified - Represents a state where the value is not specified.
	StatusAnnotationNotSpecified StatusAnnotation = "NotSpecified"
	// StatusAnnotationPreview - Represents a preview status annotation.
	StatusAnnotationPreview StatusAnnotation = "Preview"
	// StatusAnnotationProduction - Represents a production status annotation.
	StatusAnnotationProduction StatusAnnotation = "Production"
)

// PossibleStatusAnnotationValues returns the possible values for the StatusAnnotation const type.
func PossibleStatusAnnotationValues() []StatusAnnotation {
	return []StatusAnnotation{
		StatusAnnotationNotSpecified,
		StatusAnnotationPreview,
		StatusAnnotationProduction,
	}
}

// SwaggerSchemaType - The swagger schema type.
type SwaggerSchemaType string

const (
	// SwaggerSchemaTypeArray - Represents an array schema type.
	SwaggerSchemaTypeArray SwaggerSchemaType = "Array"
	// SwaggerSchemaTypeBoolean - Represents a boolean schema type.
	SwaggerSchemaTypeBoolean SwaggerSchemaType = "Boolean"
	// SwaggerSchemaTypeFile - Represents a file schema type.
	SwaggerSchemaTypeFile SwaggerSchemaType = "File"
	// SwaggerSchemaTypeInteger - Represents an integer schema type.
	SwaggerSchemaTypeInteger SwaggerSchemaType = "Integer"
	// SwaggerSchemaTypeNull - Represents a null schema type.
	SwaggerSchemaTypeNull SwaggerSchemaType = "Null"
	// SwaggerSchemaTypeNumber - Represents a number schema type.
	SwaggerSchemaTypeNumber SwaggerSchemaType = "Number"
	// SwaggerSchemaTypeObject - Represents an object schema type.
	SwaggerSchemaTypeObject SwaggerSchemaType = "Object"
	// SwaggerSchemaTypeString - Represents a string schema type.
	SwaggerSchemaTypeString SwaggerSchemaType = "String"
)

// PossibleSwaggerSchemaTypeValues returns the possible values for the SwaggerSchemaType const type.
func PossibleSwaggerSchemaTypeValues() []SwaggerSchemaType {
	return []SwaggerSchemaType{
		SwaggerSchemaTypeArray,
		SwaggerSchemaTypeBoolean,
		SwaggerSchemaTypeFile,
		SwaggerSchemaTypeInteger,
		SwaggerSchemaTypeNull,
		SwaggerSchemaTypeNumber,
		SwaggerSchemaTypeObject,
		SwaggerSchemaTypeString,
	}
}

// TrackEventsOperationOptions - The track events operation options.
type TrackEventsOperationOptions string

const (
	// TrackEventsOperationOptionsDisableSourceInfoEnrich - Represents disabling source info enrichment for track events operation.
	TrackEventsOperationOptionsDisableSourceInfoEnrich TrackEventsOperationOptions = "DisableSourceInfoEnrich"
	// TrackEventsOperationOptionsNone - Represents no track events operation options.
	TrackEventsOperationOptionsNone TrackEventsOperationOptions = "None"
)

// PossibleTrackEventsOperationOptionsValues returns the possible values for the TrackEventsOperationOptions const type.
func PossibleTrackEventsOperationOptionsValues() []TrackEventsOperationOptions {
	return []TrackEventsOperationOptions{
		TrackEventsOperationOptionsDisableSourceInfoEnrich,
		TrackEventsOperationOptionsNone,
	}
}

// TrackingRecordType - The tracking record type.
type TrackingRecordType string

const (
	// TrackingRecordTypeAs2MDN - Represents an AS2 MDN tracking record type.
	TrackingRecordTypeAs2MDN TrackingRecordType = "As2MDN"
	// TrackingRecordTypeAs2Message - Represents an AS2 message tracking record type.
	TrackingRecordTypeAs2Message TrackingRecordType = "As2Message"
	// TrackingRecordTypeCustom - Represents a custom tracking record type.
	TrackingRecordTypeCustom TrackingRecordType = "Custom"
	// TrackingRecordTypeEdifactFunctionalGroup - Represents an Edifact functional group tracking record type.
	TrackingRecordTypeEdifactFunctionalGroup TrackingRecordType = "EdifactFunctionalGroup"
	// TrackingRecordTypeEdifactFunctionalGroupAcknowledgment - Represents an Edifact functional group acknowledgment tracking
	// record type.
	TrackingRecordTypeEdifactFunctionalGroupAcknowledgment TrackingRecordType = "EdifactFunctionalGroupAcknowledgment"
	// TrackingRecordTypeEdifactInterchange - Represents an Edifact interchange tracking record type.
	TrackingRecordTypeEdifactInterchange TrackingRecordType = "EdifactInterchange"
	// TrackingRecordTypeEdifactInterchangeAcknowledgment - Represents an Edifact interchange acknowledgment tracking record type.
	TrackingRecordTypeEdifactInterchangeAcknowledgment TrackingRecordType = "EdifactInterchangeAcknowledgment"
	// TrackingRecordTypeEdifactTransactionSet - Represents an Edifact transaction set tracking record type.
	TrackingRecordTypeEdifactTransactionSet TrackingRecordType = "EdifactTransactionSet"
	// TrackingRecordTypeEdifactTransactionSetAcknowledgment - Represents an Edifact transaction set acknowledgment tracking record
	// type.
	TrackingRecordTypeEdifactTransactionSetAcknowledgment TrackingRecordType = "EdifactTransactionSetAcknowledgment"
	// TrackingRecordTypeNotSpecified - Represents a state where the value is not specified.
	TrackingRecordTypeNotSpecified TrackingRecordType = "NotSpecified"
	// TrackingRecordTypeX12FunctionalGroup - Represents an X12 functional group tracking record type.
	TrackingRecordTypeX12FunctionalGroup TrackingRecordType = "X12FunctionalGroup"
	// TrackingRecordTypeX12FunctionalGroupAcknowledgment - Represents an X12 functional group acknowledgment tracking record
	// type.
	TrackingRecordTypeX12FunctionalGroupAcknowledgment TrackingRecordType = "X12FunctionalGroupAcknowledgment"
	// TrackingRecordTypeX12Interchange - Represents an X12 interchange tracking record type.
	TrackingRecordTypeX12Interchange TrackingRecordType = "X12Interchange"
	// TrackingRecordTypeX12InterchangeAcknowledgment - Represents an X12 interchange acknowledgment tracking record type.
	TrackingRecordTypeX12InterchangeAcknowledgment TrackingRecordType = "X12InterchangeAcknowledgment"
	// TrackingRecordTypeX12TransactionSet - Represents an X12 transaction set tracking record type.
	TrackingRecordTypeX12TransactionSet TrackingRecordType = "X12TransactionSet"
	// TrackingRecordTypeX12TransactionSetAcknowledgment - Represents an X12 transaction set acknowledgment tracking record type.
	TrackingRecordTypeX12TransactionSetAcknowledgment TrackingRecordType = "X12TransactionSetAcknowledgment"
)

// PossibleTrackingRecordTypeValues returns the possible values for the TrackingRecordType const type.
func PossibleTrackingRecordTypeValues() []TrackingRecordType {
	return []TrackingRecordType{
		TrackingRecordTypeAs2MDN,
		TrackingRecordTypeAs2Message,
		TrackingRecordTypeCustom,
		TrackingRecordTypeEdifactFunctionalGroup,
		TrackingRecordTypeEdifactFunctionalGroupAcknowledgment,
		TrackingRecordTypeEdifactInterchange,
		TrackingRecordTypeEdifactInterchangeAcknowledgment,
		TrackingRecordTypeEdifactTransactionSet,
		TrackingRecordTypeEdifactTransactionSetAcknowledgment,
		TrackingRecordTypeNotSpecified,
		TrackingRecordTypeX12FunctionalGroup,
		TrackingRecordTypeX12FunctionalGroupAcknowledgment,
		TrackingRecordTypeX12Interchange,
		TrackingRecordTypeX12InterchangeAcknowledgment,
		TrackingRecordTypeX12TransactionSet,
		TrackingRecordTypeX12TransactionSetAcknowledgment,
	}
}

// TrailingSeparatorPolicy - The trailing separator policy.
type TrailingSeparatorPolicy string

const (
	// TrailingSeparatorPolicyMandatory - Represents a policy where trailing separators are mandatory.
	TrailingSeparatorPolicyMandatory TrailingSeparatorPolicy = "Mandatory"
	// TrailingSeparatorPolicyNotAllowed - Represents a policy where trailing separators are not allowed.
	TrailingSeparatorPolicyNotAllowed TrailingSeparatorPolicy = "NotAllowed"
	// TrailingSeparatorPolicyNotSpecified - Represents a state where the value is not specified.
	TrailingSeparatorPolicyNotSpecified TrailingSeparatorPolicy = "NotSpecified"
	// TrailingSeparatorPolicyOptional - Represents a policy where trailing separators are optional.
	TrailingSeparatorPolicyOptional TrailingSeparatorPolicy = "Optional"
)

// PossibleTrailingSeparatorPolicyValues returns the possible values for the TrailingSeparatorPolicy const type.
func PossibleTrailingSeparatorPolicyValues() []TrailingSeparatorPolicy {
	return []TrailingSeparatorPolicy{
		TrailingSeparatorPolicyMandatory,
		TrailingSeparatorPolicyNotAllowed,
		TrailingSeparatorPolicyNotSpecified,
		TrailingSeparatorPolicyOptional,
	}
}

// UsageIndicator - The usage indicator.
type UsageIndicator string

const (
	// UsageIndicatorInformation - Represents an information usage indicator.
	UsageIndicatorInformation UsageIndicator = "Information"
	// UsageIndicatorNotSpecified - Represents a state where the value is not specified.
	UsageIndicatorNotSpecified UsageIndicator = "NotSpecified"
	// UsageIndicatorProduction - Represents a production usage indicator.
	UsageIndicatorProduction UsageIndicator = "Production"
	// UsageIndicatorTest - Represents a test usage indicator.
	UsageIndicatorTest UsageIndicator = "Test"
)

// PossibleUsageIndicatorValues returns the possible values for the UsageIndicator const type.
func PossibleUsageIndicatorValues() []UsageIndicator {
	return []UsageIndicator{
		UsageIndicatorInformation,
		UsageIndicatorNotSpecified,
		UsageIndicatorProduction,
		UsageIndicatorTest,
	}
}

// WorkflowProvisioningState - The workflow provisioning state.
type WorkflowProvisioningState string

const (
	// WorkflowProvisioningStateAccepted - Represents a state where the workflow is accepted.
	WorkflowProvisioningStateAccepted WorkflowProvisioningState = "Accepted"
	// WorkflowProvisioningStateCanceled - Represents a state where the workflow is canceled.
	WorkflowProvisioningStateCanceled WorkflowProvisioningState = "Canceled"
	// WorkflowProvisioningStateCompleted - Represents a state where the workflow is completed.
	WorkflowProvisioningStateCompleted WorkflowProvisioningState = "Completed"
	// WorkflowProvisioningStateCreated - Represents a state where the workflow is created.
	WorkflowProvisioningStateCreated WorkflowProvisioningState = "Created"
	// WorkflowProvisioningStateCreating - Represents a state where the workflow is creating.
	WorkflowProvisioningStateCreating WorkflowProvisioningState = "Creating"
	// WorkflowProvisioningStateDeleted - Represents a state where the workflow is deleted.
	WorkflowProvisioningStateDeleted WorkflowProvisioningState = "Deleted"
	// WorkflowProvisioningStateDeleting - Represents a state where the workflow is deleting.
	WorkflowProvisioningStateDeleting WorkflowProvisioningState = "Deleting"
	// WorkflowProvisioningStateFailed - Represents a state where the workflow is failed.
	WorkflowProvisioningStateFailed WorkflowProvisioningState = "Failed"
	// WorkflowProvisioningStateInProgress - Represents a state where the workflow is in progress.
	WorkflowProvisioningStateInProgress WorkflowProvisioningState = "InProgress"
	// WorkflowProvisioningStateMoving - Represents a state where the workflow is moving.
	WorkflowProvisioningStateMoving WorkflowProvisioningState = "Moving"
	// WorkflowProvisioningStateNotSpecified - Represents a state where the value is not specified.
	WorkflowProvisioningStateNotSpecified WorkflowProvisioningState = "NotSpecified"
	// WorkflowProvisioningStatePending - Represents a state where the workflow is pending.
	WorkflowProvisioningStatePending WorkflowProvisioningState = "Pending"
	// WorkflowProvisioningStateReady - Represents a state where the workflow is ready.
	WorkflowProvisioningStateReady WorkflowProvisioningState = "Ready"
	// WorkflowProvisioningStateRegistered - Represents a state where the workflow is registered.
	WorkflowProvisioningStateRegistered WorkflowProvisioningState = "Registered"
	// WorkflowProvisioningStateRegistering - Represents a state where the workflow is registering.
	WorkflowProvisioningStateRegistering WorkflowProvisioningState = "Registering"
	// WorkflowProvisioningStateRenewing - Represents a state where the workflow is renewing.
	WorkflowProvisioningStateRenewing WorkflowProvisioningState = "Renewing"
	// WorkflowProvisioningStateRunning - Represents a state where the workflow is running.
	WorkflowProvisioningStateRunning WorkflowProvisioningState = "Running"
	// WorkflowProvisioningStateSucceeded - Represents a state where the workflow is succeeded.
	WorkflowProvisioningStateSucceeded WorkflowProvisioningState = "Succeeded"
	// WorkflowProvisioningStateUnregistered - Represents a state where the workflow is unregistered.
	WorkflowProvisioningStateUnregistered WorkflowProvisioningState = "Unregistered"
	// WorkflowProvisioningStateUnregistering - Represents a state where the workflow is unregistering.
	WorkflowProvisioningStateUnregistering WorkflowProvisioningState = "Unregistering"
	// WorkflowProvisioningStateUpdating - Represents a state where the workflow is updating.
	WorkflowProvisioningStateUpdating WorkflowProvisioningState = "Updating"
	// WorkflowProvisioningStateWaiting - Represents a state where the workflow is waiting.
	WorkflowProvisioningStateWaiting WorkflowProvisioningState = "Waiting"
)

// PossibleWorkflowProvisioningStateValues returns the possible values for the WorkflowProvisioningState const type.
func PossibleWorkflowProvisioningStateValues() []WorkflowProvisioningState {
	return []WorkflowProvisioningState{
		WorkflowProvisioningStateAccepted,
		WorkflowProvisioningStateCanceled,
		WorkflowProvisioningStateCompleted,
		WorkflowProvisioningStateCreated,
		WorkflowProvisioningStateCreating,
		WorkflowProvisioningStateDeleted,
		WorkflowProvisioningStateDeleting,
		WorkflowProvisioningStateFailed,
		WorkflowProvisioningStateInProgress,
		WorkflowProvisioningStateMoving,
		WorkflowProvisioningStateNotSpecified,
		WorkflowProvisioningStatePending,
		WorkflowProvisioningStateReady,
		WorkflowProvisioningStateRegistered,
		WorkflowProvisioningStateRegistering,
		WorkflowProvisioningStateRenewing,
		WorkflowProvisioningStateRunning,
		WorkflowProvisioningStateSucceeded,
		WorkflowProvisioningStateUnregistered,
		WorkflowProvisioningStateUnregistering,
		WorkflowProvisioningStateUpdating,
		WorkflowProvisioningStateWaiting,
	}
}

// WorkflowState - The workflow state.
type WorkflowState string

const (
	// WorkflowStateCompleted - Represents a state where the workflow is completed.
	WorkflowStateCompleted WorkflowState = "Completed"
	// WorkflowStateDeleted - Represents a state where the workflow is deleted.
	WorkflowStateDeleted WorkflowState = "Deleted"
	// WorkflowStateDisabled - Represents a state where the workflow is disabled.
	WorkflowStateDisabled WorkflowState = "Disabled"
	// WorkflowStateEnabled - Represents a state where the workflow is enabled.
	WorkflowStateEnabled WorkflowState = "Enabled"
	// WorkflowStateNotSpecified - Represents a state where the value is not specified.
	WorkflowStateNotSpecified WorkflowState = "NotSpecified"
	// WorkflowStateSuspended - Represents a state where the workflow is suspended.
	WorkflowStateSuspended WorkflowState = "Suspended"
)

// PossibleWorkflowStateValues returns the possible values for the WorkflowState const type.
func PossibleWorkflowStateValues() []WorkflowState {
	return []WorkflowState{
		WorkflowStateCompleted,
		WorkflowStateDeleted,
		WorkflowStateDisabled,
		WorkflowStateEnabled,
		WorkflowStateNotSpecified,
		WorkflowStateSuspended,
	}
}

// WorkflowStatus - The workflow status.
type WorkflowStatus string

const (
	// WorkflowStatusAborted - Represents an aborted workflow status.
	WorkflowStatusAborted WorkflowStatus = "Aborted"
	// WorkflowStatusCancelled - Represents a cancelled workflow status.
	WorkflowStatusCancelled WorkflowStatus = "Cancelled"
	// WorkflowStatusFailed - Represents a failed workflow status.
	WorkflowStatusFailed WorkflowStatus = "Failed"
	// WorkflowStatusFaulted - Represents a faulted workflow status.
	WorkflowStatusFaulted WorkflowStatus = "Faulted"
	// WorkflowStatusIgnored - Represents an ignored workflow status.
	WorkflowStatusIgnored WorkflowStatus = "Ignored"
	// WorkflowStatusNotSpecified - Represents a state where the value is not specified.
	WorkflowStatusNotSpecified WorkflowStatus = "NotSpecified"
	// WorkflowStatusPaused - Represents a paused workflow status.
	WorkflowStatusPaused WorkflowStatus = "Paused"
	// WorkflowStatusRunning - Represents a running workflow status.
	WorkflowStatusRunning WorkflowStatus = "Running"
	// WorkflowStatusSkipped - Represents a skipped workflow status.
	WorkflowStatusSkipped WorkflowStatus = "Skipped"
	// WorkflowStatusSucceeded - Represents a succeeded workflow status.
	WorkflowStatusSucceeded WorkflowStatus = "Succeeded"
	// WorkflowStatusSuspended - Represents a suspended workflow status.
	WorkflowStatusSuspended WorkflowStatus = "Suspended"
	// WorkflowStatusTimedOut - Represents a timed out workflow status.
	WorkflowStatusTimedOut WorkflowStatus = "TimedOut"
	// WorkflowStatusWaiting - Represents a waiting workflow status.
	WorkflowStatusWaiting WorkflowStatus = "Waiting"
)

// PossibleWorkflowStatusValues returns the possible values for the WorkflowStatus const type.
func PossibleWorkflowStatusValues() []WorkflowStatus {
	return []WorkflowStatus{
		WorkflowStatusAborted,
		WorkflowStatusCancelled,
		WorkflowStatusFailed,
		WorkflowStatusFaulted,
		WorkflowStatusIgnored,
		WorkflowStatusNotSpecified,
		WorkflowStatusPaused,
		WorkflowStatusRunning,
		WorkflowStatusSkipped,
		WorkflowStatusSucceeded,
		WorkflowStatusSuspended,
		WorkflowStatusTimedOut,
		WorkflowStatusWaiting,
	}
}

// WorkflowTriggerProvisioningState - The workflow trigger provisioning state.
type WorkflowTriggerProvisioningState string

const (
	// WorkflowTriggerProvisioningStateAccepted - Represents a state where the workflow trigger is accepted.
	WorkflowTriggerProvisioningStateAccepted WorkflowTriggerProvisioningState = "Accepted"
	// WorkflowTriggerProvisioningStateCanceled - Represents a state where the workflow trigger is canceled.
	WorkflowTriggerProvisioningStateCanceled WorkflowTriggerProvisioningState = "Canceled"
	// WorkflowTriggerProvisioningStateCompleted - Represents a state where the workflow trigger is completed.
	WorkflowTriggerProvisioningStateCompleted WorkflowTriggerProvisioningState = "Completed"
	// WorkflowTriggerProvisioningStateCreated - Represents a state where the workflow trigger is created.
	WorkflowTriggerProvisioningStateCreated WorkflowTriggerProvisioningState = "Created"
	// WorkflowTriggerProvisioningStateCreating - Represents a state where the workflow trigger is creating.
	WorkflowTriggerProvisioningStateCreating WorkflowTriggerProvisioningState = "Creating"
	// WorkflowTriggerProvisioningStateDeleted - Represents a state where the workflow trigger is deleted.
	WorkflowTriggerProvisioningStateDeleted WorkflowTriggerProvisioningState = "Deleted"
	// WorkflowTriggerProvisioningStateDeleting - Represents a state where the workflow trigger is deleting.
	WorkflowTriggerProvisioningStateDeleting WorkflowTriggerProvisioningState = "Deleting"
	// WorkflowTriggerProvisioningStateFailed - Represents a state where the workflow trigger is failed.
	WorkflowTriggerProvisioningStateFailed WorkflowTriggerProvisioningState = "Failed"
	// WorkflowTriggerProvisioningStateMoving - Represents a state where the workflow trigger is moving.
	WorkflowTriggerProvisioningStateMoving WorkflowTriggerProvisioningState = "Moving"
	// WorkflowTriggerProvisioningStateNotSpecified - Represents a state where the value is not specified.
	WorkflowTriggerProvisioningStateNotSpecified WorkflowTriggerProvisioningState = "NotSpecified"
	// WorkflowTriggerProvisioningStateReady - Represents a state where the workflow trigger is ready.
	WorkflowTriggerProvisioningStateReady WorkflowTriggerProvisioningState = "Ready"
	// WorkflowTriggerProvisioningStateRegistered - Represents a state where the workflow trigger is registered.
	WorkflowTriggerProvisioningStateRegistered WorkflowTriggerProvisioningState = "Registered"
	// WorkflowTriggerProvisioningStateRegistering - Represents a state where the workflow trigger is registering.
	WorkflowTriggerProvisioningStateRegistering WorkflowTriggerProvisioningState = "Registering"
	// WorkflowTriggerProvisioningStateRunning - Represents a state where the workflow trigger is running.
	WorkflowTriggerProvisioningStateRunning WorkflowTriggerProvisioningState = "Running"
	// WorkflowTriggerProvisioningStateSucceeded - Represents a state where the workflow trigger is succeeded.
	WorkflowTriggerProvisioningStateSucceeded WorkflowTriggerProvisioningState = "Succeeded"
	// WorkflowTriggerProvisioningStateUnregistered - Represents a state where the workflow trigger is unregistered.
	WorkflowTriggerProvisioningStateUnregistered WorkflowTriggerProvisioningState = "Unregistered"
	// WorkflowTriggerProvisioningStateUnregistering - Represents a state where the workflow trigger is unregistering.
	WorkflowTriggerProvisioningStateUnregistering WorkflowTriggerProvisioningState = "Unregistering"
	// WorkflowTriggerProvisioningStateUpdating - Represents a state where the workflow trigger is updating.
	WorkflowTriggerProvisioningStateUpdating WorkflowTriggerProvisioningState = "Updating"
)

// PossibleWorkflowTriggerProvisioningStateValues returns the possible values for the WorkflowTriggerProvisioningState const type.
func PossibleWorkflowTriggerProvisioningStateValues() []WorkflowTriggerProvisioningState {
	return []WorkflowTriggerProvisioningState{
		WorkflowTriggerProvisioningStateAccepted,
		WorkflowTriggerProvisioningStateCanceled,
		WorkflowTriggerProvisioningStateCompleted,
		WorkflowTriggerProvisioningStateCreated,
		WorkflowTriggerProvisioningStateCreating,
		WorkflowTriggerProvisioningStateDeleted,
		WorkflowTriggerProvisioningStateDeleting,
		WorkflowTriggerProvisioningStateFailed,
		WorkflowTriggerProvisioningStateMoving,
		WorkflowTriggerProvisioningStateNotSpecified,
		WorkflowTriggerProvisioningStateReady,
		WorkflowTriggerProvisioningStateRegistered,
		WorkflowTriggerProvisioningStateRegistering,
		WorkflowTriggerProvisioningStateRunning,
		WorkflowTriggerProvisioningStateSucceeded,
		WorkflowTriggerProvisioningStateUnregistered,
		WorkflowTriggerProvisioningStateUnregistering,
		WorkflowTriggerProvisioningStateUpdating,
	}
}

// WsdlImportMethod - The WSDL import method.
type WsdlImportMethod string

const (
	// WsdlImportMethodNotSpecified - Represents a state where the value is not specified.
	WsdlImportMethodNotSpecified WsdlImportMethod = "NotSpecified"
	// WsdlImportMethodSoapPassThrough - Represents a SOAP Pass Through WSDL import method.
	WsdlImportMethodSoapPassThrough WsdlImportMethod = "SoapPassThrough"
	// WsdlImportMethodSoapToRest - Represents a SOAP to REST WSDL import method.
	WsdlImportMethodSoapToRest WsdlImportMethod = "SoapToRest"
)

// PossibleWsdlImportMethodValues returns the possible values for the WsdlImportMethod const type.
func PossibleWsdlImportMethodValues() []WsdlImportMethod {
	return []WsdlImportMethod{
		WsdlImportMethodNotSpecified,
		WsdlImportMethodSoapPassThrough,
		WsdlImportMethodSoapToRest,
	}
}

// X12CharacterSet - The X12 character set.
type X12CharacterSet string

const (
	// X12CharacterSetBasic - Represents the basic X12 character set.
	X12CharacterSetBasic X12CharacterSet = "Basic"
	// X12CharacterSetExtended - Represents the extended X12 character set.
	X12CharacterSetExtended X12CharacterSet = "Extended"
	// X12CharacterSetNotSpecified - Represents a state where the value is not specified.
	X12CharacterSetNotSpecified X12CharacterSet = "NotSpecified"
	// X12CharacterSetUTF8 - Represents the UTF-8 X12 character set.
	X12CharacterSetUTF8 X12CharacterSet = "UTF8"
)

// PossibleX12CharacterSetValues returns the possible values for the X12CharacterSet const type.
func PossibleX12CharacterSetValues() []X12CharacterSet {
	return []X12CharacterSet{
		X12CharacterSetBasic,
		X12CharacterSetExtended,
		X12CharacterSetNotSpecified,
		X12CharacterSetUTF8,
	}
}

// X12DateFormat - The x12 date format.
type X12DateFormat string

const (
	// X12DateFormatCCYYMMDD - Represents the CCYYMMDD date format.
	X12DateFormatCCYYMMDD X12DateFormat = "CCYYMMDD"
	// X12DateFormatNotSpecified - Represents a state where the value is not specified.
	X12DateFormatNotSpecified X12DateFormat = "NotSpecified"
	// X12DateFormatYYMMDD - Represents the YYMMDD date format.
	X12DateFormatYYMMDD X12DateFormat = "YYMMDD"
)

// PossibleX12DateFormatValues returns the possible values for the X12DateFormat const type.
func PossibleX12DateFormatValues() []X12DateFormat {
	return []X12DateFormat{
		X12DateFormatCCYYMMDD,
		X12DateFormatNotSpecified,
		X12DateFormatYYMMDD,
	}
}

// X12TimeFormat - The x12 time format.
type X12TimeFormat string

const (
	// X12TimeFormatHHMM - Represents the HHMM time format.
	X12TimeFormatHHMM X12TimeFormat = "HHMM"
	// X12TimeFormatHHMMSS - Represents the HHMMSS time format.
	X12TimeFormatHHMMSS X12TimeFormat = "HHMMSS"
	// X12TimeFormatHHMMSSd - Represents the HHMMSSd time format.
	X12TimeFormatHHMMSSd X12TimeFormat = "HHMMSSd"
	// X12TimeFormatHHMMSSdd - Represents the HHMMSSdd time format.
	X12TimeFormatHHMMSSdd X12TimeFormat = "HHMMSSdd"
	// X12TimeFormatNotSpecified - Represents a state where the value is not specified.
	X12TimeFormatNotSpecified X12TimeFormat = "NotSpecified"
)

// PossibleX12TimeFormatValues returns the possible values for the X12TimeFormat const type.
func PossibleX12TimeFormatValues() []X12TimeFormat {
	return []X12TimeFormat{
		X12TimeFormatHHMM,
		X12TimeFormatHHMMSS,
		X12TimeFormatHHMMSSd,
		X12TimeFormatHHMMSSdd,
		X12TimeFormatNotSpecified,
	}
}
