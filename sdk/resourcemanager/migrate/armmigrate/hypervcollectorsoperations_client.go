//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HypervCollectorsOperationsClient contains the methods for the HypervCollectorsOperations group.
// Don't use this type directly, use NewHypervCollectorsOperationsClient() instead.
type HypervCollectorsOperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewHypervCollectorsOperationsClient creates a new instance of HypervCollectorsOperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHypervCollectorsOperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*HypervCollectorsOperationsClient, error) {
	cl, err := arm.NewClient(moduleName+".HypervCollectorsOperationsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HypervCollectorsOperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Create a HypervCollector
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - hypervCollectorName - Hyper-V collector ARM name
//   - resource - Resource create parameters.
//   - options - HypervCollectorsOperationsClientBeginCreateOptions contains the optional parameters for the HypervCollectorsOperationsClient.BeginCreate
//     method.
func (client *HypervCollectorsOperationsClient) BeginCreate(ctx context.Context, resourceGroupName string, projectName string, hypervCollectorName string, resource HypervCollector, options *HypervCollectorsOperationsClientBeginCreateOptions) (*runtime.Poller[HypervCollectorsOperationsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, projectName, hypervCollectorName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HypervCollectorsOperationsClientCreateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[HypervCollectorsOperationsClientCreateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Create - Create a HypervCollector
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15
func (client *HypervCollectorsOperationsClient) create(ctx context.Context, resourceGroupName string, projectName string, hypervCollectorName string, resource HypervCollector, options *HypervCollectorsOperationsClientBeginCreateOptions) (*http.Response, error) {
	var err error
	req, err := client.createCreateRequest(ctx, resourceGroupName, projectName, hypervCollectorName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *HypervCollectorsOperationsClient) createCreateRequest(ctx context.Context, resourceGroupName string, projectName string, hypervCollectorName string, resource HypervCollector, options *HypervCollectorsOperationsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hypervCollectorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if hypervCollectorName == "" {
		return nil, errors.New("parameter hypervCollectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hypervCollectorName}", url.PathEscape(hypervCollectorName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// Delete - Delete a HypervCollector
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - hypervCollectorName - Hyper-V collector ARM name
//   - options - HypervCollectorsOperationsClientDeleteOptions contains the optional parameters for the HypervCollectorsOperationsClient.Delete
//     method.
func (client *HypervCollectorsOperationsClient) Delete(ctx context.Context, resourceGroupName string, projectName string, hypervCollectorName string, options *HypervCollectorsOperationsClientDeleteOptions) (HypervCollectorsOperationsClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, projectName, hypervCollectorName, options)
	if err != nil {
		return HypervCollectorsOperationsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervCollectorsOperationsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HypervCollectorsOperationsClientDeleteResponse{}, err
	}
	return HypervCollectorsOperationsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *HypervCollectorsOperationsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, projectName string, hypervCollectorName string, options *HypervCollectorsOperationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hypervCollectorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if hypervCollectorName == "" {
		return nil, errors.New("parameter hypervCollectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hypervCollectorName}", url.PathEscape(hypervCollectorName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a HypervCollector
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - hypervCollectorName - Hyper-V collector ARM name
//   - options - HypervCollectorsOperationsClientGetOptions contains the optional parameters for the HypervCollectorsOperationsClient.Get
//     method.
func (client *HypervCollectorsOperationsClient) Get(ctx context.Context, resourceGroupName string, projectName string, hypervCollectorName string, options *HypervCollectorsOperationsClientGetOptions) (HypervCollectorsOperationsClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, resourceGroupName, projectName, hypervCollectorName, options)
	if err != nil {
		return HypervCollectorsOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HypervCollectorsOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HypervCollectorsOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *HypervCollectorsOperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, projectName string, hypervCollectorName string, options *HypervCollectorsOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hypervCollectorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if hypervCollectorName == "" {
		return nil, errors.New("parameter hypervCollectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hypervCollectorName}", url.PathEscape(hypervCollectorName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HypervCollectorsOperationsClient) getHandleResponse(resp *http.Response) (HypervCollectorsOperationsClientGetResponse, error) {
	result := HypervCollectorsOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervCollector); err != nil {
		return HypervCollectorsOperationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByAssessmentProjectPager - List HypervCollector resources by AssessmentProject
//
// Generated from API version 2023-03-15
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - options - HypervCollectorsOperationsClientListByAssessmentProjectOptions contains the optional parameters for the HypervCollectorsOperationsClient.NewListByAssessmentProjectPager
//     method.
func (client *HypervCollectorsOperationsClient) NewListByAssessmentProjectPager(resourceGroupName string, projectName string, options *HypervCollectorsOperationsClientListByAssessmentProjectOptions) *runtime.Pager[HypervCollectorsOperationsClientListByAssessmentProjectResponse] {
	return runtime.NewPager(runtime.PagingHandler[HypervCollectorsOperationsClientListByAssessmentProjectResponse]{
		More: func(page HypervCollectorsOperationsClientListByAssessmentProjectResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HypervCollectorsOperationsClientListByAssessmentProjectResponse) (HypervCollectorsOperationsClientListByAssessmentProjectResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByAssessmentProjectCreateRequest(ctx, resourceGroupName, projectName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HypervCollectorsOperationsClientListByAssessmentProjectResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return HypervCollectorsOperationsClientListByAssessmentProjectResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HypervCollectorsOperationsClientListByAssessmentProjectResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByAssessmentProjectHandleResponse(resp)
		},
	})
}

// listByAssessmentProjectCreateRequest creates the ListByAssessmentProject request.
func (client *HypervCollectorsOperationsClient) listByAssessmentProjectCreateRequest(ctx context.Context, resourceGroupName string, projectName string, options *HypervCollectorsOperationsClientListByAssessmentProjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByAssessmentProjectHandleResponse handles the ListByAssessmentProject response.
func (client *HypervCollectorsOperationsClient) listByAssessmentProjectHandleResponse(resp *http.Response) (HypervCollectorsOperationsClientListByAssessmentProjectResponse, error) {
	result := HypervCollectorsOperationsClientListByAssessmentProjectResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HypervCollectorListResult); err != nil {
		return HypervCollectorsOperationsClientListByAssessmentProjectResponse{}, err
	}
	return result, nil
}
