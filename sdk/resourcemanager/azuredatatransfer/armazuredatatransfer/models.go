// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazuredatatransfer

import "time"

// APIFlowOptions - Properties specific to API Flow Type
type APIFlowOptions struct {
	// Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
	APIMode *APIMode

	// Optional field to override the audience of the remote endpoint
	AudienceOverride *string

	// Unique CNAME to represent the Azure Data Transfer API Flow instance
	Cname *string

	// Flag for if Azure Data Transfer API Flow should extract the user token
	IdentityTranslation *IdentityTranslation

	// Remote stub app registration Client ID
	RemoteCallingModeClientID *string

	// Remote host to which communication needs to be made
	RemoteEndpoint *string

	// Sender's app user assigned Manage Identity client ID
	SenderClientID *string
}

// Action - The action to be executed.
type Action struct {
	// REQUIRED; Type of action to be executed
	ActionType *ActionType

	// REQUIRED; Type of target to execute the action on
	TargetType *TargetType

	// REQUIRED; Targets for the action
	Targets []*string

	// Business justification for the action
	Justification *string
}

// Connection - The connection resource definition.
type Connection struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// Properties of connection
	Properties *ConnectionProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ConnectionIDList - An array of connection id resources.
type ConnectionIDList struct {
	// Connection ID to target
	Value []*string
}

// ConnectionListResult - The response of a Connection list operation.
type ConnectionListResult struct {
	// REQUIRED; The Connection items on this page
	Value []*Connection

	// The link to the next page of items
	NextLink *string
}

// ConnectionProperties - Properties of connection
type ConnectionProperties struct {
	// REQUIRED; Pipeline to use to transfer data
	Pipeline *string

	// Direction of data movement
	Direction *Direction

	// The flow types being requested for this connection
	FlowTypes []*FlowType

	// Justification for the connection request
	Justification *string

	// PIN to link requests together
	Pin *string

	// The policies for this connection
	Policies []*string

	// The primary contact for this connection request
	PrimaryContact *string

	// Subscription ID to link cloud subscriptions together
	RemoteSubscriptionID *string

	// Requirement ID of the connection
	RequirementID *string

	// The schema URIs for this connection
	SchemaUris []*string

	// The schemas for this connection
	Schemas []*Schema

	// The secondary contacts for this connection request
	SecondaryContacts []*string

	// READ-ONLY; Approver of this connection request
	Approver *string

	// READ-ONLY; The timestamp that this connection request was submitted at
	DateSubmitted *time.Time

	// READ-ONLY; Force disablement status of the current connection
	ForceDisabledStatus []*ForceDisabledStatus

	// READ-ONLY; Link status of the current connection
	LinkStatus *LinkStatus

	// READ-ONLY; Resource ID of the linked connection
	LinkedConnectionID *string

	// READ-ONLY; Provisioning state of the connection
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the connection
	Status *ConnectionStatus

	// READ-ONLY; Reason for status
	StatusReason *string
}

// ConnectionsPatch - The connections resource patch definition.
type ConnectionsPatch struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// Resource tags.
	Tags map[string]*string
}

// Flow - The flow resource definition.
type Flow struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// Details of the resource plan.
	Plan *Plan

	// Properties of flow
	Properties *FlowProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// FlowListResult - The response of a Flow list operation.
type FlowListResult struct {
	// REQUIRED; The Flow items on this page
	Value []*Flow

	// The link to the next page of items
	NextLink *string
}

// FlowProperties - Properties of flow
type FlowProperties struct {
	// The API Flow configuration options for Azure Data Transfer API Flow type.
	APIFlowOptions *APIFlowOptions

	// The connection associated with this flow
	Connection *SelectedResource

	// Event Hub Consumer Group
	ConsumerGroup *string

	// The URI to the customer managed key for this flow
	CustomerManagedKeyVaultURI *string

	// Transfer Storage Blobs or Tables
	DataType *DataType

	// The destination endpoint ports of the stream
	DestinationEndpointPorts []*int64

	// The destination endpoints of the stream
	DestinationEndpoints []*string

	// Event Hub ID
	EventHubID *string

	// The flow type for this flow
	FlowType *FlowType

	// AME, PME, or TORUS only! AKV Chain Containing SAS Token
	KeyVaultURI *string

	// The messaging options for this flow
	MessagingOptions *MessagingOptions

	// The passphrase used for SRT streams
	Passphrase *string

	// The policies for this flow
	Policies []*string

	// The selected schema for this flow
	Schema *Schema

	// Service Bus Queue ID
	ServiceBusQueueID *string

	// The source IP address and CIDR ranges of the stream
	SourceAddresses *StreamSourceAddresses

	// Status of the current flow
	Status *FlowStatus

	// Storage Account ID
	StorageAccountID *string

	// Storage Account
	StorageAccountName *string

	// Storage Container Name
	StorageContainerName *string

	// Storage Table Name
	StorageTableName *string

	// The flow stream identifier
	StreamID *string

	// The latency of the stream in milliseconds
	StreamLatency *int64

	// The protocol of the stream
	StreamProtocol *StreamProtocol

	// READ-ONLY; Dataflow GUID associated with this flow
	FlowID *string

	// READ-ONLY; Force disablement status of the current flow
	ForceDisabledStatus []*ForceDisabledStatus

	// READ-ONLY; Link status of the current flow
	LinkStatus *LinkStatus

	// READ-ONLY; Resource ID of the linked flow
	LinkedFlowID *string

	// READ-ONLY; Provisioning state of the flow
	ProvisioningState *ProvisioningState
}

// FlowsPatch - The flows resource patch definition.
type FlowsPatch struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// Resource tags.
	Tags map[string]*string
}

// GetDestinationEndpointPortsResult - List of destination endpoint ports for the flow stream
type GetDestinationEndpointPortsResult struct {
	// The destination endpoint port for the flow stream
	Ports []*int64
}

// GetDestinationEndpointsResult - List of destination endpoints for the flow stream
type GetDestinationEndpointsResult struct {
	// The destination endpoints for the flow stream
	Endpoints []*string
}

// GetStreamConnectionStringResult - The connection string for the specified streaming flow
type GetStreamConnectionStringResult struct {
	// The connection string for the specified streaming flow
	ConnectionString *string
}

// InternalMetadataProperties - Internal metadata of the connection inside pipeline.
type InternalMetadataProperties struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Operation status associated with the last patch request
	OperationStatus *OperationStatusProperties

	// READ-ONLY; User that last set the approved status for this connection
	StatusSetBy *string
}

// ListApprovedSchemasRequest - The request used to list approved schemas within the resource provider.
type ListApprovedSchemasRequest struct {
	// The direction pipeline to filter approved schemas.
	Direction *Direction

	// The name of the pipeline to filter approved schemas.
	Pipeline *string
}

// ListFlowsByPipelineConnection - A connection resource id in addition to all child flow resources under this connection.
type ListFlowsByPipelineConnection struct {
	// List of flows associated with the connection.
	Flows []*Flow

	// ID of the connection.
	ID *string
}

// ListFlowsByPipelineResult - An array of flow resources.
type ListFlowsByPipelineResult struct {
	// List flows by pipeline result by connection
	Value []*ListFlowsByPipelineConnection
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType

	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
	// resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	// The dictionary values can be empty objects ({}) in
	// requests.
	UserAssignedIdentities map[string]*UserAssignedIdentity

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

// MessagingOptions - The option associated with messaging flows.
type MessagingOptions struct {
	// Billing tier for this messaging flow
	BillingTier *FlowBillingTier
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// OperationStatusProperties - Operation status associated with the last patch request
type OperationStatusProperties struct {
	// READ-ONLY; Operation status ID of the last patch request for this connection.
	ID *string

	// READ-ONLY; Message for the operation for the last patch request for this connection.
	Message *string

	// READ-ONLY; Operation status for the last patch request for this connection.
	Status *OperationStatusEnum
}

// PendingConnection - Pending connection object
type PendingConnection struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Pipeline to use to transfer data
	Pipeline *string

	// Direction of data movement
	Direction *Direction

	// The flow types being requested for this connection
	FlowTypes []*FlowType

	// Justification for the connection request
	Justification *string

	// PIN to link requests together
	Pin *string

	// The policies for this connection
	Policies []*string

	// The primary contact for this connection request
	PrimaryContact *string

	// The resource-specific properties for this resource.
	Properties *Connection

	// Subscription ID to link cloud subscriptions together
	RemoteSubscriptionID *string

	// Requirement ID of the connection
	RequirementID *string

	// The schema URIs for this connection
	SchemaUris []*string

	// The schemas for this connection
	Schemas []*Schema

	// The secondary contacts for this connection request
	SecondaryContacts []*string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Approver of this connection request
	Approver *string

	// READ-ONLY; The timestamp that this connection request was submitted at
	DateSubmitted *time.Time

	// READ-ONLY; Force disablement status of the current connection
	ForceDisabledStatus []*ForceDisabledStatus

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Link status of the current connection
	LinkStatus *LinkStatus

	// READ-ONLY; Resource ID of the linked connection
	LinkedConnectionID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Provisioning state of the connection
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the connection
	Status *ConnectionStatus

	// READ-ONLY; Reason for status
	StatusReason *string

	// READ-ONLY; Subscription ID of the pending connection.
	SubscriptionID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PendingConnectionListResult - The response of a PendingConnection list operation.
type PendingConnectionListResult struct {
	// REQUIRED; The PendingConnection items on this page
	Value []*PendingConnection

	// The link to the next page of items
	NextLink *string
}

// PendingFlow - Pending flow object
type PendingFlow struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The API Flow configuration options for Azure Data Transfer API Flow type.
	APIFlowOptions *APIFlowOptions

	// The connection associated with this flow
	Connection *SelectedResource

	// Event Hub Consumer Group
	ConsumerGroup *string

	// The URI to the customer managed key for this flow
	CustomerManagedKeyVaultURI *string

	// Transfer Storage Blobs or Tables
	DataType *DataType

	// The destination endpoint ports of the stream
	DestinationEndpointPorts []*int64

	// The destination endpoints of the stream
	DestinationEndpoints []*string

	// Event Hub ID
	EventHubID *string

	// The flow type for this flow
	FlowType *FlowType

	// AME, PME, or TORUS only! AKV Chain Containing SAS Token
	KeyVaultURI *string

	// The messaging options for this flow
	MessagingOptions *MessagingOptions

	// The passphrase used for SRT streams
	Passphrase *string

	// The policies for this flow
	Policies []*string

	// The resource-specific properties for this resource.
	Properties *Flow

	// The selected schema for this flow
	Schema *Schema

	// Service Bus Queue ID
	ServiceBusQueueID *string

	// The source IP address and CIDR ranges of the stream
	SourceAddresses *StreamSourceAddresses

	// Status of the current flow
	Status *FlowStatus

	// Storage Account ID
	StorageAccountID *string

	// Storage Account
	StorageAccountName *string

	// Storage Container Name
	StorageContainerName *string

	// Storage Table Name
	StorageTableName *string

	// The flow stream identifier
	StreamID *string

	// The latency of the stream in milliseconds
	StreamLatency *int64

	// The protocol of the stream
	StreamProtocol *StreamProtocol

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Connection ID of the pending flow.
	ConnectionID *string

	// READ-ONLY; Dataflow GUID associated with this flow
	FlowID *string

	// READ-ONLY; Force disablement status of the current flow
	ForceDisabledStatus []*ForceDisabledStatus

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Link status of the current flow
	LinkStatus *LinkStatus

	// READ-ONLY; Resource ID of the linked flow
	LinkedFlowID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Provisioning state of the flow
	ProvisioningState *ProvisioningState

	// READ-ONLY; Subscription ID of the pending flow.
	SubscriptionID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PendingFlowListResult - The response of a PendingFlow list operation.
type PendingFlowListResult struct {
	// REQUIRED; The PendingFlow items on this page
	Value []*PendingFlow

	// The link to the next page of items
	NextLink *string
}

// Pipeline - The pipeline resource definition.
type Pipeline struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// Properties of pipeline
	Properties *PipelineProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PipelineConnection - Connection body inside a pipeline
type PipelineConnection struct {
	// REQUIRED; Connection id inside pipeline
	ID *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Connection properties inside pipeline
	Properties *PipelineConnectionProperties

	// READ-ONLY; Connection etag inside pipeline
	Etag *string

	// READ-ONLY; Connection location inside pipeline
	Location *string

	// READ-ONLY; Connection name inside pipeline
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; Connection type inside pipeline
	Type *string
}

// PipelineConnectionProperties - Connection properties inside pipeline
type PipelineConnectionProperties struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Internal metadata of the connection inside pipeline.
	InternalMetadata *InternalMetadataProperties
}

// PipelineListResult - The response of a Pipeline list operation.
type PipelineListResult struct {
	// REQUIRED; The Pipeline items on this page
	Value []*Pipeline

	// The link to the next page of items
	NextLink *string
}

// PipelineProperties - Properties of pipeline
type PipelineProperties struct {
	// REQUIRED; Remote cloud of the data to be transferred or received
	RemoteCloud *string

	// The flow types that are disabled for this pipeline
	DisabledFlowTypes []*FlowType

	// Display name of this pipeline
	DisplayName *string

	// The flow types allowed for this pipeline
	FlowTypes []*FlowType

	// The policies for this pipeline
	Policies []*string

	// Quarantine Download Storage Account
	QuarantineDownloadStorageAccount *string

	// Quarantine Download Storage Container
	QuarantineDownloadStorageContainer *string

	// Status of the current pipeline
	Status *PipelineStatus

	// Subscribers of this resource
	Subscribers []*Subscriber

	// READ-ONLY; Connections associated with pipeline
	Connections []*PipelineConnection

	// READ-ONLY; Provisioning state of the pipeline
	ProvisioningState *ProvisioningState
}

// PipelinesPatch - The pipelines resource patch definition.
type PipelinesPatch struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// Properties of pipelines patch body.
	Properties *PipelinesPatchProperties

	// Resource tags.
	Tags map[string]*string
}

// PipelinesPatchProperties - Properties of pipelines patch body.
type PipelinesPatchProperties struct {
	// Connections associated with pipeline
	Connections []*PipelineConnection

	// The flow types allowed for this pipeline
	FlowTypes []*FlowType
}

// Plan for the resource.
type Plan struct {
	// REQUIRED; A user defined name of the 3rd Party Artifact that is being procured.
	Name *string

	// REQUIRED; The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact
	// at the time of Data Market onboarding.
	Product *string

	// REQUIRED; The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher *string

	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string

	// The version of the desired product/artifact.
	Version *string
}

// ResourceBody - The resource to reference.
type ResourceBody struct {
	// REQUIRED; ID of the resource.
	ID *string

	// Reason for resource operation.
	StatusReason *string
}

// Schema - The schema object.
type Schema struct {
	// Connection ID associated with this schema
	ConnectionID *string

	// Content of the schema
	Content *string

	// The direction of the schema.
	Direction *Direction

	// ID associated with this schema
	ID *string

	// Name of the schema
	Name *string

	// The Schema Type
	SchemaType *SchemaType

	// Uri containing SAS token for the zipped schema
	SchemaURI *string

	// Status of the schema
	Status *SchemaStatus
}

// SchemasListResult - The schemas list result.
type SchemasListResult struct {
	// Schemas array.
	Value []*Schema
}

// SelectedResource - A resource selected from ARM
type SelectedResource struct {
	// REQUIRED; Id of the connection
	ID *string

	// Location of the connection
	Location *string

	// Name of the connection
	Name *string

	// Name of the subscription with the connection
	SubscriptionName *string
}

// SetDestinationEndpointPorts - Set the destination endpoint ports for the specified stream ID
type SetDestinationEndpointPorts struct {
	// The specified stream ID destination endpoint ports
	Ports []*int64
}

// SetDestinationEndpoints - Set the destination endpoints for the specified stream ID
type SetDestinationEndpoints struct {
	// The specified stream ID destination endpoints
	Endpoints []*string
}

// SetSourceAddresses - Set the source addresses for the specified stream ID
type SetSourceAddresses struct {
	// Source addresses
	Values []*string
}

// SetStreamPassphrase - Set the passphrase used for SRT streams
type SetStreamPassphrase struct {
	// The passphrase used for SRT streams
	Value *string
}

// StreamSourceAddresses - The source IP address and CIDR ranges of the stream
type StreamSourceAddresses struct {
	// A source IP address or CIDR range
	SourceAddresses []*string
}

// Subscriber - An individual that would like to subscribe to events that occur on a pipeline.
type Subscriber struct {
	// Email of the subscriber
	Email *string

	// Number specifying what notifications to receive
	Notifications *int64
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}

// ValidateSchemaResult - Result of the schema validation.
type ValidateSchemaResult struct {
	// Message describing the schema validation
	Message *string

	// Validation status of the schema
	Status *ValidateSchemaStatus
}
