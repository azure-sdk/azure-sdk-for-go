//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationmodernization

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ModernizeProjectClient contains the methods for the ModernizeProject group.
// Don't use this type directly, use NewModernizeProjectClient() instead.
type ModernizeProjectClient struct {
	internal *arm.Client
}

// NewModernizeProjectClient creates a new instance of ModernizeProjectClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewModernizeProjectClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*ModernizeProjectClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ModernizeProjectClient{
		internal: cl,
	}
	return client, nil
}

// Create - Creates the modernizeProject.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject Name.
//   - body - ModernizeProject properties.
//   - options - ModernizeProjectClientCreateOptions contains the optional parameters for the ModernizeProjectClient.Create method.
func (client *ModernizeProjectClient) Create(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, body ModernizeProjectModel, options *ModernizeProjectClientCreateOptions) (ModernizeProjectClientCreateResponse, error) {
	var err error
	const operationName = "ModernizeProjectClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, body, options)
	if err != nil {
		return ModernizeProjectClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModernizeProjectClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return ModernizeProjectClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *ModernizeProjectClient) createCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, body ModernizeProjectModel, options *ModernizeProjectClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *ModernizeProjectClient) createHandleResponse(resp *http.Response) (ModernizeProjectClientCreateResponse, error) {
	result := ModernizeProjectClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModernizeProjectModel); err != nil {
		return ModernizeProjectClientCreateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Removes the modernizeProject.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject Name.
//   - options - ModernizeProjectClientBeginDeleteOptions contains the optional parameters for the ModernizeProjectClient.BeginDelete
//     method.
func (client *ModernizeProjectClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *ModernizeProjectClientBeginDeleteOptions) (*runtime.Poller[ModernizeProjectClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, modernizeProjectName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ModernizeProjectClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ModernizeProjectClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Removes the modernizeProject.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *ModernizeProjectClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *ModernizeProjectClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "ModernizeProjectClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ModernizeProjectClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *ModernizeProjectClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the details of the modernize project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - Modernize project name.
//   - options - ModernizeProjectClientGetOptions contains the optional parameters for the ModernizeProjectClient.Get method.
func (client *ModernizeProjectClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *ModernizeProjectClientGetOptions) (ModernizeProjectClientGetResponse, error) {
	var err error
	const operationName = "ModernizeProjectClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, options)
	if err != nil {
		return ModernizeProjectClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModernizeProjectClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModernizeProjectClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ModernizeProjectClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *ModernizeProjectClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ModernizeProjectClient) getHandleResponse(resp *http.Response) (ModernizeProjectClientGetResponse, error) {
	result := ModernizeProjectClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModernizeProjectModel); err != nil {
		return ModernizeProjectClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets the list of modernizeProjects in the given subscription and resource group.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - options - ModernizeProjectClientListOptions contains the optional parameters for the ModernizeProjectClient.NewListPager
//     method.
func (client *ModernizeProjectClient) NewListPager(subscriptionID string, resourceGroupName string, options *ModernizeProjectClientListOptions) *runtime.Pager[ModernizeProjectClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[ModernizeProjectClientListResponse]{
		More: func(page ModernizeProjectClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ModernizeProjectClientListResponse) (ModernizeProjectClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ModernizeProjectClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return ModernizeProjectClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *ModernizeProjectClient) listCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *ModernizeProjectClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ModernizeProjectClient) listHandleResponse(resp *http.Response) (ModernizeProjectClientListResponse, error) {
	result := ModernizeProjectClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModernizeProjectModelCollection); err != nil {
		return ModernizeProjectClientListResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets the list of modernizeProjects in the given subscription.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - options - ModernizeProjectClientListBySubscriptionOptions contains the optional parameters for the ModernizeProjectClient.NewListBySubscriptionPager
//     method.
func (client *ModernizeProjectClient) NewListBySubscriptionPager(subscriptionID string, options *ModernizeProjectClientListBySubscriptionOptions) *runtime.Pager[ModernizeProjectClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[ModernizeProjectClientListBySubscriptionResponse]{
		More: func(page ModernizeProjectClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ModernizeProjectClientListBySubscriptionResponse) (ModernizeProjectClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ModernizeProjectClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return ModernizeProjectClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *ModernizeProjectClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *ModernizeProjectClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/modernizeProjects"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *ModernizeProjectClient) listBySubscriptionHandleResponse(resp *http.Response) (ModernizeProjectClientListBySubscriptionResponse, error) {
	result := ModernizeProjectClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModernizeProjectModelCollection); err != nil {
		return ModernizeProjectClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Performs update on the modernizeProject.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject Name.
//   - body - ModernizeProject properties.
//   - options - ModernizeProjectClientBeginUpdateOptions contains the optional parameters for the ModernizeProjectClient.BeginUpdate
//     method.
func (client *ModernizeProjectClient) BeginUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, body UpdateModernizeProjectModel, options *ModernizeProjectClientBeginUpdateOptions) (*runtime.Poller[ModernizeProjectClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, subscriptionID, resourceGroupName, modernizeProjectName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ModernizeProjectClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ModernizeProjectClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Performs update on the modernizeProject.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *ModernizeProjectClient) update(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, body UpdateModernizeProjectModel, options *ModernizeProjectClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ModernizeProjectClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *ModernizeProjectClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, body UpdateModernizeProjectModel, options *ModernizeProjectClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
