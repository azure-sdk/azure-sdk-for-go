//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HyperVClusterClient contains the methods for the HyperVCluster group.
// Don't use this type directly, use NewHyperVClusterClient() instead.
type HyperVClusterClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewHyperVClusterClient creates a new instance of HyperVClusterClient with the specified values.
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHyperVClusterClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*HyperVClusterClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &HyperVClusterClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// NewGetAllClustersInSitePager - Method to get all clusters in a site.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - HyperVClusterClientGetAllClustersInSiteOptions contains the optional parameters for the HyperVClusterClient.NewGetAllClustersInSitePager
//     method.
func (client *HyperVClusterClient) NewGetAllClustersInSitePager(resourceGroupName string, siteName string, options *HyperVClusterClientGetAllClustersInSiteOptions) *runtime.Pager[HyperVClusterClientGetAllClustersInSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[HyperVClusterClientGetAllClustersInSiteResponse]{
		More: func(page HyperVClusterClientGetAllClustersInSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HyperVClusterClientGetAllClustersInSiteResponse) (HyperVClusterClientGetAllClustersInSiteResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getAllClustersInSiteCreateRequest(ctx, resourceGroupName, siteName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HyperVClusterClientGetAllClustersInSiteResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return HyperVClusterClientGetAllClustersInSiteResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HyperVClusterClientGetAllClustersInSiteResponse{}, runtime.NewResponseError(resp)
			}
			return client.getAllClustersInSiteHandleResponse(resp)
		},
	})
}

// getAllClustersInSiteCreateRequest creates the GetAllClustersInSite request.
func (client *HyperVClusterClient) getAllClustersInSiteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *HyperVClusterClientGetAllClustersInSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/clusters"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAllClustersInSiteHandleResponse handles the GetAllClustersInSite response.
func (client *HyperVClusterClient) getAllClustersInSiteHandleResponse(resp *http.Response) (HyperVClusterClientGetAllClustersInSiteResponse, error) {
	result := HyperVClusterClientGetAllClustersInSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HyperVClusterCollection); err != nil {
		return HyperVClusterClientGetAllClustersInSiteResponse{}, err
	}
	return result, nil
}

// GetCluster - Method to get a Hyper-V cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - clusterName - Cluster ARM name.
//   - options - HyperVClusterClientGetClusterOptions contains the optional parameters for the HyperVClusterClient.GetCluster
//     method.
func (client *HyperVClusterClient) GetCluster(ctx context.Context, resourceGroupName string, siteName string, clusterName string, options *HyperVClusterClientGetClusterOptions) (HyperVClusterClientGetClusterResponse, error) {
	req, err := client.getClusterCreateRequest(ctx, resourceGroupName, siteName, clusterName, options)
	if err != nil {
		return HyperVClusterClientGetClusterResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HyperVClusterClientGetClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HyperVClusterClientGetClusterResponse{}, runtime.NewResponseError(resp)
	}
	return client.getClusterHandleResponse(resp)
}

// getClusterCreateRequest creates the GetCluster request.
func (client *HyperVClusterClient) getClusterCreateRequest(ctx context.Context, resourceGroupName string, siteName string, clusterName string, options *HyperVClusterClientGetClusterOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/clusters/{clusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getClusterHandleResponse handles the GetCluster response.
func (client *HyperVClusterClient) getClusterHandleResponse(resp *http.Response) (HyperVClusterClientGetClusterResponse, error) {
	result := HyperVClusterClientGetClusterResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HyperVCluster); err != nil {
		return HyperVClusterClientGetClusterResponse{}, err
	}
	return result, nil
}

// PutCluster - Method to create or update a cluster in site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - clusterName - Cluster ARM name.
//   - body - Put cluster body.
//   - options - HyperVClusterClientPutClusterOptions contains the optional parameters for the HyperVClusterClient.PutCluster
//     method.
func (client *HyperVClusterClient) PutCluster(ctx context.Context, resourceGroupName string, siteName string, clusterName string, body HyperVCluster, options *HyperVClusterClientPutClusterOptions) (HyperVClusterClientPutClusterResponse, error) {
	req, err := client.putClusterCreateRequest(ctx, resourceGroupName, siteName, clusterName, body, options)
	if err != nil {
		return HyperVClusterClientPutClusterResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HyperVClusterClientPutClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return HyperVClusterClientPutClusterResponse{}, runtime.NewResponseError(resp)
	}
	return client.putClusterHandleResponse(resp)
}

// putClusterCreateRequest creates the PutCluster request.
func (client *HyperVClusterClient) putClusterCreateRequest(ctx context.Context, resourceGroupName string, siteName string, clusterName string, body HyperVCluster, options *HyperVClusterClientPutClusterOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/clusters/{clusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// putClusterHandleResponse handles the PutCluster response.
func (client *HyperVClusterClient) putClusterHandleResponse(resp *http.Response) (HyperVClusterClientPutClusterResponse, error) {
	result := HyperVClusterClientPutClusterResponse{}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	return result, nil
}
