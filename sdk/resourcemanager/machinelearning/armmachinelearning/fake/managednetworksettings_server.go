// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearning/armmachinelearning/v5"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// ManagedNetworkSettingsServer is a fake server for instances of the armmachinelearning.ManagedNetworkSettingsClient type.
type ManagedNetworkSettingsServer struct {
	// Get is the fake for method ManagedNetworkSettingsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, workspaceName string, managedNetworkName string, options *armmachinelearning.ManagedNetworkSettingsClientGetOptions) (resp azfake.Responder[armmachinelearning.ManagedNetworkSettingsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method ManagedNetworkSettingsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, workspaceName string, options *armmachinelearning.ManagedNetworkSettingsClientListOptions) (resp azfake.PagerResponder[armmachinelearning.ManagedNetworkSettingsClientListResponse])

	// BeginPatch is the fake for method ManagedNetworkSettingsClient.BeginPatch
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginPatch func(ctx context.Context, resourceGroupName string, workspaceName string, managedNetworkName string, options *armmachinelearning.ManagedNetworkSettingsClientBeginPatchOptions) (resp azfake.PollerResponder[armmachinelearning.ManagedNetworkSettingsClientPatchResponse], errResp azfake.ErrorResponder)

	// BeginPut is the fake for method ManagedNetworkSettingsClient.BeginPut
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginPut func(ctx context.Context, resourceGroupName string, workspaceName string, managedNetworkName string, body armmachinelearning.ManagedNetworkSettingsPropertiesBasicResource, options *armmachinelearning.ManagedNetworkSettingsClientBeginPutOptions) (resp azfake.PollerResponder[armmachinelearning.ManagedNetworkSettingsClientPutResponse], errResp azfake.ErrorResponder)
}

// NewManagedNetworkSettingsServerTransport creates a new instance of ManagedNetworkSettingsServerTransport with the provided implementation.
// The returned ManagedNetworkSettingsServerTransport instance is connected to an instance of armmachinelearning.ManagedNetworkSettingsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewManagedNetworkSettingsServerTransport(srv *ManagedNetworkSettingsServer) *ManagedNetworkSettingsServerTransport {
	return &ManagedNetworkSettingsServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armmachinelearning.ManagedNetworkSettingsClientListResponse]](),
		beginPatch:   newTracker[azfake.PollerResponder[armmachinelearning.ManagedNetworkSettingsClientPatchResponse]](),
		beginPut:     newTracker[azfake.PollerResponder[armmachinelearning.ManagedNetworkSettingsClientPutResponse]](),
	}
}

// ManagedNetworkSettingsServerTransport connects instances of armmachinelearning.ManagedNetworkSettingsClient to instances of ManagedNetworkSettingsServer.
// Don't use this type directly, use NewManagedNetworkSettingsServerTransport instead.
type ManagedNetworkSettingsServerTransport struct {
	srv          *ManagedNetworkSettingsServer
	newListPager *tracker[azfake.PagerResponder[armmachinelearning.ManagedNetworkSettingsClientListResponse]]
	beginPatch   *tracker[azfake.PollerResponder[armmachinelearning.ManagedNetworkSettingsClientPatchResponse]]
	beginPut     *tracker[azfake.PollerResponder[armmachinelearning.ManagedNetworkSettingsClientPutResponse]]
}

// Do implements the policy.Transporter interface for ManagedNetworkSettingsServerTransport.
func (m *ManagedNetworkSettingsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *ManagedNetworkSettingsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if managedNetworkSettingsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = managedNetworkSettingsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ManagedNetworkSettingsClient.Get":
				res.resp, res.err = m.dispatchGet(req)
			case "ManagedNetworkSettingsClient.NewListPager":
				res.resp, res.err = m.dispatchNewListPager(req)
			case "ManagedNetworkSettingsClient.BeginPatch":
				res.resp, res.err = m.dispatchBeginPatch(req)
			case "ManagedNetworkSettingsClient.BeginPut":
				res.resp, res.err = m.dispatchBeginPut(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *ManagedNetworkSettingsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/managedNetworks/(?P<managedNetworkName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	managedNetworkNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("managedNetworkName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Get(req.Context(), resourceGroupNameParam, workspaceNameParam, managedNetworkNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ManagedNetworkSettingsPropertiesBasicResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *ManagedNetworkSettingsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := m.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/managedNetworks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		resp := m.srv.NewListPager(resourceGroupNameParam, workspaceNameParam, nil)
		newListPager = &resp
		m.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armmachinelearning.ManagedNetworkSettingsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		m.newListPager.remove(req)
	}
	return resp, nil
}

func (m *ManagedNetworkSettingsServerTransport) dispatchBeginPatch(req *http.Request) (*http.Response, error) {
	if m.srv.BeginPatch == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginPatch not implemented")}
	}
	beginPatch := m.beginPatch.get(req)
	if beginPatch == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/managedNetworks/(?P<managedNetworkName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmachinelearning.ManagedNetworkSettingsPropertiesBasicResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		managedNetworkNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("managedNetworkName")])
		if err != nil {
			return nil, err
		}
		var options *armmachinelearning.ManagedNetworkSettingsClientBeginPatchOptions
		if !reflect.ValueOf(body).IsZero() {
			options = &armmachinelearning.ManagedNetworkSettingsClientBeginPatchOptions{
				Body: &body,
			}
		}
		respr, errRespr := m.srv.BeginPatch(req.Context(), resourceGroupNameParam, workspaceNameParam, managedNetworkNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginPatch = &respr
		m.beginPatch.add(req, beginPatch)
	}

	resp, err := server.PollerResponderNext(beginPatch, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		m.beginPatch.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginPatch) {
		m.beginPatch.remove(req)
	}

	return resp, nil
}

func (m *ManagedNetworkSettingsServerTransport) dispatchBeginPut(req *http.Request) (*http.Response, error) {
	if m.srv.BeginPut == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginPut not implemented")}
	}
	beginPut := m.beginPut.get(req)
	if beginPut == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/managedNetworks/(?P<managedNetworkName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmachinelearning.ManagedNetworkSettingsPropertiesBasicResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		managedNetworkNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("managedNetworkName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginPut(req.Context(), resourceGroupNameParam, workspaceNameParam, managedNetworkNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginPut = &respr
		m.beginPut.add(req, beginPut)
	}

	resp, err := server.PollerResponderNext(beginPut, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		m.beginPut.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginPut) {
		m.beginPut.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ManagedNetworkSettingsServerTransport
var managedNetworkSettingsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
