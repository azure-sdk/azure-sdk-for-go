//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearning/armmachinelearning/v5"
	"net/http"
	"net/url"
	"regexp"
)

// ConnectionRaiBlocklistItemServer is a fake server for instances of the armmachinelearning.ConnectionRaiBlocklistItemClient type.
type ConnectionRaiBlocklistItemServer struct {
	// BeginAddBulk is the fake for method ConnectionRaiBlocklistItemClient.BeginAddBulk
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginAddBulk func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, raiBlocklistName string, body []*armmachinelearning.RaiBlocklistItemBulkRequest, options *armmachinelearning.ConnectionRaiBlocklistItemClientBeginAddBulkOptions) (resp azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientAddBulkResponse], errResp azfake.ErrorResponder)

	// BeginCreate is the fake for method ConnectionRaiBlocklistItemClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, raiBlocklistName string, raiBlocklistItemName string, body armmachinelearning.RaiBlocklistItemPropertiesBasicResource, options *armmachinelearning.ConnectionRaiBlocklistItemClientBeginCreateOptions) (resp azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method ConnectionRaiBlocklistItemClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, raiBlocklistName string, raiBlocklistItemName string, options *armmachinelearning.ConnectionRaiBlocklistItemClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginDeleteBulk is the fake for method ConnectionRaiBlocklistItemClient.BeginDeleteBulk
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDeleteBulk func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, raiBlocklistName string, body any, options *armmachinelearning.ConnectionRaiBlocklistItemClientBeginDeleteBulkOptions) (resp azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientDeleteBulkResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ConnectionRaiBlocklistItemClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, workspaceName string, connectionName string, raiBlocklistName string, raiBlocklistItemName string, options *armmachinelearning.ConnectionRaiBlocklistItemClientGetOptions) (resp azfake.Responder[armmachinelearning.ConnectionRaiBlocklistItemClientGetResponse], errResp azfake.ErrorResponder)
}

// NewConnectionRaiBlocklistItemServerTransport creates a new instance of ConnectionRaiBlocklistItemServerTransport with the provided implementation.
// The returned ConnectionRaiBlocklistItemServerTransport instance is connected to an instance of armmachinelearning.ConnectionRaiBlocklistItemClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewConnectionRaiBlocklistItemServerTransport(srv *ConnectionRaiBlocklistItemServer) *ConnectionRaiBlocklistItemServerTransport {
	return &ConnectionRaiBlocklistItemServerTransport{
		srv:             srv,
		beginAddBulk:    newTracker[azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientAddBulkResponse]](),
		beginCreate:     newTracker[azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientCreateResponse]](),
		beginDelete:     newTracker[azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientDeleteResponse]](),
		beginDeleteBulk: newTracker[azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientDeleteBulkResponse]](),
	}
}

// ConnectionRaiBlocklistItemServerTransport connects instances of armmachinelearning.ConnectionRaiBlocklistItemClient to instances of ConnectionRaiBlocklistItemServer.
// Don't use this type directly, use NewConnectionRaiBlocklistItemServerTransport instead.
type ConnectionRaiBlocklistItemServerTransport struct {
	srv             *ConnectionRaiBlocklistItemServer
	beginAddBulk    *tracker[azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientAddBulkResponse]]
	beginCreate     *tracker[azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientCreateResponse]]
	beginDelete     *tracker[azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientDeleteResponse]]
	beginDeleteBulk *tracker[azfake.PollerResponder[armmachinelearning.ConnectionRaiBlocklistItemClientDeleteBulkResponse]]
}

// Do implements the policy.Transporter interface for ConnectionRaiBlocklistItemServerTransport.
func (c *ConnectionRaiBlocklistItemServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ConnectionRaiBlocklistItemClient.BeginAddBulk":
		resp, err = c.dispatchBeginAddBulk(req)
	case "ConnectionRaiBlocklistItemClient.BeginCreate":
		resp, err = c.dispatchBeginCreate(req)
	case "ConnectionRaiBlocklistItemClient.BeginDelete":
		resp, err = c.dispatchBeginDelete(req)
	case "ConnectionRaiBlocklistItemClient.BeginDeleteBulk":
		resp, err = c.dispatchBeginDeleteBulk(req)
	case "ConnectionRaiBlocklistItemClient.Get":
		resp, err = c.dispatchGet(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *ConnectionRaiBlocklistItemServerTransport) dispatchBeginAddBulk(req *http.Request) (*http.Response, error) {
	if c.srv.BeginAddBulk == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginAddBulk not implemented")}
	}
	beginAddBulk := c.beginAddBulk.get(req)
	if beginAddBulk == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/raiBlocklists/(?P<raiBlocklistName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/addRaiBlocklistItems`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[[]*armmachinelearning.RaiBlocklistItemBulkRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		raiBlocklistNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("raiBlocklistName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginAddBulk(req.Context(), resourceGroupNameParam, workspaceNameParam, connectionNameParam, raiBlocklistNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginAddBulk = &respr
		c.beginAddBulk.add(req, beginAddBulk)
	}

	resp, err := server.PollerResponderNext(beginAddBulk, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		c.beginAddBulk.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginAddBulk) {
		c.beginAddBulk.remove(req)
	}

	return resp, nil
}

func (c *ConnectionRaiBlocklistItemServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if c.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := c.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/raiBlocklists/(?P<raiBlocklistName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/raiBlocklistItems/(?P<raiBlocklistItemName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[armmachinelearning.RaiBlocklistItemPropertiesBasicResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		raiBlocklistNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("raiBlocklistName")])
		if err != nil {
			return nil, err
		}
		raiBlocklistItemNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("raiBlocklistItemName")])
		if err != nil {
			return nil, err
		}
		proxyAPIVersionUnescaped, err := url.QueryUnescape(qp.Get("proxy-api-version"))
		if err != nil {
			return nil, err
		}
		proxyAPIVersionParam := getOptional(proxyAPIVersionUnescaped)
		var options *armmachinelearning.ConnectionRaiBlocklistItemClientBeginCreateOptions
		if proxyAPIVersionParam != nil {
			options = &armmachinelearning.ConnectionRaiBlocklistItemClientBeginCreateOptions{
				ProxyAPIVersion: proxyAPIVersionParam,
			}
		}
		respr, errRespr := c.srv.BeginCreate(req.Context(), resourceGroupNameParam, workspaceNameParam, connectionNameParam, raiBlocklistNameParam, raiBlocklistItemNameParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		c.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		c.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		c.beginCreate.remove(req)
	}

	return resp, nil
}

func (c *ConnectionRaiBlocklistItemServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if c.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := c.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/raiBlocklists/(?P<raiBlocklistName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/raiBlocklistItems/(?P<raiBlocklistItemName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		raiBlocklistNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("raiBlocklistName")])
		if err != nil {
			return nil, err
		}
		raiBlocklistItemNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("raiBlocklistItemName")])
		if err != nil {
			return nil, err
		}
		proxyAPIVersionUnescaped, err := url.QueryUnescape(qp.Get("proxy-api-version"))
		if err != nil {
			return nil, err
		}
		proxyAPIVersionParam := getOptional(proxyAPIVersionUnescaped)
		var options *armmachinelearning.ConnectionRaiBlocklistItemClientBeginDeleteOptions
		if proxyAPIVersionParam != nil {
			options = &armmachinelearning.ConnectionRaiBlocklistItemClientBeginDeleteOptions{
				ProxyAPIVersion: proxyAPIVersionParam,
			}
		}
		respr, errRespr := c.srv.BeginDelete(req.Context(), resourceGroupNameParam, workspaceNameParam, connectionNameParam, raiBlocklistNameParam, raiBlocklistItemNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		c.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		c.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		c.beginDelete.remove(req)
	}

	return resp, nil
}

func (c *ConnectionRaiBlocklistItemServerTransport) dispatchBeginDeleteBulk(req *http.Request) (*http.Response, error) {
	if c.srv.BeginDeleteBulk == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteBulk not implemented")}
	}
	beginDeleteBulk := c.beginDeleteBulk.get(req)
	if beginDeleteBulk == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/raiBlocklists/(?P<raiBlocklistName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deleteRaiBlocklistItems`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[any](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
		if err != nil {
			return nil, err
		}
		raiBlocklistNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("raiBlocklistName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginDeleteBulk(req.Context(), resourceGroupNameParam, workspaceNameParam, connectionNameParam, raiBlocklistNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteBulk = &respr
		c.beginDeleteBulk.add(req, beginDeleteBulk)
	}

	resp, err := server.PollerResponderNext(beginDeleteBulk, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		c.beginDeleteBulk.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteBulk) {
		c.beginDeleteBulk.remove(req)
	}

	return resp, nil
}

func (c *ConnectionRaiBlocklistItemServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/connections/(?P<connectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/raiBlocklists/(?P<raiBlocklistName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/raiBlocklistItems/(?P<raiBlocklistItemName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	connectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("connectionName")])
	if err != nil {
		return nil, err
	}
	raiBlocklistNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("raiBlocklistName")])
	if err != nil {
		return nil, err
	}
	raiBlocklistItemNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("raiBlocklistItemName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), resourceGroupNameParam, workspaceNameParam, connectionNameParam, raiBlocklistNameParam, raiBlocklistItemNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RaiBlocklistItemPropertiesBasicResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
