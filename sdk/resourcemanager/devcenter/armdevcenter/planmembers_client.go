//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevcenter

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PlanMembersClient contains the methods for the PlanMembers group.
// Don't use this type directly, use NewPlanMembersClient() instead.
type PlanMembersClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPlanMembersClient creates a new instance of PlanMembersClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPlanMembersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PlanMembersClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PlanMembersClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates a devcenter plan member resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - planName - The name of the devcenter plan.
//   - memberName - The name of a devcenter plan member.
//   - body - Represents a devcenter plan.
//   - options - PlanMembersClientBeginCreateOrUpdateOptions contains the optional parameters for the PlanMembersClient.BeginCreateOrUpdate
//     method.
func (client *PlanMembersClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, planName string, memberName string, body PlanMember, options *PlanMembersClientBeginCreateOrUpdateOptions) (*runtime.Poller[PlanMembersClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, planName, memberName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PlanMembersClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PlanMembersClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates or updates a devcenter plan member resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *PlanMembersClient) createOrUpdate(ctx context.Context, resourceGroupName string, planName string, memberName string, body PlanMember, options *PlanMembersClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "PlanMembersClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, planName, memberName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PlanMembersClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, planName string, memberName string, body PlanMember, options *PlanMembersClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/plans/{planName}/members/{memberName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if planName == "" {
		return nil, errors.New("parameter planName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planName}", url.PathEscape(planName))
	if memberName == "" {
		return nil, errors.New("parameter memberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{memberName}", url.PathEscape(memberName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes a devcenter plan member
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - planName - The name of the devcenter plan.
//   - memberName - The name of a devcenter plan member.
//   - options - PlanMembersClientBeginDeleteOptions contains the optional parameters for the PlanMembersClient.BeginDelete method.
func (client *PlanMembersClient) BeginDelete(ctx context.Context, resourceGroupName string, planName string, memberName string, options *PlanMembersClientBeginDeleteOptions) (*runtime.Poller[PlanMembersClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, planName, memberName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PlanMembersClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PlanMembersClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes a devcenter plan member
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *PlanMembersClient) deleteOperation(ctx context.Context, resourceGroupName string, planName string, memberName string, options *PlanMembersClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "PlanMembersClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, planName, memberName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PlanMembersClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, planName string, memberName string, options *PlanMembersClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/plans/{planName}/members/{memberName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if planName == "" {
		return nil, errors.New("parameter planName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planName}", url.PathEscape(planName))
	if memberName == "" {
		return nil, errors.New("parameter memberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{memberName}", url.PathEscape(memberName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets a devcenter plan member.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - planName - The name of the devcenter plan.
//   - memberName - The name of a devcenter plan member.
//   - options - PlanMembersClientGetOptions contains the optional parameters for the PlanMembersClient.Get method.
func (client *PlanMembersClient) Get(ctx context.Context, resourceGroupName string, planName string, memberName string, options *PlanMembersClientGetOptions) (PlanMembersClientGetResponse, error) {
	var err error
	const operationName = "PlanMembersClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, planName, memberName, options)
	if err != nil {
		return PlanMembersClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PlanMembersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PlanMembersClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PlanMembersClient) getCreateRequest(ctx context.Context, resourceGroupName string, planName string, memberName string, options *PlanMembersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/plans/{planName}/members/{memberName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if planName == "" {
		return nil, errors.New("parameter planName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planName}", url.PathEscape(planName))
	if memberName == "" {
		return nil, errors.New("parameter memberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{memberName}", url.PathEscape(memberName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PlanMembersClient) getHandleResponse(resp *http.Response) (PlanMembersClientGetResponse, error) {
	result := PlanMembersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlanMember); err != nil {
		return PlanMembersClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Lists all of the members assigned to a devcenter plan.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - planName - The name of the devcenter plan.
//   - options - PlanMembersClientListOptions contains the optional parameters for the PlanMembersClient.NewListPager method.
func (client *PlanMembersClient) NewListPager(resourceGroupName string, planName string, options *PlanMembersClientListOptions) *runtime.Pager[PlanMembersClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[PlanMembersClientListResponse]{
		More: func(page PlanMembersClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PlanMembersClientListResponse) (PlanMembersClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PlanMembersClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, planName, options)
			}, nil)
			if err != nil {
				return PlanMembersClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *PlanMembersClient) listCreateRequest(ctx context.Context, resourceGroupName string, planName string, options *PlanMembersClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/plans/{planName}/members"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if planName == "" {
		return nil, errors.New("parameter planName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planName}", url.PathEscape(planName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PlanMembersClient) listHandleResponse(resp *http.Response) (PlanMembersClientListResponse, error) {
	result := PlanMembersClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlanMembersListResult); err != nil {
		return PlanMembersClientListResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Partially updates a devcenter plan.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - planName - The name of the devcenter plan.
//   - memberName - The name of a devcenter plan member.
//   - body - Updatable devcenter plan properties.
//   - options - PlanMembersClientBeginUpdateOptions contains the optional parameters for the PlanMembersClient.BeginUpdate method.
func (client *PlanMembersClient) BeginUpdate(ctx context.Context, resourceGroupName string, planName string, memberName string, body PlanMemberUpdate, options *PlanMembersClientBeginUpdateOptions) (*runtime.Poller[PlanMembersClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, planName, memberName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PlanMembersClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[PlanMembersClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Partially updates a devcenter plan.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
func (client *PlanMembersClient) update(ctx context.Context, resourceGroupName string, planName string, memberName string, body PlanMemberUpdate, options *PlanMembersClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "PlanMembersClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, planName, memberName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *PlanMembersClient) updateCreateRequest(ctx context.Context, resourceGroupName string, planName string, memberName string, body PlanMemberUpdate, options *PlanMembersClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/plans/{planName}/members/{memberName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if planName == "" {
		return nil, errors.New("parameter planName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planName}", url.PathEscape(planName))
	if memberName == "" {
		return nil, errors.New("parameter memberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{memberName}", url.PathEscape(memberName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
