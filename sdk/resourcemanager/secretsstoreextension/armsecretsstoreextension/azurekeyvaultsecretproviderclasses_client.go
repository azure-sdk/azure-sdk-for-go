// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armsecretsstoreextension

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureKeyVaultSecretProviderClassesClient contains the methods for the AzureKeyVaultSecretProviderClasses group.
// Don't use this type directly, use NewAzureKeyVaultSecretProviderClassesClient() instead.
type AzureKeyVaultSecretProviderClassesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAzureKeyVaultSecretProviderClassesClient creates a new instance of AzureKeyVaultSecretProviderClassesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureKeyVaultSecretProviderClassesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureKeyVaultSecretProviderClassesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureKeyVaultSecretProviderClassesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates, or updates, an AzureKeyVaultSecretProviderClass instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureKeyVaultSecretProviderClassName - The name of the AzureKeyVaultSecretProviderClass
//   - resource - Resource create parameters.
//   - options - AzureKeyVaultSecretProviderClassesClientBeginCreateOrUpdateOptions contains the optional parameters for the AzureKeyVaultSecretProviderClassesClient.BeginCreateOrUpdate
//     method.
func (client *AzureKeyVaultSecretProviderClassesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, resource AzureKeyVaultSecretProviderClass, options *AzureKeyVaultSecretProviderClassesClientBeginCreateOrUpdateOptions) (*runtime.Poller[AzureKeyVaultSecretProviderClassesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, azureKeyVaultSecretProviderClassName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[AzureKeyVaultSecretProviderClassesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[AzureKeyVaultSecretProviderClassesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates, or updates, an AzureKeyVaultSecretProviderClass instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
func (client *AzureKeyVaultSecretProviderClassesClient) createOrUpdate(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, resource AzureKeyVaultSecretProviderClass, options *AzureKeyVaultSecretProviderClassesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "AzureKeyVaultSecretProviderClassesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, azureKeyVaultSecretProviderClassName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AzureKeyVaultSecretProviderClassesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, resource AzureKeyVaultSecretProviderClass, _ *AzureKeyVaultSecretProviderClassesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/azureKeyVaultSecretProviderClasses/{azureKeyVaultSecretProviderClassName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureKeyVaultSecretProviderClassName == "" {
		return nil, errors.New("parameter azureKeyVaultSecretProviderClassName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureKeyVaultSecretProviderClassName}", url.PathEscape(azureKeyVaultSecretProviderClassName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes an AzureKeyVaultSecretProviderClass instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureKeyVaultSecretProviderClassName - The name of the AzureKeyVaultSecretProviderClass
//   - options - AzureKeyVaultSecretProviderClassesClientBeginDeleteOptions contains the optional parameters for the AzureKeyVaultSecretProviderClassesClient.BeginDelete
//     method.
func (client *AzureKeyVaultSecretProviderClassesClient) BeginDelete(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, options *AzureKeyVaultSecretProviderClassesClientBeginDeleteOptions) (*runtime.Poller[AzureKeyVaultSecretProviderClassesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, azureKeyVaultSecretProviderClassName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[AzureKeyVaultSecretProviderClassesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[AzureKeyVaultSecretProviderClassesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes an AzureKeyVaultSecretProviderClass instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
func (client *AzureKeyVaultSecretProviderClassesClient) deleteOperation(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, options *AzureKeyVaultSecretProviderClassesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "AzureKeyVaultSecretProviderClassesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, azureKeyVaultSecretProviderClassName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AzureKeyVaultSecretProviderClassesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, _ *AzureKeyVaultSecretProviderClassesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/azureKeyVaultSecretProviderClasses/{azureKeyVaultSecretProviderClassName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureKeyVaultSecretProviderClassName == "" {
		return nil, errors.New("parameter azureKeyVaultSecretProviderClassName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureKeyVaultSecretProviderClassName}", url.PathEscape(azureKeyVaultSecretProviderClassName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the properties of an AzureKeyVaultSecretProviderClass instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureKeyVaultSecretProviderClassName - The name of the AzureKeyVaultSecretProviderClass
//   - options - AzureKeyVaultSecretProviderClassesClientGetOptions contains the optional parameters for the AzureKeyVaultSecretProviderClassesClient.Get
//     method.
func (client *AzureKeyVaultSecretProviderClassesClient) Get(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, options *AzureKeyVaultSecretProviderClassesClientGetOptions) (AzureKeyVaultSecretProviderClassesClientGetResponse, error) {
	var err error
	const operationName = "AzureKeyVaultSecretProviderClassesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, azureKeyVaultSecretProviderClassName, options)
	if err != nil {
		return AzureKeyVaultSecretProviderClassesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureKeyVaultSecretProviderClassesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureKeyVaultSecretProviderClassesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzureKeyVaultSecretProviderClassesClient) getCreateRequest(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, _ *AzureKeyVaultSecretProviderClassesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/azureKeyVaultSecretProviderClasses/{azureKeyVaultSecretProviderClassName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureKeyVaultSecretProviderClassName == "" {
		return nil, errors.New("parameter azureKeyVaultSecretProviderClassName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureKeyVaultSecretProviderClassName}", url.PathEscape(azureKeyVaultSecretProviderClassName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureKeyVaultSecretProviderClassesClient) getHandleResponse(resp *http.Response) (AzureKeyVaultSecretProviderClassesClientGetResponse, error) {
	result := AzureKeyVaultSecretProviderClassesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureKeyVaultSecretProviderClass); err != nil {
		return AzureKeyVaultSecretProviderClassesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Lists the AzureKeyVaultSecretProviderClass instances within a resource group.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - AzureKeyVaultSecretProviderClassesClientListByResourceGroupOptions contains the optional parameters for the AzureKeyVaultSecretProviderClassesClient.NewListByResourceGroupPager
//     method.
func (client *AzureKeyVaultSecretProviderClassesClient) NewListByResourceGroupPager(resourceGroupName string, options *AzureKeyVaultSecretProviderClassesClientListByResourceGroupOptions) *runtime.Pager[AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse]{
		More: func(page AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse) (AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureKeyVaultSecretProviderClassesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AzureKeyVaultSecretProviderClassesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *AzureKeyVaultSecretProviderClassesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/azureKeyVaultSecretProviderClasses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AzureKeyVaultSecretProviderClassesClient) listByResourceGroupHandleResponse(resp *http.Response) (AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse, error) {
	result := AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureKeyVaultSecretProviderClassListResult); err != nil {
		return AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Lists the AzureKeyVaultSecretProviderClass instances within an Azure subscription.
//
// Generated from API version 2024-08-21-preview
//   - options - AzureKeyVaultSecretProviderClassesClientListBySubscriptionOptions contains the optional parameters for the AzureKeyVaultSecretProviderClassesClient.NewListBySubscriptionPager
//     method.
func (client *AzureKeyVaultSecretProviderClassesClient) NewListBySubscriptionPager(options *AzureKeyVaultSecretProviderClassesClientListBySubscriptionOptions) *runtime.Pager[AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse]{
		More: func(page AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse) (AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureKeyVaultSecretProviderClassesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AzureKeyVaultSecretProviderClassesClient) listBySubscriptionCreateRequest(ctx context.Context, _ *AzureKeyVaultSecretProviderClassesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.SecretSyncController/azureKeyVaultSecretProviderClasses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AzureKeyVaultSecretProviderClassesClient) listBySubscriptionHandleResponse(resp *http.Response) (AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse, error) {
	result := AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureKeyVaultSecretProviderClassListResult); err != nil {
		return AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Updates an AzureKeyVaultSecretProviderClass instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - azureKeyVaultSecretProviderClassName - The name of the AzureKeyVaultSecretProviderClass
//   - properties - The resource properties to be updated.
//   - options - AzureKeyVaultSecretProviderClassesClientBeginUpdateOptions contains the optional parameters for the AzureKeyVaultSecretProviderClassesClient.BeginUpdate
//     method.
func (client *AzureKeyVaultSecretProviderClassesClient) BeginUpdate(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, properties AzureKeyVaultSecretProviderClassUpdate, options *AzureKeyVaultSecretProviderClassesClientBeginUpdateOptions) (*runtime.Poller[AzureKeyVaultSecretProviderClassesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, azureKeyVaultSecretProviderClassName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[AzureKeyVaultSecretProviderClassesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[AzureKeyVaultSecretProviderClassesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Updates an AzureKeyVaultSecretProviderClass instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
func (client *AzureKeyVaultSecretProviderClassesClient) update(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, properties AzureKeyVaultSecretProviderClassUpdate, options *AzureKeyVaultSecretProviderClassesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "AzureKeyVaultSecretProviderClassesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, azureKeyVaultSecretProviderClassName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *AzureKeyVaultSecretProviderClassesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, properties AzureKeyVaultSecretProviderClassUpdate, _ *AzureKeyVaultSecretProviderClassesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/azureKeyVaultSecretProviderClasses/{azureKeyVaultSecretProviderClassName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if azureKeyVaultSecretProviderClassName == "" {
		return nil, errors.New("parameter azureKeyVaultSecretProviderClassName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{azureKeyVaultSecretProviderClassName}", url.PathEscape(azureKeyVaultSecretProviderClassName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
