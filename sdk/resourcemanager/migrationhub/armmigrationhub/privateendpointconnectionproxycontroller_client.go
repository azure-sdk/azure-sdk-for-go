//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationhub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PrivateEndpointConnectionProxyControllerClient contains the methods for the PrivateEndpointConnectionProxyController group.
// Don't use this type directly, use NewPrivateEndpointConnectionProxyControllerClient() instead.
type PrivateEndpointConnectionProxyControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPrivateEndpointConnectionProxyControllerClient creates a new instance of PrivateEndpointConnectionProxyControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPrivateEndpointConnectionProxyControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PrivateEndpointConnectionProxyControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PrivateEndpointConnectionProxyControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Create - Create or update a private endpoint proxy with specified name. If a private endpoint already exists, update it.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - pecProxyName - Private endpoint proxy name.
//   - body - Modify private endpoint proxy state body.
//   - options - PrivateEndpointConnectionProxyControllerClientCreateOptions contains the optional parameters for the PrivateEndpointConnectionProxyControllerClient.Create
//     method.
func (client *PrivateEndpointConnectionProxyControllerClient) Create(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, body PrivateEndpointConnectionProxy, options *PrivateEndpointConnectionProxyControllerClientCreateOptions) (PrivateEndpointConnectionProxyControllerClientCreateResponse, error) {
	var err error
	const operationName = "PrivateEndpointConnectionProxyControllerClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, migrateProjectName, pecProxyName, body, options)
	if err != nil {
		return PrivateEndpointConnectionProxyControllerClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateEndpointConnectionProxyControllerClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PrivateEndpointConnectionProxyControllerClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *PrivateEndpointConnectionProxyControllerClient) createCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, body PrivateEndpointConnectionProxy, options *PrivateEndpointConnectionProxyControllerClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies/{pecProxyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if pecProxyName == "" {
		return nil, errors.New("parameter pecProxyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pecProxyName}", url.PathEscape(pecProxyName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *PrivateEndpointConnectionProxyControllerClient) createHandleResponse(resp *http.Response) (PrivateEndpointConnectionProxyControllerClientCreateResponse, error) {
	result := PrivateEndpointConnectionProxyControllerClientCreateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return PrivateEndpointConnectionProxyControllerClientCreateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnectionProxy); err != nil {
		return PrivateEndpointConnectionProxyControllerClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Delete the private endpoint proxy. Deleting non-existent private endpoint proxy is a no-operation.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - pecProxyName - Private endpoint proxy name.
//   - options - PrivateEndpointConnectionProxyControllerClientDeleteOptions contains the optional parameters for the PrivateEndpointConnectionProxyControllerClient.Delete
//     method.
func (client *PrivateEndpointConnectionProxyControllerClient) Delete(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, options *PrivateEndpointConnectionProxyControllerClientDeleteOptions) (PrivateEndpointConnectionProxyControllerClientDeleteResponse, error) {
	var err error
	const operationName = "PrivateEndpointConnectionProxyControllerClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, migrateProjectName, pecProxyName, options)
	if err != nil {
		return PrivateEndpointConnectionProxyControllerClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateEndpointConnectionProxyControllerClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PrivateEndpointConnectionProxyControllerClientDeleteResponse{}, err
	}
	resp, err := client.deleteHandleResponse(httpResp)
	return resp, err
}

// deleteCreateRequest creates the Delete request.
func (client *PrivateEndpointConnectionProxyControllerClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, options *PrivateEndpointConnectionProxyControllerClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies/{pecProxyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if pecProxyName == "" {
		return nil, errors.New("parameter pecProxyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pecProxyName}", url.PathEscape(pecProxyName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *PrivateEndpointConnectionProxyControllerClient) deleteHandleResponse(resp *http.Response) (PrivateEndpointConnectionProxyControllerClientDeleteResponse, error) {
	result := PrivateEndpointConnectionProxyControllerClientDeleteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return PrivateEndpointConnectionProxyControllerClientDeleteResponse{}, err
	}
	return result, nil
}

// Get - Get the of private link proxy resources from a migrate project and private link proxy resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - pecProxyName - Private link proxy name.
//   - options - PrivateEndpointConnectionProxyControllerClientGetOptions contains the optional parameters for the PrivateEndpointConnectionProxyControllerClient.Get
//     method.
func (client *PrivateEndpointConnectionProxyControllerClient) Get(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, options *PrivateEndpointConnectionProxyControllerClientGetOptions) (PrivateEndpointConnectionProxyControllerClientGetResponse, error) {
	var err error
	const operationName = "PrivateEndpointConnectionProxyControllerClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, migrateProjectName, pecProxyName, options)
	if err != nil {
		return PrivateEndpointConnectionProxyControllerClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateEndpointConnectionProxyControllerClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateEndpointConnectionProxyControllerClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PrivateEndpointConnectionProxyControllerClient) getCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, options *PrivateEndpointConnectionProxyControllerClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies/{pecProxyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if pecProxyName == "" {
		return nil, errors.New("parameter pecProxyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pecProxyName}", url.PathEscape(pecProxyName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PrivateEndpointConnectionProxyControllerClient) getHandleResponse(resp *http.Response) (PrivateEndpointConnectionProxyControllerClientGetResponse, error) {
	result := PrivateEndpointConnectionProxyControllerClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnectionProxy); err != nil {
		return PrivateEndpointConnectionProxyControllerClientGetResponse{}, err
	}
	return result, nil
}

// NewListPrivateEndpointConnectionProxiesPager - Get all the private endpoint connections proxies under a migrate project.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - options - PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesOptions contains the optional
//     parameters for the PrivateEndpointConnectionProxyControllerClient.NewListPrivateEndpointConnectionProxiesPager method.
func (client *PrivateEndpointConnectionProxyControllerClient) NewListPrivateEndpointConnectionProxiesPager(resourceGroupName string, migrateProjectName string, options *PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesOptions) *runtime.Pager[PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse]{
		More: func(page PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse) (PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PrivateEndpointConnectionProxyControllerClient.NewListPrivateEndpointConnectionProxiesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listPrivateEndpointConnectionProxiesCreateRequest(ctx, resourceGroupName, migrateProjectName, options)
			}, nil)
			if err != nil {
				return PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse{}, err
			}
			return client.listPrivateEndpointConnectionProxiesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listPrivateEndpointConnectionProxiesCreateRequest creates the ListPrivateEndpointConnectionProxies request.
func (client *PrivateEndpointConnectionProxyControllerClient) listPrivateEndpointConnectionProxiesCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, options *PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listPrivateEndpointConnectionProxiesHandleResponse handles the ListPrivateEndpointConnectionProxies response.
func (client *PrivateEndpointConnectionProxyControllerClient) listPrivateEndpointConnectionProxiesHandleResponse(resp *http.Response) (PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse, error) {
	result := PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnectionProxyCollection); err != nil {
		return PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse{}, err
	}
	return result, nil
}

// Validate - Validates private endpoint connection using a project and private endpoint connection proxy
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - pecProxyName - Private link proxy name.
//   - body - Validate proxy connection state body.
//   - options - PrivateEndpointConnectionProxyControllerClientValidateOptions contains the optional parameters for the PrivateEndpointConnectionProxyControllerClient.Validate
//     method.
func (client *PrivateEndpointConnectionProxyControllerClient) Validate(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, body PrivateEndpointConnectionProxy, options *PrivateEndpointConnectionProxyControllerClientValidateOptions) (PrivateEndpointConnectionProxyControllerClientValidateResponse, error) {
	var err error
	const operationName = "PrivateEndpointConnectionProxyControllerClient.Validate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.validateCreateRequest(ctx, resourceGroupName, migrateProjectName, pecProxyName, body, options)
	if err != nil {
		return PrivateEndpointConnectionProxyControllerClientValidateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateEndpointConnectionProxyControllerClientValidateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateEndpointConnectionProxyControllerClientValidateResponse{}, err
	}
	resp, err := client.validateHandleResponse(httpResp)
	return resp, err
}

// validateCreateRequest creates the Validate request.
func (client *PrivateEndpointConnectionProxyControllerClient) validateCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, body PrivateEndpointConnectionProxy, options *PrivateEndpointConnectionProxyControllerClientValidateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies/{pecProxyName}/validate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if pecProxyName == "" {
		return nil, errors.New("parameter pecProxyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pecProxyName}", url.PathEscape(pecProxyName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// validateHandleResponse handles the Validate response.
func (client *PrivateEndpointConnectionProxyControllerClient) validateHandleResponse(resp *http.Response) (PrivateEndpointConnectionProxyControllerClientValidateResponse, error) {
	result := PrivateEndpointConnectionProxyControllerClientValidateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnectionProxy); err != nil {
		return PrivateEndpointConnectionProxyControllerClientValidateResponse{}, err
	}
	return result, nil
}
