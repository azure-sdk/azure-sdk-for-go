//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appcontainers/armappcontainers/v3"
	"net/http"
	"net/url"
	"regexp"
)

// AppSpaceResourcesServer is a fake server for instances of the armappcontainers.AppSpaceResourcesClient type.
type AppSpaceResourcesServer struct {
	// CreateOrUpdate is the fake for method AppSpaceResourcesClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, spaceResourceEnvelope armappcontainers.AppSpaceResource, options *armappcontainers.AppSpaceResourcesClientCreateOrUpdateOptions) (resp azfake.Responder[armappcontainers.AppSpaceResourcesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method AppSpaceResourcesClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, options *armappcontainers.AppSpaceResourcesClientDeleteOptions) (resp azfake.Responder[armappcontainers.AppSpaceResourcesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AppSpaceResourcesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, options *armappcontainers.AppSpaceResourcesClientGetOptions) (resp azfake.Responder[armappcontainers.AppSpaceResourcesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByAppSpacePager is the fake for method AppSpaceResourcesClient.NewListByAppSpacePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByAppSpacePager func(resourceGroupName string, appSpaceName string, options *armappcontainers.AppSpaceResourcesClientListByAppSpaceOptions) (resp azfake.PagerResponder[armappcontainers.AppSpaceResourcesClientListByAppSpaceResponse])

	// Update is the fake for method AppSpaceResourcesClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, spaceResourceEnvelope armappcontainers.AppSpaceResourcePatch, options *armappcontainers.AppSpaceResourcesClientUpdateOptions) (resp azfake.Responder[armappcontainers.AppSpaceResourcesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewAppSpaceResourcesServerTransport creates a new instance of AppSpaceResourcesServerTransport with the provided implementation.
// The returned AppSpaceResourcesServerTransport instance is connected to an instance of armappcontainers.AppSpaceResourcesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAppSpaceResourcesServerTransport(srv *AppSpaceResourcesServer) *AppSpaceResourcesServerTransport {
	return &AppSpaceResourcesServerTransport{
		srv:                    srv,
		newListByAppSpacePager: newTracker[azfake.PagerResponder[armappcontainers.AppSpaceResourcesClientListByAppSpaceResponse]](),
	}
}

// AppSpaceResourcesServerTransport connects instances of armappcontainers.AppSpaceResourcesClient to instances of AppSpaceResourcesServer.
// Don't use this type directly, use NewAppSpaceResourcesServerTransport instead.
type AppSpaceResourcesServerTransport struct {
	srv                    *AppSpaceResourcesServer
	newListByAppSpacePager *tracker[azfake.PagerResponder[armappcontainers.AppSpaceResourcesClientListByAppSpaceResponse]]
}

// Do implements the policy.Transporter interface for AppSpaceResourcesServerTransport.
func (a *AppSpaceResourcesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "AppSpaceResourcesClient.CreateOrUpdate":
		resp, err = a.dispatchCreateOrUpdate(req)
	case "AppSpaceResourcesClient.Delete":
		resp, err = a.dispatchDelete(req)
	case "AppSpaceResourcesClient.Get":
		resp, err = a.dispatchGet(req)
	case "AppSpaceResourcesClient.NewListByAppSpacePager":
		resp, err = a.dispatchNewListByAppSpacePager(req)
	case "AppSpaceResourcesClient.Update":
		resp, err = a.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *AppSpaceResourcesServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/spaces/(?P<appSpaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spaceResources/(?P<spaceResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armappcontainers.AppSpaceResource](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	appSpaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("appSpaceName")])
	if err != nil {
		return nil, err
	}
	spaceResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("spaceResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, appSpaceNameParam, spaceResourceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AppSpaceResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AppSpaceResourcesServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if a.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/spaces/(?P<appSpaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spaceResources/(?P<spaceResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	appSpaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("appSpaceName")])
	if err != nil {
		return nil, err
	}
	spaceResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("spaceResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Delete(req.Context(), resourceGroupNameParam, appSpaceNameParam, spaceResourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AppSpaceResourcesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/spaces/(?P<appSpaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spaceResources/(?P<spaceResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	appSpaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("appSpaceName")])
	if err != nil {
		return nil, err
	}
	spaceResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("spaceResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, appSpaceNameParam, spaceResourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AppSpaceResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AppSpaceResourcesServerTransport) dispatchNewListByAppSpacePager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByAppSpacePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByAppSpacePager not implemented")}
	}
	newListByAppSpacePager := a.newListByAppSpacePager.get(req)
	if newListByAppSpacePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/spaces/(?P<appSpaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spaceResources`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		appSpaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("appSpaceName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByAppSpacePager(resourceGroupNameParam, appSpaceNameParam, nil)
		newListByAppSpacePager = &resp
		a.newListByAppSpacePager.add(req, newListByAppSpacePager)
		server.PagerResponderInjectNextLinks(newListByAppSpacePager, req, func(page *armappcontainers.AppSpaceResourcesClientListByAppSpaceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByAppSpacePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByAppSpacePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByAppSpacePager) {
		a.newListByAppSpacePager.remove(req)
	}
	return resp, nil
}

func (a *AppSpaceResourcesServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.App/spaces/(?P<appSpaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/spaceResources/(?P<spaceResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armappcontainers.AppSpaceResourcePatch](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	appSpaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("appSpaceName")])
	if err != nil {
		return nil, err
	}
	spaceResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("spaceResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Update(req.Context(), resourceGroupNameParam, appSpaceNameParam, spaceResourceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AppSpaceResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
