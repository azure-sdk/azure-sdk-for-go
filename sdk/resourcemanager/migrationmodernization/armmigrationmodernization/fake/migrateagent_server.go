// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationmodernization/armmigrationmodernization"
	"net/http"
	"net/url"
	"regexp"
)

// MigrateAgentServer is a fake server for instances of the armmigrationmodernization.MigrateAgentClient type.
type MigrateAgentServer struct {
	// Create is the fake for method MigrateAgentClient.Create
	// HTTP status codes to indicate success: http.StatusCreated
	Create func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, agentName string, body armmigrationmodernization.MigrateAgentModel, options *armmigrationmodernization.MigrateAgentClientCreateOptions) (resp azfake.Responder[armmigrationmodernization.MigrateAgentClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method MigrateAgentClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, agentName string, options *armmigrationmodernization.MigrateAgentClientBeginDeleteOptions) (resp azfake.PollerResponder[armmigrationmodernization.MigrateAgentClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method MigrateAgentClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, agentName string, options *armmigrationmodernization.MigrateAgentClientGetOptions) (resp azfake.Responder[armmigrationmodernization.MigrateAgentClientGetResponse], errResp azfake.ErrorResponder)

	// List is the fake for method MigrateAgentClient.List
	// HTTP status codes to indicate success: http.StatusOK
	List func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *armmigrationmodernization.MigrateAgentClientListOptions) (resp azfake.Responder[armmigrationmodernization.MigrateAgentClientListResponse], errResp azfake.ErrorResponder)

	// BeginRefresh is the fake for method MigrateAgentClient.BeginRefresh
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginRefresh func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, agentName string, options *armmigrationmodernization.MigrateAgentClientBeginRefreshOptions) (resp azfake.PollerResponder[armmigrationmodernization.MigrateAgentClientRefreshResponse], errResp azfake.ErrorResponder)
}

// NewMigrateAgentServerTransport creates a new instance of MigrateAgentServerTransport with the provided implementation.
// The returned MigrateAgentServerTransport instance is connected to an instance of armmigrationmodernization.MigrateAgentClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMigrateAgentServerTransport(srv *MigrateAgentServer) *MigrateAgentServerTransport {
	return &MigrateAgentServerTransport{
		srv:          srv,
		beginDelete:  newTracker[azfake.PollerResponder[armmigrationmodernization.MigrateAgentClientDeleteResponse]](),
		beginRefresh: newTracker[azfake.PollerResponder[armmigrationmodernization.MigrateAgentClientRefreshResponse]](),
	}
}

// MigrateAgentServerTransport connects instances of armmigrationmodernization.MigrateAgentClient to instances of MigrateAgentServer.
// Don't use this type directly, use NewMigrateAgentServerTransport instead.
type MigrateAgentServerTransport struct {
	srv          *MigrateAgentServer
	beginDelete  *tracker[azfake.PollerResponder[armmigrationmodernization.MigrateAgentClientDeleteResponse]]
	beginRefresh *tracker[azfake.PollerResponder[armmigrationmodernization.MigrateAgentClientRefreshResponse]]
}

// Do implements the policy.Transporter interface for MigrateAgentServerTransport.
func (m *MigrateAgentServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *MigrateAgentServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if migrateAgentServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = migrateAgentServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "MigrateAgentClient.Create":
				res.resp, res.err = m.dispatchCreate(req)
			case "MigrateAgentClient.BeginDelete":
				res.resp, res.err = m.dispatchBeginDelete(req)
			case "MigrateAgentClient.Get":
				res.resp, res.err = m.dispatchGet(req)
			case "MigrateAgentClient.List":
				res.resp, res.err = m.dispatchList(req)
			case "MigrateAgentClient.BeginRefresh":
				res.resp, res.err = m.dispatchBeginRefresh(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *MigrateAgentServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if m.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrateAgents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationmodernization.MigrateAgentModel](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
	if err != nil {
		return nil, err
	}
	agentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("agentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Create(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, agentNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MigrateAgentModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MigrateAgentServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if m.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := m.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrateAgents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		agentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("agentName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginDelete(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, agentNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		m.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		m.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		m.beginDelete.remove(req)
	}

	return resp, nil
}

func (m *MigrateAgentServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrateAgents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
	if err != nil {
		return nil, err
	}
	agentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("agentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Get(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, agentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MigrateAgentModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MigrateAgentServerTransport) dispatchList(req *http.Request) (*http.Response, error) {
	if m.srv.List == nil {
		return nil, &nonRetriableError{errors.New("fake for method List not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrateAgents`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.List(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MigrateAgentModelCollection, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MigrateAgentServerTransport) dispatchBeginRefresh(req *http.Request) (*http.Response, error) {
	if m.srv.BeginRefresh == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRefresh not implemented")}
	}
	beginRefresh := m.beginRefresh.get(req)
	if beginRefresh == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrateAgents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/refresh`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		agentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("agentName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginRefresh(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, agentNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRefresh = &respr
		m.beginRefresh.add(req, beginRefresh)
	}

	resp, err := server.PollerResponderNext(beginRefresh, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		m.beginRefresh.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRefresh) {
		m.beginRefresh.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to MigrateAgentServerTransport
var migrateAgentServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
