//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationmodernization/armmigrationmodernization"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
)

// WorkloadDeploymentServer is a fake server for instances of the armmigrationmodernization.WorkloadDeploymentClient type.
type WorkloadDeploymentServer struct {
	// BeginBuildContainerImage is the fake for method WorkloadDeploymentClient.BeginBuildContainerImage
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginBuildContainerImage func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *armmigrationmodernization.WorkloadDeploymentClientBeginBuildContainerImageOptions) (resp azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientBuildContainerImageResponse], errResp azfake.ErrorResponder)

	// Create is the fake for method WorkloadDeploymentClient.Create
	// HTTP status codes to indicate success: http.StatusCreated
	Create func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, body armmigrationmodernization.WorkloadDeploymentModel, options *armmigrationmodernization.WorkloadDeploymentClientCreateOptions) (resp azfake.Responder[armmigrationmodernization.WorkloadDeploymentClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method WorkloadDeploymentClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *armmigrationmodernization.WorkloadDeploymentClientBeginDeleteOptions) (resp azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method WorkloadDeploymentClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *armmigrationmodernization.WorkloadDeploymentClientGetOptions) (resp azfake.Responder[armmigrationmodernization.WorkloadDeploymentClientGetResponse], errResp azfake.ErrorResponder)

	// GetSecretConfigurations is the fake for method WorkloadDeploymentClient.GetSecretConfigurations
	// HTTP status codes to indicate success: http.StatusOK
	GetSecretConfigurations func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *armmigrationmodernization.WorkloadDeploymentClientGetSecretConfigurationsOptions) (resp azfake.Responder[armmigrationmodernization.WorkloadDeploymentClientGetSecretConfigurationsResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method WorkloadDeploymentClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(subscriptionID string, resourceGroupName string, modernizeProjectName string, options *armmigrationmodernization.WorkloadDeploymentClientListOptions) (resp azfake.PagerResponder[armmigrationmodernization.WorkloadDeploymentClientListResponse])

	// BeginMigrate is the fake for method WorkloadDeploymentClient.BeginMigrate
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginMigrate func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *armmigrationmodernization.WorkloadDeploymentClientBeginMigrateOptions) (resp azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientMigrateResponse], errResp azfake.ErrorResponder)

	// BeginTestMigrate is the fake for method WorkloadDeploymentClient.BeginTestMigrate
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginTestMigrate func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *armmigrationmodernization.WorkloadDeploymentClientBeginTestMigrateOptions) (resp azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientTestMigrateResponse], errResp azfake.ErrorResponder)

	// BeginTestMigrateCleanup is the fake for method WorkloadDeploymentClient.BeginTestMigrateCleanup
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginTestMigrateCleanup func(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *armmigrationmodernization.WorkloadDeploymentClientBeginTestMigrateCleanupOptions) (resp azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientTestMigrateCleanupResponse], errResp azfake.ErrorResponder)
}

// NewWorkloadDeploymentServerTransport creates a new instance of WorkloadDeploymentServerTransport with the provided implementation.
// The returned WorkloadDeploymentServerTransport instance is connected to an instance of armmigrationmodernization.WorkloadDeploymentClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWorkloadDeploymentServerTransport(srv *WorkloadDeploymentServer) *WorkloadDeploymentServerTransport {
	return &WorkloadDeploymentServerTransport{
		srv:                      srv,
		beginBuildContainerImage: newTracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientBuildContainerImageResponse]](),
		beginDelete:              newTracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientDeleteResponse]](),
		newListPager:             newTracker[azfake.PagerResponder[armmigrationmodernization.WorkloadDeploymentClientListResponse]](),
		beginMigrate:             newTracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientMigrateResponse]](),
		beginTestMigrate:         newTracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientTestMigrateResponse]](),
		beginTestMigrateCleanup:  newTracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientTestMigrateCleanupResponse]](),
	}
}

// WorkloadDeploymentServerTransport connects instances of armmigrationmodernization.WorkloadDeploymentClient to instances of WorkloadDeploymentServer.
// Don't use this type directly, use NewWorkloadDeploymentServerTransport instead.
type WorkloadDeploymentServerTransport struct {
	srv                      *WorkloadDeploymentServer
	beginBuildContainerImage *tracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientBuildContainerImageResponse]]
	beginDelete              *tracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientDeleteResponse]]
	newListPager             *tracker[azfake.PagerResponder[armmigrationmodernization.WorkloadDeploymentClientListResponse]]
	beginMigrate             *tracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientMigrateResponse]]
	beginTestMigrate         *tracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientTestMigrateResponse]]
	beginTestMigrateCleanup  *tracker[azfake.PollerResponder[armmigrationmodernization.WorkloadDeploymentClientTestMigrateCleanupResponse]]
}

// Do implements the policy.Transporter interface for WorkloadDeploymentServerTransport.
func (w *WorkloadDeploymentServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "WorkloadDeploymentClient.BeginBuildContainerImage":
		resp, err = w.dispatchBeginBuildContainerImage(req)
	case "WorkloadDeploymentClient.Create":
		resp, err = w.dispatchCreate(req)
	case "WorkloadDeploymentClient.BeginDelete":
		resp, err = w.dispatchBeginDelete(req)
	case "WorkloadDeploymentClient.Get":
		resp, err = w.dispatchGet(req)
	case "WorkloadDeploymentClient.GetSecretConfigurations":
		resp, err = w.dispatchGetSecretConfigurations(req)
	case "WorkloadDeploymentClient.NewListPager":
		resp, err = w.dispatchNewListPager(req)
	case "WorkloadDeploymentClient.BeginMigrate":
		resp, err = w.dispatchBeginMigrate(req)
	case "WorkloadDeploymentClient.BeginTestMigrate":
		resp, err = w.dispatchBeginTestMigrate(req)
	case "WorkloadDeploymentClient.BeginTestMigrateCleanup":
		resp, err = w.dispatchBeginTestMigrateCleanup(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchBeginBuildContainerImage(req *http.Request) (*http.Response, error) {
	if w.srv.BeginBuildContainerImage == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginBuildContainerImage not implemented")}
	}
	beginBuildContainerImage := w.beginBuildContainerImage.get(req)
	if beginBuildContainerImage == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments/(?P<workloadDeploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/buildContainerImage`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrationmodernization.BuildContainerImageModel](req)
		if err != nil {
			return nil, err
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		workloadDeploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadDeploymentName")])
		if err != nil {
			return nil, err
		}
		var options *armmigrationmodernization.WorkloadDeploymentClientBeginBuildContainerImageOptions
		if !reflect.ValueOf(body).IsZero() {
			options = &armmigrationmodernization.WorkloadDeploymentClientBeginBuildContainerImageOptions{
				Body: &body,
			}
		}
		respr, errRespr := w.srv.BeginBuildContainerImage(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, workloadDeploymentNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginBuildContainerImage = &respr
		w.beginBuildContainerImage.add(req, beginBuildContainerImage)
	}

	resp, err := server.PollerResponderNext(beginBuildContainerImage, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		w.beginBuildContainerImage.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginBuildContainerImage) {
		w.beginBuildContainerImage.remove(req)
	}

	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if w.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments/(?P<workloadDeploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationmodernization.WorkloadDeploymentModel](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
	if err != nil {
		return nil, err
	}
	workloadDeploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadDeploymentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.Create(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, workloadDeploymentNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkloadDeploymentModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if w.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := w.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments/(?P<workloadDeploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		workloadDeploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadDeploymentName")])
		if err != nil {
			return nil, err
		}
		forceDeleteUnescaped, err := url.QueryUnescape(qp.Get("forceDelete"))
		if err != nil {
			return nil, err
		}
		forceDeleteParam, err := parseOptional(forceDeleteUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *armmigrationmodernization.WorkloadDeploymentClientBeginDeleteOptions
		if forceDeleteParam != nil {
			options = &armmigrationmodernization.WorkloadDeploymentClientBeginDeleteOptions{
				ForceDelete: forceDeleteParam,
			}
		}
		respr, errRespr := w.srv.BeginDelete(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, workloadDeploymentNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		w.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		w.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		w.beginDelete.remove(req)
	}

	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if w.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments/(?P<workloadDeploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
	if err != nil {
		return nil, err
	}
	workloadDeploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadDeploymentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.Get(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, workloadDeploymentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkloadDeploymentModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchGetSecretConfigurations(req *http.Request) (*http.Response, error) {
	if w.srv.GetSecretConfigurations == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetSecretConfigurations not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments/(?P<workloadDeploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getSecrets`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
	if err != nil {
		return nil, err
	}
	workloadDeploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadDeploymentName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.GetSecretConfigurations(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, workloadDeploymentNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkloadDeploymentModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := w.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		resp := w.srv.NewListPager(subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, nil)
		newListPager = &resp
		w.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armmigrationmodernization.WorkloadDeploymentClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		w.newListPager.remove(req)
	}
	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchBeginMigrate(req *http.Request) (*http.Response, error) {
	if w.srv.BeginMigrate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginMigrate not implemented")}
	}
	beginMigrate := w.beginMigrate.get(req)
	if beginMigrate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments/(?P<workloadDeploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		workloadDeploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadDeploymentName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginMigrate(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, workloadDeploymentNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginMigrate = &respr
		w.beginMigrate.add(req, beginMigrate)
	}

	resp, err := server.PollerResponderNext(beginMigrate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		w.beginMigrate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginMigrate) {
		w.beginMigrate.remove(req)
	}

	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchBeginTestMigrate(req *http.Request) (*http.Response, error) {
	if w.srv.BeginTestMigrate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginTestMigrate not implemented")}
	}
	beginTestMigrate := w.beginTestMigrate.get(req)
	if beginTestMigrate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments/(?P<workloadDeploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/testMigrate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrationmodernization.TestMigrateModel](req)
		if err != nil {
			return nil, err
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		workloadDeploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadDeploymentName")])
		if err != nil {
			return nil, err
		}
		var options *armmigrationmodernization.WorkloadDeploymentClientBeginTestMigrateOptions
		if !reflect.ValueOf(body).IsZero() {
			options = &armmigrationmodernization.WorkloadDeploymentClientBeginTestMigrateOptions{
				Body: &body,
			}
		}
		respr, errRespr := w.srv.BeginTestMigrate(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, workloadDeploymentNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginTestMigrate = &respr
		w.beginTestMigrate.add(req, beginTestMigrate)
	}

	resp, err := server.PollerResponderNext(beginTestMigrate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		w.beginTestMigrate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginTestMigrate) {
		w.beginTestMigrate.remove(req)
	}

	return resp, nil
}

func (w *WorkloadDeploymentServerTransport) dispatchBeginTestMigrateCleanup(req *http.Request) (*http.Response, error) {
	if w.srv.BeginTestMigrateCleanup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginTestMigrateCleanup not implemented")}
	}
	beginTestMigrateCleanup := w.beginTestMigrateCleanup.get(req)
	if beginTestMigrateCleanup == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/modernizeProjects/(?P<modernizeProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloadDeployments/(?P<workloadDeploymentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/testMigrateCleanup`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		modernizeProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("modernizeProjectName")])
		if err != nil {
			return nil, err
		}
		workloadDeploymentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadDeploymentName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginTestMigrateCleanup(req.Context(), subscriptionIDParam, resourceGroupNameParam, modernizeProjectNameParam, workloadDeploymentNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginTestMigrateCleanup = &respr
		w.beginTestMigrateCleanup.add(req, beginTestMigrateCleanup)
	}

	resp, err := server.PollerResponderNext(beginTestMigrateCleanup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		w.beginTestMigrateCleanup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginTestMigrateCleanup) {
		w.beginTestMigrateCleanup.remove(req)
	}

	return resp, nil
}
