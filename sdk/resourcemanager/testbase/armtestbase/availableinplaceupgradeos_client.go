// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtestbase

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AvailableInplaceUpgradeOSClient contains the methods for the AvailableInplaceUpgradeOS group.
// Don't use this type directly, use NewAvailableInplaceUpgradeOSClient() instead.
type AvailableInplaceUpgradeOSClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAvailableInplaceUpgradeOSClient creates a new instance of AvailableInplaceUpgradeOSClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAvailableInplaceUpgradeOSClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AvailableInplaceUpgradeOSClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AvailableInplaceUpgradeOSClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Gets an available In-place Upgrade OS to run a package under a Test Base Account.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - testBaseAccountName - The resource name of the Test Base Account.
//   - availableInplaceUpgradeOSResourceName - The resource name of an Available In-place Upgrade OS.
//   - options - AvailableInplaceUpgradeOSClientGetOptions contains the optional parameters for the AvailableInplaceUpgradeOSClient.Get
//     method.
func (client *AvailableInplaceUpgradeOSClient) Get(ctx context.Context, resourceGroupName string, testBaseAccountName string, availableInplaceUpgradeOSResourceName string, options *AvailableInplaceUpgradeOSClientGetOptions) (AvailableInplaceUpgradeOSClientGetResponse, error) {
	var err error
	const operationName = "AvailableInplaceUpgradeOSClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, testBaseAccountName, availableInplaceUpgradeOSResourceName, options)
	if err != nil {
		return AvailableInplaceUpgradeOSClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AvailableInplaceUpgradeOSClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AvailableInplaceUpgradeOSClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AvailableInplaceUpgradeOSClient) getCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, availableInplaceUpgradeOSResourceName string, _ *AvailableInplaceUpgradeOSClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/availableInplaceUpgradeOSs/{availableInplaceUpgradeOSResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	if availableInplaceUpgradeOSResourceName == "" {
		return nil, errors.New("parameter availableInplaceUpgradeOSResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{availableInplaceUpgradeOSResourceName}", url.PathEscape(availableInplaceUpgradeOSResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AvailableInplaceUpgradeOSClient) getHandleResponse(resp *http.Response) (AvailableInplaceUpgradeOSClientGetResponse, error) {
	result := AvailableInplaceUpgradeOSClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AvailableInplaceUpgradeOSResource); err != nil {
		return AvailableInplaceUpgradeOSClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Lists all the available In-place Upgrade OSs to a package under a Test Base Account.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - testBaseAccountName - The resource name of the Test Base Account.
//   - osUpdateType - The type of the OS Update.
//   - options - AvailableInplaceUpgradeOSClientListOptions contains the optional parameters for the AvailableInplaceUpgradeOSClient.NewListPager
//     method.
func (client *AvailableInplaceUpgradeOSClient) NewListPager(resourceGroupName string, testBaseAccountName string, osUpdateType OsUpdateType, options *AvailableInplaceUpgradeOSClientListOptions) *runtime.Pager[AvailableInplaceUpgradeOSClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[AvailableInplaceUpgradeOSClientListResponse]{
		More: func(page AvailableInplaceUpgradeOSClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AvailableInplaceUpgradeOSClientListResponse) (AvailableInplaceUpgradeOSClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AvailableInplaceUpgradeOSClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, testBaseAccountName, osUpdateType, options)
			}, nil)
			if err != nil {
				return AvailableInplaceUpgradeOSClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *AvailableInplaceUpgradeOSClient) listCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, osUpdateType OsUpdateType, _ *AvailableInplaceUpgradeOSClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/availableInplaceUpgradeOSs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	reqQP.Set("osUpdateType", string(osUpdateType))
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *AvailableInplaceUpgradeOSClient) listHandleResponse(resp *http.Response) (AvailableInplaceUpgradeOSClientListResponse, error) {
	result := AvailableInplaceUpgradeOSClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AvailableInplaceUpgradeOSListResult); err != nil {
		return AvailableInplaceUpgradeOSClientListResponse{}, err
	}
	return result, nil
}
