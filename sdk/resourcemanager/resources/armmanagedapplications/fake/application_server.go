// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armmanagedapplications"
	"net/http"
)

// ApplicationServer is a fake server for instances of the armmanagedapplications.ApplicationClient type.
type ApplicationServer struct {
	// NewListOperationsPager is the fake for method ApplicationClient.NewListOperationsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListOperationsPager func(options *armmanagedapplications.ApplicationClientListOperationsOptions) (resp azfake.PagerResponder[armmanagedapplications.ApplicationClientListOperationsResponse])
}

// NewApplicationServerTransport creates a new instance of ApplicationServerTransport with the provided implementation.
// The returned ApplicationServerTransport instance is connected to an instance of armmanagedapplications.ApplicationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewApplicationServerTransport(srv *ApplicationServer) *ApplicationServerTransport {
	return &ApplicationServerTransport{
		srv:                    srv,
		newListOperationsPager: newTracker[azfake.PagerResponder[armmanagedapplications.ApplicationClientListOperationsResponse]](),
	}
}

// ApplicationServerTransport connects instances of armmanagedapplications.ApplicationClient to instances of ApplicationServer.
// Don't use this type directly, use NewApplicationServerTransport instead.
type ApplicationServerTransport struct {
	srv                    *ApplicationServer
	newListOperationsPager *tracker[azfake.PagerResponder[armmanagedapplications.ApplicationClientListOperationsResponse]]
}

// Do implements the policy.Transporter interface for ApplicationServerTransport.
func (a *ApplicationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *ApplicationServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if applicationServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = applicationServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ApplicationClient.NewListOperationsPager":
				res.resp, res.err = a.dispatchNewListOperationsPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *ApplicationServerTransport) dispatchNewListOperationsPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListOperationsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListOperationsPager not implemented")}
	}
	newListOperationsPager := a.newListOperationsPager.get(req)
	if newListOperationsPager == nil {
		resp := a.srv.NewListOperationsPager(nil)
		newListOperationsPager = &resp
		a.newListOperationsPager.add(req, newListOperationsPager)
		server.PagerResponderInjectNextLinks(newListOperationsPager, req, func(page *armmanagedapplications.ApplicationClientListOperationsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListOperationsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListOperationsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListOperationsPager) {
		a.newListOperationsPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ApplicationServerTransport
var applicationServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
