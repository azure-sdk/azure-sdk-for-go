//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/carbonoptimization/armcarbonoptimization"
	"net/http"
)

// CarbonServiceServer is a fake server for instances of the armcarbonoptimization.CarbonServiceClient type.
type CarbonServiceServer struct {
	// NewListCarbonEmissionReportsPager is the fake for method CarbonServiceClient.NewListCarbonEmissionReportsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListCarbonEmissionReportsPager func(queryParameters armcarbonoptimization.QueryFilterClassification, options *armcarbonoptimization.CarbonServiceClientListCarbonEmissionReportsOptions) (resp azfake.PagerResponder[armcarbonoptimization.CarbonServiceClientListCarbonEmissionReportsResponse])

	// QueryCarbonEmissionDataAvailableDateRange is the fake for method CarbonServiceClient.QueryCarbonEmissionDataAvailableDateRange
	// HTTP status codes to indicate success: http.StatusOK
	QueryCarbonEmissionDataAvailableDateRange func(ctx context.Context, options *armcarbonoptimization.CarbonServiceClientQueryCarbonEmissionDataAvailableDateRangeOptions) (resp azfake.Responder[armcarbonoptimization.CarbonServiceClientQueryCarbonEmissionDataAvailableDateRangeResponse], errResp azfake.ErrorResponder)
}

// NewCarbonServiceServerTransport creates a new instance of CarbonServiceServerTransport with the provided implementation.
// The returned CarbonServiceServerTransport instance is connected to an instance of armcarbonoptimization.CarbonServiceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCarbonServiceServerTransport(srv *CarbonServiceServer) *CarbonServiceServerTransport {
	return &CarbonServiceServerTransport{
		srv:                               srv,
		newListCarbonEmissionReportsPager: newTracker[azfake.PagerResponder[armcarbonoptimization.CarbonServiceClientListCarbonEmissionReportsResponse]](),
	}
}

// CarbonServiceServerTransport connects instances of armcarbonoptimization.CarbonServiceClient to instances of CarbonServiceServer.
// Don't use this type directly, use NewCarbonServiceServerTransport instead.
type CarbonServiceServerTransport struct {
	srv                               *CarbonServiceServer
	newListCarbonEmissionReportsPager *tracker[azfake.PagerResponder[armcarbonoptimization.CarbonServiceClientListCarbonEmissionReportsResponse]]
}

// Do implements the policy.Transporter interface for CarbonServiceServerTransport.
func (c *CarbonServiceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "CarbonServiceClient.NewListCarbonEmissionReportsPager":
		resp, err = c.dispatchNewListCarbonEmissionReportsPager(req)
	case "CarbonServiceClient.QueryCarbonEmissionDataAvailableDateRange":
		resp, err = c.dispatchQueryCarbonEmissionDataAvailableDateRange(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *CarbonServiceServerTransport) dispatchNewListCarbonEmissionReportsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListCarbonEmissionReportsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListCarbonEmissionReportsPager not implemented")}
	}
	newListCarbonEmissionReportsPager := c.newListCarbonEmissionReportsPager.get(req)
	if newListCarbonEmissionReportsPager == nil {
		raw, err := readRequestBody(req)
		if err != nil {
			return nil, err
		}
		body, err := unmarshalQueryFilterClassification(raw)
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListCarbonEmissionReportsPager(body, nil)
		newListCarbonEmissionReportsPager = &resp
		c.newListCarbonEmissionReportsPager.add(req, newListCarbonEmissionReportsPager)
		server.PagerResponderInjectNextLinks(newListCarbonEmissionReportsPager, req, func(page *armcarbonoptimization.CarbonServiceClientListCarbonEmissionReportsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListCarbonEmissionReportsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListCarbonEmissionReportsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListCarbonEmissionReportsPager) {
		c.newListCarbonEmissionReportsPager.remove(req)
	}
	return resp, nil
}

func (c *CarbonServiceServerTransport) dispatchQueryCarbonEmissionDataAvailableDateRange(req *http.Request) (*http.Response, error) {
	if c.srv.QueryCarbonEmissionDataAvailableDateRange == nil {
		return nil, &nonRetriableError{errors.New("fake for method QueryCarbonEmissionDataAvailableDateRange not implemented")}
	}
	respr, errRespr := c.srv.QueryCarbonEmissionDataAvailableDateRange(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CarbonEmissionDataAvailableDateRange, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
