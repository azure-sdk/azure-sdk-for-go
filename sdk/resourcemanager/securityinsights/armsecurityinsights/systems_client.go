//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsights

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SystemsClient contains the methods for the Systems group.
// Don't use this type directly, use NewSystemsClient() instead.
type SystemsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSystemsClient creates a new instance of SystemsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSystemsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SystemsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SystemsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates the system.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - systemResourceName - The name of the system.
//   - options - SystemsClientCreateOrUpdateOptions contains the optional parameters for the SystemsClient.CreateOrUpdate method.
func (client *SystemsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *SystemsClientCreateOrUpdateOptions) (SystemsClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "SystemsClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, workspaceName, systemResourceName, options)
	if err != nil {
		return SystemsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SystemsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SystemsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SystemsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *SystemsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/systems/{systemResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if systemResourceName == "" {
		return nil, errors.New("parameter systemResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{systemResourceName}", url.PathEscape(systemResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.XMSClientObjectID != nil {
		req.Raw().Header["x-ms-client-object-id"] = []string{*options.XMSClientObjectID}
	}
	if options != nil && options.XMSClientWorkspaceID != nil {
		req.Raw().Header["x-ms-client-workspace-id"] = []string{*options.XMSClientWorkspaceID}
	}
	if options != nil && options.SystemToUpsert != nil {
		if err := runtime.MarshalAsJSON(req, *options.SystemToUpsert); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SystemsClient) createOrUpdateHandleResponse(resp *http.Response) (SystemsClientCreateOrUpdateResponse, error) {
	result := SystemsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.System); err != nil {
		return SystemsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the system.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - systemResourceName - The name of the system.
//   - options - SystemsClientDeleteOptions contains the optional parameters for the SystemsClient.Delete method.
func (client *SystemsClient) Delete(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *SystemsClientDeleteOptions) (SystemsClientDeleteResponse, error) {
	var err error
	const operationName = "SystemsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, workspaceName, systemResourceName, options)
	if err != nil {
		return SystemsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SystemsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SystemsClientDeleteResponse{}, err
	}
	return SystemsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SystemsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *SystemsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/systems/{systemResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if systemResourceName == "" {
		return nil, errors.New("parameter systemResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{systemResourceName}", url.PathEscape(systemResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.XMSClientWorkspaceID != nil {
		req.Raw().Header["x-ms-client-workspace-id"] = []string{*options.XMSClientWorkspaceID}
	}
	return req, nil
}

// Get - Gets the system.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - systemResourceName - The name of the system.
//   - options - SystemsClientGetOptions contains the optional parameters for the SystemsClient.Get method.
func (client *SystemsClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *SystemsClientGetOptions) (SystemsClientGetResponse, error) {
	var err error
	const operationName = "SystemsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, systemResourceName, options)
	if err != nil {
		return SystemsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SystemsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SystemsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SystemsClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *SystemsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/systems/{systemResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if systemResourceName == "" {
		return nil, errors.New("parameter systemResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{systemResourceName}", url.PathEscape(systemResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.XMSClientWorkspaceID != nil {
		req.Raw().Header["x-ms-client-workspace-id"] = []string{*options.XMSClientWorkspaceID}
	}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SystemsClient) getHandleResponse(resp *http.Response) (SystemsClientGetResponse, error) {
	result := SystemsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.System); err != nil {
		return SystemsClientGetResponse{}, err
	}
	return result, nil
}

// NewGetAllPager - Gets the systems.
//
// Generated from API version 2024-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the workspace.
//   - options - SystemsClientGetAllOptions contains the optional parameters for the SystemsClient.NewGetAllPager method.
func (client *SystemsClient) NewGetAllPager(resourceGroupName string, workspaceName string, options *SystemsClientGetAllOptions) *runtime.Pager[SystemsClientGetAllResponse] {
	return runtime.NewPager(runtime.PagingHandler[SystemsClientGetAllResponse]{
		More: func(page SystemsClientGetAllResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SystemsClientGetAllResponse) (SystemsClientGetAllResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SystemsClient.NewGetAllPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.getAllCreateRequest(ctx, resourceGroupName, workspaceName, options)
			}, nil)
			if err != nil {
				return SystemsClientGetAllResponse{}, err
			}
			return client.getAllHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// getAllCreateRequest creates the GetAll request.
func (client *SystemsClient) getAllCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, options *SystemsClientGetAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/systems"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Orderby != nil {
		reqQP.Set("$orderby", *options.Orderby)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.XMSClientWorkspaceID != nil {
		req.Raw().Header["x-ms-client-workspace-id"] = []string{*options.XMSClientWorkspaceID}
	}
	return req, nil
}

// getAllHandleResponse handles the GetAll response.
func (client *SystemsClient) getAllHandleResponse(resp *http.Response) (SystemsClientGetAllResponse, error) {
	result := SystemsClientGetAllResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SystemsList); err != nil {
		return SystemsClientGetAllResponse{}, err
	}
	return result, nil
}
