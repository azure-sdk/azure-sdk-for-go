// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadmonitor/armworkloadmonitor"
	"net/http"
	"net/url"
	"regexp"
	"time"
)

// HealthMonitorsServer is a fake server for instances of the armworkloadmonitor.HealthMonitorsClient type.
type HealthMonitorsServer struct {
	// Get is the fake for method HealthMonitorsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, resourceGroupName string, providerName string, resourceCollectionName string, resourceName string, monitorID string, options *armworkloadmonitor.HealthMonitorsClientGetOptions) (resp azfake.Responder[armworkloadmonitor.HealthMonitorsClientGetResponse], errResp azfake.ErrorResponder)

	// GetStateChange is the fake for method HealthMonitorsClient.GetStateChange
	// HTTP status codes to indicate success: http.StatusOK
	GetStateChange func(ctx context.Context, subscriptionID string, resourceGroupName string, providerName string, resourceCollectionName string, resourceName string, monitorID string, timestampUnix string, options *armworkloadmonitor.HealthMonitorsClientGetStateChangeOptions) (resp azfake.Responder[armworkloadmonitor.HealthMonitorsClientGetStateChangeResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method HealthMonitorsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(subscriptionID string, resourceGroupName string, providerName string, resourceCollectionName string, resourceName string, options *armworkloadmonitor.HealthMonitorsClientListOptions) (resp azfake.PagerResponder[armworkloadmonitor.HealthMonitorsClientListResponse])

	// NewListStateChangesPager is the fake for method HealthMonitorsClient.NewListStateChangesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListStateChangesPager func(subscriptionID string, resourceGroupName string, providerName string, resourceCollectionName string, resourceName string, monitorID string, options *armworkloadmonitor.HealthMonitorsClientListStateChangesOptions) (resp azfake.PagerResponder[armworkloadmonitor.HealthMonitorsClientListStateChangesResponse])
}

// NewHealthMonitorsServerTransport creates a new instance of HealthMonitorsServerTransport with the provided implementation.
// The returned HealthMonitorsServerTransport instance is connected to an instance of armworkloadmonitor.HealthMonitorsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewHealthMonitorsServerTransport(srv *HealthMonitorsServer) *HealthMonitorsServerTransport {
	return &HealthMonitorsServerTransport{
		srv:                      srv,
		newListPager:             newTracker[azfake.PagerResponder[armworkloadmonitor.HealthMonitorsClientListResponse]](),
		newListStateChangesPager: newTracker[azfake.PagerResponder[armworkloadmonitor.HealthMonitorsClientListStateChangesResponse]](),
	}
}

// HealthMonitorsServerTransport connects instances of armworkloadmonitor.HealthMonitorsClient to instances of HealthMonitorsServer.
// Don't use this type directly, use NewHealthMonitorsServerTransport instead.
type HealthMonitorsServerTransport struct {
	srv                      *HealthMonitorsServer
	newListPager             *tracker[azfake.PagerResponder[armworkloadmonitor.HealthMonitorsClientListResponse]]
	newListStateChangesPager *tracker[azfake.PagerResponder[armworkloadmonitor.HealthMonitorsClientListStateChangesResponse]]
}

// Do implements the policy.Transporter interface for HealthMonitorsServerTransport.
func (h *HealthMonitorsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return h.dispatchToMethodFake(req, method)
}

func (h *HealthMonitorsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if healthMonitorsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = healthMonitorsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "HealthMonitorsClient.Get":
				res.resp, res.err = h.dispatchGet(req)
			case "HealthMonitorsClient.GetStateChange":
				res.resp, res.err = h.dispatchGetStateChange(req)
			case "HealthMonitorsClient.NewListPager":
				res.resp, res.err = h.dispatchNewListPager(req)
			case "HealthMonitorsClient.NewListStateChangesPager":
				res.resp, res.err = h.dispatchNewListStateChangesPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (h *HealthMonitorsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if h.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<providerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<resourceCollectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.WorkloadMonitor/monitors/(?P<monitorId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	providerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("providerName")])
	if err != nil {
		return nil, err
	}
	resourceCollectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceCollectionName")])
	if err != nil {
		return nil, err
	}
	resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
	if err != nil {
		return nil, err
	}
	monitorIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorId")])
	if err != nil {
		return nil, err
	}
	expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
	if err != nil {
		return nil, err
	}
	expandParam := getOptional(expandUnescaped)
	var options *armworkloadmonitor.HealthMonitorsClientGetOptions
	if expandParam != nil {
		options = &armworkloadmonitor.HealthMonitorsClientGetOptions{
			Expand: expandParam,
		}
	}
	respr, errRespr := h.srv.Get(req.Context(), subscriptionIDParam, resourceGroupNameParam, providerNameParam, resourceCollectionNameParam, resourceNameParam, monitorIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).HealthMonitor, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HealthMonitorsServerTransport) dispatchGetStateChange(req *http.Request) (*http.Response, error) {
	if h.srv.GetStateChange == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStateChange not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<providerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<resourceCollectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.WorkloadMonitor/monitors/(?P<monitorId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/history/(?P<timestampUnix>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 7 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	providerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("providerName")])
	if err != nil {
		return nil, err
	}
	resourceCollectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceCollectionName")])
	if err != nil {
		return nil, err
	}
	resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
	if err != nil {
		return nil, err
	}
	monitorIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorId")])
	if err != nil {
		return nil, err
	}
	timestampUnixParam, err := url.PathUnescape(matches[regex.SubexpIndex("timestampUnix")])
	if err != nil {
		return nil, err
	}
	expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
	if err != nil {
		return nil, err
	}
	expandParam := getOptional(expandUnescaped)
	var options *armworkloadmonitor.HealthMonitorsClientGetStateChangeOptions
	if expandParam != nil {
		options = &armworkloadmonitor.HealthMonitorsClientGetStateChangeOptions{
			Expand: expandParam,
		}
	}
	respr, errRespr := h.srv.GetStateChange(req.Context(), subscriptionIDParam, resourceGroupNameParam, providerNameParam, resourceCollectionNameParam, resourceNameParam, monitorIDParam, timestampUnixParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).HealthMonitorStateChange, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HealthMonitorsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if h.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := h.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<providerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<resourceCollectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.WorkloadMonitor/monitors`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		providerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("providerName")])
		if err != nil {
			return nil, err
		}
		resourceCollectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceCollectionName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
		if err != nil {
			return nil, err
		}
		expandParam := getOptional(expandUnescaped)
		var options *armworkloadmonitor.HealthMonitorsClientListOptions
		if filterParam != nil || expandParam != nil {
			options = &armworkloadmonitor.HealthMonitorsClientListOptions{
				Filter: filterParam,
				Expand: expandParam,
			}
		}
		resp := h.srv.NewListPager(subscriptionIDParam, resourceGroupNameParam, providerNameParam, resourceCollectionNameParam, resourceNameParam, options)
		newListPager = &resp
		h.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armworkloadmonitor.HealthMonitorsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		h.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		h.newListPager.remove(req)
	}
	return resp, nil
}

func (h *HealthMonitorsServerTransport) dispatchNewListStateChangesPager(req *http.Request) (*http.Response, error) {
	if h.srv.NewListStateChangesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListStateChangesPager not implemented")}
	}
	newListStateChangesPager := h.newListStateChangesPager.get(req)
	if newListStateChangesPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<providerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<resourceCollectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.WorkloadMonitor/monitors/(?P<monitorId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/history`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		providerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("providerName")])
		if err != nil {
			return nil, err
		}
		resourceCollectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceCollectionName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		monitorIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorId")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
		if err != nil {
			return nil, err
		}
		expandParam := getOptional(expandUnescaped)
		startTimestampUTCUnescaped, err := url.QueryUnescape(qp.Get("startTimestampUtc"))
		if err != nil {
			return nil, err
		}
		startTimestampUTCParam, err := parseOptional(startTimestampUTCUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		endTimestampUTCUnescaped, err := url.QueryUnescape(qp.Get("endTimestampUtc"))
		if err != nil {
			return nil, err
		}
		endTimestampUTCParam, err := parseOptional(endTimestampUTCUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		var options *armworkloadmonitor.HealthMonitorsClientListStateChangesOptions
		if filterParam != nil || expandParam != nil || startTimestampUTCParam != nil || endTimestampUTCParam != nil {
			options = &armworkloadmonitor.HealthMonitorsClientListStateChangesOptions{
				Filter:            filterParam,
				Expand:            expandParam,
				StartTimestampUTC: startTimestampUTCParam,
				EndTimestampUTC:   endTimestampUTCParam,
			}
		}
		resp := h.srv.NewListStateChangesPager(subscriptionIDParam, resourceGroupNameParam, providerNameParam, resourceCollectionNameParam, resourceNameParam, monitorIDParam, options)
		newListStateChangesPager = &resp
		h.newListStateChangesPager.add(req, newListStateChangesPager)
		server.PagerResponderInjectNextLinks(newListStateChangesPager, req, func(page *armworkloadmonitor.HealthMonitorsClientListStateChangesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListStateChangesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		h.newListStateChangesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListStateChangesPager) {
		h.newListStateChangesPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to HealthMonitorsServerTransport
var healthMonitorsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
