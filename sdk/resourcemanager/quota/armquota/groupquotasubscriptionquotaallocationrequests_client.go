//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquota

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GroupQuotaSubscriptionQuotaAllocationRequestsClient contains the methods for the GroupQuotaSubscriptionQuotaAllocationRequests group.
// Don't use this type directly, use NewGroupQuotaSubscriptionQuotaAllocationRequestsClient() instead.
type GroupQuotaSubscriptionQuotaAllocationRequestsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewGroupQuotaSubscriptionQuotaAllocationRequestsClient creates a new instance of GroupQuotaSubscriptionQuotaAllocationRequestsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGroupQuotaSubscriptionQuotaAllocationRequestsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GroupQuotaSubscriptionQuotaAllocationRequestsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GroupQuotaSubscriptionQuotaAllocationRequestsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get the quota allocation request status for the subscriptionId by allocationId.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - allocationID - Resource allocation Id.
//   - options - GroupQuotaSubscriptionQuotaAllocationRequestsClientGetOptions contains the optional parameters for the GroupQuotaSubscriptionQuotaAllocationRequestsClient.Get
//     method.
func (client *GroupQuotaSubscriptionQuotaAllocationRequestsClient) Get(ctx context.Context, managementGroupID string, groupQuotaName string, allocationID string, options *GroupQuotaSubscriptionQuotaAllocationRequestsClientGetOptions) (GroupQuotaSubscriptionQuotaAllocationRequestsClientGetResponse, error) {
	var err error
	const operationName = "GroupQuotaSubscriptionQuotaAllocationRequestsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, managementGroupID, groupQuotaName, allocationID, options)
	if err != nil {
		return GroupQuotaSubscriptionQuotaAllocationRequestsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GroupQuotaSubscriptionQuotaAllocationRequestsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GroupQuotaSubscriptionQuotaAllocationRequestsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *GroupQuotaSubscriptionQuotaAllocationRequestsClient) getCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, allocationID string, options *GroupQuotaSubscriptionQuotaAllocationRequestsClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests/{allocationId}"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if allocationID == "" {
		return nil, errors.New("parameter allocationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{allocationId}", url.PathEscape(allocationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GroupQuotaSubscriptionQuotaAllocationRequestsClient) getHandleResponse(resp *http.Response) (GroupQuotaSubscriptionQuotaAllocationRequestsClientGetResponse, error) {
	result := GroupQuotaSubscriptionQuotaAllocationRequestsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AllocationRequestStatus); err != nil {
		return GroupQuotaSubscriptionQuotaAllocationRequestsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Lists all the allocation requests.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - filter - FIELD SUPPORTED OPERATORS
//     provider eq {resourceProvider} and location eq {location}
//     Example: $filter= provider eq Microsoft.Compute and location eq eastus
//   - options - GroupQuotaSubscriptionQuotaAllocationRequestsClientListOptions contains the optional parameters for the GroupQuotaSubscriptionQuotaAllocationRequestsClient.NewListPager
//     method.
func (client *GroupQuotaSubscriptionQuotaAllocationRequestsClient) NewListPager(managementGroupID string, groupQuotaName string, filter string, options *GroupQuotaSubscriptionQuotaAllocationRequestsClientListOptions) *runtime.Pager[GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse]{
		More: func(page GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse) (GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "GroupQuotaSubscriptionQuotaAllocationRequestsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, managementGroupID, groupQuotaName, filter, options)
			}, nil)
			if err != nil {
				return GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *GroupQuotaSubscriptionQuotaAllocationRequestsClient) listCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, filter string, options *GroupQuotaSubscriptionQuotaAllocationRequestsClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("$filter", filter)
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *GroupQuotaSubscriptionQuotaAllocationRequestsClient) listHandleResponse(resp *http.Response) (GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse, error) {
	result := GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AllocationRequestStatusList); err != nil {
		return GroupQuotaSubscriptionQuotaAllocationRequestsClientListResponse{}, err
	}
	return result, nil
}
