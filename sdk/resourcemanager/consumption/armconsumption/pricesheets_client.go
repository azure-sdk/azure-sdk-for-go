//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armconsumption

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PriceSheetsClient contains the methods for the PriceSheets group.
// Don't use this type directly, use NewPriceSheetsClient() instead.
type PriceSheetsClient struct {
	host string
	pl   runtime.Pipeline
}

// NewPriceSheetsClient creates a new instance of PriceSheetsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPriceSheetsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*PriceSheetsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &PriceSheetsClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// Get - List the price sheet for a subscription. Price sheet is available via this API only for May 1, 2014 or later.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01
//   - subscriptionID - Azure Subscription ID.
//   - options - PriceSheetsClientGetOptions contains the optional parameters for the PriceSheetsClient.Get method.
func (client *PriceSheetsClient) Get(ctx context.Context, subscriptionID string, options *PriceSheetsClientGetOptions) (PriceSheetsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, subscriptionID, options)
	if err != nil {
		return PriceSheetsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PriceSheetsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PriceSheetsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PriceSheetsClient) getCreateRequest(ctx context.Context, subscriptionID string, options *PriceSheetsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/pricesheets/default"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.Skiptoken != nil {
		reqQP.Set("$skiptoken", *options.Skiptoken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2023-03-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PriceSheetsClient) getHandleResponse(resp *http.Response) (PriceSheetsClientGetResponse, error) {
	result := PriceSheetsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PriceSheetResultV2); err != nil {
		return PriceSheetsClientGetResponse{}, err
	}
	return result, nil
}

// GetByBillingPeriod - Get the price sheet for a scope by subscriptionId and billing period. Price sheet is available via
// this API only for May 1, 2014 or later.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01
//   - subscriptionID - Azure Subscription ID.
//   - billingPeriodName - Billing Period Name.
//   - options - PriceSheetsClientGetByBillingPeriodOptions contains the optional parameters for the PriceSheetsClient.GetByBillingPeriod
//     method.
func (client *PriceSheetsClient) GetByBillingPeriod(ctx context.Context, subscriptionID string, billingPeriodName string, options *PriceSheetsClientGetByBillingPeriodOptions) (PriceSheetsClientGetByBillingPeriodResponse, error) {
	req, err := client.getByBillingPeriodCreateRequest(ctx, subscriptionID, billingPeriodName, options)
	if err != nil {
		return PriceSheetsClientGetByBillingPeriodResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PriceSheetsClientGetByBillingPeriodResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PriceSheetsClientGetByBillingPeriodResponse{}, runtime.NewResponseError(resp)
	}
	return client.getByBillingPeriodHandleResponse(resp)
}

// getByBillingPeriodCreateRequest creates the GetByBillingPeriod request.
func (client *PriceSheetsClient) getByBillingPeriodCreateRequest(ctx context.Context, subscriptionID string, billingPeriodName string, options *PriceSheetsClientGetByBillingPeriodOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/pricesheets/default"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if billingPeriodName == "" {
		return nil, errors.New("parameter billingPeriodName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingPeriodName}", url.PathEscape(billingPeriodName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.Skiptoken != nil {
		reqQP.Set("$skiptoken", *options.Skiptoken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2023-03-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getByBillingPeriodHandleResponse handles the GetByBillingPeriod response.
func (client *PriceSheetsClient) getByBillingPeriodHandleResponse(resp *http.Response) (PriceSheetsClientGetByBillingPeriodResponse, error) {
	result := PriceSheetsClientGetByBillingPeriodResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PriceSheetResultV2); err != nil {
		return PriceSheetsClientGetByBillingPeriodResponse{}, err
	}
	return result, nil
}
