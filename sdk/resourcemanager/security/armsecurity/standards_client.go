//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// StandardsClient contains the methods for the SecurityStandards group.
// Don't use this type directly, use NewStandardsClient() instead.
type StandardsClient struct {
	internal *arm.Client
}

// NewStandardsClient creates a new instance of StandardsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewStandardsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*StandardsClient, error) {
	cl, err := arm.NewClient(moduleName+".StandardsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &StandardsClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a security standard over a given scope
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - scope - The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - standardID - The Security Standard key - unique key for the standard type
//   - standard - Custom security standard over a pre-defined scope
//   - options - StandardsClientCreateOrUpdateOptions contains the optional parameters for the StandardsClient.CreateOrUpdate
//     method.
func (client *StandardsClient) CreateOrUpdate(ctx context.Context, scope string, standardID string, standard Standard, options *StandardsClientCreateOrUpdateOptions) (StandardsClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, scope, standardID, standard, options)
	if err != nil {
		return StandardsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandardsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return StandardsClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *StandardsClient) createOrUpdateCreateRequest(ctx context.Context, scope string, standardID string, standard Standard, options *StandardsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if standardID == "" {
		return nil, errors.New("parameter standardID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standardId}", url.PathEscape(standardID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, standard)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *StandardsClient) createOrUpdateHandleResponse(resp *http.Response) (StandardsClientCreateOrUpdateResponse, error) {
	result := StandardsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Standard); err != nil {
		return StandardsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete a security standard over a given scope
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - scope - The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - standardID - The Security Standard key - unique key for the standard type
//   - options - StandardsClientBeginDeleteOptions contains the optional parameters for the StandardsClient.BeginDelete method.
func (client *StandardsClient) BeginDelete(ctx context.Context, scope string, standardID string, options *StandardsClientBeginDeleteOptions) (*runtime.Poller[StandardsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, scope, standardID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[StandardsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[StandardsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a security standard over a given scope
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
func (client *StandardsClient) deleteOperation(ctx context.Context, scope string, standardID string, options *StandardsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, scope, standardID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *StandardsClient) deleteCreateRequest(ctx context.Context, scope string, standardID string, options *StandardsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if standardID == "" {
		return nil, errors.New("parameter standardID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standardId}", url.PathEscape(standardID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a specific security standard for the requested scope by standardId
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - scope - The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - standardID - The Security Standard key - unique key for the standard type
//   - options - StandardsClientGetOptions contains the optional parameters for the StandardsClient.Get method.
func (client *StandardsClient) Get(ctx context.Context, scope string, standardID string, options *StandardsClientGetOptions) (StandardsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, standardID, options)
	if err != nil {
		return StandardsClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StandardsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StandardsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *StandardsClient) getCreateRequest(ctx context.Context, scope string, standardID string, options *StandardsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if standardID == "" {
		return nil, errors.New("parameter standardID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{standardId}", url.PathEscape(standardID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *StandardsClient) getHandleResponse(resp *http.Response) (StandardsClientGetResponse, error) {
	result := StandardsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Standard); err != nil {
		return StandardsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get a list of all relevant security standards over a scope
//
// Generated from API version 2023-05-01-preview
//   - scope - The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'),
//     subscription (format:
//     'subscriptions/{subscriptionId}'), or security connector (format:
//     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
//   - options - StandardsClientListOptions contains the optional parameters for the StandardsClient.NewListPager method.
func (client *StandardsClient) NewListPager(scope string, options *StandardsClientListOptions) *runtime.Pager[StandardsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[StandardsClientListResponse]{
		More: func(page StandardsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *StandardsClientListResponse) (StandardsClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, scope, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return StandardsClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return StandardsClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return StandardsClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *StandardsClient) listCreateRequest(ctx context.Context, scope string, options *StandardsClientListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/securityStandards"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *StandardsClient) listHandleResponse(resp *http.Response) (StandardsClientListResponse, error) {
	result := StandardsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StandardList); err != nil {
		return StandardsClientListResponse{}, err
	}
	return result, nil
}
