// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armalertsmanagement

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/alertsmanagement/armalertsmanagement"
	moduleVersion = "v0.11.0"
)

// AbnormalEventType - The type of the abnormal event
type AbnormalEventType string

const (
	// AbnormalEventTypeDependency - The abnormal event type is a dependency
	AbnormalEventTypeDependency AbnormalEventType = "Dependency"
	// AbnormalEventTypeException - The abnormal event type is an exception
	AbnormalEventTypeException AbnormalEventType = "Exception"
	// AbnormalEventTypeRequest - The abnormal event type is a request
	AbnormalEventTypeRequest AbnormalEventType = "Request"
)

// PossibleAbnormalEventTypeValues returns the possible values for the AbnormalEventType const type.
func PossibleAbnormalEventTypeValues() []AbnormalEventType {
	return []AbnormalEventType{
		AbnormalEventTypeDependency,
		AbnormalEventTypeException,
		AbnormalEventTypeRequest,
	}
}

// ActionType - Action that should be applied.
type ActionType string

const (
	ActionTypeAddActionGroups       ActionType = "AddActionGroups"
	ActionTypeRemoveAllActionGroups ActionType = "RemoveAllActionGroups"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeAddActionGroups,
		ActionTypeRemoveAllActionGroups,
	}
}

// AddedByType - The type of entity that added data to the issue
type AddedByType string

const (
	// AddedByTypeAutomatic - The data was added automatically
	AddedByTypeAutomatic AddedByType = "Automatic"
	// AddedByTypeManual - The data was added manually by a user
	AddedByTypeManual AddedByType = "Manual"
)

// PossibleAddedByTypeValues returns the possible values for the AddedByType const type.
func PossibleAddedByTypeValues() []AddedByType {
	return []AddedByType{
		AddedByTypeAutomatic,
		AddedByTypeManual,
	}
}

// AggregationType - The aggregation type of the metric
type AggregationType string

const (
	// AggregationTypeAverage - The metric aggregation type is average
	AggregationTypeAverage AggregationType = "Average"
	// AggregationTypeCount - The metric aggregation type is count
	AggregationTypeCount AggregationType = "Count"
	// AggregationTypeMaximum - The metric aggregation type is maximum
	AggregationTypeMaximum AggregationType = "Maximum"
	// AggregationTypeMinimum - The metric aggregation type is minimum
	AggregationTypeMinimum AggregationType = "Minimum"
	// AggregationTypeNone - There is no aggregation type
	AggregationTypeNone AggregationType = "None"
	// AggregationTypeTotal - The metric aggregation type is total
	AggregationTypeTotal AggregationType = "Total"
	// AggregationTypeUnique - The metric aggregation type is unique, used for logs
	AggregationTypeUnique AggregationType = "Unique"
)

// PossibleAggregationTypeValues returns the possible values for the AggregationType const type.
func PossibleAggregationTypeValues() []AggregationType {
	return []AggregationType{
		AggregationTypeAverage,
		AggregationTypeCount,
		AggregationTypeMaximum,
		AggregationTypeMinimum,
		AggregationTypeNone,
		AggregationTypeTotal,
		AggregationTypeUnique,
	}
}

// AlertModificationEvent - Reason for the modification
type AlertModificationEvent string

const (
	AlertModificationEventActionRuleSuppressed   AlertModificationEvent = "ActionRuleSuppressed"
	AlertModificationEventActionRuleTriggered    AlertModificationEvent = "ActionRuleTriggered"
	AlertModificationEventActionsFailed          AlertModificationEvent = "ActionsFailed"
	AlertModificationEventActionsSuppressed      AlertModificationEvent = "ActionsSuppressed"
	AlertModificationEventActionsTriggered       AlertModificationEvent = "ActionsTriggered"
	AlertModificationEventAlertCreated           AlertModificationEvent = "AlertCreated"
	AlertModificationEventMonitorConditionChange AlertModificationEvent = "MonitorConditionChange"
	AlertModificationEventSeverityChange         AlertModificationEvent = "SeverityChange"
	AlertModificationEventStateChange            AlertModificationEvent = "StateChange"
)

// PossibleAlertModificationEventValues returns the possible values for the AlertModificationEvent const type.
func PossibleAlertModificationEventValues() []AlertModificationEvent {
	return []AlertModificationEvent{
		AlertModificationEventActionRuleSuppressed,
		AlertModificationEventActionRuleTriggered,
		AlertModificationEventActionsFailed,
		AlertModificationEventActionsSuppressed,
		AlertModificationEventActionsTriggered,
		AlertModificationEventAlertCreated,
		AlertModificationEventMonitorConditionChange,
		AlertModificationEventSeverityChange,
		AlertModificationEventStateChange,
	}
}

// AlertSeverity - Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required
// only for rules of the kind LogAlert.
type AlertSeverity int64

const (
	AlertSeverityFour  AlertSeverity = 4
	AlertSeverityOne   AlertSeverity = 1
	AlertSeverityThree AlertSeverity = 3
	AlertSeverityTwo   AlertSeverity = 2
	AlertSeverityZero  AlertSeverity = 0
)

// PossibleAlertSeverityValues returns the possible values for the AlertSeverity const type.
func PossibleAlertSeverityValues() []AlertSeverity {
	return []AlertSeverity{
		AlertSeverityFour,
		AlertSeverityOne,
		AlertSeverityThree,
		AlertSeverityTwo,
		AlertSeverityZero,
	}
}

type AlertState string

const (
	AlertStateAcknowledged AlertState = "Acknowledged"
	AlertStateClosed       AlertState = "Closed"
	AlertStateFired        AlertState = "Fired"
	AlertStateFiring       AlertState = "Firing"
	AlertStateNew          AlertState = "New"
	AlertStateNoAlert      AlertState = "NoAlert"
	AlertStateResolved     AlertState = "Resolved"
	AlertStateResolving    AlertState = "Resolving"
)

// PossibleAlertStateValues returns the possible values for the AlertState const type.
func PossibleAlertStateValues() []AlertState {
	return []AlertState{
		AlertStateAcknowledged,
		AlertStateClosed,
		AlertStateFired,
		AlertStateFiring,
		AlertStateNew,
		AlertStateNoAlert,
		AlertStateResolved,
		AlertStateResolving,
	}
}

type AlertsSortByFields string

const (
	AlertsSortByFieldsAlertState           AlertsSortByFields = "alertState"
	AlertsSortByFieldsLastModifiedDateTime AlertsSortByFields = "lastModifiedDateTime"
	AlertsSortByFieldsMonitorCondition     AlertsSortByFields = "monitorCondition"
	AlertsSortByFieldsName                 AlertsSortByFields = "name"
	AlertsSortByFieldsSeverity             AlertsSortByFields = "severity"
	AlertsSortByFieldsStartDateTime        AlertsSortByFields = "startDateTime"
	AlertsSortByFieldsTargetResource       AlertsSortByFields = "targetResource"
	AlertsSortByFieldsTargetResourceGroup  AlertsSortByFields = "targetResourceGroup"
	AlertsSortByFieldsTargetResourceName   AlertsSortByFields = "targetResourceName"
	AlertsSortByFieldsTargetResourceType   AlertsSortByFields = "targetResourceType"
)

// PossibleAlertsSortByFieldsValues returns the possible values for the AlertsSortByFields const type.
func PossibleAlertsSortByFieldsValues() []AlertsSortByFields {
	return []AlertsSortByFields{
		AlertsSortByFieldsAlertState,
		AlertsSortByFieldsLastModifiedDateTime,
		AlertsSortByFieldsMonitorCondition,
		AlertsSortByFieldsName,
		AlertsSortByFieldsSeverity,
		AlertsSortByFieldsStartDateTime,
		AlertsSortByFieldsTargetResource,
		AlertsSortByFieldsTargetResourceGroup,
		AlertsSortByFieldsTargetResourceName,
		AlertsSortByFieldsTargetResourceType,
	}
}

type AlertsSummaryGroupByFields string

const (
	AlertsSummaryGroupByFieldsAlertRule        AlertsSummaryGroupByFields = "alertRule"
	AlertsSummaryGroupByFieldsAlertState       AlertsSummaryGroupByFields = "alertState"
	AlertsSummaryGroupByFieldsMonitorCondition AlertsSummaryGroupByFields = "monitorCondition"
	AlertsSummaryGroupByFieldsMonitorService   AlertsSummaryGroupByFields = "monitorService"
	AlertsSummaryGroupByFieldsSeverity         AlertsSummaryGroupByFields = "severity"
	AlertsSummaryGroupByFieldsSignalType       AlertsSummaryGroupByFields = "signalType"
)

// PossibleAlertsSummaryGroupByFieldsValues returns the possible values for the AlertsSummaryGroupByFields const type.
func PossibleAlertsSummaryGroupByFieldsValues() []AlertsSummaryGroupByFields {
	return []AlertsSummaryGroupByFields{
		AlertsSummaryGroupByFieldsAlertRule,
		AlertsSummaryGroupByFieldsAlertState,
		AlertsSummaryGroupByFieldsMonitorCondition,
		AlertsSummaryGroupByFieldsMonitorService,
		AlertsSummaryGroupByFieldsSeverity,
		AlertsSummaryGroupByFieldsSignalType,
	}
}

// AnomalyDirection - The direction of the anomaly
type AnomalyDirection string

const (
	// AnomalyDirectionDecrease - The anomaly direction is decreasing
	AnomalyDirectionDecrease AnomalyDirection = "Decrease"
	// AnomalyDirectionIncrease - The anomaly direction is increasing
	AnomalyDirectionIncrease AnomalyDirection = "Increase"
	// AnomalyDirectionIncreaseAndDecrease - The anomaly direction is both increasing and decreasing
	AnomalyDirectionIncreaseAndDecrease AnomalyDirection = "IncreaseAndDecrease"
)

// PossibleAnomalyDirectionValues returns the possible values for the AnomalyDirection const type.
func PossibleAnomalyDirectionValues() []AnomalyDirection {
	return []AnomalyDirection{
		AnomalyDirectionDecrease,
		AnomalyDirectionIncrease,
		AnomalyDirectionIncreaseAndDecrease,
	}
}

// AvailabilityState - Represents the health state of a resource
type AvailabilityState string

const (
	// AvailabilityStateAvailable - The resource is available
	AvailabilityStateAvailable AvailabilityState = "Available"
	// AvailabilityStateDegraded - The resource is degraded
	AvailabilityStateDegraded AvailabilityState = "Degraded"
	// AvailabilityStateUnavailable - The resource is unavailable
	AvailabilityStateUnavailable AvailabilityState = "Unavailable"
	// AvailabilityStateUnknown - The availability state of the resource is unknown
	AvailabilityStateUnknown AvailabilityState = "Unknown"
	// AvailabilityStateUserInitiated - The user initiated this state change
	AvailabilityStateUserInitiated AvailabilityState = "UserInitiated"
)

// PossibleAvailabilityStateValues returns the possible values for the AvailabilityState const type.
func PossibleAvailabilityStateValues() []AvailabilityState {
	return []AvailabilityState{
		AvailabilityStateAvailable,
		AvailabilityStateDegraded,
		AvailabilityStateUnavailable,
		AvailabilityStateUnknown,
		AvailabilityStateUserInitiated,
	}
}

// CategoryType - The category type
type CategoryType string

const (
	// CategoryTypeAlert - The category is for an alert
	CategoryTypeAlert CategoryType = "Alert"
	// CategoryTypeDiagnostics - The category is for diagnostics
	CategoryTypeDiagnostics CategoryType = "Diagnostics"
	// CategoryTypeInvestigation - The category is for an investigation
	CategoryTypeInvestigation CategoryType = "Investigation"
	// CategoryTypeLog - The category is for a log
	CategoryTypeLog CategoryType = "Log"
	// CategoryTypeMetric - The category is for a metric
	CategoryTypeMetric CategoryType = "Metric"
	// CategoryTypeResourceHealth - The category is for resource health
	CategoryTypeResourceHealth CategoryType = "ResourceHealth"
)

// PossibleCategoryTypeValues returns the possible values for the CategoryType const type.
func PossibleCategoryTypeValues() []CategoryType {
	return []CategoryType{
		CategoryTypeAlert,
		CategoryTypeDiagnostics,
		CategoryTypeInvestigation,
		CategoryTypeLog,
		CategoryTypeMetric,
		CategoryTypeResourceHealth,
	}
}

// ConditionOperator - The criteria operator. Relevant and required only for rules of the kind LogAlert.
type ConditionOperator string

const (
	ConditionOperatorEquals             ConditionOperator = "Equals"
	ConditionOperatorGreaterOrLessThan  ConditionOperator = "GreaterOrLessThan"
	ConditionOperatorGreaterThan        ConditionOperator = "GreaterThan"
	ConditionOperatorGreaterThanOrEqual ConditionOperator = "GreaterThanOrEqual"
	ConditionOperatorLessThan           ConditionOperator = "LessThan"
	ConditionOperatorLessThanOrEqual    ConditionOperator = "LessThanOrEqual"
)

// PossibleConditionOperatorValues returns the possible values for the ConditionOperator const type.
func PossibleConditionOperatorValues() []ConditionOperator {
	return []ConditionOperator{
		ConditionOperatorEquals,
		ConditionOperatorGreaterOrLessThan,
		ConditionOperatorGreaterThan,
		ConditionOperatorGreaterThanOrEqual,
		ConditionOperatorLessThan,
		ConditionOperatorLessThanOrEqual,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// CriterionType - Specifies the type of threshold criteria
type CriterionType string

const (
	CriterionTypeDynamicThresholdCriterion CriterionType = "DynamicThresholdCriterion"
	CriterionTypeStaticThresholdCriterion  CriterionType = "StaticThresholdCriterion"
)

// PossibleCriterionTypeValues returns the possible values for the CriterionType const type.
func PossibleCriterionTypeValues() []CriterionType {
	return []CriterionType{
		CriterionTypeDynamicThresholdCriterion,
		CriterionTypeStaticThresholdCriterion,
	}
}

// DaysOfWeek - Days of week.
type DaysOfWeek string

const (
	DaysOfWeekFriday    DaysOfWeek = "Friday"
	DaysOfWeekMonday    DaysOfWeek = "Monday"
	DaysOfWeekSaturday  DaysOfWeek = "Saturday"
	DaysOfWeekSunday    DaysOfWeek = "Sunday"
	DaysOfWeekThursday  DaysOfWeek = "Thursday"
	DaysOfWeekTuesday   DaysOfWeek = "Tuesday"
	DaysOfWeekWednesday DaysOfWeek = "Wednesday"
)

// PossibleDaysOfWeekValues returns the possible values for the DaysOfWeek const type.
func PossibleDaysOfWeekValues() []DaysOfWeek {
	return []DaysOfWeek{
		DaysOfWeekFriday,
		DaysOfWeekMonday,
		DaysOfWeekSaturday,
		DaysOfWeekSunday,
		DaysOfWeekThursday,
		DaysOfWeekTuesday,
		DaysOfWeekWednesday,
	}
}

// DetailsType - The details type
type DetailsType string

const (
	// DetailsTypeAbnormalEvent - The details is for a abnormal event
	DetailsTypeAbnormalEvent DetailsType = "AbnormalEvent"
	// DetailsTypeAzureMetric - The details is for an azure metric
	DetailsTypeAzureMetric DetailsType = "AzureMetric"
	// DetailsTypeDiagnostics - The details for diagnostics
	DetailsTypeDiagnostics DetailsType = "Diagnostics"
	// DetailsTypeFinding - The details is for a finding
	DetailsTypeFinding DetailsType = "Finding"
	// DetailsTypeInvestigation - The details is for an investigation
	DetailsTypeInvestigation DetailsType = "Investigation"
	// DetailsTypeRelatedAlert - The details is for a related alert
	DetailsTypeRelatedAlert DetailsType = "RelatedAlert"
	// DetailsTypeResourceHealth - The details is for resource health
	DetailsTypeResourceHealth DetailsType = "ResourceHealth"
)

// PossibleDetailsTypeValues returns the possible values for the DetailsType const type.
func PossibleDetailsTypeValues() []DetailsType {
	return []DetailsType{
		DetailsTypeAbnormalEvent,
		DetailsTypeAzureMetric,
		DetailsTypeDiagnostics,
		DetailsTypeFinding,
		DetailsTypeInvestigation,
		DetailsTypeRelatedAlert,
		DetailsTypeResourceHealth,
	}
}

// DimensionOperator - Operator for dimension values
type DimensionOperator string

const (
	DimensionOperatorExclude DimensionOperator = "Exclude"
	DimensionOperatorInclude DimensionOperator = "Include"
)

// PossibleDimensionOperatorValues returns the possible values for the DimensionOperator const type.
func PossibleDimensionOperatorValues() []DimensionOperator {
	return []DimensionOperator{
		DimensionOperatorExclude,
		DimensionOperatorInclude,
	}
}

// Field - Field for a given condition.
type Field string

const (
	FieldAlertContext        Field = "AlertContext"
	FieldAlertRuleID         Field = "AlertRuleId"
	FieldAlertRuleName       Field = "AlertRuleName"
	FieldDescription         Field = "Description"
	FieldMonitorCondition    Field = "MonitorCondition"
	FieldMonitorService      Field = "MonitorService"
	FieldSeverity            Field = "Severity"
	FieldSignalType          Field = "SignalType"
	FieldTargetResource      Field = "TargetResource"
	FieldTargetResourceGroup Field = "TargetResourceGroup"
	FieldTargetResourceType  Field = "TargetResourceType"
)

// PossibleFieldValues returns the possible values for the Field const type.
func PossibleFieldValues() []Field {
	return []Field{
		FieldAlertContext,
		FieldAlertRuleID,
		FieldAlertRuleName,
		FieldDescription,
		FieldMonitorCondition,
		FieldMonitorService,
		FieldSeverity,
		FieldSignalType,
		FieldTargetResource,
		FieldTargetResourceGroup,
		FieldTargetResourceType,
	}
}

// HealthState - The health state of the investigation result
type HealthState string

const (
	// HealthStateHealthy - The result is healthy
	HealthStateHealthy HealthState = "Healthy"
	// HealthStateUnhealthy - The result is unhealthy
	HealthStateUnhealthy HealthState = "Unhealthy"
	// HealthStateUnknown - The health state of the result is unknown
	HealthStateUnknown HealthState = "Unknown"
)

// PossibleHealthStateValues returns the possible values for the HealthState const type.
func PossibleHealthStateValues() []HealthState {
	return []HealthState{
		HealthStateHealthy,
		HealthStateUnhealthy,
		HealthStateUnknown,
	}
}

type Identifier string

const (
	IdentifierMonitorServiceList Identifier = "MonitorServiceList"
)

// PossibleIdentifierValues returns the possible values for the Identifier const type.
func PossibleIdentifierValues() []Identifier {
	return []Identifier{
		IdentifierMonitorServiceList,
	}
}

// InvestigationEntityType - The type of the investigation entity
type InvestigationEntityType string

const (
	// InvestigationEntityTypeEvidence - Evidence entity
	InvestigationEntityTypeEvidence InvestigationEntityType = "Evidence"
	// InvestigationEntityTypeFinding - Finding entity
	InvestigationEntityTypeFinding InvestigationEntityType = "Finding"
	// InvestigationEntityTypeInvestigation - Investigation entity
	InvestigationEntityTypeInvestigation InvestigationEntityType = "Investigation"
)

// PossibleInvestigationEntityTypeValues returns the possible values for the InvestigationEntityType const type.
func PossibleInvestigationEntityTypeValues() []InvestigationEntityType {
	return []InvestigationEntityType{
		InvestigationEntityTypeEvidence,
		InvestigationEntityTypeFinding,
		InvestigationEntityTypeInvestigation,
	}
}

// InvestigationExecutionRunState - The execution state of the investigation
type InvestigationExecutionRunState string

const (
	// InvestigationExecutionRunStateCanceled - The investigation execution was canceled
	InvestigationExecutionRunStateCanceled InvestigationExecutionRunState = "Canceled"
	// InvestigationExecutionRunStateFailed - The investigation execution failed
	InvestigationExecutionRunStateFailed InvestigationExecutionRunState = "Failed"
	// InvestigationExecutionRunStateInProgress - The investigation execution is in progress
	InvestigationExecutionRunStateInProgress InvestigationExecutionRunState = "InProgress"
	// InvestigationExecutionRunStateNone - The investigation execution didn't start
	InvestigationExecutionRunStateNone InvestigationExecutionRunState = "None"
	// InvestigationExecutionRunStateSucceeded - The investigation execution completed successfully
	InvestigationExecutionRunStateSucceeded InvestigationExecutionRunState = "Succeeded"
)

// PossibleInvestigationExecutionRunStateValues returns the possible values for the InvestigationExecutionRunState const type.
func PossibleInvestigationExecutionRunStateValues() []InvestigationExecutionRunState {
	return []InvestigationExecutionRunState{
		InvestigationExecutionRunStateCanceled,
		InvestigationExecutionRunStateFailed,
		InvestigationExecutionRunStateInProgress,
		InvestigationExecutionRunStateNone,
		InvestigationExecutionRunStateSucceeded,
	}
}

// Kind - Indicates the type of scheduled query rule. The default is LogAlert.
type Kind string

const (
	KindEventLogAlert Kind = "EventLogAlert"
	KindLogAlert      Kind = "LogAlert"
	KindLogToMetric   Kind = "LogToMetric"
)

// PossibleKindValues returns the possible values for the Kind const type.
func PossibleKindValues() []Kind {
	return []Kind{
		KindEventLogAlert,
		KindLogAlert,
		KindLogToMetric,
	}
}

// MetadataIdentifier - Identification of the information to be retrieved by API call
type MetadataIdentifier string

const (
	MetadataIdentifierMonitorServiceList MetadataIdentifier = "MonitorServiceList"
)

// PossibleMetadataIdentifierValues returns the possible values for the MetadataIdentifier const type.
func PossibleMetadataIdentifierValues() []MetadataIdentifier {
	return []MetadataIdentifier{
		MetadataIdentifierMonitorServiceList,
	}
}

type MonitorCondition string

const (
	MonitorConditionFired    MonitorCondition = "Fired"
	MonitorConditionResolved MonitorCondition = "Resolved"
)

// PossibleMonitorConditionValues returns the possible values for the MonitorCondition const type.
func PossibleMonitorConditionValues() []MonitorCondition {
	return []MonitorCondition{
		MonitorConditionFired,
		MonitorConditionResolved,
	}
}

type MonitorService string

const (
	MonitorServiceActivityLogAdministrative MonitorService = "ActivityLog Administrative"
	MonitorServiceActivityLogAutoscale      MonitorService = "ActivityLog Autoscale"
	MonitorServiceActivityLogPolicy         MonitorService = "ActivityLog Policy"
	MonitorServiceActivityLogRecommendation MonitorService = "ActivityLog Recommendation"
	MonitorServiceActivityLogSecurity       MonitorService = "ActivityLog Security"
	MonitorServiceApplicationInsights       MonitorService = "Application Insights"
	MonitorServiceLogAnalytics              MonitorService = "Log Analytics"
	MonitorServiceNagios                    MonitorService = "Nagios"
	MonitorServicePlatform                  MonitorService = "Platform"
	MonitorServiceResourceHealth            MonitorService = "Resource Health"
	MonitorServiceSCOM                      MonitorService = "SCOM"
	MonitorServiceServiceHealth             MonitorService = "ServiceHealth"
	MonitorServiceSmartDetector             MonitorService = "SmartDetector"
	MonitorServiceVMInsights                MonitorService = "VM Insights"
	MonitorServiceZabbix                    MonitorService = "Zabbix"
)

// PossibleMonitorServiceValues returns the possible values for the MonitorService const type.
func PossibleMonitorServiceValues() []MonitorService {
	return []MonitorService{
		MonitorServiceActivityLogAdministrative,
		MonitorServiceActivityLogAutoscale,
		MonitorServiceActivityLogPolicy,
		MonitorServiceActivityLogRecommendation,
		MonitorServiceActivityLogSecurity,
		MonitorServiceApplicationInsights,
		MonitorServiceLogAnalytics,
		MonitorServiceNagios,
		MonitorServicePlatform,
		MonitorServiceResourceHealth,
		MonitorServiceSCOM,
		MonitorServiceServiceHealth,
		MonitorServiceSmartDetector,
		MonitorServiceVMInsights,
		MonitorServiceZabbix,
	}
}

// Operator - Operator for a given condition.
type Operator string

const (
	OperatorContains       Operator = "Contains"
	OperatorDoesNotContain Operator = "DoesNotContain"
	OperatorEquals         Operator = "Equals"
	OperatorNotEquals      Operator = "NotEquals"
)

// PossibleOperatorValues returns the possible values for the Operator const type.
func PossibleOperatorValues() []Operator {
	return []Operator{
		OperatorContains,
		OperatorDoesNotContain,
		OperatorEquals,
		OperatorNotEquals,
	}
}

// RecurrenceType - Specifies when the recurrence should be applied.
type RecurrenceType string

const (
	RecurrenceTypeDaily   RecurrenceType = "Daily"
	RecurrenceTypeMonthly RecurrenceType = "Monthly"
	RecurrenceTypeWeekly  RecurrenceType = "Weekly"
)

// PossibleRecurrenceTypeValues returns the possible values for the RecurrenceType const type.
func PossibleRecurrenceTypeValues() []RecurrenceType {
	return []RecurrenceType{
		RecurrenceTypeDaily,
		RecurrenceTypeMonthly,
		RecurrenceTypeWeekly,
	}
}

// Relevance - The relevance status of the resource
type Relevance string

const (
	// RelevanceIrrelevant - The resource is irrelevant to the issue
	RelevanceIrrelevant Relevance = "Irrelevant"
	// RelevanceNone - No relevance status for the resource
	RelevanceNone Relevance = "None"
	// RelevanceRelevant - The resource is relevant to the issue
	RelevanceRelevant Relevance = "Relevant"
)

// PossibleRelevanceValues returns the possible values for the Relevance const type.
func PossibleRelevanceValues() []Relevance {
	return []Relevance{
		RelevanceIrrelevant,
		RelevanceNone,
		RelevanceRelevant,
	}
}

// ResourceProvisioningState - The provisioning state of a resource type.
type ResourceProvisioningState string

const (
	// ResourceProvisioningStateCanceled - Resource creation was canceled.
	ResourceProvisioningStateCanceled ResourceProvisioningState = "Canceled"
	// ResourceProvisioningStateFailed - Resource creation failed.
	ResourceProvisioningStateFailed ResourceProvisioningState = "Failed"
	// ResourceProvisioningStateSucceeded - Resource has been created.
	ResourceProvisioningStateSucceeded ResourceProvisioningState = "Succeeded"
)

// PossibleResourceProvisioningStateValues returns the possible values for the ResourceProvisioningState const type.
func PossibleResourceProvisioningStateValues() []ResourceProvisioningState {
	return []ResourceProvisioningState{
		ResourceProvisioningStateCanceled,
		ResourceProvisioningStateFailed,
		ResourceProvisioningStateSucceeded,
	}
}

type Severity string

const (
	SeveritySev0 Severity = "Sev0"
	SeveritySev1 Severity = "Sev1"
	SeveritySev2 Severity = "Sev2"
	SeveritySev3 Severity = "Sev3"
	SeveritySev4 Severity = "Sev4"
)

// PossibleSeverityValues returns the possible values for the Severity const type.
func PossibleSeverityValues() []Severity {
	return []Severity{
		SeveritySev0,
		SeveritySev1,
		SeveritySev2,
		SeveritySev3,
		SeveritySev4,
	}
}

// SignalType - The type of signal the alert is based on, which could be metrics, logs or activity logs.
type SignalType string

const (
	SignalTypeLog     SignalType = "Log"
	SignalTypeMetric  SignalType = "Metric"
	SignalTypeUnknown SignalType = "Unknown"
)

// PossibleSignalTypeValues returns the possible values for the SignalType const type.
func PossibleSignalTypeValues() []SignalType {
	return []SignalType{
		SignalTypeLog,
		SignalTypeMetric,
		SignalTypeUnknown,
	}
}

// SmartGroupModificationEvent - Reason for the modification
type SmartGroupModificationEvent string

const (
	SmartGroupModificationEventAlertAdded        SmartGroupModificationEvent = "AlertAdded"
	SmartGroupModificationEventAlertRemoved      SmartGroupModificationEvent = "AlertRemoved"
	SmartGroupModificationEventSmartGroupCreated SmartGroupModificationEvent = "SmartGroupCreated"
	SmartGroupModificationEventStateChange       SmartGroupModificationEvent = "StateChange"
)

// PossibleSmartGroupModificationEventValues returns the possible values for the SmartGroupModificationEvent const type.
func PossibleSmartGroupModificationEventValues() []SmartGroupModificationEvent {
	return []SmartGroupModificationEvent{
		SmartGroupModificationEventAlertAdded,
		SmartGroupModificationEventAlertRemoved,
		SmartGroupModificationEventSmartGroupCreated,
		SmartGroupModificationEventStateChange,
	}
}

type SmartGroupsSortByFields string

const (
	SmartGroupsSortByFieldsAlertsCount          SmartGroupsSortByFields = "alertsCount"
	SmartGroupsSortByFieldsLastModifiedDateTime SmartGroupsSortByFields = "lastModifiedDateTime"
	SmartGroupsSortByFieldsSeverity             SmartGroupsSortByFields = "severity"
	SmartGroupsSortByFieldsStartDateTime        SmartGroupsSortByFields = "startDateTime"
	SmartGroupsSortByFieldsState                SmartGroupsSortByFields = "state"
)

// PossibleSmartGroupsSortByFieldsValues returns the possible values for the SmartGroupsSortByFields const type.
func PossibleSmartGroupsSortByFieldsValues() []SmartGroupsSortByFields {
	return []SmartGroupsSortByFields{
		SmartGroupsSortByFieldsAlertsCount,
		SmartGroupsSortByFieldsLastModifiedDateTime,
		SmartGroupsSortByFieldsSeverity,
		SmartGroupsSortByFieldsStartDateTime,
		SmartGroupsSortByFieldsState,
	}
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

// PossibleSortOrderValues returns the possible values for the SortOrder const type.
func PossibleSortOrderValues() []SortOrder {
	return []SortOrder{
		SortOrderAsc,
		SortOrderDesc,
	}
}

// State - Smart group state
type State string

const (
	StateAcknowledged State = "Acknowledged"
	StateClosed       State = "Closed"
	StateNew          State = "New"
)

// PossibleStateValues returns the possible values for the State const type.
func PossibleStateValues() []State {
	return []State{
		StateAcknowledged,
		StateClosed,
		StateNew,
	}
}

// Status - The status of the evaluation of the enrichment.
type Status string

const (
	StatusCanceled   Status = "Canceled"
	StatusClosed     Status = "Closed"
	StatusFailed     Status = "Failed"
	StatusInProgress Status = "InProgress"
	StatusMitigated  Status = "Mitigated"
	StatusNew        Status = "New"
	StatusSucceeded  Status = "Succeeded"
)

// PossibleStatusValues returns the possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{
		StatusCanceled,
		StatusClosed,
		StatusFailed,
		StatusInProgress,
		StatusMitigated,
		StatusNew,
		StatusSucceeded,
	}
}

// TimeAggregation - Aggregation type. Relevant and required only for rules of the kind LogAlert.
type TimeAggregation string

const (
	TimeAggregationAverage TimeAggregation = "Average"
	TimeAggregationCount   TimeAggregation = "Count"
	TimeAggregationMaximum TimeAggregation = "Maximum"
	TimeAggregationMinimum TimeAggregation = "Minimum"
	TimeAggregationTotal   TimeAggregation = "Total"
)

// PossibleTimeAggregationValues returns the possible values for the TimeAggregation const type.
func PossibleTimeAggregationValues() []TimeAggregation {
	return []TimeAggregation{
		TimeAggregationAverage,
		TimeAggregationCount,
		TimeAggregationMaximum,
		TimeAggregationMinimum,
		TimeAggregationTotal,
	}
}

type TimeRange string

const (
	TimeRangeOneD    TimeRange = "1d"
	TimeRangeOneH    TimeRange = "1h"
	TimeRangeSevenD  TimeRange = "7d"
	TimeRangeThirtyD TimeRange = "30d"
)

// PossibleTimeRangeValues returns the possible values for the TimeRange const type.
func PossibleTimeRangeValues() []TimeRange {
	return []TimeRange{
		TimeRangeOneD,
		TimeRangeOneH,
		TimeRangeSevenD,
		TimeRangeThirtyD,
	}
}

// Type - The enrichment type.
type Type string

const (
	TypePrometheusInstantQuery Type = "PrometheusInstantQuery"
	TypePrometheusRangeQuery   Type = "PrometheusRangeQuery"
)

// PossibleTypeValues returns the possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{
		TypePrometheusInstantQuery,
		TypePrometheusRangeQuery,
	}
}
