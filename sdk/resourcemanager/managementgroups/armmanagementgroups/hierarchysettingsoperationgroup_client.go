//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagementgroups

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HierarchySettingsOperationGroupClient contains the methods for the HierarchySettingsOperationGroup group.
// Don't use this type directly, use NewHierarchySettingsOperationGroupClient() instead.
type HierarchySettingsOperationGroupClient struct {
	internal *arm.Client
}

// NewHierarchySettingsOperationGroupClient creates a new instance of HierarchySettingsOperationGroupClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHierarchySettingsOperationGroupClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*HierarchySettingsOperationGroupClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HierarchySettingsOperationGroupClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates the hierarchy settings defined at the Management Group level.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-01
//   - groupID - Management Group ID.
//   - resource - Tenant level settings request parameter.
//   - options - HierarchySettingsOperationGroupClientCreateOrUpdateOptions contains the optional parameters for the HierarchySettingsOperationGroupClient.CreateOrUpdate
//     method.
func (client *HierarchySettingsOperationGroupClient) CreateOrUpdate(ctx context.Context, groupID string, resource HierarchySettings, options *HierarchySettingsOperationGroupClientCreateOrUpdateOptions) (HierarchySettingsOperationGroupClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "HierarchySettingsOperationGroupClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, groupID, resource, options)
	if err != nil {
		return HierarchySettingsOperationGroupClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HierarchySettingsOperationGroupClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return HierarchySettingsOperationGroupClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *HierarchySettingsOperationGroupClient) createOrUpdateCreateRequest(ctx context.Context, groupID string, resource HierarchySettings, options *HierarchySettingsOperationGroupClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *HierarchySettingsOperationGroupClient) createOrUpdateHandleResponse(resp *http.Response) (HierarchySettingsOperationGroupClientCreateOrUpdateResponse, error) {
	result := HierarchySettingsOperationGroupClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HierarchySettings); err != nil {
		return HierarchySettingsOperationGroupClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the hierarchy settings defined at the Management Group level.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-01
//   - groupID - Management Group ID.
//   - options - HierarchySettingsOperationGroupClientDeleteOptions contains the optional parameters for the HierarchySettingsOperationGroupClient.Delete
//     method.
func (client *HierarchySettingsOperationGroupClient) Delete(ctx context.Context, groupID string, options *HierarchySettingsOperationGroupClientDeleteOptions) (HierarchySettingsOperationGroupClientDeleteResponse, error) {
	var err error
	const operationName = "HierarchySettingsOperationGroupClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, groupID, options)
	if err != nil {
		return HierarchySettingsOperationGroupClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HierarchySettingsOperationGroupClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HierarchySettingsOperationGroupClientDeleteResponse{}, err
	}
	return HierarchySettingsOperationGroupClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *HierarchySettingsOperationGroupClient) deleteCreateRequest(ctx context.Context, groupID string, options *HierarchySettingsOperationGroupClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the hierarchy settings defined at the Management Group level. Settings can only be set on the root Management
// Group of the hierarchy.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-01
//   - groupID - Management Group ID.
//   - options - HierarchySettingsOperationGroupClientGetOptions contains the optional parameters for the HierarchySettingsOperationGroupClient.Get
//     method.
func (client *HierarchySettingsOperationGroupClient) Get(ctx context.Context, groupID string, options *HierarchySettingsOperationGroupClientGetOptions) (HierarchySettingsOperationGroupClientGetResponse, error) {
	var err error
	const operationName = "HierarchySettingsOperationGroupClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, groupID, options)
	if err != nil {
		return HierarchySettingsOperationGroupClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HierarchySettingsOperationGroupClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HierarchySettingsOperationGroupClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *HierarchySettingsOperationGroupClient) getCreateRequest(ctx context.Context, groupID string, options *HierarchySettingsOperationGroupClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HierarchySettingsOperationGroupClient) getHandleResponse(resp *http.Response) (HierarchySettingsOperationGroupClientGetResponse, error) {
	result := HierarchySettingsOperationGroupClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HierarchySettings); err != nil {
		return HierarchySettingsOperationGroupClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on the root
// Management Group of the hierarchy.
//
// Generated from API version 2023-04-01
//   - groupID - Management Group ID.
//   - options - HierarchySettingsOperationGroupClientListOptions contains the optional parameters for the HierarchySettingsOperationGroupClient.NewListPager
//     method.
func (client *HierarchySettingsOperationGroupClient) NewListPager(groupID string, options *HierarchySettingsOperationGroupClientListOptions) *runtime.Pager[HierarchySettingsOperationGroupClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[HierarchySettingsOperationGroupClientListResponse]{
		More: func(page HierarchySettingsOperationGroupClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HierarchySettingsOperationGroupClientListResponse) (HierarchySettingsOperationGroupClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "HierarchySettingsOperationGroupClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, groupID, options)
			}, nil)
			if err != nil {
				return HierarchySettingsOperationGroupClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *HierarchySettingsOperationGroupClient) listCreateRequest(ctx context.Context, groupID string, options *HierarchySettingsOperationGroupClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/settings"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *HierarchySettingsOperationGroupClient) listHandleResponse(resp *http.Response) (HierarchySettingsOperationGroupClientListResponse, error) {
	result := HierarchySettingsOperationGroupClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HierarchySettingsListResult); err != nil {
		return HierarchySettingsOperationGroupClientListResponse{}, err
	}
	return result, nil
}

// Update - Updates the hierarchy settings defined at the Management Group level.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-01
//   - groupID - Management Group ID.
//   - properties - Tenant level settings request parameter.
//   - options - HierarchySettingsOperationGroupClientUpdateOptions contains the optional parameters for the HierarchySettingsOperationGroupClient.Update
//     method.
func (client *HierarchySettingsOperationGroupClient) Update(ctx context.Context, groupID string, properties CreateOrUpdateSettingsRequest, options *HierarchySettingsOperationGroupClientUpdateOptions) (HierarchySettingsOperationGroupClientUpdateResponse, error) {
	var err error
	const operationName = "HierarchySettingsOperationGroupClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, groupID, properties, options)
	if err != nil {
		return HierarchySettingsOperationGroupClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HierarchySettingsOperationGroupClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HierarchySettingsOperationGroupClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *HierarchySettingsOperationGroupClient) updateCreateRequest(ctx context.Context, groupID string, properties CreateOrUpdateSettingsRequest, options *HierarchySettingsOperationGroupClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *HierarchySettingsOperationGroupClient) updateHandleResponse(resp *http.Response) (HierarchySettingsOperationGroupClientUpdateResponse, error) {
	result := HierarchySettingsOperationGroupClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HierarchySettings); err != nil {
		return HierarchySettingsOperationGroupClientUpdateResponse{}, err
	}
	return result, nil
}
