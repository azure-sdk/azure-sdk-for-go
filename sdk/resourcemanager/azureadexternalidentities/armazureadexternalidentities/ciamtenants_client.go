// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazureadexternalidentities

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CIAMTenantsClient contains the methods for the CIAMTenants group.
// Don't use this type directly, use NewCIAMTenantsClient() instead.
type CIAMTenantsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewCIAMTenantsClient creates a new instance of CIAMTenantsClient with the specified values.
//   - subscriptionID - Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCIAMTenantsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CIAMTenantsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CIAMTenantsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Initiates an async request to create both the Azure AD for customers tenant and the corresponding Azure resource
// linked to a subscription. Note: Please check name availability before creating a new
// tenant
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial sub domain of the tenant.
//   - createCIAMTenantRequestBody - Request body to create an Azure AD for customers tenant
//   - options - CIAMTenantsClientBeginCreateOptions contains the optional parameters for the CIAMTenantsClient.BeginCreate method.
func (client *CIAMTenantsClient) BeginCreate(ctx context.Context, resourceGroupName string, resourceName string, createCIAMTenantRequestBody CIAMTenantResource, options *CIAMTenantsClientBeginCreateOptions) (*runtime.Poller[CIAMTenantsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, resourceName, createCIAMTenantRequestBody, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CIAMTenantsClientCreateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CIAMTenantsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Initiates an async request to create both the Azure AD for customers tenant and the corresponding Azure resource
// linked to a subscription. Note: Please check name availability before creating a new
// tenant
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
func (client *CIAMTenantsClient) create(ctx context.Context, resourceGroupName string, resourceName string, createCIAMTenantRequestBody CIAMTenantResource, options *CIAMTenantsClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "CIAMTenantsClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, resourceName, createCIAMTenantRequestBody, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *CIAMTenantsClient) createCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, createCIAMTenantRequestBody CIAMTenantResource, _ *CIAMTenantsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, createCIAMTenantRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Initiates an async operation to delete the Azure AD for customers tenant and Azure resource. The resource
// deletion can only happen as the last step in the tenant deletion process
// [https://aka.ms/delete-ciam-tenant].
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial sub domain of the tenant.
//   - options - CIAMTenantsClientBeginDeleteOptions contains the optional parameters for the CIAMTenantsClient.BeginDelete method.
func (client *CIAMTenantsClient) BeginDelete(ctx context.Context, resourceGroupName string, resourceName string, options *CIAMTenantsClientBeginDeleteOptions) (*runtime.Poller[CIAMTenantsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, resourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CIAMTenantsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CIAMTenantsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Initiates an async operation to delete the Azure AD for customers tenant and Azure resource. The resource deletion
// can only happen as the last step in the tenant deletion process
// [https://aka.ms/delete-ciam-tenant].
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
func (client *CIAMTenantsClient) deleteOperation(ctx context.Context, resourceGroupName string, resourceName string, options *CIAMTenantsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "CIAMTenantsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CIAMTenantsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, _ *CIAMTenantsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get the Azure AD for customers tenant resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial sub domain of the tenant.
//   - options - CIAMTenantsClientGetOptions contains the optional parameters for the CIAMTenantsClient.Get method.
func (client *CIAMTenantsClient) Get(ctx context.Context, resourceGroupName string, resourceName string, options *CIAMTenantsClientGetOptions) (CIAMTenantsClientGetResponse, error) {
	var err error
	const operationName = "CIAMTenantsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return CIAMTenantsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CIAMTenantsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CIAMTenantsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *CIAMTenantsClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, _ *CIAMTenantsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CIAMTenantsClient) getHandleResponse(resp *http.Response) (CIAMTenantsClientGetResponse, error) {
	result := CIAMTenantsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CIAMTenantResource); err != nil {
		return CIAMTenantsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Get all the Azure AD for customers tenants resources in a resource group.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CIAMTenantsClientListByResourceGroupOptions contains the optional parameters for the CIAMTenantsClient.NewListByResourceGroupPager
//     method.
func (client *CIAMTenantsClient) NewListByResourceGroupPager(resourceGroupName string, options *CIAMTenantsClientListByResourceGroupOptions) *runtime.Pager[CIAMTenantsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[CIAMTenantsClientListByResourceGroupResponse]{
		More: func(page CIAMTenantsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CIAMTenantsClientListByResourceGroupResponse) (CIAMTenantsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CIAMTenantsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return CIAMTenantsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *CIAMTenantsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *CIAMTenantsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *CIAMTenantsClient) listByResourceGroupHandleResponse(resp *http.Response) (CIAMTenantsClientListByResourceGroupResponse, error) {
	result := CIAMTenantsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CIAMTenantResourceList); err != nil {
		return CIAMTenantsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get all the Azure AD for customers tenant resources in a subscription.
//
// Generated from API version 2023-05-17-preview
//   - options - CIAMTenantsClientListBySubscriptionOptions contains the optional parameters for the CIAMTenantsClient.NewListBySubscriptionPager
//     method.
func (client *CIAMTenantsClient) NewListBySubscriptionPager(options *CIAMTenantsClientListBySubscriptionOptions) *runtime.Pager[CIAMTenantsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[CIAMTenantsClientListBySubscriptionResponse]{
		More: func(page CIAMTenantsClientListBySubscriptionResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *CIAMTenantsClientListBySubscriptionResponse) (CIAMTenantsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CIAMTenantsClient.NewListBySubscriptionPager")
			req, err := client.listBySubscriptionCreateRequest(ctx, options)
			if err != nil {
				return CIAMTenantsClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return CIAMTenantsClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CIAMTenantsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *CIAMTenantsClient) listBySubscriptionCreateRequest(ctx context.Context, _ *CIAMTenantsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/ciamDirectories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *CIAMTenantsClient) listBySubscriptionHandleResponse(resp *http.Response) (CIAMTenantsClientListBySubscriptionResponse, error) {
	result := CIAMTenantsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CIAMTenantResourceList); err != nil {
		return CIAMTenantsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update the Azure AD for customers tenant resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-17-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial sub domain of the tenant.
//   - updateCIAMTenantRequestBody - Request body to update Azure AD for customers tenant resource.
//   - options - CIAMTenantsClientUpdateOptions contains the optional parameters for the CIAMTenantsClient.Update method.
func (client *CIAMTenantsClient) Update(ctx context.Context, resourceGroupName string, resourceName string, updateCIAMTenantRequestBody CIAMTenantUpdateRequest, options *CIAMTenantsClientUpdateOptions) (CIAMTenantsClientUpdateResponse, error) {
	var err error
	const operationName = "CIAMTenantsClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, resourceName, updateCIAMTenantRequestBody, options)
	if err != nil {
		return CIAMTenantsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CIAMTenantsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CIAMTenantsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *CIAMTenantsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, updateCIAMTenantRequestBody CIAMTenantUpdateRequest, _ *CIAMTenantsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateCIAMTenantRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *CIAMTenantsClient) updateHandleResponse(resp *http.Response) (CIAMTenantsClientUpdateResponse, error) {
	result := CIAMTenantsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CIAMTenantResource); err != nil {
		return CIAMTenantsClientUpdateResponse{}, err
	}
	return result, nil
}
