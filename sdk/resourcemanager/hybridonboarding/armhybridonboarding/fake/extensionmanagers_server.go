//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridonboarding/armhybridonboarding"
	"net/http"
	"net/url"
	"regexp"
)

// ExtensionManagersServer is a fake server for instances of the armhybridonboarding.ExtensionManagersClient type.
type ExtensionManagersServer struct {
	// BeginAddCustomLocation is the fake for method ExtensionManagersClient.BeginAddCustomLocation
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginAddCustomLocation func(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*armhybridonboarding.AddCustomLocationDetails, options *armhybridonboarding.ExtensionManagersClientBeginAddCustomLocationOptions) (resp azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientAddCustomLocationResponse], errResp azfake.ErrorResponder)

	// BeginCreateOrUpdate is the fake for method ExtensionManagersClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, extensionManagerName string, resource armhybridonboarding.ExtensionManager, options *armhybridonboarding.ExtensionManagersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method ExtensionManagersClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, extensionManagerName string, options *armhybridonboarding.ExtensionManagersClientBeginDeleteOptions) (resp azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginDisableExtensions is the fake for method ExtensionManagersClient.BeginDisableExtensions
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginDisableExtensions func(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*armhybridonboarding.DisableExtensionsRequestDetails, options *armhybridonboarding.ExtensionManagersClientBeginDisableExtensionsOptions) (resp azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientDisableExtensionsResponse], errResp azfake.ErrorResponder)

	// BeginEnableExtensions is the fake for method ExtensionManagersClient.BeginEnableExtensions
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginEnableExtensions func(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*armhybridonboarding.EnableExtensionsRequestDetails, options *armhybridonboarding.ExtensionManagersClientBeginEnableExtensionsOptions) (resp azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientEnableExtensionsResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ExtensionManagersClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, extensionManagerName string, options *armhybridonboarding.ExtensionManagersClientGetOptions) (resp azfake.Responder[armhybridonboarding.ExtensionManagersClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByResourceGroupPager is the fake for method ExtensionManagersClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armhybridonboarding.ExtensionManagersClientListByResourceGroupOptions) (resp azfake.PagerResponder[armhybridonboarding.ExtensionManagersClientListByResourceGroupResponse])

	// NewListBySubscriptionPager is the fake for method ExtensionManagersClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armhybridonboarding.ExtensionManagersClientListBySubscriptionOptions) (resp azfake.PagerResponder[armhybridonboarding.ExtensionManagersClientListBySubscriptionResponse])

	// BeginRemoveCustomLocation is the fake for method ExtensionManagersClient.BeginRemoveCustomLocation
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginRemoveCustomLocation func(ctx context.Context, resourceGroupName string, extensionManagerName string, body []*armhybridonboarding.RemoveCustomLocationDetails, options *armhybridonboarding.ExtensionManagersClientBeginRemoveCustomLocationOptions) (resp azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientRemoveCustomLocationResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method ExtensionManagersClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, extensionManagerName string, properties armhybridonboarding.ExtensionManagerPatch, options *armhybridonboarding.ExtensionManagersClientBeginUpdateOptions) (resp azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewExtensionManagersServerTransport creates a new instance of ExtensionManagersServerTransport with the provided implementation.
// The returned ExtensionManagersServerTransport instance is connected to an instance of armhybridonboarding.ExtensionManagersClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewExtensionManagersServerTransport(srv *ExtensionManagersServer) *ExtensionManagersServerTransport {
	return &ExtensionManagersServerTransport{
		srv:                         srv,
		beginAddCustomLocation:      newTracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientAddCustomLocationResponse]](),
		beginCreateOrUpdate:         newTracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientCreateOrUpdateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientDeleteResponse]](),
		beginDisableExtensions:      newTracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientDisableExtensionsResponse]](),
		beginEnableExtensions:       newTracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientEnableExtensionsResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armhybridonboarding.ExtensionManagersClientListByResourceGroupResponse]](),
		newListBySubscriptionPager:  newTracker[azfake.PagerResponder[armhybridonboarding.ExtensionManagersClientListBySubscriptionResponse]](),
		beginRemoveCustomLocation:   newTracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientRemoveCustomLocationResponse]](),
		beginUpdate:                 newTracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientUpdateResponse]](),
	}
}

// ExtensionManagersServerTransport connects instances of armhybridonboarding.ExtensionManagersClient to instances of ExtensionManagersServer.
// Don't use this type directly, use NewExtensionManagersServerTransport instead.
type ExtensionManagersServerTransport struct {
	srv                         *ExtensionManagersServer
	beginAddCustomLocation      *tracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientAddCustomLocationResponse]]
	beginCreateOrUpdate         *tracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientCreateOrUpdateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientDeleteResponse]]
	beginDisableExtensions      *tracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientDisableExtensionsResponse]]
	beginEnableExtensions       *tracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientEnableExtensionsResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armhybridonboarding.ExtensionManagersClientListByResourceGroupResponse]]
	newListBySubscriptionPager  *tracker[azfake.PagerResponder[armhybridonboarding.ExtensionManagersClientListBySubscriptionResponse]]
	beginRemoveCustomLocation   *tracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientRemoveCustomLocationResponse]]
	beginUpdate                 *tracker[azfake.PollerResponder[armhybridonboarding.ExtensionManagersClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for ExtensionManagersServerTransport.
func (e *ExtensionManagersServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ExtensionManagersClient.BeginAddCustomLocation":
		resp, err = e.dispatchBeginAddCustomLocation(req)
	case "ExtensionManagersClient.BeginCreateOrUpdate":
		resp, err = e.dispatchBeginCreateOrUpdate(req)
	case "ExtensionManagersClient.BeginDelete":
		resp, err = e.dispatchBeginDelete(req)
	case "ExtensionManagersClient.BeginDisableExtensions":
		resp, err = e.dispatchBeginDisableExtensions(req)
	case "ExtensionManagersClient.BeginEnableExtensions":
		resp, err = e.dispatchBeginEnableExtensions(req)
	case "ExtensionManagersClient.Get":
		resp, err = e.dispatchGet(req)
	case "ExtensionManagersClient.NewListByResourceGroupPager":
		resp, err = e.dispatchNewListByResourceGroupPager(req)
	case "ExtensionManagersClient.NewListBySubscriptionPager":
		resp, err = e.dispatchNewListBySubscriptionPager(req)
	case "ExtensionManagersClient.BeginRemoveCustomLocation":
		resp, err = e.dispatchBeginRemoveCustomLocation(req)
	case "ExtensionManagersClient.BeginUpdate":
		resp, err = e.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchBeginAddCustomLocation(req *http.Request) (*http.Response, error) {
	if e.srv.BeginAddCustomLocation == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginAddCustomLocation not implemented")}
	}
	beginAddCustomLocation := e.beginAddCustomLocation.get(req)
	if beginAddCustomLocation == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers/(?P<extensionManagerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/addCustomLocation`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[[]*armhybridonboarding.AddCustomLocationDetails](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		extensionManagerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionManagerName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginAddCustomLocation(req.Context(), resourceGroupNameParam, extensionManagerNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginAddCustomLocation = &respr
		e.beginAddCustomLocation.add(req, beginAddCustomLocation)
	}

	resp, err := server.PollerResponderNext(beginAddCustomLocation, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginAddCustomLocation.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginAddCustomLocation) {
		e.beginAddCustomLocation.remove(req)
	}

	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if e.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := e.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers/(?P<extensionManagerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhybridonboarding.ExtensionManager](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		extensionManagerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionManagerName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, extensionManagerNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		e.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		e.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		e.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if e.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := e.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers/(?P<extensionManagerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		extensionManagerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionManagerName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginDelete(req.Context(), resourceGroupNameParam, extensionManagerNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		e.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		e.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		e.beginDelete.remove(req)
	}

	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchBeginDisableExtensions(req *http.Request) (*http.Response, error) {
	if e.srv.BeginDisableExtensions == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDisableExtensions not implemented")}
	}
	beginDisableExtensions := e.beginDisableExtensions.get(req)
	if beginDisableExtensions == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers/(?P<extensionManagerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/disableExtensions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[[]*armhybridonboarding.DisableExtensionsRequestDetails](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		extensionManagerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionManagerName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginDisableExtensions(req.Context(), resourceGroupNameParam, extensionManagerNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDisableExtensions = &respr
		e.beginDisableExtensions.add(req, beginDisableExtensions)
	}

	resp, err := server.PollerResponderNext(beginDisableExtensions, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginDisableExtensions.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDisableExtensions) {
		e.beginDisableExtensions.remove(req)
	}

	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchBeginEnableExtensions(req *http.Request) (*http.Response, error) {
	if e.srv.BeginEnableExtensions == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginEnableExtensions not implemented")}
	}
	beginEnableExtensions := e.beginEnableExtensions.get(req)
	if beginEnableExtensions == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers/(?P<extensionManagerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enableExtensions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[[]*armhybridonboarding.EnableExtensionsRequestDetails](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		extensionManagerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionManagerName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginEnableExtensions(req.Context(), resourceGroupNameParam, extensionManagerNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginEnableExtensions = &respr
		e.beginEnableExtensions.add(req, beginEnableExtensions)
	}

	resp, err := server.PollerResponderNext(beginEnableExtensions, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginEnableExtensions.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginEnableExtensions) {
		e.beginEnableExtensions.remove(req)
	}

	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if e.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers/(?P<extensionManagerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	extensionManagerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionManagerName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.Get(req.Context(), resourceGroupNameParam, extensionManagerNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExtensionManager, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := e.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := e.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		e.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armhybridonboarding.ExtensionManagersClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		e.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := e.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := e.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		e.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armhybridonboarding.ExtensionManagersClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		e.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchBeginRemoveCustomLocation(req *http.Request) (*http.Response, error) {
	if e.srv.BeginRemoveCustomLocation == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRemoveCustomLocation not implemented")}
	}
	beginRemoveCustomLocation := e.beginRemoveCustomLocation.get(req)
	if beginRemoveCustomLocation == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers/(?P<extensionManagerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/removeCustomLocation`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[[]*armhybridonboarding.RemoveCustomLocationDetails](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		extensionManagerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionManagerName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginRemoveCustomLocation(req.Context(), resourceGroupNameParam, extensionManagerNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRemoveCustomLocation = &respr
		e.beginRemoveCustomLocation.add(req, beginRemoveCustomLocation)
	}

	resp, err := server.PollerResponderNext(beginRemoveCustomLocation, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginRemoveCustomLocation.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRemoveCustomLocation) {
		e.beginRemoveCustomLocation.remove(req)
	}

	return resp, nil
}

func (e *ExtensionManagersServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if e.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := e.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridOnboarding/extensionManagers/(?P<extensionManagerName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhybridonboarding.ExtensionManagerPatch](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		extensionManagerNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("extensionManagerName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginUpdate(req.Context(), resourceGroupNameParam, extensionManagerNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		e.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		e.beginUpdate.remove(req)
	}

	return resp, nil
}
