//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfairfieldgardens

import "encoding/json"

func unmarshalAllocationRuleClassification(rawMsg json.RawMessage) (AllocationRuleClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AllocationRuleClassification
	switch m["type"] {
	case string(AllocationTypeEvenlyDistributed):
		b = &EvenlyDistributedAllocationRule{}
	default:
		b = &AllocationRule{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAllocationRuleClassificationArray(rawMsg json.RawMessage) ([]AllocationRuleClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]AllocationRuleClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalAllocationRuleClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalBootstrapAuthenticationRuleClassification(rawMsg json.RawMessage) (BootstrapAuthenticationRuleClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b BootstrapAuthenticationRuleClassification
	switch m["type"] {
	case string(BootstrapAuthenticationTypeDiscovery):
		b = &DiscoveryBootstrapAuthenticationRule{}
	case string(BootstrapAuthenticationTypeX509):
		b = &X509BootstrapAuthenticationRule{}
	default:
		b = &BootstrapAuthenticationRule{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalProvisioningPolicyResourceDetailsClassification(rawMsg json.RawMessage) (ProvisioningPolicyResourceDetailsClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ProvisioningPolicyResourceDetailsClassification
	switch m["type"] {
	case string(ProvisioningResourceTypeDeviceRegistryDevice):
		b = &DeviceRegistryProvisioningPolicyResourceDetails{}
	case string(ProvisioningResourceTypeHybridComputeMachine):
		b = &DiscoveryProvisioningPolicyResourceDetails{}
	default:
		b = &ProvisioningPolicyResourceDetails{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
