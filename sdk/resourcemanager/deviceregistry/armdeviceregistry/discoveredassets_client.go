//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdeviceregistry

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DiscoveredAssetsClient contains the methods for the DiscoveredAssets group.
// Don't use this type directly, use NewDiscoveredAssetsClient() instead.
type DiscoveredAssetsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDiscoveredAssetsClient creates a new instance of DiscoveredAssetsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDiscoveredAssetsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DiscoveredAssetsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DiscoveredAssetsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrReplace - Create a DiscoveredAsset
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - discoveredAssetName - Discovered Asset name parameter.
//   - resource - Resource create parameters.
//   - options - DiscoveredAssetsClientBeginCreateOrReplaceOptions contains the optional parameters for the DiscoveredAssetsClient.BeginCreateOrReplace
//     method.
func (client *DiscoveredAssetsClient) BeginCreateOrReplace(ctx context.Context, resourceGroupName string, discoveredAssetName string, resource DiscoveredAsset, options *DiscoveredAssetsClientBeginCreateOrReplaceOptions) (*runtime.Poller[DiscoveredAssetsClientCreateOrReplaceResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrReplace(ctx, resourceGroupName, discoveredAssetName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DiscoveredAssetsClientCreateOrReplaceResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DiscoveredAssetsClientCreateOrReplaceResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrReplace - Create a DiscoveredAsset
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
func (client *DiscoveredAssetsClient) createOrReplace(ctx context.Context, resourceGroupName string, discoveredAssetName string, resource DiscoveredAsset, options *DiscoveredAssetsClientBeginCreateOrReplaceOptions) (*http.Response, error) {
	var err error
	const operationName = "DiscoveredAssetsClient.BeginCreateOrReplace"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrReplaceCreateRequest(ctx, resourceGroupName, discoveredAssetName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrReplaceCreateRequest creates the CreateOrReplace request.
func (client *DiscoveredAssetsClient) createOrReplaceCreateRequest(ctx context.Context, resourceGroupName string, discoveredAssetName string, resource DiscoveredAsset, options *DiscoveredAssetsClientBeginCreateOrReplaceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/discoveredAssets/{discoveredAssetName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if discoveredAssetName == "" {
		return nil, errors.New("parameter discoveredAssetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoveredAssetName}", url.PathEscape(discoveredAssetName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a DiscoveredAsset
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - discoveredAssetName - Discovered Asset name parameter.
//   - options - DiscoveredAssetsClientBeginDeleteOptions contains the optional parameters for the DiscoveredAssetsClient.BeginDelete
//     method.
func (client *DiscoveredAssetsClient) BeginDelete(ctx context.Context, resourceGroupName string, discoveredAssetName string, options *DiscoveredAssetsClientBeginDeleteOptions) (*runtime.Poller[DiscoveredAssetsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, discoveredAssetName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DiscoveredAssetsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DiscoveredAssetsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a DiscoveredAsset
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
func (client *DiscoveredAssetsClient) deleteOperation(ctx context.Context, resourceGroupName string, discoveredAssetName string, options *DiscoveredAssetsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "DiscoveredAssetsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, discoveredAssetName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DiscoveredAssetsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, discoveredAssetName string, options *DiscoveredAssetsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/discoveredAssets/{discoveredAssetName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if discoveredAssetName == "" {
		return nil, errors.New("parameter discoveredAssetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoveredAssetName}", url.PathEscape(discoveredAssetName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a DiscoveredAsset
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - discoveredAssetName - Discovered Asset name parameter.
//   - options - DiscoveredAssetsClientGetOptions contains the optional parameters for the DiscoveredAssetsClient.Get method.
func (client *DiscoveredAssetsClient) Get(ctx context.Context, resourceGroupName string, discoveredAssetName string, options *DiscoveredAssetsClientGetOptions) (DiscoveredAssetsClientGetResponse, error) {
	var err error
	const operationName = "DiscoveredAssetsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, discoveredAssetName, options)
	if err != nil {
		return DiscoveredAssetsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DiscoveredAssetsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DiscoveredAssetsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DiscoveredAssetsClient) getCreateRequest(ctx context.Context, resourceGroupName string, discoveredAssetName string, options *DiscoveredAssetsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/discoveredAssets/{discoveredAssetName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if discoveredAssetName == "" {
		return nil, errors.New("parameter discoveredAssetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoveredAssetName}", url.PathEscape(discoveredAssetName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DiscoveredAssetsClient) getHandleResponse(resp *http.Response) (DiscoveredAssetsClientGetResponse, error) {
	result := DiscoveredAssetsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveredAsset); err != nil {
		return DiscoveredAssetsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List DiscoveredAsset resources by resource group
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - DiscoveredAssetsClientListByResourceGroupOptions contains the optional parameters for the DiscoveredAssetsClient.NewListByResourceGroupPager
//     method.
func (client *DiscoveredAssetsClient) NewListByResourceGroupPager(resourceGroupName string, options *DiscoveredAssetsClientListByResourceGroupOptions) *runtime.Pager[DiscoveredAssetsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[DiscoveredAssetsClientListByResourceGroupResponse]{
		More: func(page DiscoveredAssetsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DiscoveredAssetsClientListByResourceGroupResponse) (DiscoveredAssetsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DiscoveredAssetsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return DiscoveredAssetsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *DiscoveredAssetsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *DiscoveredAssetsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/discoveredAssets"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *DiscoveredAssetsClient) listByResourceGroupHandleResponse(resp *http.Response) (DiscoveredAssetsClientListByResourceGroupResponse, error) {
	result := DiscoveredAssetsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveredAssetListResult); err != nil {
		return DiscoveredAssetsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List DiscoveredAsset resources by subscription ID
//
// Generated from API version 2024-09-01-preview
//   - options - DiscoveredAssetsClientListBySubscriptionOptions contains the optional parameters for the DiscoveredAssetsClient.NewListBySubscriptionPager
//     method.
func (client *DiscoveredAssetsClient) NewListBySubscriptionPager(options *DiscoveredAssetsClientListBySubscriptionOptions) *runtime.Pager[DiscoveredAssetsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[DiscoveredAssetsClientListBySubscriptionResponse]{
		More: func(page DiscoveredAssetsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DiscoveredAssetsClientListBySubscriptionResponse) (DiscoveredAssetsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DiscoveredAssetsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return DiscoveredAssetsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *DiscoveredAssetsClient) listBySubscriptionCreateRequest(ctx context.Context, options *DiscoveredAssetsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/discoveredAssets"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *DiscoveredAssetsClient) listBySubscriptionHandleResponse(resp *http.Response) (DiscoveredAssetsClientListBySubscriptionResponse, error) {
	result := DiscoveredAssetsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveredAssetListResult); err != nil {
		return DiscoveredAssetsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a DiscoveredAsset
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - discoveredAssetName - Discovered Asset name parameter.
//   - properties - The resource properties to be updated.
//   - options - DiscoveredAssetsClientBeginUpdateOptions contains the optional parameters for the DiscoveredAssetsClient.BeginUpdate
//     method.
func (client *DiscoveredAssetsClient) BeginUpdate(ctx context.Context, resourceGroupName string, discoveredAssetName string, properties DiscoveredAssetUpdate, options *DiscoveredAssetsClientBeginUpdateOptions) (*runtime.Poller[DiscoveredAssetsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, discoveredAssetName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DiscoveredAssetsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DiscoveredAssetsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a DiscoveredAsset
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
func (client *DiscoveredAssetsClient) update(ctx context.Context, resourceGroupName string, discoveredAssetName string, properties DiscoveredAssetUpdate, options *DiscoveredAssetsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "DiscoveredAssetsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, discoveredAssetName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *DiscoveredAssetsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, discoveredAssetName string, properties DiscoveredAssetUpdate, options *DiscoveredAssetsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/discoveredAssets/{discoveredAssetName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if discoveredAssetName == "" {
		return nil, errors.New("parameter discoveredAssetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoveredAssetName}", url.PathEscape(discoveredAssetName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
