// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloads/armworkloads/v2"
	"net/http"
	"net/url"
	"regexp"
)

// SapLandscapeMonitorServer is a fake server for instances of the armworkloads.SapLandscapeMonitorClient type.
type SapLandscapeMonitorServer struct {
	// Create is the fake for method SapLandscapeMonitorClient.Create
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Create func(ctx context.Context, resourceGroupName string, monitorName string, resource armworkloads.SapLandscapeMonitorResource, options *armworkloads.SapLandscapeMonitorClientCreateOptions) (resp azfake.Responder[armworkloads.SapLandscapeMonitorClientCreateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method SapLandscapeMonitorClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, monitorName string, options *armworkloads.SapLandscapeMonitorClientDeleteOptions) (resp azfake.Responder[armworkloads.SapLandscapeMonitorClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SapLandscapeMonitorClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, monitorName string, options *armworkloads.SapLandscapeMonitorClientGetOptions) (resp azfake.Responder[armworkloads.SapLandscapeMonitorClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByMonitorPager is the fake for method SapLandscapeMonitorClient.NewListByMonitorPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByMonitorPager func(resourceGroupName string, monitorName string, options *armworkloads.SapLandscapeMonitorClientListByMonitorOptions) (resp azfake.PagerResponder[armworkloads.SapLandscapeMonitorClientListByMonitorResponse])

	// Update is the fake for method SapLandscapeMonitorClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, monitorName string, properties armworkloads.SapLandscapeMonitorResource, options *armworkloads.SapLandscapeMonitorClientUpdateOptions) (resp azfake.Responder[armworkloads.SapLandscapeMonitorClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewSapLandscapeMonitorServerTransport creates a new instance of SapLandscapeMonitorServerTransport with the provided implementation.
// The returned SapLandscapeMonitorServerTransport instance is connected to an instance of armworkloads.SapLandscapeMonitorClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSapLandscapeMonitorServerTransport(srv *SapLandscapeMonitorServer) *SapLandscapeMonitorServerTransport {
	return &SapLandscapeMonitorServerTransport{
		srv:                   srv,
		newListByMonitorPager: newTracker[azfake.PagerResponder[armworkloads.SapLandscapeMonitorClientListByMonitorResponse]](),
	}
}

// SapLandscapeMonitorServerTransport connects instances of armworkloads.SapLandscapeMonitorClient to instances of SapLandscapeMonitorServer.
// Don't use this type directly, use NewSapLandscapeMonitorServerTransport instead.
type SapLandscapeMonitorServerTransport struct {
	srv                   *SapLandscapeMonitorServer
	newListByMonitorPager *tracker[azfake.PagerResponder[armworkloads.SapLandscapeMonitorClientListByMonitorResponse]]
}

// Do implements the policy.Transporter interface for SapLandscapeMonitorServerTransport.
func (s *SapLandscapeMonitorServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SapLandscapeMonitorServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "SapLandscapeMonitorClient.Create":
		resp, err = s.dispatchCreate(req)
	case "SapLandscapeMonitorClient.Delete":
		resp, err = s.dispatchDelete(req)
	case "SapLandscapeMonitorClient.Get":
		resp, err = s.dispatchGet(req)
	case "SapLandscapeMonitorClient.NewListByMonitorPager":
		resp, err = s.dispatchNewListByMonitorPager(req)
	case "SapLandscapeMonitorClient.Update":
		resp, err = s.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (s *SapLandscapeMonitorServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if s.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapLandscapeMonitor/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armworkloads.SapLandscapeMonitorResource](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Create(req.Context(), resourceGroupNameParam, monitorNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SapLandscapeMonitorResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SapLandscapeMonitorServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if s.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapLandscapeMonitor/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Delete(req.Context(), resourceGroupNameParam, monitorNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SapLandscapeMonitorServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapLandscapeMonitor/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, monitorNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SapLandscapeMonitorResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SapLandscapeMonitorServerTransport) dispatchNewListByMonitorPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListByMonitorPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByMonitorPager not implemented")}
	}
	newListByMonitorPager := s.newListByMonitorPager.get(req)
	if newListByMonitorPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapLandscapeMonitor`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListByMonitorPager(resourceGroupNameParam, monitorNameParam, nil)
		newListByMonitorPager = &resp
		s.newListByMonitorPager.add(req, newListByMonitorPager)
		server.PagerResponderInjectNextLinks(newListByMonitorPager, req, func(page *armworkloads.SapLandscapeMonitorClientListByMonitorResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByMonitorPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListByMonitorPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByMonitorPager) {
		s.newListByMonitorPager.remove(req)
	}
	return resp, nil
}

func (s *SapLandscapeMonitorServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Workloads/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sapLandscapeMonitor/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armworkloads.SapLandscapeMonitorResource](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Update(req.Context(), resourceGroupNameParam, monitorNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SapLandscapeMonitorResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
