//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpurview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// FeaturesClient contains the methods for the Features group.
// Don't use this type directly, use NewFeaturesClient() instead.
type FeaturesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewFeaturesClient creates a new instance of FeaturesClient with the specified values.
//   - subscriptionID - The subscription identifier
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewFeaturesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*FeaturesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &FeaturesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// AccountGet - Gets details from a list of feature names.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - resourceGroupName - The resource group name.
//   - accountName - The name of the account.
//   - featureRequest - Request body with feature names.
//   - options - FeaturesClientAccountGetOptions contains the optional parameters for the FeaturesClient.AccountGet method.
func (client *FeaturesClient) AccountGet(ctx context.Context, resourceGroupName string, accountName string, featureRequest BatchFeatureRequest, options *FeaturesClientAccountGetOptions) (FeaturesClientAccountGetResponse, error) {
	var err error
	const operationName = "FeaturesClient.AccountGet"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.accountGetCreateRequest(ctx, resourceGroupName, accountName, featureRequest, options)
	if err != nil {
		return FeaturesClientAccountGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FeaturesClientAccountGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FeaturesClientAccountGetResponse{}, err
	}
	resp, err := client.accountGetHandleResponse(httpResp)
	return resp, err
}

// accountGetCreateRequest creates the AccountGet request.
func (client *FeaturesClient) accountGetCreateRequest(ctx context.Context, resourceGroupName string, accountName string, featureRequest BatchFeatureRequest, options *FeaturesClientAccountGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/listFeatures"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, featureRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// accountGetHandleResponse handles the AccountGet response.
func (client *FeaturesClient) accountGetHandleResponse(resp *http.Response) (FeaturesClientAccountGetResponse, error) {
	result := FeaturesClientAccountGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BatchFeatureStatus); err != nil {
		return FeaturesClientAccountGetResponse{}, err
	}
	return result, nil
}

// SubscriptionGet - Gets details from a list of feature names.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - locations - Location of feature.
//   - featureRequest - Request body with feature names.
//   - options - FeaturesClientSubscriptionGetOptions contains the optional parameters for the FeaturesClient.SubscriptionGet
//     method.
func (client *FeaturesClient) SubscriptionGet(ctx context.Context, locations string, featureRequest BatchFeatureRequest, options *FeaturesClientSubscriptionGetOptions) (FeaturesClientSubscriptionGetResponse, error) {
	var err error
	const operationName = "FeaturesClient.SubscriptionGet"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.subscriptionGetCreateRequest(ctx, locations, featureRequest, options)
	if err != nil {
		return FeaturesClientSubscriptionGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FeaturesClientSubscriptionGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FeaturesClientSubscriptionGetResponse{}, err
	}
	resp, err := client.subscriptionGetHandleResponse(httpResp)
	return resp, err
}

// subscriptionGetCreateRequest creates the SubscriptionGet request.
func (client *FeaturesClient) subscriptionGetCreateRequest(ctx context.Context, locations string, featureRequest BatchFeatureRequest, options *FeaturesClientSubscriptionGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Purview/locations/{locations}/listFeatures"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if locations == "" {
		return nil, errors.New("parameter locations cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locations}", url.PathEscape(locations))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, featureRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// subscriptionGetHandleResponse handles the SubscriptionGet response.
func (client *FeaturesClient) subscriptionGetHandleResponse(resp *http.Response) (FeaturesClientSubscriptionGetResponse, error) {
	result := FeaturesClientSubscriptionGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BatchFeatureStatus); err != nil {
		return FeaturesClientSubscriptionGetResponse{}, err
	}
	return result, nil
}
