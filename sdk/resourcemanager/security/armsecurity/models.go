//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armsecurity

import "time"

// AssessmentProperties - Describes properties of an assessment as related to the standard
type AssessmentProperties struct {
	// the assessment key
	AssessmentKey *string
}

// AssignedAssessmentItem - describe the properties of a security assessment object reference (by key)
type AssignedAssessmentItem struct {
	// unique key to a security assessment object
	AssessmentKey *string
}

// AssignedStandardItem - describe the properties of a of a standard assignments object reference
type AssignedStandardItem struct {
	// full resourceId of the Microsoft.Security/standard object
	ID *string
}

// CustomRecommendation - Custom Recommendation
type CustomRecommendation struct {
	// describes Custom Recommendation properties.
	Properties *CustomRecommendationProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

// CustomRecommendationMetaData - The recommendation metadata
type CustomRecommendationMetaData struct {
	// READ-ONLY; recommendation Created by object id (GUID)
	CreatedBy *string

	// READ-ONLY; recommendation creation date
	CreatedOn *time.Time

	// READ-ONLY; recommendation last updated by object id (GUID)
	LastUpdatedBy *string

	// READ-ONLY; recommendation last update date
	LastUpdatedOn *time.Time
}

// CustomRecommendationProperties - describes the Custom Recommendation properties
type CustomRecommendationProperties struct {
	// List of all standard supported clouds.
	CloudProviders []*RecommendationSupportedClouds

	// The description to relate to the assessments generated by this Recommendation.
	Description *string

	// The display name of the assessments generated by this Recommendation.
	DisplayName *string

	// The recommendation metadata
	Metadata *CustomRecommendationMetaData

	// KQL query representing the Recommendation results required.
	Query *string

	// The remediation description to relate to the assessments generated by this Recommendation.
	RemediationDescription *string

	// The severity to relate to the assessments generated by this Recommendation.
	Severity *SeverityEnum

	// READ-ONLY; The assessment metadata key used when an assessment is generated for this Recommendation.
	AssessmentKey *string
}

// CustomRecommendationsClientBeginDeleteOptions contains the optional parameters for the CustomRecommendationsClient.BeginDelete
// method.
type CustomRecommendationsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// CustomRecommendationsClientCreateOrUpdateOptions contains the optional parameters for the CustomRecommendationsClient.CreateOrUpdate
// method.
type CustomRecommendationsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CustomRecommendationsClientGetOptions contains the optional parameters for the CustomRecommendationsClient.Get method.
type CustomRecommendationsClientGetOptions struct {
	// placeholder for future optional parameters
}

// CustomRecommendationsClientListOptions contains the optional parameters for the CustomRecommendationsClient.NewListPager
// method.
type CustomRecommendationsClientListOptions struct {
	// placeholder for future optional parameters
}

// CustomRecommendationsList - A list of Custom Recommendations
type CustomRecommendationsList struct {
	// The link used to get the next page of operations.
	NextLink *string

	// READ-ONLY; Collection of Custom Recommendations
	Value []*CustomRecommendation
}

// EnvironmentDetails - The environment details of the resource
type EnvironmentDetails struct {
	// The hierarchy id of the connector (in case of Azure - the subscription Id, in case of MC - the hierarchyId id)
	EnvironmentHierarchyID *string

	// The native resource id of the resource (in case of Azure - the resource Id, in case of MC - the native resource id)
	NativeResourceID *string

	// The organizational hierarchy id of the connector (in case of Azure - the subscription Id, in case of MC - the organizational
	// hierarchyId id)
	OrganizationalHierarchyID *string

	// The subscription Id
	SubscriptionID *string

	// The tenant Id
	TenantID *string
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail
}

// HealthDataClassification - The classification of the health report
type HealthDataClassification struct {
	// The component describes the name of the agent/service that scans the issue
	Component *string

	// The scenario describes the health scenario issue of the component
	Scenario *string

	// The resource scope of the health report
	Scope *string
}

// HealthReport - The health report resource
type HealthReport struct {
	// Properties of a health report
	Properties *HealthReportProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

// HealthReportProperties - Describes properties of the health report
type HealthReportProperties struct {
	// The affected defenders plans by unhealthy report
	AffectedDefendersPlans []*string

	// The affected defenders sub plans by unhealthy report
	AffectedDefendersSubPlans []*string

	// The environment details of the resource
	EnvironmentDetails *EnvironmentDetails

	// The classification of the health report
	HealthDataClassification *HealthDataClassification

	// A collection of the issues in the report
	Issues []*Issue

	// The resource details of the health report
	ResourceDetails *ResourceDetails

	// The status of the health report
	Status *Status

	// READ-ONLY; Additional data for the given health report, this field can include more details on the resource and the health
	// scenario.
	ReportAdditionalData map[string]*string
}

// HealthReportsClientGetOptions contains the optional parameters for the HealthReportsClient.Get method.
type HealthReportsClientGetOptions struct {
	// placeholder for future optional parameters
}

// HealthReportsClientListOptions contains the optional parameters for the HealthReportsClient.NewListPager method.
type HealthReportsClientListOptions struct {
	// placeholder for future optional parameters
}

// HealthReportsList - Page of health reports list
type HealthReportsList struct {
	// READ-ONLY; The URI to fetch the next page
	NextLink *string

	// READ-ONLY; Collection of health reports in this page
	Value []*HealthReport
}

// Issue - The issue that caused the resource to by unhealthy
type Issue struct {
	// REQUIRED; The unique issue key
	IssueKey *string

	// Additional data for the given issue. The additional data depends on the issue type
	IssueAdditionalData map[string]*string

	// The issue description
	IssueDescription *string

	// The issue name
	IssueName *string

	// The remediation script to solve this issue
	RemediationScript *string

	// Human readable description of what you should do to mitigate this health issue
	RemediationSteps *string

	// The affected security values that MDC offers that will be affected by the issue, for example: recommendations, alerts,
	// etc
	SecurityValues []*string
}

// Resource - Describes an Azure resource.
type Resource struct {
	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

// ResourceDetails - The resource details of the health report
type ResourceDetails struct {
	// The status of the health report
	Source *Source

	// READ-ONLY; The id of the connector
	ConnectorID *string

	// READ-ONLY; The azure id of the resource
	ID *string
}

// Standard - Security Standard on a resource
type Standard struct {
	// Properties of a security standard
	Properties *StandardProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

// StandardAssignment - Security Assignment on a resource group over a given scope
type StandardAssignment struct {
	// Properties of a standard assignments assignment
	Properties *StandardAssignmentProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

// StandardAssignmentMetadata - The standard assignment metadata
type StandardAssignmentMetadata struct {
	// READ-ONLY; standard assignment Created by object id (GUID)
	CreatedBy *string

	// READ-ONLY; standard assignment creation date
	CreatedOn *time.Time

	// READ-ONLY; standard assignment last updated by object id (GUID)
	LastUpdatedBy *string

	// READ-ONLY; standard assignment last update date
	LastUpdatedOn *time.Time
}

// StandardAssignmentProperties - Describes the properties of a standardAssignment
type StandardAssignmentProperties struct {
	// Standard item with key as applied to this standard assignment over the given scope
	AssignedStandard *AssignedStandardItem

	// description of the standardAssignment
	Description *string

	// display name of the standardAssignment
	DisplayName *string

	// expected effect of this assignment (Audit/Exempt)
	Effect *Effect

	// Excluded scopes, filter out the descendants of the scope (on management scopes)
	ExcludedScopes []*string

	// Additional data about assignment that has Exempt effect
	ExemptionData *StandardAssignmentPropertiesExemptionData

	// Expiration date of this assignment as a full ISO date
	ExpiresOn *time.Time

	// The standard assignment metadata.
	Metadata *StandardAssignmentMetadata
}

// StandardAssignmentPropertiesExemptionData - Additional data about assignment that has Exempt effect
type StandardAssignmentPropertiesExemptionData struct {
	// Component item with key as applied to this standard assignment over the given scope
	AssignedAssessment *AssignedAssessmentItem

	// Exemption category of this assignment
	ExemptionCategory *ExemptionCategory
}

// StandardAssignmentsClientCreateOptions contains the optional parameters for the StandardAssignmentsClient.Create method.
type StandardAssignmentsClientCreateOptions struct {
	// placeholder for future optional parameters
}

// StandardAssignmentsClientDeleteOptions contains the optional parameters for the StandardAssignmentsClient.Delete method.
type StandardAssignmentsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// StandardAssignmentsClientGetOptions contains the optional parameters for the StandardAssignmentsClient.Get method.
type StandardAssignmentsClientGetOptions struct {
	// placeholder for future optional parameters
}

// StandardAssignmentsClientListOptions contains the optional parameters for the StandardAssignmentsClient.NewListPager method.
type StandardAssignmentsClientListOptions struct {
	// placeholder for future optional parameters
}

// StandardAssignmentsList - Page of a standard assignment list
type StandardAssignmentsList struct {
	// READ-ONLY; The URI to fetch the next page
	NextLink *string

	// READ-ONLY; Collection of standardAssignments in this page
	Value []*StandardAssignment
}

// StandardList - Page of a Standard list
type StandardList struct {
	// READ-ONLY; The URI to fetch the next page
	NextLink *string

	// READ-ONLY; Collection of standards in this page
	Value []*Standard
}

// StandardMetadata - The standard metadata
type StandardMetadata struct {
	// READ-ONLY; standard Created by object id (GUID)
	CreatedBy *string

	// READ-ONLY; standard creation date
	CreatedOn *time.Time

	// READ-ONLY; standard last updated by object id (GUID)
	LastUpdatedBy *string

	// READ-ONLY; standard last update date
	LastUpdatedOn *time.Time
}

// StandardProperties - Describes properties of a standard.
type StandardProperties struct {
	// List of assessment keys to apply to standard scope.
	Assessments []*AssessmentProperties

	// List of all standard supported clouds.
	CloudProviders []*StandardSupportedCloud

	// description of the standard
	Description *string

	// display name of the standard, equivalent to the standardId
	DisplayName *string

	// The security standard metadata.
	Metadata *StandardMetadata

	// The policy set definition id associated with the standard.
	PolicySetDefinitionID *string

	// READ-ONLY; standard type (Custom or BuiltIn only currently)
	StandardType *StandardType
}

// StandardsClientBeginDeleteOptions contains the optional parameters for the StandardsClient.BeginDelete method.
type StandardsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// StandardsClientCreateOrUpdateOptions contains the optional parameters for the StandardsClient.CreateOrUpdate method.
type StandardsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// StandardsClientGetOptions contains the optional parameters for the StandardsClient.Get method.
type StandardsClientGetOptions struct {
	// placeholder for future optional parameters
}

// StandardsClientListOptions contains the optional parameters for the StandardsClient.NewListPager method.
type StandardsClientListOptions struct {
	// placeholder for future optional parameters
}

// Status - The status of the health report
type Status struct {
	// The status of the health report
	Code *StatusName

	// READ-ONLY; The date of when the resource of the health report was scanned in the first time
	FirstEvaluationDate *time.Time

	// READ-ONLY; The date of when the resource was scanned in the last time
	LastScannedDate *time.Time

	// READ-ONLY; The reason of the given status
	Reason *string

	// READ-ONLY; The date of when the status of the health report was changed in the last time
	StatusChangeDate *time.Time
}
