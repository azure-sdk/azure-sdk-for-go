//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmcpp

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MembershipClient contains the methods for the Membership group.
// Don't use this type directly, use NewMembershipClient() instead.
type MembershipClient struct {
	host string
	pl   runtime.Pipeline
}

// NewMembershipClient creates a new instance of MembershipClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewMembershipClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*MembershipClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &MembershipClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// CancelMcppPuchase - The operation to cancel a CloudPartnerProgramMembership offer
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-02-09-preview
//   - subscriptionID - The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
//   - resourceGroupName - The name of the resource group.
//   - resourceName - The name of the resource.
//   - options - MembershipClientCancelMcppPuchaseOptions contains the optional parameters for the MembershipClient.CancelMcppPuchase
//     method.
func (client *MembershipClient) CancelMcppPuchase(ctx context.Context, subscriptionID string, resourceGroupName string, resourceName string, options *MembershipClientCancelMcppPuchaseOptions) (MembershipClientCancelMcppPuchaseResponse, error) {
	req, err := client.cancelMcppPuchaseCreateRequest(ctx, subscriptionID, resourceGroupName, resourceName, options)
	if err != nil {
		return MembershipClientCancelMcppPuchaseResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MembershipClientCancelMcppPuchaseResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return MembershipClientCancelMcppPuchaseResponse{}, runtime.NewResponseError(resp)
	}
	return MembershipClientCancelMcppPuchaseResponse{}, nil
}

// cancelMcppPuchaseCreateRequest creates the CancelMcppPuchase request.
func (client *MembershipClient) cancelMcppPuchaseCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, resourceName string, options *MembershipClientCancelMcppPuchaseOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudPartnerProgram/membership/{resourceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-02-09-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// CreatePurchase - Create a CloudPartnerProgramMembership purchase
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-02-09-preview
//   - subscriptionID - The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
//   - resourceGroupName - The name of the resource group.
//   - resourceName - The name of the resource.
//   - body - The product upn that needs to be purchased
//   - options - MembershipClientCreatePurchaseOptions contains the optional parameters for the MembershipClient.CreatePurchase
//     method.
func (client *MembershipClient) CreatePurchase(ctx context.Context, subscriptionID string, resourceGroupName string, resourceName string, body ProductCode, options *MembershipClientCreatePurchaseOptions) (MembershipClientCreatePurchaseResponse, error) {
	req, err := client.createPurchaseCreateRequest(ctx, subscriptionID, resourceGroupName, resourceName, body, options)
	if err != nil {
		return MembershipClientCreatePurchaseResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MembershipClientCreatePurchaseResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return MembershipClientCreatePurchaseResponse{}, runtime.NewResponseError(resp)
	}
	return client.createPurchaseHandleResponse(resp)
}

// createPurchaseCreateRequest creates the CreatePurchase request.
func (client *MembershipClient) createPurchaseCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, resourceName string, body ProductCode, options *MembershipClientCreatePurchaseOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudPartnerProgram/membership/{resourceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-02-09-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// createPurchaseHandleResponse handles the CreatePurchase response.
func (client *MembershipClient) createPurchaseHandleResponse(resp *http.Response) (MembershipClientCreatePurchaseResponse, error) {
	result := MembershipClientCreatePurchaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MembershipDetailsResponse); err != nil {
		return MembershipClientCreatePurchaseResponse{}, err
	}
	return result, nil
}

// GetPurchaseDetails - The operation to fetch purchase details of a CloudPartnerProgramMembership offer
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-02-09-preview
//   - subscriptionID - The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
//   - resourceGroupName - The name of the resource group.
//   - resourceName - The name of the resource.
//   - options - MembershipClientGetPurchaseDetailsOptions contains the optional parameters for the MembershipClient.GetPurchaseDetails
//     method.
func (client *MembershipClient) GetPurchaseDetails(ctx context.Context, subscriptionID string, resourceGroupName string, resourceName string, options *MembershipClientGetPurchaseDetailsOptions) (MembershipClientGetPurchaseDetailsResponse, error) {
	req, err := client.getPurchaseDetailsCreateRequest(ctx, subscriptionID, resourceGroupName, resourceName, options)
	if err != nil {
		return MembershipClientGetPurchaseDetailsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MembershipClientGetPurchaseDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MembershipClientGetPurchaseDetailsResponse{}, runtime.NewResponseError(resp)
	}
	return client.getPurchaseDetailsHandleResponse(resp)
}

// getPurchaseDetailsCreateRequest creates the GetPurchaseDetails request.
func (client *MembershipClient) getPurchaseDetailsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, resourceName string, options *MembershipClientGetPurchaseDetailsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudPartnerProgram/membership/{resourceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-02-09-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPurchaseDetailsHandleResponse handles the GetPurchaseDetails response.
func (client *MembershipClient) getPurchaseDetailsHandleResponse(resp *http.Response) (MembershipClientGetPurchaseDetailsResponse, error) {
	result := MembershipClientGetPurchaseDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MembershipDetailsResponse); err != nil {
		return MembershipClientGetPurchaseDetailsResponse{}, err
	}
	return result, nil
}
