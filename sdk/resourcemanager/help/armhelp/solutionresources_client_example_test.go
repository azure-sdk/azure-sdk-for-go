// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armhelp_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/help/armhelp"
	"log"
)

// Generated from example definition: 2024-03-01-preview/Solution_Create.json
func ExampleSolutionResourcesClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhelp.NewClientFactory("<subscriptionID>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewSolutionResourcesClient().BeginCreate(ctx, "subscriptions/mySubscription/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp", "SolutionResourceName1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhelp.SolutionResourcesClientCreateResponse{
	// 	SolutionResource: &armhelp.SolutionResource{
	// 		Name: to.Ptr("SolutionResourceName1"),
	// 		Type: to.Ptr("Microsoft.Help/solutions"),
	// 		ID: to.Ptr("/subscriptions/mySubscription/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp/providers/Microsoft.Help/solutions/SolutionResourceName1"),
	// 		Properties: &armhelp.SolutionResourceProperties{
	// 			Content: to.Ptr("<p>sample content</p>"),
	// 			ProvisioningState: to.Ptr(armhelp.SolutionProvisioningStateSucceeded),
	// 			ReplacementMaps: &armhelp.ReplacementMaps{
	// 				Diagnostics: []*armhelp.SolutionsDiagnostic{
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 							{
	// 								ID: to.Ptr("InsightArticleId"),
	// 								ImportanceLevel: to.Ptr(armhelp.ImportanceLevelCritical),
	// 								Results: to.Ptr("Article Content"),
	// 								Title: to.Ptr("An example title for an Insight"),
	// 							},
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						SolutionID: to.Ptr("sampleSolutionId1"),
	// 						Status: to.Ptr(armhelp.StatusSucceeded),
	// 						StatusDetails: to.Ptr(""),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId2"),
	// 						Status: to.Ptr(armhelp.StatusFailed),
	// 						StatusDetails: to.Ptr(""),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId3"),
	// 						Status: to.Ptr(armhelp.StatusFailed),
	// 						StatusDetails: to.Ptr("Timeout text authored in Solution article "),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId4"),
	// 						Status: to.Ptr(armhelp.StatusFailed),
	// 						StatusDetails: to.Ptr("Sample status details"),
	// 					},
	// 				},
	// 				MetricsBasedCharts: []*armhelp.MetricsBasedChart{
	// 					{
	// 						Name: to.Ptr("CPU_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("CPU Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("memory_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("Memory Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("io_consumption_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("IOPS Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("active_connections"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("Active Connections in the last one day"),
	// 					},
	// 				},
	// 				VideoGroups: []*armhelp.VideoGroup{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						Videos: []*armhelp.VideoGroupVideo{
	// 							{
	// 								Src: to.Ptr("sampleLink"),
	// 								Title: to.Ptr("widthtest"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 				Videos: []*armhelp.Video{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						Src: to.Ptr("sampleLink"),
	// 						Title: to.Ptr("CI - CD with Azure DevOps"),
	// 					},
	// 				},
	// 				WebResults: []*armhelp.WebResult{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						SearchResults: []*armhelp.SearchResult{
	// 							{
	// 								Confidence: to.Ptr(armhelp.ConfidenceHigh),
	// 								Content: to.Ptr("I sysprep a VM and now I cannot connect to it via <b>RDP</b>"),
	// 								Link: to.Ptr("sampleLink"),
	// 								Rank: to.Ptr[int32](1),
	// 								ResultType: to.Ptr(armhelp.ResultTypeCommunity),
	// 								SolutionID: to.Ptr("sampleSolutionId"),
	// 								Source: to.Ptr("sampleSource"),
	// 								Title: to.Ptr("Cannot RDP VM after SysPrep"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			Sections: []*armhelp.Section{
	// 				{
	// 					Content: to.Ptr("<p>sample content</p>"),
	// 					ReplacementMaps: &armhelp.ReplacementMaps{
	// 					},
	// 					Title: to.Ptr("RBAC Authentication Common Solutions"),
	// 				},
	// 			},
	// 			SolutionID: to.Ptr("sampleSolutionId"),
	// 			Title: to.Ptr("RBAC Authentication Common Solutions"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2024-03-01-preview/Solution_Get.json
func ExampleSolutionResourcesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhelp.NewClientFactory("<subscriptionID>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewSolutionResourcesClient().Get(ctx, "subscriptions/mySubscription/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp", "SolutionResource1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhelp.SolutionResourcesClientGetResponse{
	// 	SolutionResource: &armhelp.SolutionResource{
	// 		Name: to.Ptr("SolutionResource1"),
	// 		Type: to.Ptr("Microsoft.Help/solutions"),
	// 		ID: to.Ptr("/subscriptions/mySubscription/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp/providers/Microsoft.Help/solutions/SolutionResource1"),
	// 		Properties: &armhelp.SolutionResourceProperties{
	// 			Content: to.Ptr("<p>Sample content</p>"),
	// 			ProvisioningState: to.Ptr(armhelp.SolutionProvisioningStateSucceeded),
	// 			ReplacementMaps: &armhelp.ReplacementMaps{
	// 				Diagnostics: []*armhelp.SolutionsDiagnostic{
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 							{
	// 								ID: to.Ptr("InsightArticleId"),
	// 								ImportanceLevel: to.Ptr(armhelp.ImportanceLevelCritical),
	// 								Results: to.Ptr("Article Content"),
	// 								Title: to.Ptr("An example title for an Insight"),
	// 							},
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						SolutionID: to.Ptr("sampleSolutionId3"),
	// 						Status: to.Ptr(armhelp.StatusSucceeded),
	// 						StatusDetails: to.Ptr(""),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId4"),
	// 						Status: to.Ptr(armhelp.StatusSucceeded),
	// 						StatusDetails: to.Ptr(""),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId5"),
	// 						Status: to.Ptr(armhelp.StatusFailed),
	// 						StatusDetails: to.Ptr("Timeout text authored in Solution article "),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId6"),
	// 						Status: to.Ptr(armhelp.StatusFailed),
	// 						StatusDetails: to.Ptr("Some text "),
	// 					},
	// 				},
	// 				MetricsBasedCharts: []*armhelp.MetricsBasedChart{
	// 					{
	// 						Name: to.Ptr("CPU_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("CPU Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("memory_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("Memory Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("io_consumption_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("IOPS Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("active_connections"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("Active Connections in the last one day"),
	// 					},
	// 				},
	// 				VideoGroups: []*armhelp.VideoGroup{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						Videos: []*armhelp.VideoGroupVideo{
	// 							{
	// 								Src: to.Ptr("sampleVideoSource2"),
	// 								Title: to.Ptr("widthtest"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 				Videos: []*armhelp.Video{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						Src: to.Ptr("sampleVideoSource"),
	// 						Title: to.Ptr("CI - CD with Azure DevOps"),
	// 					},
	// 				},
	// 				WebResults: []*armhelp.WebResult{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						SearchResults: []*armhelp.SearchResult{
	// 							{
	// 								Confidence: to.Ptr(armhelp.ConfidenceHigh),
	// 								Content: to.Ptr("I sysprep a VM and now I cannot connect to it via <b>RDP</b>"),
	// 								Link: to.Ptr("sampleLink"),
	// 								Rank: to.Ptr[int32](1),
	// 								ResultType: to.Ptr(armhelp.ResultTypeCommunity),
	// 								SolutionID: to.Ptr("sampleSolutionId2"),
	// 								Source: to.Ptr("sampleSource"),
	// 								Title: to.Ptr("Cannot RDP VM after SysPrep"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			Sections: []*armhelp.Section{
	// 				{
	// 					Content: to.Ptr("<p>sample content</p>"),
	// 					ReplacementMaps: &armhelp.ReplacementMaps{
	// 					},
	// 					Title: to.Ptr("RBAC Authentication Common Solutions"),
	// 				},
	// 			},
	// 			SolutionID: to.Ptr("sampleSolutionId1"),
	// 			Title: to.Ptr("RBAC Authentication Common Solutions"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2024-03-01-preview/Solution_Update.json
func ExampleSolutionResourcesClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhelp.NewClientFactory("<subscriptionID>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewSolutionResourcesClient().BeginUpdate(ctx, "subscriptions/mySubscription/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp", "SolutionResourceName1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhelp.SolutionResourcesClientUpdateResponse{
	// 	SolutionResource: &armhelp.SolutionResource{
	// 		Name: to.Ptr("SolutionResourceName1"),
	// 		Type: to.Ptr("Microsoft.Help/solutions"),
	// 		ID: to.Ptr("/subscriptions/mySubscription/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp/providers/Microsoft.Help/solutions/SolutionResourceName1"),
	// 		Properties: &armhelp.SolutionResourceProperties{
	// 			Content: to.Ptr("<p>sample content</p>"),
	// 			ProvisioningState: to.Ptr(armhelp.SolutionProvisioningStateSucceeded),
	// 			ReplacementMaps: &armhelp.ReplacementMaps{
	// 				Diagnostics: []*armhelp.SolutionsDiagnostic{
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 							{
	// 								ID: to.Ptr("InsightArticleId"),
	// 								ImportanceLevel: to.Ptr(armhelp.ImportanceLevelCritical),
	// 								Results: to.Ptr("Article Content"),
	// 								Title: to.Ptr("An example title for an Insight"),
	// 							},
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						SolutionID: to.Ptr("sampleSolutionId1"),
	// 						Status: to.Ptr(armhelp.StatusSucceeded),
	// 						StatusDetails: to.Ptr(""),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId2"),
	// 						Status: to.Ptr(armhelp.StatusFailed),
	// 						StatusDetails: to.Ptr(""),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId3"),
	// 						Status: to.Ptr(armhelp.StatusFailed),
	// 						StatusDetails: to.Ptr("Timeout text authored in Solution article "),
	// 					},
	// 					{
	// 						Insights: []*armhelp.Insight{
	// 						},
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						RequiredParameters: []*string{
	// 							to.Ptr("parameter1"),
	// 							to.Ptr("parameter2"),
	// 						},
	// 						SolutionID: to.Ptr("sampleSolutionId4"),
	// 						Status: to.Ptr(armhelp.StatusFailed),
	// 						StatusDetails: to.Ptr("Sample status details"),
	// 					},
	// 				},
	// 				MetricsBasedCharts: []*armhelp.MetricsBasedChart{
	// 					{
	// 						Name: to.Ptr("CPU_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("CPU Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("memory_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("Memory Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("io_consumption_percent"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("IOPS Usage in the last one day"),
	// 					},
	// 					{
	// 						Name: to.Ptr("active_connections"),
	// 						AggregationType: to.Ptr(armhelp.AggregationTypeMax),
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						TimeSpanDuration: to.Ptr("1d"),
	// 						Title: to.Ptr("Active Connections in the last one day"),
	// 					},
	// 				},
	// 				VideoGroups: []*armhelp.VideoGroup{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						Videos: []*armhelp.VideoGroupVideo{
	// 							{
	// 								Src: to.Ptr("sampleLink"),
	// 								Title: to.Ptr("widthtest"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 				Videos: []*armhelp.Video{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						Src: to.Ptr("sampleLink"),
	// 						Title: to.Ptr("CI - CD with Azure DevOps"),
	// 					},
	// 				},
	// 				WebResults: []*armhelp.WebResult{
	// 					{
	// 						ReplacementKey: to.Ptr("<!--12345678-BBBb-cCCCC-0000-123456789012-->"),
	// 						SearchResults: []*armhelp.SearchResult{
	// 							{
	// 								Confidence: to.Ptr(armhelp.ConfidenceHigh),
	// 								Content: to.Ptr("I sysprep a VM and now I cannot connect to it via <b>RDP</b>"),
	// 								Link: to.Ptr("sampleLink"),
	// 								Rank: to.Ptr[int32](1),
	// 								ResultType: to.Ptr(armhelp.ResultTypeCommunity),
	// 								SolutionID: to.Ptr("sampleSolutionId"),
	// 								Source: to.Ptr("sampleSource"),
	// 								Title: to.Ptr("Cannot RDP VM after SysPrep"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			Sections: []*armhelp.Section{
	// 				{
	// 					Content: to.Ptr("<p>sample content</p>"),
	// 					ReplacementMaps: &armhelp.ReplacementMaps{
	// 					},
	// 					Title: to.Ptr("RBAC Authentication Common Solutions"),
	// 				},
	// 			},
	// 			SolutionID: to.Ptr("sampleSolutionId"),
	// 			Title: to.Ptr("RBAC Authentication Common Solutions"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2024-03-01-preview/Solution_WarmUp.json
func ExampleSolutionResourcesClient_WarmUp() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhelp.NewClientFactory("<subscriptionID>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewSolutionResourcesClient().WarmUp(ctx, "subscriptions/mySubscription/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp", "SolutionResourceName1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}
