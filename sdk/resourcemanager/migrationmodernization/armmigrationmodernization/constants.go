//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationmodernization

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationmodernization/armmigrationmodernization"
	moduleVersion = "v0.1.0"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// AutomationArtifactStatus - Gets or sets the status of automation artifacts.
type AutomationArtifactStatus string

const (
	AutomationArtifactStatusGenerated    AutomationArtifactStatus = "Generated"
	AutomationArtifactStatusNotGenerated AutomationArtifactStatus = "NotGenerated"
)

// PossibleAutomationArtifactStatusValues returns the possible values for the AutomationArtifactStatus const type.
func PossibleAutomationArtifactStatusValues() []AutomationArtifactStatus {
	return []AutomationArtifactStatus{
		AutomationArtifactStatusGenerated,
		AutomationArtifactStatusNotGenerated,
	}
}

// ClientFacingMigrateStatus - Gets or sets the migrate state.
type ClientFacingMigrateStatus string

const (
	ClientFacingMigrateStatusFailed                       ClientFacingMigrateStatus = "Failed"
	ClientFacingMigrateStatusImageBuildFailed             ClientFacingMigrateStatus = "ImageBuildFailed"
	ClientFacingMigrateStatusImageBuildInProgress         ClientFacingMigrateStatus = "ImageBuildInProgress"
	ClientFacingMigrateStatusImageBuildPending            ClientFacingMigrateStatus = "ImageBuildPending"
	ClientFacingMigrateStatusMigrated                     ClientFacingMigrateStatus = "Migrated"
	ClientFacingMigrateStatusMigrating                    ClientFacingMigrateStatus = "Migrating"
	ClientFacingMigrateStatusNone                         ClientFacingMigrateStatus = "None"
	ClientFacingMigrateStatusReadyToMigrate               ClientFacingMigrateStatus = "ReadyToMigrate"
	ClientFacingMigrateStatusReadyToTestMigrate           ClientFacingMigrateStatus = "ReadyToTestMigrate"
	ClientFacingMigrateStatusTestMigrateCleanupInProgress ClientFacingMigrateStatus = "TestMigrateCleanupInProgress"
	ClientFacingMigrateStatusTestMigrated                 ClientFacingMigrateStatus = "TestMigrated"
	ClientFacingMigrateStatusTestMigrating                ClientFacingMigrateStatus = "TestMigrating"
)

// PossibleClientFacingMigrateStatusValues returns the possible values for the ClientFacingMigrateStatus const type.
func PossibleClientFacingMigrateStatusValues() []ClientFacingMigrateStatus {
	return []ClientFacingMigrateStatus{
		ClientFacingMigrateStatusFailed,
		ClientFacingMigrateStatusImageBuildFailed,
		ClientFacingMigrateStatusImageBuildInProgress,
		ClientFacingMigrateStatusImageBuildPending,
		ClientFacingMigrateStatusMigrated,
		ClientFacingMigrateStatusMigrating,
		ClientFacingMigrateStatusNone,
		ClientFacingMigrateStatusReadyToMigrate,
		ClientFacingMigrateStatusReadyToTestMigrate,
		ClientFacingMigrateStatusTestMigrateCleanupInProgress,
		ClientFacingMigrateStatusTestMigrated,
		ClientFacingMigrateStatusTestMigrating,
	}
}

// ClientFacingReplicationStatus - Gets or sets the replication state of the workload instance.
type ClientFacingReplicationStatus string

const (
	ClientFacingReplicationStatusCompleted   ClientFacingReplicationStatus = "Completed"
	ClientFacingReplicationStatusFailed      ClientFacingReplicationStatus = "Failed"
	ClientFacingReplicationStatusInitialSync ClientFacingReplicationStatus = "InitialSync"
	ClientFacingReplicationStatusNone        ClientFacingReplicationStatus = "None"
	ClientFacingReplicationStatusScheduled   ClientFacingReplicationStatus = "Scheduled"
)

// PossibleClientFacingReplicationStatusValues returns the possible values for the ClientFacingReplicationStatus const type.
func PossibleClientFacingReplicationStatusValues() []ClientFacingReplicationStatus {
	return []ClientFacingReplicationStatus{
		ClientFacingReplicationStatusCompleted,
		ClientFacingReplicationStatusFailed,
		ClientFacingReplicationStatusInitialSync,
		ClientFacingReplicationStatusNone,
		ClientFacingReplicationStatusScheduled,
	}
}

// ClientFacingTestMigrateStatus - Gets or sets the test migrate state.
type ClientFacingTestMigrateStatus string

const (
	ClientFacingTestMigrateStatusCleanedUp               ClientFacingTestMigrateStatus = "CleanedUp"
	ClientFacingTestMigrateStatusCleanupInProgress       ClientFacingTestMigrateStatus = "CleanupInProgress"
	ClientFacingTestMigrateStatusFailed                  ClientFacingTestMigrateStatus = "Failed"
	ClientFacingTestMigrateStatusImageBuildFailed        ClientFacingTestMigrateStatus = "ImageBuildFailed"
	ClientFacingTestMigrateStatusImageBuildInProgress    ClientFacingTestMigrateStatus = "ImageBuildInProgress"
	ClientFacingTestMigrateStatusImageBuildPending       ClientFacingTestMigrateStatus = "ImageBuildPending"
	ClientFacingTestMigrateStatusNone                    ClientFacingTestMigrateStatus = "None"
	ClientFacingTestMigrateStatusReadyToTestMigrate      ClientFacingTestMigrateStatus = "ReadyToTestMigrate"
	ClientFacingTestMigrateStatusTestMigrated            ClientFacingTestMigrateStatus = "TestMigrated"
	ClientFacingTestMigrateStatusTestMigrationInProgress ClientFacingTestMigrateStatus = "TestMigrationInProgress"
)

// PossibleClientFacingTestMigrateStatusValues returns the possible values for the ClientFacingTestMigrateStatus const type.
func PossibleClientFacingTestMigrateStatusValues() []ClientFacingTestMigrateStatus {
	return []ClientFacingTestMigrateStatus{
		ClientFacingTestMigrateStatusCleanedUp,
		ClientFacingTestMigrateStatusCleanupInProgress,
		ClientFacingTestMigrateStatusFailed,
		ClientFacingTestMigrateStatusImageBuildFailed,
		ClientFacingTestMigrateStatusImageBuildInProgress,
		ClientFacingTestMigrateStatusImageBuildPending,
		ClientFacingTestMigrateStatusNone,
		ClientFacingTestMigrateStatusReadyToTestMigrate,
		ClientFacingTestMigrateStatusTestMigrated,
		ClientFacingTestMigrateStatusTestMigrationInProgress,
	}
}

// ConfigurationType - Gets or sets the configuration type.
type ConfigurationType string

const (
	ConfigurationTypeApacheTomcatContextResource ConfigurationType = "ApacheTomcatContextResource"
	ConfigurationTypeIISAuthentication           ConfigurationType = "IISAuthentication"
	ConfigurationTypeIISConnectionString         ConfigurationType = "IISConnectionString"
)

// PossibleConfigurationTypeValues returns the possible values for the ConfigurationType const type.
func PossibleConfigurationTypeValues() []ConfigurationType {
	return []ConfigurationType{
		ConfigurationTypeApacheTomcatContextResource,
		ConfigurationTypeIISAuthentication,
		ConfigurationTypeIISConnectionString,
	}
}

// GmsaConfigurationState - Gets or sets the current state of GMSA configuration.
type GmsaConfigurationState string

const (
	GmsaConfigurationStateCompleted     GmsaConfigurationState = "Completed"
	GmsaConfigurationStateFailed        GmsaConfigurationState = "Failed"
	GmsaConfigurationStateInProgress    GmsaConfigurationState = "InProgress"
	GmsaConfigurationStateNotApplicable GmsaConfigurationState = "NotApplicable"
	GmsaConfigurationStatePending       GmsaConfigurationState = "Pending"
)

// PossibleGmsaConfigurationStateValues returns the possible values for the GmsaConfigurationState const type.
func PossibleGmsaConfigurationStateValues() []GmsaConfigurationState {
	return []GmsaConfigurationState{
		GmsaConfigurationStateCompleted,
		GmsaConfigurationStateFailed,
		GmsaConfigurationStateInProgress,
		GmsaConfigurationStateNotApplicable,
		GmsaConfigurationStatePending,
	}
}

// HealthStatus - Gets or sets the replication health of the workload instance.
type HealthStatus string

const (
	HealthStatusCritical HealthStatus = "Critical"
	HealthStatusNormal   HealthStatus = "Normal"
	HealthStatusWarning  HealthStatus = "Warning"
)

// PossibleHealthStatusValues returns the possible values for the HealthStatus const type.
func PossibleHealthStatusValues() []HealthStatus {
	return []HealthStatus{
		HealthStatusCritical,
		HealthStatusNormal,
		HealthStatusWarning,
	}
}

// LoadBalancerType - Gets or sets the load balancer type.
type LoadBalancerType string

const (
	LoadBalancerTypePrivate LoadBalancerType = "Private"
	LoadBalancerTypePublic  LoadBalancerType = "Public"
)

// PossibleLoadBalancerTypeValues returns the possible values for the LoadBalancerType const type.
func PossibleLoadBalancerTypeValues() []LoadBalancerType {
	return []LoadBalancerType{
		LoadBalancerTypePrivate,
		LoadBalancerTypePublic,
	}
}

type OperatingSystemType string

const (
	OperatingSystemTypeLinux   OperatingSystemType = "Linux"
	OperatingSystemTypeWindows OperatingSystemType = "Windows"
)

// PossibleOperatingSystemTypeValues returns the possible values for the OperatingSystemType const type.
func PossibleOperatingSystemTypeValues() []OperatingSystemType {
	return []OperatingSystemType{
		OperatingSystemTypeLinux,
		OperatingSystemTypeWindows,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// ProvisioningState - Gets or sets the provisioning state of the MigrateAgent.
type ProvisioningState string

const (
	ProvisioningStateCanceled  ProvisioningState = "Canceled"
	ProvisioningStateCreating  ProvisioningState = "Creating"
	ProvisioningStateDeleted   ProvisioningState = "Deleted"
	ProvisioningStateDeleting  ProvisioningState = "Deleting"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	ProvisioningStateUpdating  ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCanceled,
		ProvisioningStateCreating,
		ProvisioningStateDeleted,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

type ResourceIdentityTypes string

const (
	ResourceIdentityTypesNone           ResourceIdentityTypes = "None"
	ResourceIdentityTypesSystemAssigned ResourceIdentityTypes = "SystemAssigned"
	ResourceIdentityTypesUserAssigned   ResourceIdentityTypes = "UserAssigned"
)

// PossibleResourceIdentityTypesValues returns the possible values for the ResourceIdentityTypes const type.
func PossibleResourceIdentityTypesValues() []ResourceIdentityTypes {
	return []ResourceIdentityTypes{
		ResourceIdentityTypesNone,
		ResourceIdentityTypesSystemAssigned,
		ResourceIdentityTypesUserAssigned,
	}
}

// SecretStoreType - Gets or sets the type of secret store for the certificate.
type SecretStoreType string

const (
	SecretStoreTypeAppServiceAppSettings SecretStoreType = "AppServiceAppSettings"
	SecretStoreTypeKeyVaultSecret        SecretStoreType = "KeyVaultSecret"
	SecretStoreTypeKubeSecret            SecretStoreType = "KubeSecret"
	SecretStoreTypeNone                  SecretStoreType = "None"
)

// PossibleSecretStoreTypeValues returns the possible values for the SecretStoreType const type.
func PossibleSecretStoreTypeValues() []SecretStoreType {
	return []SecretStoreType{
		SecretStoreTypeAppServiceAppSettings,
		SecretStoreTypeKeyVaultSecret,
		SecretStoreTypeKubeSecret,
		SecretStoreTypeNone,
	}
}

// TargetHydrationStorageProviderType - Gets or sets the storage provider type on the target. Applicable when StorageProjectionType
// is not ContainerFileSystem.
type TargetHydrationStorageProviderType string

const (
	TargetHydrationStorageProviderTypeAzureFileShare TargetHydrationStorageProviderType = "AzureFileShare"
)

// PossibleTargetHydrationStorageProviderTypeValues returns the possible values for the TargetHydrationStorageProviderType const type.
func PossibleTargetHydrationStorageProviderTypeValues() []TargetHydrationStorageProviderType {
	return []TargetHydrationStorageProviderType{
		TargetHydrationStorageProviderTypeAzureFileShare,
	}
}

// TargetStorageAccessType - Gets or sets the target storage access type.
type TargetStorageAccessType string

const (
	TargetStorageAccessTypeExclusive TargetStorageAccessType = "Exclusive"
	TargetStorageAccessTypeShared    TargetStorageAccessType = "Shared"
)

// PossibleTargetStorageAccessTypeValues returns the possible values for the TargetStorageAccessType const type.
func PossibleTargetStorageAccessTypeValues() []TargetStorageAccessType {
	return []TargetStorageAccessType{
		TargetStorageAccessTypeExclusive,
		TargetStorageAccessTypeShared,
	}
}

// TargetStorageProjectionType - Gets or sets the target projection type.
type TargetStorageProjectionType string

const (
	TargetStorageProjectionTypeContainerFileSystem TargetStorageProjectionType = "ContainerFileSystem"
	TargetStorageProjectionTypePersistentVolume    TargetStorageProjectionType = "PersistentVolume"
)

// PossibleTargetStorageProjectionTypeValues returns the possible values for the TargetStorageProjectionType const type.
func PossibleTargetStorageProjectionTypeValues() []TargetStorageProjectionType {
	return []TargetStorageProjectionType{
		TargetStorageProjectionTypeContainerFileSystem,
		TargetStorageProjectionTypePersistentVolume,
	}
}

// TaskState - Gets or sets the task state.
type TaskState string

const (
	TaskStateCancelled TaskState = "Cancelled"
	TaskStateFailed    TaskState = "Failed"
	TaskStatePending   TaskState = "Pending"
	TaskStateSkipped   TaskState = "Skipped"
	TaskStateStarted   TaskState = "Started"
	TaskStateSucceeded TaskState = "Succeeded"
)

// PossibleTaskStateValues returns the possible values for the TaskState const type.
func PossibleTaskStateValues() []TaskState {
	return []TaskState{
		TaskStateCancelled,
		TaskStateFailed,
		TaskStatePending,
		TaskStateSkipped,
		TaskStateStarted,
		TaskStateSucceeded,
	}
}

// WorkflowObjectType - Gets or sets the object type.
type WorkflowObjectType string

const (
	WorkflowObjectTypeMigrateAgent          WorkflowObjectType = "MigrateAgent"
	WorkflowObjectTypeModernizeProject      WorkflowObjectType = "ModernizeProject"
	WorkflowObjectTypeReplicationPostAction WorkflowObjectType = "ReplicationPostAction"
	WorkflowObjectTypeWorkloadDeployment    WorkflowObjectType = "WorkloadDeployment"
	WorkflowObjectTypeWorkloadInstance      WorkflowObjectType = "WorkloadInstance"
)

// PossibleWorkflowObjectTypeValues returns the possible values for the WorkflowObjectType const type.
func PossibleWorkflowObjectTypeValues() []WorkflowObjectType {
	return []WorkflowObjectType{
		WorkflowObjectTypeMigrateAgent,
		WorkflowObjectTypeModernizeProject,
		WorkflowObjectTypeReplicationPostAction,
		WorkflowObjectTypeWorkloadDeployment,
		WorkflowObjectTypeWorkloadInstance,
	}
}

// WorkflowState - Gets or sets the workflow state.
type WorkflowState string

const (
	WorkflowStateCancelled                WorkflowState = "Cancelled"
	WorkflowStateCancelling               WorkflowState = "Cancelling"
	WorkflowStateCompletedWithErrors      WorkflowState = "CompletedWithErrors"
	WorkflowStateCompletedWithInformation WorkflowState = "CompletedWithInformation"
	WorkflowStateCompletedWithWarnings    WorkflowState = "CompletedWithWarnings"
	WorkflowStateFailed                   WorkflowState = "Failed"
	WorkflowStatePending                  WorkflowState = "Pending"
	WorkflowStateStarted                  WorkflowState = "Started"
	WorkflowStateSucceeded                WorkflowState = "Succeeded"
)

// PossibleWorkflowStateValues returns the possible values for the WorkflowState const type.
func PossibleWorkflowStateValues() []WorkflowState {
	return []WorkflowState{
		WorkflowStateCancelled,
		WorkflowStateCancelling,
		WorkflowStateCompletedWithErrors,
		WorkflowStateCompletedWithInformation,
		WorkflowStateCompletedWithWarnings,
		WorkflowStateFailed,
		WorkflowStatePending,
		WorkflowStateStarted,
		WorkflowStateSucceeded,
	}
}

// WorkflowType - Gets or sets the instance type.
type WorkflowType string

const (
	WorkflowTypeBuildContainerImageWorkflow WorkflowType = "BuildContainerImageWorkflow"
	WorkflowTypeCompleteMigrationWorkflow   WorkflowType = "CompleteMigrationWorkflow"
	WorkflowTypeDisableReplicationWorkflow  WorkflowType = "DisableReplicationWorkflow"
	WorkflowTypeEnableReplicationWorkflow   WorkflowType = "EnableReplicationWorkflow"
	WorkflowTypeMigrateWorkflow             WorkflowType = "MigrateWorkflow"
	WorkflowTypeSampleWorkflow              WorkflowType = "SampleWorkflow"
	WorkflowTypeStopReplicationWorkflow     WorkflowType = "StopReplicationWorkflow"
	WorkflowTypeTestMigrateCleanupWorkflow  WorkflowType = "TestMigrateCleanupWorkflow"
	WorkflowTypeTestMigrateWorkflow         WorkflowType = "TestMigrateWorkflow"
)

// PossibleWorkflowTypeValues returns the possible values for the WorkflowType const type.
func PossibleWorkflowTypeValues() []WorkflowType {
	return []WorkflowType{
		WorkflowTypeBuildContainerImageWorkflow,
		WorkflowTypeCompleteMigrationWorkflow,
		WorkflowTypeDisableReplicationWorkflow,
		WorkflowTypeEnableReplicationWorkflow,
		WorkflowTypeMigrateWorkflow,
		WorkflowTypeSampleWorkflow,
		WorkflowTypeStopReplicationWorkflow,
		WorkflowTypeTestMigrateCleanupWorkflow,
		WorkflowTypeTestMigrateWorkflow,
	}
}

// WorkloadDeploymentTarget - Gets or sets the deployment target service.
type WorkloadDeploymentTarget string

const (
	WorkloadDeploymentTargetAzureAppServiceContainer WorkloadDeploymentTarget = "AzureAppServiceContainer"
	WorkloadDeploymentTargetAzureAppServiceNative    WorkloadDeploymentTarget = "AzureAppServiceNative"
	WorkloadDeploymentTargetAzureKubernetesService   WorkloadDeploymentTarget = "AzureKubernetesService"
)

// PossibleWorkloadDeploymentTargetValues returns the possible values for the WorkloadDeploymentTarget const type.
func PossibleWorkloadDeploymentTargetValues() []WorkloadDeploymentTarget {
	return []WorkloadDeploymentTarget{
		WorkloadDeploymentTargetAzureAppServiceContainer,
		WorkloadDeploymentTargetAzureAppServiceNative,
		WorkloadDeploymentTargetAzureKubernetesService,
	}
}

// WorkloadDeploymentType - Gets or sets the instance type.
type WorkloadDeploymentType string

const (
	WorkloadDeploymentTypeApacheTomcatAKSWorkloadDeployment WorkloadDeploymentType = "ApacheTomcatAKSWorkloadDeployment"
	WorkloadDeploymentTypeIISAKSWorkloadDeployment          WorkloadDeploymentType = "IISAKSWorkloadDeployment"
)

// PossibleWorkloadDeploymentTypeValues returns the possible values for the WorkloadDeploymentType const type.
func PossibleWorkloadDeploymentTypeValues() []WorkloadDeploymentType {
	return []WorkloadDeploymentType{
		WorkloadDeploymentTypeApacheTomcatAKSWorkloadDeployment,
		WorkloadDeploymentTypeIISAKSWorkloadDeployment,
	}
}

type WorkloadScenario string

const (
	WorkloadScenarioBuildContainerImage WorkloadScenario = "BuildContainerImage"
	WorkloadScenarioCompleteMigration   WorkloadScenario = "CompleteMigration"
	WorkloadScenarioDisableReplication  WorkloadScenario = "DisableReplication"
	WorkloadScenarioEnableReplication   WorkloadScenario = "EnableReplication"
	WorkloadScenarioMigrate             WorkloadScenario = "Migrate"
	WorkloadScenarioTestMigrate         WorkloadScenario = "TestMigrate"
	WorkloadScenarioTestMigrateCleanup  WorkloadScenario = "TestMigrateCleanup"
	WorkloadScenarioUpdateProperties    WorkloadScenario = "UpdateProperties"
)

// PossibleWorkloadScenarioValues returns the possible values for the WorkloadScenario const type.
func PossibleWorkloadScenarioValues() []WorkloadScenario {
	return []WorkloadScenario{
		WorkloadScenarioBuildContainerImage,
		WorkloadScenarioCompleteMigration,
		WorkloadScenarioDisableReplication,
		WorkloadScenarioEnableReplication,
		WorkloadScenarioMigrate,
		WorkloadScenarioTestMigrate,
		WorkloadScenarioTestMigrateCleanup,
		WorkloadScenarioUpdateProperties,
	}
}

// WorkloadStatus - Gets or sets the workload deployment status.
type WorkloadStatus string

const (
	WorkloadStatusCleanUpInProgress    WorkloadStatus = "CleanUpInProgress"
	WorkloadStatusCleanUpPending       WorkloadStatus = "CleanUpPending"
	WorkloadStatusImageBuildFailed     WorkloadStatus = "ImageBuildFailed"
	WorkloadStatusImageBuildInProgress WorkloadStatus = "ImageBuildInProgress"
	WorkloadStatusImageBuildPending    WorkloadStatus = "ImageBuildPending"
	WorkloadStatusInitialReplication   WorkloadStatus = "InitialReplication"
	WorkloadStatusMigrated             WorkloadStatus = "Migrated"
	WorkloadStatusMigrating            WorkloadStatus = "Migrating"
	WorkloadStatusMigrationFailed      WorkloadStatus = "MigrationFailed"
	WorkloadStatusNone                 WorkloadStatus = "None"
	WorkloadStatusReadyToMigrate       WorkloadStatus = "ReadyToMigrate"
	WorkloadStatusReplicationFailed    WorkloadStatus = "ReplicationFailed"
	WorkloadStatusTestMigrating        WorkloadStatus = "TestMigrating"
)

// PossibleWorkloadStatusValues returns the possible values for the WorkloadStatus const type.
func PossibleWorkloadStatusValues() []WorkloadStatus {
	return []WorkloadStatus{
		WorkloadStatusCleanUpInProgress,
		WorkloadStatusCleanUpPending,
		WorkloadStatusImageBuildFailed,
		WorkloadStatusImageBuildInProgress,
		WorkloadStatusImageBuildPending,
		WorkloadStatusInitialReplication,
		WorkloadStatusMigrated,
		WorkloadStatusMigrating,
		WorkloadStatusMigrationFailed,
		WorkloadStatusNone,
		WorkloadStatusReadyToMigrate,
		WorkloadStatusReplicationFailed,
		WorkloadStatusTestMigrating,
	}
}

// WorkloadType - Gets or sets the instance type.
type WorkloadType string

const (
	WorkloadTypeApacheTomcatWorkload WorkloadType = "ApacheTomcatWorkload"
	WorkloadTypeIISWorkload          WorkloadType = "IISWorkload"
)

// PossibleWorkloadTypeValues returns the possible values for the WorkloadType const type.
func PossibleWorkloadTypeValues() []WorkloadType {
	return []WorkloadType{
		WorkloadTypeApacheTomcatWorkload,
		WorkloadTypeIISWorkload,
	}
}
