//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armfrontdoor

const (
	moduleName    = "armfrontdoor"
	moduleVersion = "v2.0.0"
)

// ActionType - Defines the action to take on rule match.
type ActionType string

const (
	ActionTypeAllow    ActionType = "Allow"
	ActionTypeBlock    ActionType = "Block"
	ActionTypeLog      ActionType = "Log"
	ActionTypeRedirect ActionType = "Redirect"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeAllow,
		ActionTypeBlock,
		ActionTypeLog,
		ActionTypeRedirect,
	}
}

// CustomRuleEnabledState - Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
type CustomRuleEnabledState string

const (
	CustomRuleEnabledStateDisabled CustomRuleEnabledState = "Disabled"
	CustomRuleEnabledStateEnabled  CustomRuleEnabledState = "Enabled"
)

// PossibleCustomRuleEnabledStateValues returns the possible values for the CustomRuleEnabledState const type.
func PossibleCustomRuleEnabledStateValues() []CustomRuleEnabledState {
	return []CustomRuleEnabledState{
		CustomRuleEnabledStateDisabled,
		CustomRuleEnabledStateEnabled,
	}
}

// ManagedRuleEnabledState - Describes if the managed rule is in enabled or disabled state.
type ManagedRuleEnabledState string

const (
	ManagedRuleEnabledStateDisabled ManagedRuleEnabledState = "Disabled"
	ManagedRuleEnabledStateEnabled  ManagedRuleEnabledState = "Enabled"
)

// PossibleManagedRuleEnabledStateValues returns the possible values for the ManagedRuleEnabledState const type.
func PossibleManagedRuleEnabledStateValues() []ManagedRuleEnabledState {
	return []ManagedRuleEnabledState{
		ManagedRuleEnabledStateDisabled,
		ManagedRuleEnabledStateEnabled,
	}
}

// ManagedRuleExclusionMatchVariable - The variable type to be excluded.
type ManagedRuleExclusionMatchVariable string

const (
	ManagedRuleExclusionMatchVariableQueryStringArgNames     ManagedRuleExclusionMatchVariable = "QueryStringArgNames"
	ManagedRuleExclusionMatchVariableRequestBodyJSONArgNames ManagedRuleExclusionMatchVariable = "RequestBodyJsonArgNames"
	ManagedRuleExclusionMatchVariableRequestBodyPostArgNames ManagedRuleExclusionMatchVariable = "RequestBodyPostArgNames"
	ManagedRuleExclusionMatchVariableRequestCookieNames      ManagedRuleExclusionMatchVariable = "RequestCookieNames"
	ManagedRuleExclusionMatchVariableRequestHeaderNames      ManagedRuleExclusionMatchVariable = "RequestHeaderNames"
)

// PossibleManagedRuleExclusionMatchVariableValues returns the possible values for the ManagedRuleExclusionMatchVariable const type.
func PossibleManagedRuleExclusionMatchVariableValues() []ManagedRuleExclusionMatchVariable {
	return []ManagedRuleExclusionMatchVariable{
		ManagedRuleExclusionMatchVariableQueryStringArgNames,
		ManagedRuleExclusionMatchVariableRequestBodyJSONArgNames,
		ManagedRuleExclusionMatchVariableRequestBodyPostArgNames,
		ManagedRuleExclusionMatchVariableRequestCookieNames,
		ManagedRuleExclusionMatchVariableRequestHeaderNames,
	}
}

// ManagedRuleExclusionSelectorMatchOperator - Comparison operator to apply to the selector when specifying which elements
// in the collection this exclusion applies to.
type ManagedRuleExclusionSelectorMatchOperator string

const (
	ManagedRuleExclusionSelectorMatchOperatorContains   ManagedRuleExclusionSelectorMatchOperator = "Contains"
	ManagedRuleExclusionSelectorMatchOperatorEndsWith   ManagedRuleExclusionSelectorMatchOperator = "EndsWith"
	ManagedRuleExclusionSelectorMatchOperatorEquals     ManagedRuleExclusionSelectorMatchOperator = "Equals"
	ManagedRuleExclusionSelectorMatchOperatorEqualsAny  ManagedRuleExclusionSelectorMatchOperator = "EqualsAny"
	ManagedRuleExclusionSelectorMatchOperatorStartsWith ManagedRuleExclusionSelectorMatchOperator = "StartsWith"
)

// PossibleManagedRuleExclusionSelectorMatchOperatorValues returns the possible values for the ManagedRuleExclusionSelectorMatchOperator const type.
func PossibleManagedRuleExclusionSelectorMatchOperatorValues() []ManagedRuleExclusionSelectorMatchOperator {
	return []ManagedRuleExclusionSelectorMatchOperator{
		ManagedRuleExclusionSelectorMatchOperatorContains,
		ManagedRuleExclusionSelectorMatchOperatorEndsWith,
		ManagedRuleExclusionSelectorMatchOperatorEquals,
		ManagedRuleExclusionSelectorMatchOperatorEqualsAny,
		ManagedRuleExclusionSelectorMatchOperatorStartsWith,
	}
}

// ManagedRuleSetActionType - Defines the action to take when a managed rule set score threshold is met.
type ManagedRuleSetActionType string

const (
	ManagedRuleSetActionTypeBlock    ManagedRuleSetActionType = "Block"
	ManagedRuleSetActionTypeLog      ManagedRuleSetActionType = "Log"
	ManagedRuleSetActionTypeRedirect ManagedRuleSetActionType = "Redirect"
)

// PossibleManagedRuleSetActionTypeValues returns the possible values for the ManagedRuleSetActionType const type.
func PossibleManagedRuleSetActionTypeValues() []ManagedRuleSetActionType {
	return []ManagedRuleSetActionType{
		ManagedRuleSetActionTypeBlock,
		ManagedRuleSetActionTypeLog,
		ManagedRuleSetActionTypeRedirect,
	}
}

// MatchVariable - Request variable to compare with.
type MatchVariable string

const (
	MatchVariableCookies       MatchVariable = "Cookies"
	MatchVariablePostArgs      MatchVariable = "PostArgs"
	MatchVariableQueryString   MatchVariable = "QueryString"
	MatchVariableRemoteAddr    MatchVariable = "RemoteAddr"
	MatchVariableRequestBody   MatchVariable = "RequestBody"
	MatchVariableRequestHeader MatchVariable = "RequestHeader"
	MatchVariableRequestMethod MatchVariable = "RequestMethod"
	MatchVariableRequestURI    MatchVariable = "RequestUri"
	MatchVariableSocketAddr    MatchVariable = "SocketAddr"
)

// PossibleMatchVariableValues returns the possible values for the MatchVariable const type.
func PossibleMatchVariableValues() []MatchVariable {
	return []MatchVariable{
		MatchVariableCookies,
		MatchVariablePostArgs,
		MatchVariableQueryString,
		MatchVariableRemoteAddr,
		MatchVariableRequestBody,
		MatchVariableRequestHeader,
		MatchVariableRequestMethod,
		MatchVariableRequestURI,
		MatchVariableSocketAddr,
	}
}

// NetworkOperationStatus - Status of the Azure async operation.
type NetworkOperationStatus string

const (
	NetworkOperationStatusFailed     NetworkOperationStatus = "Failed"
	NetworkOperationStatusInProgress NetworkOperationStatus = "InProgress"
	NetworkOperationStatusSucceeded  NetworkOperationStatus = "Succeeded"
)

// PossibleNetworkOperationStatusValues returns the possible values for the NetworkOperationStatus const type.
func PossibleNetworkOperationStatusValues() []NetworkOperationStatus {
	return []NetworkOperationStatus{
		NetworkOperationStatusFailed,
		NetworkOperationStatusInProgress,
		NetworkOperationStatusSucceeded,
	}
}

// Operator - Comparison type to use for matching with the variable value.
type Operator string

const (
	OperatorAny                Operator = "Any"
	OperatorBeginsWith         Operator = "BeginsWith"
	OperatorContains           Operator = "Contains"
	OperatorEndsWith           Operator = "EndsWith"
	OperatorEqual              Operator = "Equal"
	OperatorGeoMatch           Operator = "GeoMatch"
	OperatorGreaterThan        Operator = "GreaterThan"
	OperatorGreaterThanOrEqual Operator = "GreaterThanOrEqual"
	OperatorIPMatch            Operator = "IPMatch"
	OperatorLessThan           Operator = "LessThan"
	OperatorLessThanOrEqual    Operator = "LessThanOrEqual"
	OperatorRegEx              Operator = "RegEx"
)

// PossibleOperatorValues returns the possible values for the Operator const type.
func PossibleOperatorValues() []Operator {
	return []Operator{
		OperatorAny,
		OperatorBeginsWith,
		OperatorContains,
		OperatorEndsWith,
		OperatorEqual,
		OperatorGeoMatch,
		OperatorGreaterThan,
		OperatorGreaterThanOrEqual,
		OperatorIPMatch,
		OperatorLessThan,
		OperatorLessThanOrEqual,
		OperatorRegEx,
	}
}

// PolicyEnabledState - Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.
type PolicyEnabledState string

const (
	PolicyEnabledStateDisabled PolicyEnabledState = "Disabled"
	PolicyEnabledStateEnabled  PolicyEnabledState = "Enabled"
)

// PossiblePolicyEnabledStateValues returns the possible values for the PolicyEnabledState const type.
func PossiblePolicyEnabledStateValues() []PolicyEnabledState {
	return []PolicyEnabledState{
		PolicyEnabledStateDisabled,
		PolicyEnabledStateEnabled,
	}
}

// PolicyMode - Describes if it is in detection mode or prevention mode at policy level.
type PolicyMode string

const (
	PolicyModeDetection  PolicyMode = "Detection"
	PolicyModePrevention PolicyMode = "Prevention"
)

// PossiblePolicyModeValues returns the possible values for the PolicyMode const type.
func PossiblePolicyModeValues() []PolicyMode {
	return []PolicyMode{
		PolicyModeDetection,
		PolicyModePrevention,
	}
}

// PolicyRequestBodyCheck - Describes if policy managed rules will inspect the request body content.
type PolicyRequestBodyCheck string

const (
	PolicyRequestBodyCheckDisabled PolicyRequestBodyCheck = "Disabled"
	PolicyRequestBodyCheckEnabled  PolicyRequestBodyCheck = "Enabled"
)

// PossiblePolicyRequestBodyCheckValues returns the possible values for the PolicyRequestBodyCheck const type.
func PossiblePolicyRequestBodyCheckValues() []PolicyRequestBodyCheck {
	return []PolicyRequestBodyCheck{
		PolicyRequestBodyCheckDisabled,
		PolicyRequestBodyCheckEnabled,
	}
}

// PolicyResourceState - Resource status of the policy.
type PolicyResourceState string

const (
	PolicyResourceStateCreating  PolicyResourceState = "Creating"
	PolicyResourceStateDeleting  PolicyResourceState = "Deleting"
	PolicyResourceStateDisabled  PolicyResourceState = "Disabled"
	PolicyResourceStateDisabling PolicyResourceState = "Disabling"
	PolicyResourceStateEnabled   PolicyResourceState = "Enabled"
	PolicyResourceStateEnabling  PolicyResourceState = "Enabling"
)

// PossiblePolicyResourceStateValues returns the possible values for the PolicyResourceState const type.
func PossiblePolicyResourceStateValues() []PolicyResourceState {
	return []PolicyResourceState{
		PolicyResourceStateCreating,
		PolicyResourceStateDeleting,
		PolicyResourceStateDisabled,
		PolicyResourceStateDisabling,
		PolicyResourceStateEnabled,
		PolicyResourceStateEnabling,
	}
}

// RuleType - Describes type of rule.
type RuleType string

const (
	RuleTypeMatchRule     RuleType = "MatchRule"
	RuleTypeRateLimitRule RuleType = "RateLimitRule"
)

// PossibleRuleTypeValues returns the possible values for the RuleType const type.
func PossibleRuleTypeValues() []RuleType {
	return []RuleType{
		RuleTypeMatchRule,
		RuleTypeRateLimitRule,
	}
}

// SKUName - Name of the pricing tier.
type SKUName string

const (
	SKUNameClassicAzureFrontDoor  SKUName = "Classic_AzureFrontDoor"
	SKUNamePremiumAzureFrontDoor  SKUName = "Premium_AzureFrontDoor"
	SKUNameStandardAzureFrontDoor SKUName = "Standard_AzureFrontDoor"
)

// PossibleSKUNameValues returns the possible values for the SKUName const type.
func PossibleSKUNameValues() []SKUName {
	return []SKUName{
		SKUNameClassicAzureFrontDoor,
		SKUNamePremiumAzureFrontDoor,
		SKUNameStandardAzureFrontDoor,
	}
}

// TransformType - Describes what transforms applied before matching.
type TransformType string

const (
	TransformTypeLowercase   TransformType = "Lowercase"
	TransformTypeRemoveNulls TransformType = "RemoveNulls"
	TransformTypeTrim        TransformType = "Trim"
	TransformTypeURLDecode   TransformType = "UrlDecode"
	TransformTypeURLEncode   TransformType = "UrlEncode"
	TransformTypeUppercase   TransformType = "Uppercase"
)

// PossibleTransformTypeValues returns the possible values for the TransformType const type.
func PossibleTransformTypeValues() []TransformType {
	return []TransformType{
		TransformTypeLowercase,
		TransformTypeRemoveNulls,
		TransformTypeTrim,
		TransformTypeURLDecode,
		TransformTypeURLEncode,
		TransformTypeUppercase,
	}
}
