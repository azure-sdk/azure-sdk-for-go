//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmessagingconnectors

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ConnectorOperationsClient contains the methods for the ConnectorOperations group.
// Don't use this type directly, use NewConnectorOperationsClient() instead.
type ConnectorOperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewConnectorOperationsClient creates a new instance of ConnectorOperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewConnectorOperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ConnectorOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ConnectorOperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create an Connector instance for the specified subscription, resource group, and instance name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-20-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the Connector resource.
//   - resource - Resource create parameters.
//   - options - ConnectorOperationsClientCreateOrUpdateOptions contains the optional parameters for the ConnectorOperationsClient.CreateOrUpdate
//     method.
func (client *ConnectorOperationsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, name string, resource ConnectorInstance, options *ConnectorOperationsClientCreateOrUpdateOptions) (ConnectorOperationsClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "ConnectorOperationsClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, name, resource, options)
	if err != nil {
		return ConnectorOperationsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConnectorOperationsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return ConnectorOperationsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ConnectorOperationsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, name string, resource ConnectorInstance, options *ConnectorOperationsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ConnectorOperationsClient) createOrUpdateHandleResponse(resp *http.Response) (ConnectorOperationsClientCreateOrUpdateResponse, error) {
	result := ConnectorOperationsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectorInstance); err != nil {
		return ConnectorOperationsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete an Connector instance for the specified subscription, resource group, and instance name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-20-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the Connector resource.
//   - options - ConnectorOperationsClientDeleteOptions contains the optional parameters for the ConnectorOperationsClient.Delete
//     method.
func (client *ConnectorOperationsClient) Delete(ctx context.Context, resourceGroupName string, name string, options *ConnectorOperationsClientDeleteOptions) (ConnectorOperationsClientDeleteResponse, error) {
	var err error
	const operationName = "ConnectorOperationsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return ConnectorOperationsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConnectorOperationsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ConnectorOperationsClientDeleteResponse{}, err
	}
	return ConnectorOperationsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ConnectorOperationsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, name string, options *ConnectorOperationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets an Connector instance for the specified subscription, resource group, and instance name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-20-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the Connector resource.
//   - options - ConnectorOperationsClientGetOptions contains the optional parameters for the ConnectorOperationsClient.Get method.
func (client *ConnectorOperationsClient) Get(ctx context.Context, resourceGroupName string, name string, options *ConnectorOperationsClientGetOptions) (ConnectorOperationsClientGetResponse, error) {
	var err error
	const operationName = "ConnectorOperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return ConnectorOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConnectorOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ConnectorOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ConnectorOperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, name string, options *ConnectorOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ConnectorOperationsClient) getHandleResponse(resp *http.Response) (ConnectorOperationsClientGetResponse, error) {
	result := ConnectorOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectorInstance); err != nil {
		return ConnectorOperationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List Connector By ResourceGroup and Subscription
//
// Generated from API version 2024-01-20-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - ConnectorOperationsClientListByResourceGroupOptions contains the optional parameters for the ConnectorOperationsClient.NewListByResourceGroupPager
//     method.
func (client *ConnectorOperationsClient) NewListByResourceGroupPager(resourceGroupName string, options *ConnectorOperationsClientListByResourceGroupOptions) *runtime.Pager[ConnectorOperationsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[ConnectorOperationsClientListByResourceGroupResponse]{
		More: func(page ConnectorOperationsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ConnectorOperationsClientListByResourceGroupResponse) (ConnectorOperationsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ConnectorOperationsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return ConnectorOperationsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *ConnectorOperationsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *ConnectorOperationsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *ConnectorOperationsClient) listByResourceGroupHandleResponse(resp *http.Response) (ConnectorOperationsClientListByResourceGroupResponse, error) {
	result := ConnectorOperationsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectorInstanceListResult); err != nil {
		return ConnectorOperationsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List Connector By Subscription
//
// Generated from API version 2024-01-20-preview
//   - options - ConnectorOperationsClientListBySubscriptionOptions contains the optional parameters for the ConnectorOperationsClient.NewListBySubscriptionPager
//     method.
func (client *ConnectorOperationsClient) NewListBySubscriptionPager(options *ConnectorOperationsClientListBySubscriptionOptions) *runtime.Pager[ConnectorOperationsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[ConnectorOperationsClientListBySubscriptionResponse]{
		More: func(page ConnectorOperationsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ConnectorOperationsClientListBySubscriptionResponse) (ConnectorOperationsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ConnectorOperationsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ConnectorOperationsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *ConnectorOperationsClient) listBySubscriptionCreateRequest(ctx context.Context, options *ConnectorOperationsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MessagingConnectors/connectors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *ConnectorOperationsClient) listBySubscriptionHandleResponse(resp *http.Response) (ConnectorOperationsClientListBySubscriptionResponse, error) {
	result := ConnectorOperationsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectorInstanceListResult); err != nil {
		return ConnectorOperationsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Pause - Pause one Connector to paused status
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-20-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the Connector resource.
//   - body - The content of the action request
//   - options - ConnectorOperationsClientPauseOptions contains the optional parameters for the ConnectorOperationsClient.Pause
//     method.
func (client *ConnectorOperationsClient) Pause(ctx context.Context, resourceGroupName string, name string, body any, options *ConnectorOperationsClientPauseOptions) (ConnectorOperationsClientPauseResponse, error) {
	var err error
	const operationName = "ConnectorOperationsClient.Pause"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.pauseCreateRequest(ctx, resourceGroupName, name, body, options)
	if err != nil {
		return ConnectorOperationsClientPauseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConnectorOperationsClientPauseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ConnectorOperationsClientPauseResponse{}, err
	}
	return ConnectorOperationsClientPauseResponse{}, nil
}

// pauseCreateRequest creates the Pause request.
func (client *ConnectorOperationsClient) pauseCreateRequest(ctx context.Context, resourceGroupName string, name string, body any, options *ConnectorOperationsClientPauseOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}/pause"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Resume - Resume one Connector to running status
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-20-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the Connector resource.
//   - body - The content of the action request
//   - options - ConnectorOperationsClientResumeOptions contains the optional parameters for the ConnectorOperationsClient.Resume
//     method.
func (client *ConnectorOperationsClient) Resume(ctx context.Context, resourceGroupName string, name string, body any, options *ConnectorOperationsClientResumeOptions) (ConnectorOperationsClientResumeResponse, error) {
	var err error
	const operationName = "ConnectorOperationsClient.Resume"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.resumeCreateRequest(ctx, resourceGroupName, name, body, options)
	if err != nil {
		return ConnectorOperationsClientResumeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConnectorOperationsClientResumeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ConnectorOperationsClientResumeResponse{}, err
	}
	return ConnectorOperationsClientResumeResponse{}, nil
}

// resumeCreateRequest creates the Resume request.
func (client *ConnectorOperationsClient) resumeCreateRequest(ctx context.Context, resourceGroupName string, name string, body any, options *ConnectorOperationsClientResumeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}/resume"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateTags - Update Tags of Connector
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-20-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the Connector resource.
//   - properties - The resource properties to be updated.
//   - options - ConnectorOperationsClientUpdateTagsOptions contains the optional parameters for the ConnectorOperationsClient.UpdateTags
//     method.
func (client *ConnectorOperationsClient) UpdateTags(ctx context.Context, resourceGroupName string, name string, properties ConnectorInstanceTagsUpdate, options *ConnectorOperationsClientUpdateTagsOptions) (ConnectorOperationsClientUpdateTagsResponse, error) {
	var err error
	const operationName = "ConnectorOperationsClient.UpdateTags"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateTagsCreateRequest(ctx, resourceGroupName, name, properties, options)
	if err != nil {
		return ConnectorOperationsClientUpdateTagsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConnectorOperationsClientUpdateTagsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ConnectorOperationsClientUpdateTagsResponse{}, err
	}
	resp, err := client.updateTagsHandleResponse(httpResp)
	return resp, err
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *ConnectorOperationsClient) updateTagsCreateRequest(ctx context.Context, resourceGroupName string, name string, properties ConnectorInstanceTagsUpdate, options *ConnectorOperationsClientUpdateTagsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-20-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *ConnectorOperationsClient) updateTagsHandleResponse(resp *http.Response) (ConnectorOperationsClientUpdateTagsResponse, error) {
	result := ConnectorOperationsClientUpdateTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectorInstance); err != nil {
		return ConnectorOperationsClientUpdateTagsResponse{}, err
	}
	return result, nil
}
