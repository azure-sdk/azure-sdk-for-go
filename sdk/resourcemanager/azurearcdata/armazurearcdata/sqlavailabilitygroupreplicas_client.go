//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armazurearcdata

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SQLAvailabilityGroupReplicasClient contains the methods for the SQLAvailabilityGroupReplicas group.
// Don't use this type directly, use NewSQLAvailabilityGroupReplicasClient() instead.
type SQLAvailabilityGroupReplicasClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewSQLAvailabilityGroupReplicasClient creates a new instance of SQLAvailabilityGroupReplicasClient with the specified values.
//   - subscriptionID - The ID of the Azure subscription
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSQLAvailabilityGroupReplicasClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SQLAvailabilityGroupReplicasClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &SQLAvailabilityGroupReplicasClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// Create - Creates or replaces an Arc Sql Availability Group Replica.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - sqlAvailabilityGroupReplicaResource - The request body for availability group replica resource.
//   - options - SQLAvailabilityGroupReplicasClientCreateOptions contains the optional parameters for the SQLAvailabilityGroupReplicasClient.Create
//     method.
func (client *SQLAvailabilityGroupReplicasClient) Create(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlAvailabilityGroupName string, sqlAvailabilityGroupReplicaResource SQLAvailabilityGroupReplicaResource, options *SQLAvailabilityGroupReplicasClientCreateOptions) (SQLAvailabilityGroupReplicasClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, sqlAvailabilityGroupReplicaResource, options)
	if err != nil {
		return SQLAvailabilityGroupReplicasClientCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupReplicasClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SQLAvailabilityGroupReplicasClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *SQLAvailabilityGroupReplicasClient) createCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlAvailabilityGroupName string, sqlAvailabilityGroupReplicaResource SQLAvailabilityGroupReplicaResource, options *SQLAvailabilityGroupReplicasClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sqlAvailabilityGroupReplicaResource)
}

// createHandleResponse handles the Create response.
func (client *SQLAvailabilityGroupReplicasClient) createHandleResponse(resp *http.Response) (SQLAvailabilityGroupReplicasClientCreateResponse, error) {
	result := SQLAvailabilityGroupReplicasClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroupReplicaResource); err != nil {
		return SQLAvailabilityGroupReplicasClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes an Arc Sql availability group replica resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - options - SQLAvailabilityGroupReplicasClientDeleteOptions contains the optional parameters for the SQLAvailabilityGroupReplicasClient.Delete
//     method.
func (client *SQLAvailabilityGroupReplicasClient) Delete(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupReplicasClientDeleteOptions) (SQLAvailabilityGroupReplicasClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, options)
	if err != nil {
		return SQLAvailabilityGroupReplicasClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupReplicasClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SQLAvailabilityGroupReplicasClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return SQLAvailabilityGroupReplicasClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SQLAvailabilityGroupReplicasClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupReplicasClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieves an Arc Sql availability group replica.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - options - SQLAvailabilityGroupReplicasClientGetOptions contains the optional parameters for the SQLAvailabilityGroupReplicasClient.Get
//     method.
func (client *SQLAvailabilityGroupReplicasClient) Get(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupReplicasClientGetOptions) (SQLAvailabilityGroupReplicasClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, options)
	if err != nil {
		return SQLAvailabilityGroupReplicasClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupReplicasClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SQLAvailabilityGroupReplicasClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SQLAvailabilityGroupReplicasClient) getCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupReplicasClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SQLAvailabilityGroupReplicasClient) getHandleResponse(resp *http.Response) (SQLAvailabilityGroupReplicasClientGetResponse, error) {
	result := SQLAvailabilityGroupReplicasClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroupReplicaResource); err != nil {
		return SQLAvailabilityGroupReplicasClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List the Availability Group Replica associated with the given Arc Sql AG.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - options - SQLAvailabilityGroupReplicasClientListOptions contains the optional parameters for the SQLAvailabilityGroupReplicasClient.NewListPager
//     method.
func (client *SQLAvailabilityGroupReplicasClient) NewListPager(resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupReplicasClientListOptions) *runtime.Pager[SQLAvailabilityGroupReplicasClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SQLAvailabilityGroupReplicasClientListResponse]{
		More: func(page SQLAvailabilityGroupReplicasClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SQLAvailabilityGroupReplicasClientListResponse) (SQLAvailabilityGroupReplicasClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SQLAvailabilityGroupReplicasClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return SQLAvailabilityGroupReplicasClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SQLAvailabilityGroupReplicasClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *SQLAvailabilityGroupReplicasClient) listCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupReplicasClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SQLAvailabilityGroupReplicasClient) listHandleResponse(resp *http.Response) (SQLAvailabilityGroupReplicasClientListResponse, error) {
	result := SQLAvailabilityGroupReplicasClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ArcSQLAvailabilityGroupReplicaListResult); err != nil {
		return SQLAvailabilityGroupReplicasClientListResponse{}, err
	}
	return result, nil
}

// Update - Updates an existing Availability Group Replica.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - sqlAvailabilityGroupReplicaUpdate - The requested availability group replica resource state.
//   - options - SQLAvailabilityGroupReplicasClientUpdateOptions contains the optional parameters for the SQLAvailabilityGroupReplicasClient.Update
//     method.
func (client *SQLAvailabilityGroupReplicasClient) Update(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlAvailabilityGroupName string, sqlAvailabilityGroupReplicaUpdate SQLAvailabilityGroupReplicaUpdate, options *SQLAvailabilityGroupReplicasClientUpdateOptions) (SQLAvailabilityGroupReplicasClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, sqlAvailabilityGroupReplicaUpdate, options)
	if err != nil {
		return SQLAvailabilityGroupReplicasClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupReplicasClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SQLAvailabilityGroupReplicasClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *SQLAvailabilityGroupReplicasClient) updateCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlAvailabilityGroupName string, sqlAvailabilityGroupReplicaUpdate SQLAvailabilityGroupReplicaUpdate, options *SQLAvailabilityGroupReplicasClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sqlAvailabilityGroupReplicaUpdate)
}

// updateHandleResponse handles the Update response.
func (client *SQLAvailabilityGroupReplicasClient) updateHandleResponse(resp *http.Response) (SQLAvailabilityGroupReplicasClientUpdateResponse, error) {
	result := SQLAvailabilityGroupReplicasClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroupReplicaResource); err != nil {
		return SQLAvailabilityGroupReplicasClientUpdateResponse{}, err
	}
	return result, nil
}
