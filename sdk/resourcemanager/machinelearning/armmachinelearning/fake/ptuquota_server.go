// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearning/armmachinelearning/v5"
	"net/http"
	"net/url"
	"regexp"
)

// PTUQuotaServer is a fake server for instances of the armmachinelearning.PTUQuotaClient type.
type PTUQuotaServer struct {
	// GetAvailable is the fake for method PTUQuotaClient.GetAvailable
	// HTTP status codes to indicate success: http.StatusOK
	GetAvailable func(ctx context.Context, location string, options *armmachinelearning.PTUQuotaClientGetAvailableOptions) (resp azfake.Responder[armmachinelearning.PTUQuotaClientGetAvailableResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method PTUQuotaClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(location string, options *armmachinelearning.PTUQuotaClientListOptions) (resp azfake.PagerResponder[armmachinelearning.PTUQuotaClientListResponse])

	// NewListAvailablePager is the fake for method PTUQuotaClient.NewListAvailablePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAvailablePager func(location string, options *armmachinelearning.PTUQuotaClientListAvailableOptions) (resp azfake.PagerResponder[armmachinelearning.PTUQuotaClientListAvailableResponse])
}

// NewPTUQuotaServerTransport creates a new instance of PTUQuotaServerTransport with the provided implementation.
// The returned PTUQuotaServerTransport instance is connected to an instance of armmachinelearning.PTUQuotaClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPTUQuotaServerTransport(srv *PTUQuotaServer) *PTUQuotaServerTransport {
	return &PTUQuotaServerTransport{
		srv:                   srv,
		newListPager:          newTracker[azfake.PagerResponder[armmachinelearning.PTUQuotaClientListResponse]](),
		newListAvailablePager: newTracker[azfake.PagerResponder[armmachinelearning.PTUQuotaClientListAvailableResponse]](),
	}
}

// PTUQuotaServerTransport connects instances of armmachinelearning.PTUQuotaClient to instances of PTUQuotaServer.
// Don't use this type directly, use NewPTUQuotaServerTransport instead.
type PTUQuotaServerTransport struct {
	srv                   *PTUQuotaServer
	newListPager          *tracker[azfake.PagerResponder[armmachinelearning.PTUQuotaClientListResponse]]
	newListAvailablePager *tracker[azfake.PagerResponder[armmachinelearning.PTUQuotaClientListAvailableResponse]]
}

// Do implements the policy.Transporter interface for PTUQuotaServerTransport.
func (p *PTUQuotaServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PTUQuotaServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if ptuQuotaServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = ptuQuotaServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PTUQuotaClient.GetAvailable":
				res.resp, res.err = p.dispatchGetAvailable(req)
			case "PTUQuotaClient.NewListPager":
				res.resp, res.err = p.dispatchNewListPager(req)
			case "PTUQuotaClient.NewListAvailablePager":
				res.resp, res.err = p.dispatchNewListAvailablePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PTUQuotaServerTransport) dispatchGetAvailable(req *http.Request) (*http.Response, error) {
	if p.srv.GetAvailable == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAvailable not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availableQuota/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.GetAvailable(req.Context(), locationParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AvailableQuota, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PTUQuotaServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := p.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotaAndUsage`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		skipUnescaped, err := url.QueryUnescape(qp.Get("$skip"))
		if err != nil {
			return nil, err
		}
		skipParam := getOptional(skipUnescaped)
		var options *armmachinelearning.PTUQuotaClientListOptions
		if skipParam != nil {
			options = &armmachinelearning.PTUQuotaClientListOptions{
				Skip: skipParam,
			}
		}
		resp := p.srv.NewListPager(locationParam, options)
		newListPager = &resp
		p.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armmachinelearning.PTUQuotaClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		p.newListPager.remove(req)
	}
	return resp, nil
}

func (p *PTUQuotaServerTransport) dispatchNewListAvailablePager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListAvailablePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAvailablePager not implemented")}
	}
	newListAvailablePager := p.newListAvailablePager.get(req)
	if newListAvailablePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/availableQuota`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		skipUnescaped, err := url.QueryUnescape(qp.Get("$skip"))
		if err != nil {
			return nil, err
		}
		skipParam := getOptional(skipUnescaped)
		var options *armmachinelearning.PTUQuotaClientListAvailableOptions
		if skipParam != nil {
			options = &armmachinelearning.PTUQuotaClientListAvailableOptions{
				Skip: skipParam,
			}
		}
		resp := p.srv.NewListAvailablePager(locationParam, options)
		newListAvailablePager = &resp
		p.newListAvailablePager.add(req, newListAvailablePager)
		server.PagerResponderInjectNextLinks(newListAvailablePager, req, func(page *armmachinelearning.PTUQuotaClientListAvailableResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAvailablePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListAvailablePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAvailablePager) {
		p.newListAvailablePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PTUQuotaServerTransport
var ptuQuotaServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
