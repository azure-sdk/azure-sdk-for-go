//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcostmanagement

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GenerateBenefitUtilizationSummariesReportAsyncClient contains the methods for the GenerateBenefitUtilizationSummariesReportAsync group.
// Don't use this type directly, use NewGenerateBenefitUtilizationSummariesReportAsyncClient() instead.
type GenerateBenefitUtilizationSummariesReportAsyncClient struct {
	host string
	pl   runtime.Pipeline
}

// NewGenerateBenefitUtilizationSummariesReportAsyncClient creates a new instance of GenerateBenefitUtilizationSummariesReportAsyncClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewGenerateBenefitUtilizationSummariesReportAsyncClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*GenerateBenefitUtilizationSummariesReportAsyncClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &GenerateBenefitUtilizationSummariesReportAsyncClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// BeginBillingAccountScope - Triggers generation of a benefit utilization summaries report for the provided billing account.
// This API supports only enrollment accounts.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// billingAccountID - Enrollment ID (Legacy BillingAccount ID)
// benefitKind - Type of benefit the customer wants data for.
// options - GenerateBenefitUtilizationSummariesReportAsyncClientBeginBillingAccountScopeOptions contains the optional parameters
// for the GenerateBenefitUtilizationSummariesReportAsyncClient.BeginBillingAccountScope method.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) BeginBillingAccountScope(ctx context.Context, billingAccountID string, benefitKind string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginBillingAccountScopeOptions) (*runtime.Poller[GenerateBenefitUtilizationSummariesReportAsyncClientBillingAccountScopeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.billingAccountScope(ctx, billingAccountID, benefitKind, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[GenerateBenefitUtilizationSummariesReportAsyncClientBillingAccountScopeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[GenerateBenefitUtilizationSummariesReportAsyncClientBillingAccountScopeResponse](options.ResumeToken, client.pl, nil)
	}
}

// BillingAccountScope - Triggers generation of a benefit utilization summaries report for the provided billing account. This
// API supports only enrollment accounts.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) billingAccountScope(ctx context.Context, billingAccountID string, benefitKind string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginBillingAccountScopeOptions) (*http.Response, error) {
	req, err := client.billingAccountScopeCreateRequest(ctx, billingAccountID, benefitKind, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// billingAccountScopeCreateRequest creates the BillingAccountScope request.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) billingAccountScopeCreateRequest(ctx context.Context, billingAccountID string, benefitKind string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginBillingAccountScopeOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/generateBenefitUtilizationSummariesReport"
	if billingAccountID == "" {
		return nil, errors.New("parameter billingAccountID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountId}", url.PathEscape(billingAccountID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Grain != nil {
		reqQP.Set("grain", *options.Grain)
	}
	reqQP.Set("benefitKind", benefitKind)
	reqQP.Set("api-version", "2022-10-15-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginBillingProfileScope - Triggers generation of a benefit utilization summaries report for the provided billing account
// and billing profile.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// billingAccountID - BillingAccount ID
// billingProfileID - BillingProfile ID
// benefitKind - Type of benefit the customer wants data for.
// options - GenerateBenefitUtilizationSummariesReportAsyncClientBeginBillingProfileScopeOptions contains the optional parameters
// for the GenerateBenefitUtilizationSummariesReportAsyncClient.BeginBillingProfileScope method.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) BeginBillingProfileScope(ctx context.Context, billingAccountID string, billingProfileID string, benefitKind string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginBillingProfileScopeOptions) (*runtime.Poller[GenerateBenefitUtilizationSummariesReportAsyncClientBillingProfileScopeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.billingProfileScope(ctx, billingAccountID, billingProfileID, benefitKind, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[GenerateBenefitUtilizationSummariesReportAsyncClientBillingProfileScopeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[GenerateBenefitUtilizationSummariesReportAsyncClientBillingProfileScopeResponse](options.ResumeToken, client.pl, nil)
	}
}

// BillingProfileScope - Triggers generation of a benefit utilization summaries report for the provided billing account and
// billing profile.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) billingProfileScope(ctx context.Context, billingAccountID string, billingProfileID string, benefitKind string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginBillingProfileScopeOptions) (*http.Response, error) {
	req, err := client.billingProfileScopeCreateRequest(ctx, billingAccountID, billingProfileID, benefitKind, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// billingProfileScopeCreateRequest creates the BillingProfileScope request.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) billingProfileScopeCreateRequest(ctx context.Context, billingAccountID string, billingProfileID string, benefitKind string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginBillingProfileScopeOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/generateBenefitUtilizationSummariesReport"
	if billingAccountID == "" {
		return nil, errors.New("parameter billingAccountID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountId}", url.PathEscape(billingAccountID))
	if billingProfileID == "" {
		return nil, errors.New("parameter billingProfileID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileId}", url.PathEscape(billingProfileID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Grain != nil {
		reqQP.Set("grain", *options.Grain)
	}
	reqQP.Set("benefitKind", benefitKind)
	reqQP.Set("api-version", "2022-10-15-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginReservationOrderScope - Triggers generation of a benefit utilization summaries report for the provided reservation
// order.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// reservationOrderID - Reservation Order Id
// options - GenerateBenefitUtilizationSummariesReportAsyncClientBeginReservationOrderScopeOptions contains the optional parameters
// for the GenerateBenefitUtilizationSummariesReportAsyncClient.BeginReservationOrderScope method.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) BeginReservationOrderScope(ctx context.Context, reservationOrderID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginReservationOrderScopeOptions) (*runtime.Poller[GenerateBenefitUtilizationSummariesReportAsyncClientReservationOrderScopeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.reservationOrderScope(ctx, reservationOrderID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[GenerateBenefitUtilizationSummariesReportAsyncClientReservationOrderScopeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[GenerateBenefitUtilizationSummariesReportAsyncClientReservationOrderScopeResponse](options.ResumeToken, client.pl, nil)
	}
}

// ReservationOrderScope - Triggers generation of a benefit utilization summaries report for the provided reservation order.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) reservationOrderScope(ctx context.Context, reservationOrderID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginReservationOrderScopeOptions) (*http.Response, error) {
	req, err := client.reservationOrderScopeCreateRequest(ctx, reservationOrderID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// reservationOrderScopeCreateRequest creates the ReservationOrderScope request.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) reservationOrderScopeCreateRequest(ctx context.Context, reservationOrderID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginReservationOrderScopeOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.CostManagement/generateBenefitUtilizationSummariesReport"
	if reservationOrderID == "" {
		return nil, errors.New("parameter reservationOrderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reservationOrderId}", url.PathEscape(reservationOrderID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Grain != nil {
		reqQP.Set("grain", *options.Grain)
	}
	reqQP.Set("api-version", "2022-10-15-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginReservationScope - Triggers generation of a benefit utilization summaries report for the provided reservation.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// reservationOrderID - Reservation Order Id
// reservationID - Reservation Id
// options - GenerateBenefitUtilizationSummariesReportAsyncClientBeginReservationScopeOptions contains the optional parameters
// for the GenerateBenefitUtilizationSummariesReportAsyncClient.BeginReservationScope method.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) BeginReservationScope(ctx context.Context, reservationOrderID string, reservationID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginReservationScopeOptions) (*runtime.Poller[GenerateBenefitUtilizationSummariesReportAsyncClientReservationScopeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.reservationScope(ctx, reservationOrderID, reservationID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[GenerateBenefitUtilizationSummariesReportAsyncClientReservationScopeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[GenerateBenefitUtilizationSummariesReportAsyncClientReservationScopeResponse](options.ResumeToken, client.pl, nil)
	}
}

// ReservationScope - Triggers generation of a benefit utilization summaries report for the provided reservation.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) reservationScope(ctx context.Context, reservationOrderID string, reservationID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginReservationScopeOptions) (*http.Response, error) {
	req, err := client.reservationScopeCreateRequest(ctx, reservationOrderID, reservationID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// reservationScopeCreateRequest creates the ReservationScope request.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) reservationScopeCreateRequest(ctx context.Context, reservationOrderID string, reservationID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginReservationScopeOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.CostManagement/generateBenefitUtilizationSummariesReport"
	if reservationOrderID == "" {
		return nil, errors.New("parameter reservationOrderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reservationOrderId}", url.PathEscape(reservationOrderID))
	if reservationID == "" {
		return nil, errors.New("parameter reservationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reservationId}", url.PathEscape(reservationID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Grain != nil {
		reqQP.Set("grain", *options.Grain)
	}
	reqQP.Set("api-version", "2022-10-15-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginSavingsPlanOrderScope - Triggers generation of a benefit utilization summaries report for the provided savings plan
// order.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// savingsPlanOrderID - Savings Plan Order Id
// options - GenerateBenefitUtilizationSummariesReportAsyncClientBeginSavingsPlanOrderScopeOptions contains the optional parameters
// for the GenerateBenefitUtilizationSummariesReportAsyncClient.BeginSavingsPlanOrderScope method.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) BeginSavingsPlanOrderScope(ctx context.Context, savingsPlanOrderID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginSavingsPlanOrderScopeOptions) (*runtime.Poller[GenerateBenefitUtilizationSummariesReportAsyncClientSavingsPlanOrderScopeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.savingsPlanOrderScope(ctx, savingsPlanOrderID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[GenerateBenefitUtilizationSummariesReportAsyncClientSavingsPlanOrderScopeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[GenerateBenefitUtilizationSummariesReportAsyncClientSavingsPlanOrderScopeResponse](options.ResumeToken, client.pl, nil)
	}
}

// SavingsPlanOrderScope - Triggers generation of a benefit utilization summaries report for the provided savings plan order.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) savingsPlanOrderScope(ctx context.Context, savingsPlanOrderID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginSavingsPlanOrderScopeOptions) (*http.Response, error) {
	req, err := client.savingsPlanOrderScopeCreateRequest(ctx, savingsPlanOrderID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// savingsPlanOrderScopeCreateRequest creates the SavingsPlanOrderScope request.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) savingsPlanOrderScopeCreateRequest(ctx context.Context, savingsPlanOrderID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginSavingsPlanOrderScopeOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/providers/Microsoft.CostManagement/generateBenefitUtilizationSummariesReport"
	if savingsPlanOrderID == "" {
		return nil, errors.New("parameter savingsPlanOrderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanOrderId}", url.PathEscape(savingsPlanOrderID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Grain != nil {
		reqQP.Set("grain", *options.Grain)
	}
	reqQP.Set("api-version", "2022-10-15-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginSavingsPlanScope - Triggers generation of a benefit utilization summaries report for the provided savings plan.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// savingsPlanOrderID - Savings Plan Order Id
// savingsPlanID - Savings Plan Id
// options - GenerateBenefitUtilizationSummariesReportAsyncClientBeginSavingsPlanScopeOptions contains the optional parameters
// for the GenerateBenefitUtilizationSummariesReportAsyncClient.BeginSavingsPlanScope method.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) BeginSavingsPlanScope(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginSavingsPlanScopeOptions) (*runtime.Poller[GenerateBenefitUtilizationSummariesReportAsyncClientSavingsPlanScopeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.savingsPlanScope(ctx, savingsPlanOrderID, savingsPlanID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[GenerateBenefitUtilizationSummariesReportAsyncClientSavingsPlanScopeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[GenerateBenefitUtilizationSummariesReportAsyncClientSavingsPlanScopeResponse](options.ResumeToken, client.pl, nil)
	}
}

// SavingsPlanScope - Triggers generation of a benefit utilization summaries report for the provided savings plan.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) savingsPlanScope(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginSavingsPlanScopeOptions) (*http.Response, error) {
	req, err := client.savingsPlanScopeCreateRequest(ctx, savingsPlanOrderID, savingsPlanID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// savingsPlanScopeCreateRequest creates the SavingsPlanScope request.
func (client *GenerateBenefitUtilizationSummariesReportAsyncClient) savingsPlanScopeCreateRequest(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, options *GenerateBenefitUtilizationSummariesReportAsyncClientBeginSavingsPlanScopeOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/providers/Microsoft.CostManagement/generateBenefitUtilizationSummariesReport"
	if savingsPlanOrderID == "" {
		return nil, errors.New("parameter savingsPlanOrderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanOrderId}", url.PathEscape(savingsPlanOrderID))
	if savingsPlanID == "" {
		return nil, errors.New("parameter savingsPlanID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanId}", url.PathEscape(savingsPlanID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Grain != nil {
		reqQP.Set("grain", *options.Grain)
	}
	reqQP.Set("api-version", "2022-10-15-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
