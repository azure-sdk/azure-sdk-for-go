// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurearcdata/armazurearcdata"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// SQLServerInstancesServer is a fake server for instances of the armazurearcdata.SQLServerInstancesClient type.
type SQLServerInstancesServer struct {
	// BeginCreate is the fake for method SQLServerInstancesClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlServerInstance armazurearcdata.SQLServerInstance, options *armazurearcdata.SQLServerInstancesClientBeginCreateOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method SQLServerInstancesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, options *armazurearcdata.SQLServerInstancesClientBeginDeleteOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SQLServerInstancesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, options *armazurearcdata.SQLServerInstancesClientGetOptions) (resp azfake.Responder[armazurearcdata.SQLServerInstancesClientGetResponse], errResp azfake.ErrorResponder)

	// GetJobsStatus is the fake for method SQLServerInstancesClient.GetJobsStatus
	// HTTP status codes to indicate success: http.StatusOK
	GetJobsStatus func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, options *armazurearcdata.SQLServerInstancesClientGetJobsStatusOptions) (resp azfake.Responder[armazurearcdata.SQLServerInstancesClientGetJobsStatusResponse], errResp azfake.ErrorResponder)

	// BeginGetTelemetry is the fake for method SQLServerInstancesClient.BeginGetTelemetry
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetTelemetry func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, sqlServerInstanceTelemetryRequest armazurearcdata.SQLServerInstanceTelemetryRequest, options *armazurearcdata.SQLServerInstancesClientBeginGetTelemetryOptions) (resp azfake.PollerResponder[azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientGetTelemetryResponse]], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method SQLServerInstancesClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(options *armazurearcdata.SQLServerInstancesClientListOptions) (resp azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientListResponse])

	// NewListByResourceGroupPager is the fake for method SQLServerInstancesClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armazurearcdata.SQLServerInstancesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientListByResourceGroupResponse])

	// PostUpgrade is the fake for method SQLServerInstancesClient.PostUpgrade
	// HTTP status codes to indicate success: http.StatusOK
	PostUpgrade func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, options *armazurearcdata.SQLServerInstancesClientPostUpgradeOptions) (resp azfake.Responder[armazurearcdata.SQLServerInstancesClientPostUpgradeResponse], errResp azfake.ErrorResponder)

	// PreUpgrade is the fake for method SQLServerInstancesClient.PreUpgrade
	// HTTP status codes to indicate success: http.StatusOK
	PreUpgrade func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, options *armazurearcdata.SQLServerInstancesClientPreUpgradeOptions) (resp azfake.Responder[armazurearcdata.SQLServerInstancesClientPreUpgradeResponse], errResp azfake.ErrorResponder)

	// RunMigrationAssessment is the fake for method SQLServerInstancesClient.RunMigrationAssessment
	// HTTP status codes to indicate success: http.StatusOK
	RunMigrationAssessment func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, options *armazurearcdata.SQLServerInstancesClientRunMigrationAssessmentOptions) (resp azfake.Responder[armazurearcdata.SQLServerInstancesClientRunMigrationAssessmentResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method SQLServerInstancesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, parameters armazurearcdata.SQLServerInstanceUpdate, options *armazurearcdata.SQLServerInstancesClientBeginUpdateOptions) (resp azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewSQLServerInstancesServerTransport creates a new instance of SQLServerInstancesServerTransport with the provided implementation.
// The returned SQLServerInstancesServerTransport instance is connected to an instance of armazurearcdata.SQLServerInstancesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSQLServerInstancesServerTransport(srv *SQLServerInstancesServer) *SQLServerInstancesServerTransport {
	return &SQLServerInstancesServerTransport{
		srv:                         srv,
		beginCreate:                 newTracker[azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientCreateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientDeleteResponse]](),
		beginGetTelemetry:           newTracker[azfake.PollerResponder[azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientGetTelemetryResponse]]](),
		newListPager:                newTracker[azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientListResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientListByResourceGroupResponse]](),
		beginUpdate:                 newTracker[azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientUpdateResponse]](),
	}
}

// SQLServerInstancesServerTransport connects instances of armazurearcdata.SQLServerInstancesClient to instances of SQLServerInstancesServer.
// Don't use this type directly, use NewSQLServerInstancesServerTransport instead.
type SQLServerInstancesServerTransport struct {
	srv                         *SQLServerInstancesServer
	beginCreate                 *tracker[azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientCreateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientDeleteResponse]]
	beginGetTelemetry           *tracker[azfake.PollerResponder[azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientGetTelemetryResponse]]]
	newListPager                *tracker[azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientListResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armazurearcdata.SQLServerInstancesClientListByResourceGroupResponse]]
	beginUpdate                 *tracker[azfake.PollerResponder[armazurearcdata.SQLServerInstancesClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for SQLServerInstancesServerTransport.
func (s *SQLServerInstancesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SQLServerInstancesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if sqlServerInstancesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = sqlServerInstancesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SQLServerInstancesClient.BeginCreate":
				res.resp, res.err = s.dispatchBeginCreate(req)
			case "SQLServerInstancesClient.BeginDelete":
				res.resp, res.err = s.dispatchBeginDelete(req)
			case "SQLServerInstancesClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			case "SQLServerInstancesClient.GetJobsStatus":
				res.resp, res.err = s.dispatchGetJobsStatus(req)
			case "SQLServerInstancesClient.BeginGetTelemetry":
				res.resp, res.err = s.dispatchBeginGetTelemetry(req)
			case "SQLServerInstancesClient.NewListPager":
				res.resp, res.err = s.dispatchNewListPager(req)
			case "SQLServerInstancesClient.NewListByResourceGroupPager":
				res.resp, res.err = s.dispatchNewListByResourceGroupPager(req)
			case "SQLServerInstancesClient.PostUpgrade":
				res.resp, res.err = s.dispatchPostUpgrade(req)
			case "SQLServerInstancesClient.PreUpgrade":
				res.resp, res.err = s.dispatchPreUpgrade(req)
			case "SQLServerInstancesClient.RunMigrationAssessment":
				res.resp, res.err = s.dispatchRunMigrationAssessment(req)
			case "SQLServerInstancesClient.BeginUpdate":
				res.resp, res.err = s.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SQLServerInstancesServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := s.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurearcdata.SQLServerInstance](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreate(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		s.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		s.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		s.beginCreate.remove(req)
	}

	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if s.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := s.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginDelete(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		s.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		s.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		s.beginDelete.remove(req)
	}

	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerInstance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchGetJobsStatus(req *http.Request) (*http.Response, error) {
	if s.srv.GetJobsStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetJobsStatus not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getJobsStatus`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurearcdata.SQLServerInstanceJobsStatusRequest](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	var options *armazurearcdata.SQLServerInstancesClientGetJobsStatusOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armazurearcdata.SQLServerInstancesClientGetJobsStatusOptions{
			SQLServerInstanceJobsStatusRequest: &body,
		}
	}
	respr, errRespr := s.srv.GetJobsStatus(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerInstanceJobsStatusResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchBeginGetTelemetry(req *http.Request) (*http.Response, error) {
	if s.srv.BeginGetTelemetry == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetTelemetry not implemented")}
	}
	beginGetTelemetry := s.beginGetTelemetry.get(req)
	if beginGetTelemetry == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getTelemetry`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurearcdata.SQLServerInstanceTelemetryRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginGetTelemetry(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetTelemetry = &respr
		s.beginGetTelemetry.add(req, beginGetTelemetry)
	}

	resp, err := server.PollerResponderNext(beginGetTelemetry, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginGetTelemetry.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetTelemetry) {
		s.beginGetTelemetry.remove(req)
	}

	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := s.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := s.srv.NewListPager(nil)
		newListPager = &resp
		s.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armazurearcdata.SQLServerInstancesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		s.newListPager.remove(req)
	}
	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := s.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		s.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armazurearcdata.SQLServerInstancesClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		s.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchPostUpgrade(req *http.Request) (*http.Response, error) {
	if s.srv.PostUpgrade == nil {
		return nil, &nonRetriableError{errors.New("fake for method PostUpgrade not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/postUpgrade`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.PostUpgrade(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerInstance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchPreUpgrade(req *http.Request) (*http.Response, error) {
	if s.srv.PreUpgrade == nil {
		return nil, &nonRetriableError{errors.New("fake for method PreUpgrade not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/preUpgrade`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.PreUpgrade(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerInstance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchRunMigrationAssessment(req *http.Request) (*http.Response, error) {
	if s.srv.RunMigrationAssessment == nil {
		return nil, &nonRetriableError{errors.New("fake for method RunMigrationAssessment not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/runMigrationAssessment`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.RunMigrationAssessment(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SQLServerInstanceRunMigrationAssessmentResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SQLServerInstancesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := s.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureArcData/sqlServerInstances/(?P<sqlServerInstanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurearcdata.SQLServerInstanceUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		sqlServerInstanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sqlServerInstanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginUpdate(req.Context(), resourceGroupNameParam, sqlServerInstanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		s.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		s.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to SQLServerInstancesServerTransport
var sqlServerInstancesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
