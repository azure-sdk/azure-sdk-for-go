//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdesktopvirtualization

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/desktopvirtualization/armdesktopvirtualization"
	moduleVersion = "v3.0.0-beta.1"
)

// AppAttachPackageArchitectures - Possible device architectures that an app attach package can be configured for
type AppAttachPackageArchitectures string

const (
	// AppAttachPackageArchitecturesALL - Select all listed applications, no filters
	AppAttachPackageArchitecturesALL AppAttachPackageArchitectures = "ALL"
	// AppAttachPackageArchitecturesARM - ARM 32-bit
	AppAttachPackageArchitecturesARM AppAttachPackageArchitectures = "ARM"
	// AppAttachPackageArchitecturesARM64 - ARM 64-bit
	AppAttachPackageArchitecturesARM64 AppAttachPackageArchitectures = "ARM64"
	// AppAttachPackageArchitecturesNeutral - Any architecture can be used
	AppAttachPackageArchitecturesNeutral AppAttachPackageArchitectures = "Neutral"
	// AppAttachPackageArchitecturesX64 - 64-bit
	AppAttachPackageArchitecturesX64 AppAttachPackageArchitectures = "x64"
	// AppAttachPackageArchitecturesX86 - 32-bit x86
	AppAttachPackageArchitecturesX86 AppAttachPackageArchitectures = "x86"
	// AppAttachPackageArchitecturesX86A64 - X86 Compiled Hybrid Portable Executable for ARM64
	AppAttachPackageArchitecturesX86A64 AppAttachPackageArchitectures = "x86a64"
)

// PossibleAppAttachPackageArchitecturesValues returns the possible values for the AppAttachPackageArchitectures const type.
func PossibleAppAttachPackageArchitecturesValues() []AppAttachPackageArchitectures {
	return []AppAttachPackageArchitectures{
		AppAttachPackageArchitecturesALL,
		AppAttachPackageArchitecturesARM,
		AppAttachPackageArchitecturesARM64,
		AppAttachPackageArchitecturesNeutral,
		AppAttachPackageArchitecturesX64,
		AppAttachPackageArchitecturesX86,
		AppAttachPackageArchitecturesX86A64,
	}
}

// ApplicationGroupType - Resource Type of ApplicationGroup.
type ApplicationGroupType string

const (
	// ApplicationGroupTypeDesktop - Application Group delivers a full expected Desktop experience
	ApplicationGroupTypeDesktop ApplicationGroupType = "Desktop"
	// ApplicationGroupTypeRemoteApp - Application group is Remote and can launch individual applications without a Desktop.
	ApplicationGroupTypeRemoteApp ApplicationGroupType = "RemoteApp"
)

// PossibleApplicationGroupTypeValues returns the possible values for the ApplicationGroupType const type.
func PossibleApplicationGroupTypeValues() []ApplicationGroupType {
	return []ApplicationGroupType{
		ApplicationGroupTypeDesktop,
		ApplicationGroupTypeRemoteApp,
	}
}

// ApplicationType - Application type of application.
type ApplicationType string

const (
	// ApplicationTypeDesktop - Desktop Applications
	ApplicationTypeDesktop ApplicationType = "Desktop"
	// ApplicationTypeRemoteApp - Remote Applications (non-desktop)
	ApplicationTypeRemoteApp ApplicationType = "RemoteApp"
)

// PossibleApplicationTypeValues returns the possible values for the ApplicationType const type.
func PossibleApplicationTypeValues() []ApplicationType {
	return []ApplicationType{
		ApplicationTypeDesktop,
		ApplicationTypeRemoteApp,
	}
}

// CommandLineSetting - Specifies whether this published application can be launched with command line arguments provided
// by the client, command line arguments specified at publish time, or no command line arguments at all.
type CommandLineSetting string

const (
	// CommandLineSettingAllow - Can optionally be launched with command line arguments.
	CommandLineSettingAllow CommandLineSetting = "Allow"
	// CommandLineSettingDoNotAllow - Cannot be launched with command line arguments.
	CommandLineSettingDoNotAllow CommandLineSetting = "DoNotAllow"
	// CommandLineSettingRequire - Required to be launched with command line arguments.
	CommandLineSettingRequire CommandLineSetting = "Require"
)

// PossibleCommandLineSettingValues returns the possible values for the CommandLineSetting const type.
func PossibleCommandLineSettingValues() []CommandLineSetting {
	return []CommandLineSetting{
		CommandLineSettingAllow,
		CommandLineSettingDoNotAllow,
		CommandLineSettingRequire,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DayOfWeek - Day of the week. Modeled as string
type DayOfWeek string

const (
	DayOfWeekFriday    DayOfWeek = "Friday"
	DayOfWeekMonday    DayOfWeek = "Monday"
	DayOfWeekSaturday  DayOfWeek = "Saturday"
	DayOfWeekSunday    DayOfWeek = "Sunday"
	DayOfWeekThursday  DayOfWeek = "Thursday"
	DayOfWeekTuesday   DayOfWeek = "Tuesday"
	DayOfWeekWednesday DayOfWeek = "Wednesday"
)

// PossibleDayOfWeekValues returns the possible values for the DayOfWeek const type.
func PossibleDayOfWeekValues() []DayOfWeek {
	return []DayOfWeek{
		DayOfWeekFriday,
		DayOfWeekMonday,
		DayOfWeekSaturday,
		DayOfWeekSunday,
		DayOfWeekThursday,
		DayOfWeekTuesday,
		DayOfWeekWednesday,
	}
}

// DirectUDP - Direct UDP Connection Settings
type DirectUDP string

const (
	// DirectUDPDefault - AVD-wide settings are used to determine connection availability
	DirectUDPDefault DirectUDP = "Default"
	// DirectUDPDisabled - UDP will not attempt this connection type when making connections
	DirectUDPDisabled DirectUDP = "Disabled"
	// DirectUDPEnabled - UDP will attempt this connection type when making connections.
	DirectUDPEnabled DirectUDP = "Enabled"
)

// PossibleDirectUDPValues returns the possible values for the DirectUDP const type.
func PossibleDirectUDPValues() []DirectUDP {
	return []DirectUDP{
		DirectUDPDefault,
		DirectUDPDisabled,
		DirectUDPEnabled,
	}
}

// DomainJoinType - The type of domain join done by the virtual machine.
type DomainJoinType string

const (
	// DomainJoinTypeActiveDirectory - Using microsoft active directory.
	DomainJoinTypeActiveDirectory DomainJoinType = "ActiveDirectory"
	// DomainJoinTypeAzureActiveDirectory - Using microsoft azure active directory.
	DomainJoinTypeAzureActiveDirectory DomainJoinType = "AzureActiveDirectory"
)

// PossibleDomainJoinTypeValues returns the possible values for the DomainJoinType const type.
func PossibleDomainJoinTypeValues() []DomainJoinType {
	return []DomainJoinType{
		DomainJoinTypeActiveDirectory,
		DomainJoinTypeAzureActiveDirectory,
	}
}

// FailHealthCheckOnStagingFailure - Parameter indicating how the health check should behave if this package fails staging
type FailHealthCheckOnStagingFailure string

const (
	// FailHealthCheckOnStagingFailureDoNotFail - Health Check will not report failure
	FailHealthCheckOnStagingFailureDoNotFail FailHealthCheckOnStagingFailure = "DoNotFail"
	// FailHealthCheckOnStagingFailureNeedsAssistance - Health Check will report NeedsAssistance
	FailHealthCheckOnStagingFailureNeedsAssistance FailHealthCheckOnStagingFailure = "NeedsAssistance"
	// FailHealthCheckOnStagingFailureUnhealthy - Health Check will report unhealthy
	FailHealthCheckOnStagingFailureUnhealthy FailHealthCheckOnStagingFailure = "Unhealthy"
)

// PossibleFailHealthCheckOnStagingFailureValues returns the possible values for the FailHealthCheckOnStagingFailure const type.
func PossibleFailHealthCheckOnStagingFailureValues() []FailHealthCheckOnStagingFailure {
	return []FailHealthCheckOnStagingFailure{
		FailHealthCheckOnStagingFailureDoNotFail,
		FailHealthCheckOnStagingFailureNeedsAssistance,
		FailHealthCheckOnStagingFailureUnhealthy,
	}
}

// HealthCheckName - Represents the name of the health check operation performed.
type HealthCheckName string

const (
	// HealthCheckNameAppAttachHealthCheck - Verifies that the AppAttachService is healthy (there were no issues during package
	// staging). The AppAttachService is used to enable the staging/registration (and eventual de-registration/destaging) of MSIX
	// apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging.
	// Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non
	// fatal and the machine still can service connections, main issue may be certain apps will not work for end-users. (Currently
	// Enabled)
	HealthCheckNameAppAttachHealthCheck HealthCheckName = "AppAttachHealthCheck"
	// HealthCheckNameDomainJoinedCheck - Verifies the SessionHost is joined to a domain. If this check fails is classified as
	// fatal as no connection can succeed if the SessionHost is not joined to the domain. (Currently Enabled)
	HealthCheckNameDomainJoinedCheck HealthCheckName = "DomainJoinedCheck"
	// HealthCheckNameDomainReachable - Verifies the domain the SessionHost is joined to is still reachable. If this check fails
	// is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time
	// of connection. (Currently Disabled)
	HealthCheckNameDomainReachable HealthCheckName = "DomainReachable"
	// HealthCheckNameDomainTrustCheck - Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication
	// on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection
	// can succeed if we cannot reach the domain for authentication on the SessionHost. (Currently Enabled)
	HealthCheckNameDomainTrustCheck HealthCheckName = "DomainTrustCheck"
	// HealthCheckNameFSLogixHealthCheck - Verifies the FSLogix service is up and running to make sure users' profiles are loaded
	// in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad
	// as the user profile cannot be loaded and user will get a temporary profile in the session. (Currently Disabled)
	HealthCheckNameFSLogixHealthCheck HealthCheckName = "FSLogixHealthCheck"
	// HealthCheckNameMetaDataServiceCheck - Verifies the metadata service is accessible and return compute properties. (Currently
	// Enabled)
	HealthCheckNameMetaDataServiceCheck HealthCheckName = "MetaDataServiceCheck"
	// HealthCheckNameMonitoringAgentCheck - Verifies that the required Geneva agent is running. If this check fails, it is non
	// fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly)
	// older version. (Currently Enabled)
	HealthCheckNameMonitoringAgentCheck HealthCheckName = "MonitoringAgentCheck"
	// HealthCheckNameSupportedEncryptionCheck - Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP)
	// this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate)
	// this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. (Currently Disabled)
	HealthCheckNameSupportedEncryptionCheck HealthCheckName = "SupportedEncryptionCheck"
	// HealthCheckNameSxSStackListenerCheck - Verifies that the SxS stack is up and running so connections can succeed. If this
	// check fails is classified as fatal as no connection can succeed if the SxS stack is not ready. (Currently Enabled)
	HealthCheckNameSxSStackListenerCheck HealthCheckName = "SxSStackListenerCheck"
	// HealthCheckNameUrlsAccessibleCheck - Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost.
	// These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this
	// check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is
	// unable to store warm path data (logs, operations ...). (Currently Disabled)
	HealthCheckNameUrlsAccessibleCheck HealthCheckName = "UrlsAccessibleCheck"
	// HealthCheckNameWebRTCRedirectorCheck - Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector
	// component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still
	// running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can
	// service connections, main issue may be the WebRTCRedirector component has to be restarted or updated. (Currently Disabled)
	HealthCheckNameWebRTCRedirectorCheck HealthCheckName = "WebRTCRedirectorCheck"
)

// PossibleHealthCheckNameValues returns the possible values for the HealthCheckName const type.
func PossibleHealthCheckNameValues() []HealthCheckName {
	return []HealthCheckName{
		HealthCheckNameAppAttachHealthCheck,
		HealthCheckNameDomainJoinedCheck,
		HealthCheckNameDomainReachable,
		HealthCheckNameDomainTrustCheck,
		HealthCheckNameFSLogixHealthCheck,
		HealthCheckNameMetaDataServiceCheck,
		HealthCheckNameMonitoringAgentCheck,
		HealthCheckNameSupportedEncryptionCheck,
		HealthCheckNameSxSStackListenerCheck,
		HealthCheckNameUrlsAccessibleCheck,
		HealthCheckNameWebRTCRedirectorCheck,
	}
}

// HealthCheckResult - Represents the Health state of the health check we performed.
type HealthCheckResult string

const (
	// HealthCheckResultHealthCheckFailed - Health check failed.
	HealthCheckResultHealthCheckFailed HealthCheckResult = "HealthCheckFailed"
	// HealthCheckResultHealthCheckSucceeded - Health check passed.
	HealthCheckResultHealthCheckSucceeded HealthCheckResult = "HealthCheckSucceeded"
	// HealthCheckResultSessionHostShutdown - We received a Shutdown notification.
	HealthCheckResultSessionHostShutdown HealthCheckResult = "SessionHostShutdown"
	// HealthCheckResultUnknown - Health check result is not currently known.
	HealthCheckResultUnknown HealthCheckResult = "Unknown"
)

// PossibleHealthCheckResultValues returns the possible values for the HealthCheckResult const type.
func PossibleHealthCheckResultValues() []HealthCheckResult {
	return []HealthCheckResult{
		HealthCheckResultHealthCheckFailed,
		HealthCheckResultHealthCheckSucceeded,
		HealthCheckResultSessionHostShutdown,
		HealthCheckResultUnknown,
	}
}

// HostPoolType - HostPool type for desktop.
type HostPoolType string

const (
	// HostPoolTypeBYODesktop - Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType
	// must be Direct.
	HostPoolTypeBYODesktop HostPoolType = "BYODesktop"
	// HostPoolTypePersonal - Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct)
	// or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned
	// SessionHost.
	HostPoolTypePersonal HostPoolType = "Personal"
	// HostPoolTypePooled - Users get a new (random) SessionHost every time it connects to the HostPool.
	HostPoolTypePooled HostPoolType = "Pooled"
)

// PossibleHostPoolTypeValues returns the possible values for the HostPoolType const type.
func PossibleHostPoolTypeValues() []HostPoolType {
	return []HostPoolType{
		HostPoolTypeBYODesktop,
		HostPoolTypePersonal,
		HostPoolTypePooled,
	}
}

// HostPoolUpdateAction - Action types for controlling hostpool update.
type HostPoolUpdateAction string

const (
	// HostPoolUpdateActionCancel - Cancel the hostpool update.
	HostPoolUpdateActionCancel HostPoolUpdateAction = "Cancel"
	// HostPoolUpdateActionPause - Pause the hostpool update.
	HostPoolUpdateActionPause HostPoolUpdateAction = "Pause"
	// HostPoolUpdateActionResume - Resume the hostpool update
	HostPoolUpdateActionResume HostPoolUpdateAction = "Resume"
	// HostPoolUpdateActionRetry - Retry the hostpool update.
	HostPoolUpdateActionRetry HostPoolUpdateAction = "Retry"
	// HostPoolUpdateActionStart - Start the hostpool update.
	HostPoolUpdateActionStart HostPoolUpdateAction = "Start"
)

// PossibleHostPoolUpdateActionValues returns the possible values for the HostPoolUpdateAction const type.
func PossibleHostPoolUpdateActionValues() []HostPoolUpdateAction {
	return []HostPoolUpdateAction{
		HostPoolUpdateActionCancel,
		HostPoolUpdateActionPause,
		HostPoolUpdateActionResume,
		HostPoolUpdateActionRetry,
		HostPoolUpdateActionStart,
	}
}

// HostpoolPublicNetworkAccess - Enabled to allow this resource to be access from the public network
type HostpoolPublicNetworkAccess string

const (
	// HostpoolPublicNetworkAccessDisabled - Prevents this resource from being accessed from the public network
	HostpoolPublicNetworkAccessDisabled HostpoolPublicNetworkAccess = "Disabled"
	// HostpoolPublicNetworkAccessEnabled - Allows this resource to be accessed from the public network
	HostpoolPublicNetworkAccessEnabled HostpoolPublicNetworkAccess = "Enabled"
	// HostpoolPublicNetworkAccessEnabledForClientsOnly - Allows Clients to be accessed from the public network
	HostpoolPublicNetworkAccessEnabledForClientsOnly HostpoolPublicNetworkAccess = "EnabledForClientsOnly"
	// HostpoolPublicNetworkAccessEnabledForSessionHostsOnly - Allows SessionHosts to be accessed from the public network
	HostpoolPublicNetworkAccessEnabledForSessionHostsOnly HostpoolPublicNetworkAccess = "EnabledForSessionHostsOnly"
)

// PossibleHostpoolPublicNetworkAccessValues returns the possible values for the HostpoolPublicNetworkAccess const type.
func PossibleHostpoolPublicNetworkAccessValues() []HostpoolPublicNetworkAccess {
	return []HostpoolPublicNetworkAccess{
		HostpoolPublicNetworkAccessDisabled,
		HostpoolPublicNetworkAccessEnabled,
		HostpoolPublicNetworkAccessEnabledForClientsOnly,
		HostpoolPublicNetworkAccessEnabledForSessionHostsOnly,
	}
}

// LoadBalancerType - The type of the load balancer.
type LoadBalancerType string

const (
	// LoadBalancerTypeBreadthFirst - Uses BreadthFirst algorithm for load balancing.
	LoadBalancerTypeBreadthFirst LoadBalancerType = "BreadthFirst"
	// LoadBalancerTypeDepthFirst - Uses DepthFirst algorithm for load balancing.
	LoadBalancerTypeDepthFirst LoadBalancerType = "DepthFirst"
	// LoadBalancerTypeMultiplePersistent - Maintains multiple persistents connections.
	LoadBalancerTypeMultiplePersistent LoadBalancerType = "MultiplePersistent"
	// LoadBalancerTypePersistent - Maintains persistent connections.
	LoadBalancerTypePersistent LoadBalancerType = "Persistent"
)

// PossibleLoadBalancerTypeValues returns the possible values for the LoadBalancerType const type.
func PossibleLoadBalancerTypeValues() []LoadBalancerType {
	return []LoadBalancerType{
		LoadBalancerTypeBreadthFirst,
		LoadBalancerTypeDepthFirst,
		LoadBalancerTypeMultiplePersistent,
		LoadBalancerTypePersistent,
	}
}

// ManagedPrivateUDP - Managed Private UDP Connection Settings
type ManagedPrivateUDP string

const (
	// ManagedPrivateUDPDefault - AVD-wide settings are used to determine connection availability
	ManagedPrivateUDPDefault ManagedPrivateUDP = "Default"
	// ManagedPrivateUDPDisabled - UDP will not attempt this connection type when making connections
	ManagedPrivateUDPDisabled ManagedPrivateUDP = "Disabled"
	// ManagedPrivateUDPEnabled - UDP will attempt this connection type when making connections.
	ManagedPrivateUDPEnabled ManagedPrivateUDP = "Enabled"
)

// PossibleManagedPrivateUDPValues returns the possible values for the ManagedPrivateUDP const type.
func PossibleManagedPrivateUDPValues() []ManagedPrivateUDP {
	return []ManagedPrivateUDP{
		ManagedPrivateUDPDefault,
		ManagedPrivateUDPDisabled,
		ManagedPrivateUDPEnabled,
	}
}

// ManagedServiceIdentityType - Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                       ManagedServiceIdentityType = "None"
	ManagedServiceIdentityTypeSystemAssigned             ManagedServiceIdentityType = "SystemAssigned"
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned,UserAssigned"
	ManagedServiceIdentityTypeUserAssigned               ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns the possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{
		ManagedServiceIdentityTypeNone,
		ManagedServiceIdentityTypeSystemAssigned,
		ManagedServiceIdentityTypeSystemAssignedUserAssigned,
		ManagedServiceIdentityTypeUserAssigned,
	}
}

// ManagementType - The type of management for the hostpool
type ManagementType string

const (
	// ManagementTypeAutomated - Automated management of the hostpool
	ManagementTypeAutomated ManagementType = "Automated"
	// ManagementTypeStandard - Standard management of the hostpool
	ManagementTypeStandard ManagementType = "Standard"
)

// PossibleManagementTypeValues returns the possible values for the ManagementType const type.
func PossibleManagementTypeValues() []ManagementType {
	return []ManagementType{
		ManagementTypeAutomated,
		ManagementTypeStandard,
	}
}

// PackageTimestamped - Is package timestamped so it can ignore the certificate expiry date
type PackageTimestamped string

const (
	// PackageTimestampedNotTimestamped - Package is not timestamped, use certificate expiry date
	PackageTimestampedNotTimestamped PackageTimestamped = "NotTimestamped"
	// PackageTimestampedTimestamped - Package is timestamped
	PackageTimestampedTimestamped PackageTimestamped = "Timestamped"
)

// PossiblePackageTimestampedValues returns the possible values for the PackageTimestamped const type.
func PossiblePackageTimestampedValues() []PackageTimestamped {
	return []PackageTimestamped{
		PackageTimestampedNotTimestamped,
		PackageTimestampedTimestamped,
	}
}

// PersonalDesktopAssignmentType - PersonalDesktopAssignment type for HostPool.
type PersonalDesktopAssignmentType string

const (
	// PersonalDesktopAssignmentTypeAutomatic - Automatically assigns an available personal desktop to the user.
	PersonalDesktopAssignmentTypeAutomatic PersonalDesktopAssignmentType = "Automatic"
	// PersonalDesktopAssignmentTypeDirect - Manually assigns a specific personal desktop to the user.
	PersonalDesktopAssignmentTypeDirect PersonalDesktopAssignmentType = "Direct"
)

// PossiblePersonalDesktopAssignmentTypeValues returns the possible values for the PersonalDesktopAssignmentType const type.
func PossiblePersonalDesktopAssignmentTypeValues() []PersonalDesktopAssignmentType {
	return []PersonalDesktopAssignmentType{
		PersonalDesktopAssignmentTypeAutomatic,
		PersonalDesktopAssignmentTypeDirect,
	}
}

// PreferredAppGroupType - The type of preferred application group type, default to Desktop Application Group
type PreferredAppGroupType string

const (
	// PreferredAppGroupTypeDesktop - Use Desktop Application Group
	PreferredAppGroupTypeDesktop PreferredAppGroupType = "Desktop"
	// PreferredAppGroupTypeNone - Internal Use Only
	PreferredAppGroupTypeNone PreferredAppGroupType = "None"
	// PreferredAppGroupTypeRailApplications - Use RailApplications (RemoteApp)
	PreferredAppGroupTypeRailApplications PreferredAppGroupType = "RailApplications"
)

// PossiblePreferredAppGroupTypeValues returns the possible values for the PreferredAppGroupType const type.
func PossiblePreferredAppGroupTypeValues() []PreferredAppGroupType {
	return []PreferredAppGroupType{
		PreferredAppGroupTypeDesktop,
		PreferredAppGroupTypeNone,
		PreferredAppGroupTypeRailApplications,
	}
}

// PrivateEndpointConnectionProvisioningState - The current provisioning state.
type PrivateEndpointConnectionProvisioningState string

const (
	// PrivateEndpointConnectionProvisioningStateCreating - A PrivateEndpointConnection is being created
	PrivateEndpointConnectionProvisioningStateCreating PrivateEndpointConnectionProvisioningState = "Creating"
	// PrivateEndpointConnectionProvisioningStateDeleting - A PrivateEndpointConnection is being deleted
	PrivateEndpointConnectionProvisioningStateDeleting PrivateEndpointConnectionProvisioningState = "Deleting"
	// PrivateEndpointConnectionProvisioningStateFailed - Provisioning failed
	PrivateEndpointConnectionProvisioningStateFailed PrivateEndpointConnectionProvisioningState = "Failed"
	// PrivateEndpointConnectionProvisioningStateSucceeded - Provisioning was successful
	PrivateEndpointConnectionProvisioningStateSucceeded PrivateEndpointConnectionProvisioningState = "Succeeded"
)

// PossiblePrivateEndpointConnectionProvisioningStateValues returns the possible values for the PrivateEndpointConnectionProvisioningState const type.
func PossiblePrivateEndpointConnectionProvisioningStateValues() []PrivateEndpointConnectionProvisioningState {
	return []PrivateEndpointConnectionProvisioningState{
		PrivateEndpointConnectionProvisioningStateCreating,
		PrivateEndpointConnectionProvisioningStateDeleting,
		PrivateEndpointConnectionProvisioningStateFailed,
		PrivateEndpointConnectionProvisioningStateSucceeded,
	}
}

// PrivateEndpointServiceConnectionStatus - The private endpoint connection status.
type PrivateEndpointServiceConnectionStatus string

const (
	// PrivateEndpointServiceConnectionStatusApproved - Connection was Approved
	PrivateEndpointServiceConnectionStatusApproved PrivateEndpointServiceConnectionStatus = "Approved"
	// PrivateEndpointServiceConnectionStatusPending - Connection is Pending
	PrivateEndpointServiceConnectionStatusPending PrivateEndpointServiceConnectionStatus = "Pending"
	// PrivateEndpointServiceConnectionStatusRejected - Connection was rejected
	PrivateEndpointServiceConnectionStatusRejected PrivateEndpointServiceConnectionStatus = "Rejected"
)

// PossiblePrivateEndpointServiceConnectionStatusValues returns the possible values for the PrivateEndpointServiceConnectionStatus const type.
func PossiblePrivateEndpointServiceConnectionStatusValues() []PrivateEndpointServiceConnectionStatus {
	return []PrivateEndpointServiceConnectionStatus{
		PrivateEndpointServiceConnectionStatusApproved,
		PrivateEndpointServiceConnectionStatusPending,
		PrivateEndpointServiceConnectionStatusRejected,
	}
}

// ProvisioningState - The current provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCanceled - Provisioning was Canceled
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	// ProvisioningStateFailed - Provisioning Failed
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateProvisioning - Provisioning in Progress
	ProvisioningStateProvisioning ProvisioningState = "Provisioning"
	// ProvisioningStateSucceeded - Provisioning Successful
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCanceled,
		ProvisioningStateFailed,
		ProvisioningStateProvisioning,
		ProvisioningStateSucceeded,
	}
}

// ProvisioningStateSHC - Provisioning state of the Session Host Configuration.
type ProvisioningStateSHC string

const (
	// ProvisioningStateSHCCanceled - Provisioning was Canceled
	ProvisioningStateSHCCanceled ProvisioningStateSHC = "Canceled"
	// ProvisioningStateSHCFailed - Provisioning Failed
	ProvisioningStateSHCFailed ProvisioningStateSHC = "Failed"
	// ProvisioningStateSHCProvisioning - Provisioning in Progress
	ProvisioningStateSHCProvisioning ProvisioningStateSHC = "Provisioning"
	// ProvisioningStateSHCSucceeded - Provisioning Successful
	ProvisioningStateSHCSucceeded ProvisioningStateSHC = "Succeeded"
)

// PossibleProvisioningStateSHCValues returns the possible values for the ProvisioningStateSHC const type.
func PossibleProvisioningStateSHCValues() []ProvisioningStateSHC {
	return []ProvisioningStateSHC{
		ProvisioningStateSHCCanceled,
		ProvisioningStateSHCFailed,
		ProvisioningStateSHCProvisioning,
		ProvisioningStateSHCSucceeded,
	}
}

// PublicNetworkAccess - Enabled to allow this resource to be access from the public network
type PublicNetworkAccess string

const (
	// PublicNetworkAccessDisabled - This resource is not accessible from the public network.
	PublicNetworkAccessDisabled PublicNetworkAccess = "Disabled"
	// PublicNetworkAccessEnabled - This resource is accessible from the public network.
	PublicNetworkAccessEnabled PublicNetworkAccess = "Enabled"
)

// PossiblePublicNetworkAccessValues returns the possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{
		PublicNetworkAccessDisabled,
		PublicNetworkAccessEnabled,
	}
}

// PublicUDP - Public UDP Connection Settings
type PublicUDP string

const (
	// PublicUDPDefault - AVD-wide settings are used to determine connection availability
	PublicUDPDefault PublicUDP = "Default"
	// PublicUDPDisabled - UDP will not attempt this connection type when making connections
	PublicUDPDisabled PublicUDP = "Disabled"
	// PublicUDPEnabled - UDP will attempt this connection type when making connections.
	PublicUDPEnabled PublicUDP = "Enabled"
)

// PossiblePublicUDPValues returns the possible values for the PublicUDP const type.
func PossiblePublicUDPValues() []PublicUDP {
	return []PublicUDP{
		PublicUDPDefault,
		PublicUDPDisabled,
		PublicUDPEnabled,
	}
}

// RegistrationTokenOperation - The type of resetting the token.
type RegistrationTokenOperation string

const (
	// RegistrationTokenOperationDelete - Delete operation
	RegistrationTokenOperationDelete RegistrationTokenOperation = "Delete"
	// RegistrationTokenOperationNone - No Operation
	RegistrationTokenOperationNone RegistrationTokenOperation = "None"
	// RegistrationTokenOperationUpdate - Update Operation
	RegistrationTokenOperationUpdate RegistrationTokenOperation = "Update"
)

// PossibleRegistrationTokenOperationValues returns the possible values for the RegistrationTokenOperation const type.
func PossibleRegistrationTokenOperationValues() []RegistrationTokenOperation {
	return []RegistrationTokenOperation{
		RegistrationTokenOperationDelete,
		RegistrationTokenOperationNone,
		RegistrationTokenOperationUpdate,
	}
}

// RelayUDP - Relay UDP Connection Settings
type RelayUDP string

const (
	// RelayUDPDefault - AVD-wide settings are used to determine connection availability
	RelayUDPDefault RelayUDP = "Default"
	// RelayUDPDisabled - UDP will not attempt this connection type when making connections
	RelayUDPDisabled RelayUDP = "Disabled"
	// RelayUDPEnabled - UDP will attempt this connection type when making connections.
	RelayUDPEnabled RelayUDP = "Enabled"
)

// PossibleRelayUDPValues returns the possible values for the RelayUDP const type.
func PossibleRelayUDPValues() []RelayUDP {
	return []RelayUDP{
		RelayUDPDefault,
		RelayUDPDisabled,
		RelayUDPEnabled,
	}
}

// RemoteApplicationType - Resource Type of Application.
type RemoteApplicationType string

const (
	// RemoteApplicationTypeInBuilt - Built-in applications
	RemoteApplicationTypeInBuilt RemoteApplicationType = "InBuilt"
	// RemoteApplicationTypeMsixApplication - Imported MSIX application packages
	RemoteApplicationTypeMsixApplication RemoteApplicationType = "MsixApplication"
)

// PossibleRemoteApplicationTypeValues returns the possible values for the RemoteApplicationType const type.
func PossibleRemoteApplicationTypeValues() []RemoteApplicationType {
	return []RemoteApplicationType{
		RemoteApplicationTypeInBuilt,
		RemoteApplicationTypeMsixApplication,
	}
}

// SKUTier - This field is required to be implemented by the Resource Provider if the service has more than one tier, but
// is not required on a PUT.
type SKUTier string

const (
	SKUTierBasic    SKUTier = "Basic"
	SKUTierFree     SKUTier = "Free"
	SKUTierPremium  SKUTier = "Premium"
	SKUTierStandard SKUTier = "Standard"
)

// PossibleSKUTierValues returns the possible values for the SKUTier const type.
func PossibleSKUTierValues() []SKUTier {
	return []SKUTier{
		SKUTierBasic,
		SKUTierFree,
		SKUTierPremium,
		SKUTierStandard,
	}
}

// SSOSecretType - The type of single sign on Secret Type.
type SSOSecretType string

const (
	// SSOSecretTypeCertificate - The SSO Secret is a Certificate.
	SSOSecretTypeCertificate SSOSecretType = "Certificate"
	// SSOSecretTypeCertificateInKeyVault - The SSO Secret is a Certificate that is stored in KeyVault.
	SSOSecretTypeCertificateInKeyVault SSOSecretType = "CertificateInKeyVault"
	// SSOSecretTypeSharedKey - The SSO Secret is a Shared Key.
	SSOSecretTypeSharedKey SSOSecretType = "SharedKey"
	// SSOSecretTypeSharedKeyInKeyVault - The SSO Secret is a SharedKey that is stored in KeyVault.
	SSOSecretTypeSharedKeyInKeyVault SSOSecretType = "SharedKeyInKeyVault"
)

// PossibleSSOSecretTypeValues returns the possible values for the SSOSecretType const type.
func PossibleSSOSecretTypeValues() []SSOSecretType {
	return []SSOSecretType{
		SSOSecretTypeCertificate,
		SSOSecretTypeCertificateInKeyVault,
		SSOSecretTypeSharedKey,
		SSOSecretTypeSharedKeyInKeyVault,
	}
}

// ScalingHostPoolType - HostPool type for desktop.
type ScalingHostPoolType string

const (
	// ScalingHostPoolTypePersonal - Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType
	// = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to
	// their assigned SessionHost.
	ScalingHostPoolTypePersonal ScalingHostPoolType = "Personal"
	// ScalingHostPoolTypePooled - Users get a new (random) SessionHost every time it connects to the HostPool.
	ScalingHostPoolTypePooled ScalingHostPoolType = "Pooled"
)

// PossibleScalingHostPoolTypeValues returns the possible values for the ScalingHostPoolType const type.
func PossibleScalingHostPoolTypeValues() []ScalingHostPoolType {
	return []ScalingHostPoolType{
		ScalingHostPoolTypePersonal,
		ScalingHostPoolTypePooled,
	}
}

// SessionHandlingOperation - Action to be taken after a user disconnect during the ramp up period.
type SessionHandlingOperation string

const (
	// SessionHandlingOperationDeallocate - Session Host will be deallocated after disconnect
	SessionHandlingOperationDeallocate SessionHandlingOperation = "Deallocate"
	// SessionHandlingOperationHibernate - Session Host will hibernate after disconnect
	SessionHandlingOperationHibernate SessionHandlingOperation = "Hibernate"
	// SessionHandlingOperationNone - No action will be taken after disconnect
	SessionHandlingOperationNone SessionHandlingOperation = "None"
)

// PossibleSessionHandlingOperationValues returns the possible values for the SessionHandlingOperation const type.
func PossibleSessionHandlingOperationValues() []SessionHandlingOperation {
	return []SessionHandlingOperation{
		SessionHandlingOperationDeallocate,
		SessionHandlingOperationHibernate,
		SessionHandlingOperationNone,
	}
}

// SessionHostComponentUpdateType - The type of maintenance for session host components.
type SessionHostComponentUpdateType string

const (
	// SessionHostComponentUpdateTypeDefault - Agent and other agent side components are delivery schedule is controlled by WVD
	// Infra.
	SessionHostComponentUpdateTypeDefault SessionHostComponentUpdateType = "Default"
	// SessionHostComponentUpdateTypeScheduled - TenantAdmin have opted in for Scheduled Component Update feature.
	SessionHostComponentUpdateTypeScheduled SessionHostComponentUpdateType = "Scheduled"
)

// PossibleSessionHostComponentUpdateTypeValues returns the possible values for the SessionHostComponentUpdateType const type.
func PossibleSessionHostComponentUpdateTypeValues() []SessionHostComponentUpdateType {
	return []SessionHostComponentUpdateType{
		SessionHostComponentUpdateTypeDefault,
		SessionHostComponentUpdateTypeScheduled,
	}
}

// SessionHostLoadBalancingAlgorithm - Load balancing algorithm for ramp up period.
type SessionHostLoadBalancingAlgorithm string

const (
	// SessionHostLoadBalancingAlgorithmBreadthFirst - Breadth First Algorithm for Load Balancing
	SessionHostLoadBalancingAlgorithmBreadthFirst SessionHostLoadBalancingAlgorithm = "BreadthFirst"
	// SessionHostLoadBalancingAlgorithmDepthFirst - Depth First Algorithm for Load Balancing
	SessionHostLoadBalancingAlgorithmDepthFirst SessionHostLoadBalancingAlgorithm = "DepthFirst"
)

// PossibleSessionHostLoadBalancingAlgorithmValues returns the possible values for the SessionHostLoadBalancingAlgorithm const type.
func PossibleSessionHostLoadBalancingAlgorithmValues() []SessionHostLoadBalancingAlgorithm {
	return []SessionHostLoadBalancingAlgorithm{
		SessionHostLoadBalancingAlgorithmBreadthFirst,
		SessionHostLoadBalancingAlgorithmDepthFirst,
	}
}

// SessionHostManagementUpdateOperationStatus - Operation status for SessionHostManagementUpdate.
type SessionHostManagementUpdateOperationStatus string

const (
	// SessionHostManagementUpdateOperationStatusCancelled - The operation is canceled
	SessionHostManagementUpdateOperationStatusCancelled SessionHostManagementUpdateOperationStatus = "Cancelled"
	// SessionHostManagementUpdateOperationStatusCancelling - Canceling the operation.
	SessionHostManagementUpdateOperationStatusCancelling SessionHostManagementUpdateOperationStatus = "Cancelling"
	// SessionHostManagementUpdateOperationStatusError - The operation has an error.
	SessionHostManagementUpdateOperationStatusError SessionHostManagementUpdateOperationStatus = "Error"
	// SessionHostManagementUpdateOperationStatusFailed - The operation failed.
	SessionHostManagementUpdateOperationStatusFailed SessionHostManagementUpdateOperationStatus = "Failed"
	// SessionHostManagementUpdateOperationStatusPaused - The operation is paused.
	SessionHostManagementUpdateOperationStatusPaused SessionHostManagementUpdateOperationStatus = "Paused"
	// SessionHostManagementUpdateOperationStatusPausing - The operation is pausing.
	SessionHostManagementUpdateOperationStatusPausing SessionHostManagementUpdateOperationStatus = "Pausing"
	// SessionHostManagementUpdateOperationStatusScheduled - The operation is scheduled.
	SessionHostManagementUpdateOperationStatusScheduled SessionHostManagementUpdateOperationStatus = "Scheduled"
	// SessionHostManagementUpdateOperationStatusSucceeded - The operation succeeded.
	SessionHostManagementUpdateOperationStatusSucceeded SessionHostManagementUpdateOperationStatus = "Succeeded"
	// SessionHostManagementUpdateOperationStatusUpdatingSessionHosts - The operation is currently updating Session Hosts.
	SessionHostManagementUpdateOperationStatusUpdatingSessionHosts SessionHostManagementUpdateOperationStatus = "UpdatingSessionHosts"
	// SessionHostManagementUpdateOperationStatusValidatingSessionHostUpdate - The operation is validating the update.
	SessionHostManagementUpdateOperationStatusValidatingSessionHostUpdate SessionHostManagementUpdateOperationStatus = "ValidatingSessionHostUpdate"
)

// PossibleSessionHostManagementUpdateOperationStatusValues returns the possible values for the SessionHostManagementUpdateOperationStatus const type.
func PossibleSessionHostManagementUpdateOperationStatusValues() []SessionHostManagementUpdateOperationStatus {
	return []SessionHostManagementUpdateOperationStatus{
		SessionHostManagementUpdateOperationStatusCancelled,
		SessionHostManagementUpdateOperationStatusCancelling,
		SessionHostManagementUpdateOperationStatusError,
		SessionHostManagementUpdateOperationStatusFailed,
		SessionHostManagementUpdateOperationStatusPaused,
		SessionHostManagementUpdateOperationStatusPausing,
		SessionHostManagementUpdateOperationStatusScheduled,
		SessionHostManagementUpdateOperationStatusSucceeded,
		SessionHostManagementUpdateOperationStatusUpdatingSessionHosts,
		SessionHostManagementUpdateOperationStatusValidatingSessionHostUpdate,
	}
}

// SessionState - State of user session.
type SessionState string

const (
	// SessionStateActive - Session is active
	SessionStateActive SessionState = "Active"
	// SessionStateDisconnected - Session is disconnected
	SessionStateDisconnected SessionState = "Disconnected"
	// SessionStateLogOff - Session is logging off
	SessionStateLogOff SessionState = "LogOff"
	// SessionStatePending - Session is pending connection
	SessionStatePending SessionState = "Pending"
	// SessionStateUnknown - SessionState is unknown
	SessionStateUnknown SessionState = "Unknown"
	// SessionStateUserProfileDiskMounted - Session has mounted user profile disk
	SessionStateUserProfileDiskMounted SessionState = "UserProfileDiskMounted"
)

// PossibleSessionStateValues returns the possible values for the SessionState const type.
func PossibleSessionStateValues() []SessionState {
	return []SessionState{
		SessionStateActive,
		SessionStateDisconnected,
		SessionStateLogOff,
		SessionStatePending,
		SessionStateUnknown,
		SessionStateUserProfileDiskMounted,
	}
}

// SetStartVMOnConnect - The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this
// is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on
// manually.
type SetStartVMOnConnect string

const (
	// SetStartVMOnConnectDisable - Start VM on Connect is disabled, must use rampUpAutoStartHosts or turn on manually
	SetStartVMOnConnectDisable SetStartVMOnConnect = "Disable"
	// SetStartVMOnConnectEnable - Start VM on Connect is enabled
	SetStartVMOnConnectEnable SetStartVMOnConnect = "Enable"
)

// PossibleSetStartVMOnConnectValues returns the possible values for the SetStartVMOnConnect const type.
func PossibleSetStartVMOnConnectValues() []SetStartVMOnConnect {
	return []SetStartVMOnConnect{
		SetStartVMOnConnectDisable,
		SetStartVMOnConnectEnable,
	}
}

// StartupBehavior - The desired startup behavior during the ramp up period for personal vms in the hostpool.
type StartupBehavior string

const (
	// StartupBehaviorAll - All personal session hosts in the hostpool will be started during ramp up.
	StartupBehaviorAll StartupBehavior = "All"
	// StartupBehaviorNone - Session hosts will not be started by the service. This setting depends on Start VM on Connect to
	// be enabled to start the session hosts.
	StartupBehaviorNone StartupBehavior = "None"
	// StartupBehaviorWithAssignedUser - Session hosts with an assigned user will be started during Ramp Up
	StartupBehaviorWithAssignedUser StartupBehavior = "WithAssignedUser"
)

// PossibleStartupBehaviorValues returns the possible values for the StartupBehavior const type.
func PossibleStartupBehaviorValues() []StartupBehavior {
	return []StartupBehavior{
		StartupBehaviorAll,
		StartupBehaviorNone,
		StartupBehaviorWithAssignedUser,
	}
}

// Status - Status for a SessionHost.
type Status string

const (
	// StatusAvailable - Session Host has passed all the health checks and is available to handle connections.
	StatusAvailable Status = "Available"
	// StatusDisconnected - The Session Host is unavailable because it is currently disconnected.
	StatusDisconnected Status = "Disconnected"
	// StatusDomainTrustRelationshipLost - SessionHost's domain trust relationship lost
	StatusDomainTrustRelationshipLost Status = "DomainTrustRelationshipLost"
	// StatusFSLogixNotHealthy - FSLogix is in an unhealthy state on the session host.
	StatusFSLogixNotHealthy Status = "FSLogixNotHealthy"
	// StatusNeedsAssistance - New status to inform admins that the health on their endpoint needs to be fixed. The connections
	// might not fail, as these issues are not fatal.
	StatusNeedsAssistance Status = "NeedsAssistance"
	// StatusNoHeartbeat - The Session Host is not heart beating.
	StatusNoHeartbeat Status = "NoHeartbeat"
	// StatusNotJoinedToDomain - SessionHost is not joined to domain.
	StatusNotJoinedToDomain Status = "NotJoinedToDomain"
	// StatusShutdown - Session Host is shutdown - RD Agent reported session host to be stopped or deallocated.
	StatusShutdown Status = "Shutdown"
	// StatusSxSStackListenerNotReady - SxS stack installed on the SessionHost is not ready to receive connections.
	StatusSxSStackListenerNotReady Status = "SxSStackListenerNotReady"
	// StatusUnavailable - Session Host is either turned off or has failed critical health checks which is causing service not
	// to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status.
	StatusUnavailable Status = "Unavailable"
	// StatusUpgradeFailed - Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.)
	// failed.
	StatusUpgradeFailed Status = "UpgradeFailed"
	// StatusUpgrading - Session Host is unavailable because currently an upgrade of RDAgent/side-by-side stack is in progress.
	// Note: this state will be removed once the upgrade completes and the host is able to accept connections.
	StatusUpgrading Status = "Upgrading"
)

// PossibleStatusValues returns the possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{
		StatusAvailable,
		StatusDisconnected,
		StatusDomainTrustRelationshipLost,
		StatusFSLogixNotHealthy,
		StatusNeedsAssistance,
		StatusNoHeartbeat,
		StatusNotJoinedToDomain,
		StatusShutdown,
		StatusSxSStackListenerNotReady,
		StatusUnavailable,
		StatusUpgradeFailed,
		StatusUpgrading,
	}
}

// StopHostsWhen - Specifies when to stop hosts during ramp down period.
type StopHostsWhen string

const (
	// StopHostsWhenZeroActiveSessions - Zero Active Sessions
	StopHostsWhenZeroActiveSessions StopHostsWhen = "ZeroActiveSessions"
	// StopHostsWhenZeroSessions - Zero Total Sessions
	StopHostsWhenZeroSessions StopHostsWhen = "ZeroSessions"
)

// PossibleStopHostsWhenValues returns the possible values for the StopHostsWhen const type.
func PossibleStopHostsWhenValues() []StopHostsWhen {
	return []StopHostsWhen{
		StopHostsWhenZeroActiveSessions,
		StopHostsWhenZeroSessions,
	}
}

// Type - The type of image session hosts use in the hostpool.
type Type string

const (
	// TypeCustom - Using a custom image.
	TypeCustom Type = "Custom"
	// TypeMarketplace - Using default marketplace images offered by Azure Marketplace.
	TypeMarketplace Type = "Marketplace"
)

// PossibleTypeValues returns the possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{
		TypeCustom,
		TypeMarketplace,
	}
}

// UpdateState - Update state of a SessionHost.
type UpdateState string

const (
	// UpdateStateFailed - Update has failed
	UpdateStateFailed UpdateState = "Failed"
	// UpdateStateInitial - Update is initializing
	UpdateStateInitial UpdateState = "Initial"
	// UpdateStatePending - Update is pending
	UpdateStatePending UpdateState = "Pending"
	// UpdateStateStarted - Update has started
	UpdateStateStarted UpdateState = "Started"
	// UpdateStateSucceeded - Update has succeeded
	UpdateStateSucceeded UpdateState = "Succeeded"
)

// PossibleUpdateStateValues returns the possible values for the UpdateState const type.
func PossibleUpdateStateValues() []UpdateState {
	return []UpdateState{
		UpdateStateFailed,
		UpdateStateInitial,
		UpdateStatePending,
		UpdateStateStarted,
		UpdateStateSucceeded,
	}
}

// VirtualMachineDiskType - The disk type used by virtual machine in hostpool session host.
type VirtualMachineDiskType string

const (
	// VirtualMachineDiskTypePremiumLRS - Premium SSD locally redundant storage. Best for production and performance sensitive
	// workloads.
	VirtualMachineDiskTypePremiumLRS VirtualMachineDiskType = "Premium_LRS"
	// VirtualMachineDiskTypeStandardLRS - Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent
	// access.
	VirtualMachineDiskTypeStandardLRS VirtualMachineDiskType = "Standard_LRS"
	// VirtualMachineDiskTypeStandardSSDLRS - Standard SSD locally redundant storage. Best for web servers, lightly used enterprise
	// applications and dev/test.
	VirtualMachineDiskTypeStandardSSDLRS VirtualMachineDiskType = "StandardSSD_LRS"
)

// PossibleVirtualMachineDiskTypeValues returns the possible values for the VirtualMachineDiskType const type.
func PossibleVirtualMachineDiskTypeValues() []VirtualMachineDiskType {
	return []VirtualMachineDiskType{
		VirtualMachineDiskTypePremiumLRS,
		VirtualMachineDiskTypeStandardLRS,
		VirtualMachineDiskTypeStandardSSDLRS,
	}
}

// VirtualMachineSecurityType - The security type used by virtual machine in hostpool session host. Default is Standard.
type VirtualMachineSecurityType string

const (
	// VirtualMachineSecurityTypeConfidentialVM - Confidential Virtual Machine security protocol
	VirtualMachineSecurityTypeConfidentialVM VirtualMachineSecurityType = "ConfidentialVM"
	// VirtualMachineSecurityTypeStandard - Standard security protocol. No additional parameters
	VirtualMachineSecurityTypeStandard VirtualMachineSecurityType = "Standard"
	// VirtualMachineSecurityTypeTrustedLaunch - TrustedLaunch allows for secure boot and vTpm
	VirtualMachineSecurityTypeTrustedLaunch VirtualMachineSecurityType = "TrustedLaunch"
)

// PossibleVirtualMachineSecurityTypeValues returns the possible values for the VirtualMachineSecurityType const type.
func PossibleVirtualMachineSecurityTypeValues() []VirtualMachineSecurityType {
	return []VirtualMachineSecurityType{
		VirtualMachineSecurityTypeConfidentialVM,
		VirtualMachineSecurityTypeStandard,
		VirtualMachineSecurityTypeTrustedLaunch,
	}
}
