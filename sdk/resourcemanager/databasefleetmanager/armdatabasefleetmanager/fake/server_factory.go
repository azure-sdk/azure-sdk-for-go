// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armdatabasefleetmanager.ClientFactory type.
type ServerFactory struct {
	// FirewallRulesServer contains the fakes for client FirewallRulesClient
	FirewallRulesServer FirewallRulesServer

	// FleetDatabasesServer contains the fakes for client FleetDatabasesClient
	FleetDatabasesServer FleetDatabasesServer

	// FleetTiersServer contains the fakes for client FleetTiersClient
	FleetTiersServer FleetTiersServer

	// FleetsServer contains the fakes for client FleetsClient
	FleetsServer FleetsServer

	// FleetspacesServer contains the fakes for client FleetspacesClient
	FleetspacesServer FleetspacesServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armdatabasefleetmanager.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armdatabasefleetmanager.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                    *ServerFactory
	trMu                   sync.Mutex
	trFirewallRulesServer  *FirewallRulesServerTransport
	trFleetDatabasesServer *FleetDatabasesServerTransport
	trFleetTiersServer     *FleetTiersServerTransport
	trFleetsServer         *FleetsServerTransport
	trFleetspacesServer    *FleetspacesServerTransport
	trOperationsServer     *OperationsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "FirewallRulesClient":
		initServer(s, &s.trFirewallRulesServer, func() *FirewallRulesServerTransport {
			return NewFirewallRulesServerTransport(&s.srv.FirewallRulesServer)
		})
		resp, err = s.trFirewallRulesServer.Do(req)
	case "FleetDatabasesClient":
		initServer(s, &s.trFleetDatabasesServer, func() *FleetDatabasesServerTransport {
			return NewFleetDatabasesServerTransport(&s.srv.FleetDatabasesServer)
		})
		resp, err = s.trFleetDatabasesServer.Do(req)
	case "FleetTiersClient":
		initServer(s, &s.trFleetTiersServer, func() *FleetTiersServerTransport { return NewFleetTiersServerTransport(&s.srv.FleetTiersServer) })
		resp, err = s.trFleetTiersServer.Do(req)
	case "FleetsClient":
		initServer(s, &s.trFleetsServer, func() *FleetsServerTransport { return NewFleetsServerTransport(&s.srv.FleetsServer) })
		resp, err = s.trFleetsServer.Do(req)
	case "FleetspacesClient":
		initServer(s, &s.trFleetspacesServer, func() *FleetspacesServerTransport { return NewFleetspacesServerTransport(&s.srv.FleetspacesServer) })
		resp, err = s.trFleetspacesServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
