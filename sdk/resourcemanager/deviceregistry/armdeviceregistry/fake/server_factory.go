//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armdeviceregistry.ClientFactory type.
type ServerFactory struct {
	AssetEndpointProfilesServer           AssetEndpointProfilesServer
	AssetsServer                          AssetsServer
	BillingContainersServer               BillingContainersServer
	DiscoveredAssetEndpointProfilesServer DiscoveredAssetEndpointProfilesServer
	DiscoveredAssetsServer                DiscoveredAssetsServer
	OperationStatusServer                 OperationStatusServer
	OperationsServer                      OperationsServer
	SchemaRegistriesServer                SchemaRegistriesServer
	SchemaVersionsServer                  SchemaVersionsServer
	SchemasServer                         SchemasServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armdeviceregistry.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armdeviceregistry.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                     *ServerFactory
	trMu                                    sync.Mutex
	trAssetEndpointProfilesServer           *AssetEndpointProfilesServerTransport
	trAssetsServer                          *AssetsServerTransport
	trBillingContainersServer               *BillingContainersServerTransport
	trDiscoveredAssetEndpointProfilesServer *DiscoveredAssetEndpointProfilesServerTransport
	trDiscoveredAssetsServer                *DiscoveredAssetsServerTransport
	trOperationStatusServer                 *OperationStatusServerTransport
	trOperationsServer                      *OperationsServerTransport
	trSchemaRegistriesServer                *SchemaRegistriesServerTransport
	trSchemaVersionsServer                  *SchemaVersionsServerTransport
	trSchemasServer                         *SchemasServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AssetEndpointProfilesClient":
		initServer(s, &s.trAssetEndpointProfilesServer, func() *AssetEndpointProfilesServerTransport {
			return NewAssetEndpointProfilesServerTransport(&s.srv.AssetEndpointProfilesServer)
		})
		resp, err = s.trAssetEndpointProfilesServer.Do(req)
	case "AssetsClient":
		initServer(s, &s.trAssetsServer, func() *AssetsServerTransport { return NewAssetsServerTransport(&s.srv.AssetsServer) })
		resp, err = s.trAssetsServer.Do(req)
	case "BillingContainersClient":
		initServer(s, &s.trBillingContainersServer, func() *BillingContainersServerTransport {
			return NewBillingContainersServerTransport(&s.srv.BillingContainersServer)
		})
		resp, err = s.trBillingContainersServer.Do(req)
	case "DiscoveredAssetEndpointProfilesClient":
		initServer(s, &s.trDiscoveredAssetEndpointProfilesServer, func() *DiscoveredAssetEndpointProfilesServerTransport {
			return NewDiscoveredAssetEndpointProfilesServerTransport(&s.srv.DiscoveredAssetEndpointProfilesServer)
		})
		resp, err = s.trDiscoveredAssetEndpointProfilesServer.Do(req)
	case "DiscoveredAssetsClient":
		initServer(s, &s.trDiscoveredAssetsServer, func() *DiscoveredAssetsServerTransport {
			return NewDiscoveredAssetsServerTransport(&s.srv.DiscoveredAssetsServer)
		})
		resp, err = s.trDiscoveredAssetsServer.Do(req)
	case "OperationStatusClient":
		initServer(s, &s.trOperationStatusServer, func() *OperationStatusServerTransport {
			return NewOperationStatusServerTransport(&s.srv.OperationStatusServer)
		})
		resp, err = s.trOperationStatusServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "SchemaRegistriesClient":
		initServer(s, &s.trSchemaRegistriesServer, func() *SchemaRegistriesServerTransport {
			return NewSchemaRegistriesServerTransport(&s.srv.SchemaRegistriesServer)
		})
		resp, err = s.trSchemaRegistriesServer.Do(req)
	case "SchemaVersionsClient":
		initServer(s, &s.trSchemaVersionsServer, func() *SchemaVersionsServerTransport {
			return NewSchemaVersionsServerTransport(&s.srv.SchemaVersionsServer)
		})
		resp, err = s.trSchemaVersionsServer.Do(req)
	case "SchemasClient":
		initServer(s, &s.trSchemasServer, func() *SchemasServerTransport { return NewSchemasServerTransport(&s.srv.SchemasServer) })
		resp, err = s.trSchemasServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
