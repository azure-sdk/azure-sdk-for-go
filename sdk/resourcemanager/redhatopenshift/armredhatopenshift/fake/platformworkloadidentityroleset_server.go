// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redhatopenshift/armredhatopenshift"
	"net/http"
	"net/url"
	"regexp"
)

// PlatformWorkloadIdentityRoleSetServer is a fake server for instances of the armredhatopenshift.PlatformWorkloadIdentityRoleSetClient type.
type PlatformWorkloadIdentityRoleSetServer struct {
	// Get is the fake for method PlatformWorkloadIdentityRoleSetClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, location string, openShiftMinorVersion string, options *armredhatopenshift.PlatformWorkloadIdentityRoleSetClientGetOptions) (resp azfake.Responder[armredhatopenshift.PlatformWorkloadIdentityRoleSetClientGetResponse], errResp azfake.ErrorResponder)
}

// NewPlatformWorkloadIdentityRoleSetServerTransport creates a new instance of PlatformWorkloadIdentityRoleSetServerTransport with the provided implementation.
// The returned PlatformWorkloadIdentityRoleSetServerTransport instance is connected to an instance of armredhatopenshift.PlatformWorkloadIdentityRoleSetClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPlatformWorkloadIdentityRoleSetServerTransport(srv *PlatformWorkloadIdentityRoleSetServer) *PlatformWorkloadIdentityRoleSetServerTransport {
	return &PlatformWorkloadIdentityRoleSetServerTransport{srv: srv}
}

// PlatformWorkloadIdentityRoleSetServerTransport connects instances of armredhatopenshift.PlatformWorkloadIdentityRoleSetClient to instances of PlatformWorkloadIdentityRoleSetServer.
// Don't use this type directly, use NewPlatformWorkloadIdentityRoleSetServerTransport instead.
type PlatformWorkloadIdentityRoleSetServerTransport struct {
	srv *PlatformWorkloadIdentityRoleSetServer
}

// Do implements the policy.Transporter interface for PlatformWorkloadIdentityRoleSetServerTransport.
func (p *PlatformWorkloadIdentityRoleSetServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PlatformWorkloadIdentityRoleSetServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if platformWorkloadIdentityRoleSetServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = platformWorkloadIdentityRoleSetServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PlatformWorkloadIdentityRoleSetClient.Get":
				res.resp, res.err = p.dispatchGet(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PlatformWorkloadIdentityRoleSetServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RedHatOpenShift/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/platformWorkloadIdentityRoleSets/(?P<openShiftMinorVersion>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	openShiftMinorVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("openShiftMinorVersion")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), locationParam, openShiftMinorVersionParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PlatformWorkloadIdentityRoleSet, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PlatformWorkloadIdentityRoleSetServerTransport
var platformWorkloadIdentityRoleSetServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
