//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/webpubsub/armwebpubsub"
	"net/http"
	"net/url"
	"regexp"
)

// ReplicaServer is a fake server for instances of the armwebpubsub.ReplicaClient type.
type ReplicaServer struct {
	// BeginSharedPrivateLinkResourcesCreateOrUpdate is the fake for method ReplicaClient.BeginSharedPrivateLinkResourcesCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginSharedPrivateLinkResourcesCreateOrUpdate func(ctx context.Context, resourceGroupName string, resourceName string, replicaName string, sharedPrivateLinkResourceName string, parameters armwebpubsub.SharedPrivateLinkResource, options *armwebpubsub.ReplicaClientBeginSharedPrivateLinkResourcesCreateOrUpdateOptions) (resp azfake.PollerResponder[armwebpubsub.ReplicaClientSharedPrivateLinkResourcesCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// SharedPrivateLinkResourcesGet is the fake for method ReplicaClient.SharedPrivateLinkResourcesGet
	// HTTP status codes to indicate success: http.StatusOK
	SharedPrivateLinkResourcesGet func(ctx context.Context, resourceGroupName string, resourceName string, replicaName string, sharedPrivateLinkResourceName string, options *armwebpubsub.ReplicaClientSharedPrivateLinkResourcesGetOptions) (resp azfake.Responder[armwebpubsub.ReplicaClientSharedPrivateLinkResourcesGetResponse], errResp azfake.ErrorResponder)

	// NewSharedPrivateLinkResourcesListPager is the fake for method ReplicaClient.NewSharedPrivateLinkResourcesListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewSharedPrivateLinkResourcesListPager func(resourceGroupName string, resourceName string, replicaName string, options *armwebpubsub.ReplicaClientSharedPrivateLinkResourcesListOptions) (resp azfake.PagerResponder[armwebpubsub.ReplicaClientSharedPrivateLinkResourcesListResponse])
}

// NewReplicaServerTransport creates a new instance of ReplicaServerTransport with the provided implementation.
// The returned ReplicaServerTransport instance is connected to an instance of armwebpubsub.ReplicaClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewReplicaServerTransport(srv *ReplicaServer) *ReplicaServerTransport {
	return &ReplicaServerTransport{
		srv: srv,
		beginSharedPrivateLinkResourcesCreateOrUpdate: newTracker[azfake.PollerResponder[armwebpubsub.ReplicaClientSharedPrivateLinkResourcesCreateOrUpdateResponse]](),
		newSharedPrivateLinkResourcesListPager:        newTracker[azfake.PagerResponder[armwebpubsub.ReplicaClientSharedPrivateLinkResourcesListResponse]](),
	}
}

// ReplicaServerTransport connects instances of armwebpubsub.ReplicaClient to instances of ReplicaServer.
// Don't use this type directly, use NewReplicaServerTransport instead.
type ReplicaServerTransport struct {
	srv                                           *ReplicaServer
	beginSharedPrivateLinkResourcesCreateOrUpdate *tracker[azfake.PollerResponder[armwebpubsub.ReplicaClientSharedPrivateLinkResourcesCreateOrUpdateResponse]]
	newSharedPrivateLinkResourcesListPager        *tracker[azfake.PagerResponder[armwebpubsub.ReplicaClientSharedPrivateLinkResourcesListResponse]]
}

// Do implements the policy.Transporter interface for ReplicaServerTransport.
func (r *ReplicaServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ReplicaClient.BeginSharedPrivateLinkResourcesCreateOrUpdate":
		resp, err = r.dispatchBeginSharedPrivateLinkResourcesCreateOrUpdate(req)
	case "ReplicaClient.SharedPrivateLinkResourcesGet":
		resp, err = r.dispatchSharedPrivateLinkResourcesGet(req)
	case "ReplicaClient.NewSharedPrivateLinkResourcesListPager":
		resp, err = r.dispatchNewSharedPrivateLinkResourcesListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *ReplicaServerTransport) dispatchBeginSharedPrivateLinkResourcesCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if r.srv.BeginSharedPrivateLinkResourcesCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginSharedPrivateLinkResourcesCreateOrUpdate not implemented")}
	}
	beginSharedPrivateLinkResourcesCreateOrUpdate := r.beginSharedPrivateLinkResourcesCreateOrUpdate.get(req)
	if beginSharedPrivateLinkResourcesCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SignalRService/webPubSub/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/replicas/(?P<replicaName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sharedPrivateLinkResources/(?P<sharedPrivateLinkResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armwebpubsub.SharedPrivateLinkResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		replicaNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("replicaName")])
		if err != nil {
			return nil, err
		}
		sharedPrivateLinkResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sharedPrivateLinkResourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := r.srv.BeginSharedPrivateLinkResourcesCreateOrUpdate(req.Context(), resourceGroupNameParam, resourceNameParam, replicaNameParam, sharedPrivateLinkResourceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginSharedPrivateLinkResourcesCreateOrUpdate = &respr
		r.beginSharedPrivateLinkResourcesCreateOrUpdate.add(req, beginSharedPrivateLinkResourcesCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginSharedPrivateLinkResourcesCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		r.beginSharedPrivateLinkResourcesCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginSharedPrivateLinkResourcesCreateOrUpdate) {
		r.beginSharedPrivateLinkResourcesCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (r *ReplicaServerTransport) dispatchSharedPrivateLinkResourcesGet(req *http.Request) (*http.Response, error) {
	if r.srv.SharedPrivateLinkResourcesGet == nil {
		return nil, &nonRetriableError{errors.New("fake for method SharedPrivateLinkResourcesGet not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SignalRService/webPubSub/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/replicas/(?P<replicaName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sharedPrivateLinkResources/(?P<sharedPrivateLinkResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
	if err != nil {
		return nil, err
	}
	replicaNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("replicaName")])
	if err != nil {
		return nil, err
	}
	sharedPrivateLinkResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sharedPrivateLinkResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.SharedPrivateLinkResourcesGet(req.Context(), resourceGroupNameParam, resourceNameParam, replicaNameParam, sharedPrivateLinkResourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SharedPrivateLinkResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ReplicaServerTransport) dispatchNewSharedPrivateLinkResourcesListPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewSharedPrivateLinkResourcesListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewSharedPrivateLinkResourcesListPager not implemented")}
	}
	newSharedPrivateLinkResourcesListPager := r.newSharedPrivateLinkResourcesListPager.get(req)
	if newSharedPrivateLinkResourcesListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SignalRService/webPubSub/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/replicas/(?P<replicaName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sharedPrivateLinkResources`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		replicaNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("replicaName")])
		if err != nil {
			return nil, err
		}
		resp := r.srv.NewSharedPrivateLinkResourcesListPager(resourceGroupNameParam, resourceNameParam, replicaNameParam, nil)
		newSharedPrivateLinkResourcesListPager = &resp
		r.newSharedPrivateLinkResourcesListPager.add(req, newSharedPrivateLinkResourcesListPager)
		server.PagerResponderInjectNextLinks(newSharedPrivateLinkResourcesListPager, req, func(page *armwebpubsub.ReplicaClientSharedPrivateLinkResourcesListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newSharedPrivateLinkResourcesListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		r.newSharedPrivateLinkResourcesListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newSharedPrivateLinkResourcesListPager) {
		r.newSharedPrivateLinkResourcesListPager.remove(req)
	}
	return resp, nil
}
