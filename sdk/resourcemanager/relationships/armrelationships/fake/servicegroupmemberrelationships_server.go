// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/relationships/armrelationships"
	"net/http"
	"net/url"
	"regexp"
)

// ServiceGroupMemberRelationshipsServer is a fake server for instances of the armrelationships.ServiceGroupMemberRelationshipsClient type.
type ServiceGroupMemberRelationshipsServer struct {
	// BeginCreateOrUpdate is the fake for method ServiceGroupMemberRelationshipsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceURI string, name string, resource armrelationships.ServiceGroupMemberRelationship, options *armrelationships.ServiceGroupMemberRelationshipsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armrelationships.ServiceGroupMemberRelationshipsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method ServiceGroupMemberRelationshipsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceURI string, name string, options *armrelationships.ServiceGroupMemberRelationshipsClientBeginDeleteOptions) (resp azfake.PollerResponder[armrelationships.ServiceGroupMemberRelationshipsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ServiceGroupMemberRelationshipsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceURI string, name string, options *armrelationships.ServiceGroupMemberRelationshipsClientGetOptions) (resp azfake.Responder[armrelationships.ServiceGroupMemberRelationshipsClientGetResponse], errResp azfake.ErrorResponder)
}

// NewServiceGroupMemberRelationshipsServerTransport creates a new instance of ServiceGroupMemberRelationshipsServerTransport with the provided implementation.
// The returned ServiceGroupMemberRelationshipsServerTransport instance is connected to an instance of armrelationships.ServiceGroupMemberRelationshipsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServiceGroupMemberRelationshipsServerTransport(srv *ServiceGroupMemberRelationshipsServer) *ServiceGroupMemberRelationshipsServerTransport {
	return &ServiceGroupMemberRelationshipsServerTransport{
		srv:                 srv,
		beginCreateOrUpdate: newTracker[azfake.PollerResponder[armrelationships.ServiceGroupMemberRelationshipsClientCreateOrUpdateResponse]](),
		beginDelete:         newTracker[azfake.PollerResponder[armrelationships.ServiceGroupMemberRelationshipsClientDeleteResponse]](),
	}
}

// ServiceGroupMemberRelationshipsServerTransport connects instances of armrelationships.ServiceGroupMemberRelationshipsClient to instances of ServiceGroupMemberRelationshipsServer.
// Don't use this type directly, use NewServiceGroupMemberRelationshipsServerTransport instead.
type ServiceGroupMemberRelationshipsServerTransport struct {
	srv                 *ServiceGroupMemberRelationshipsServer
	beginCreateOrUpdate *tracker[azfake.PollerResponder[armrelationships.ServiceGroupMemberRelationshipsClientCreateOrUpdateResponse]]
	beginDelete         *tracker[azfake.PollerResponder[armrelationships.ServiceGroupMemberRelationshipsClientDeleteResponse]]
}

// Do implements the policy.Transporter interface for ServiceGroupMemberRelationshipsServerTransport.
func (s *ServiceGroupMemberRelationshipsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *ServiceGroupMemberRelationshipsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if serviceGroupMemberRelationshipsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = serviceGroupMemberRelationshipsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ServiceGroupMemberRelationshipsClient.BeginCreateOrUpdate":
				res.resp, res.err = s.dispatchBeginCreateOrUpdate(req)
			case "ServiceGroupMemberRelationshipsClient.BeginDelete":
				res.resp, res.err = s.dispatchBeginDelete(req)
			case "ServiceGroupMemberRelationshipsClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *ServiceGroupMemberRelationshipsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := s.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Relationships/serviceGroupMember/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armrelationships.ServiceGroupMemberRelationship](req)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreateOrUpdate(req.Context(), resourceURIParam, nameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		s.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		s.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		s.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (s *ServiceGroupMemberRelationshipsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if s.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := s.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Relationships/serviceGroupMember/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginDelete(req.Context(), resourceURIParam, nameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		s.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		s.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		s.beginDelete.remove(req)
	}

	return resp, nil
}

func (s *ServiceGroupMemberRelationshipsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Relationships/serviceGroupMember/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceURIParam, nameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ServiceGroupMemberRelationship, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ServiceGroupMemberRelationshipsServerTransport
var serviceGroupMemberRelationshipsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
