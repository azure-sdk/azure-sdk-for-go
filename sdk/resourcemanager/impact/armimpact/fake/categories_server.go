//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/impact/armimpact"
	"net/http"
	"net/url"
	"regexp"
)

// CategoriesServer is a fake server for instances of the armimpact.CategoriesClient type.
type CategoriesServer struct {
	// Get is the fake for method CategoriesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, impactCategoryName string, options *armimpact.CategoriesClientGetOptions) (resp azfake.Responder[armimpact.CategoriesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListBySubscriptionPager is the fake for method CategoriesClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armimpact.CategoriesClientListBySubscriptionOptions) (resp azfake.PagerResponder[armimpact.CategoriesClientListBySubscriptionResponse])
}

// NewCategoriesServerTransport creates a new instance of CategoriesServerTransport with the provided implementation.
// The returned CategoriesServerTransport instance is connected to an instance of armimpact.CategoriesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCategoriesServerTransport(srv *CategoriesServer) *CategoriesServerTransport {
	return &CategoriesServerTransport{
		srv:                        srv,
		newListBySubscriptionPager: newTracker[azfake.PagerResponder[armimpact.CategoriesClientListBySubscriptionResponse]](),
	}
}

// CategoriesServerTransport connects instances of armimpact.CategoriesClient to instances of CategoriesServer.
// Don't use this type directly, use NewCategoriesServerTransport instead.
type CategoriesServerTransport struct {
	srv                        *CategoriesServer
	newListBySubscriptionPager *tracker[azfake.PagerResponder[armimpact.CategoriesClientListBySubscriptionResponse]]
}

// Do implements the policy.Transporter interface for CategoriesServerTransport.
func (c *CategoriesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "CategoriesClient.Get":
		resp, err = c.dispatchGet(req)
	case "CategoriesClient.NewListBySubscriptionPager":
		resp, err = c.dispatchNewListBySubscriptionPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *CategoriesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Impact/impactCategories/(?P<impactCategoryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	impactCategoryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("impactCategoryName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), impactCategoryNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Category, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CategoriesServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := c.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Impact/impactCategories`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		categoryNameUnescaped, err := url.QueryUnescape(qp.Get("categoryName"))
		if err != nil {
			return nil, err
		}
		categoryNameParam := getOptional(categoryNameUnescaped)
		resourceTypeUnescaped, err := url.QueryUnescape(qp.Get("resourceType"))
		if err != nil {
			return nil, err
		}
		resourceTypeParam := getOptional(resourceTypeUnescaped)
		var options *armimpact.CategoriesClientListBySubscriptionOptions
		if categoryNameParam != nil || resourceTypeParam != nil {
			options = &armimpact.CategoriesClientListBySubscriptionOptions{
				CategoryName: categoryNameParam,
				ResourceType: resourceTypeParam,
			}
		}
		resp := c.srv.NewListBySubscriptionPager(options)
		newListBySubscriptionPager = &resp
		c.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armimpact.CategoriesClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		c.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}
