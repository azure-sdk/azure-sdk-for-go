//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationassessment/armmigrationassessment"
	"net/http"
	"net/url"
	"regexp"
)

// BusinessCaseIaasSummaryOperationsServer is a fake server for instances of the armmigrationassessment.BusinessCaseIaasSummaryOperationsClient type.
type BusinessCaseIaasSummaryOperationsServer struct {
	// Get is the fake for method BusinessCaseIaasSummaryOperationsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, projectName string, businessCaseName string, iaasSummaryName string, options *armmigrationassessment.BusinessCaseIaasSummaryOperationsClientGetOptions) (resp azfake.Responder[armmigrationassessment.BusinessCaseIaasSummaryOperationsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByBusinessCasePager is the fake for method BusinessCaseIaasSummaryOperationsClient.NewListByBusinessCasePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByBusinessCasePager func(resourceGroupName string, projectName string, businessCaseName string, options *armmigrationassessment.BusinessCaseIaasSummaryOperationsClientListByBusinessCaseOptions) (resp azfake.PagerResponder[armmigrationassessment.BusinessCaseIaasSummaryOperationsClientListByBusinessCaseResponse])
}

// NewBusinessCaseIaasSummaryOperationsServerTransport creates a new instance of BusinessCaseIaasSummaryOperationsServerTransport with the provided implementation.
// The returned BusinessCaseIaasSummaryOperationsServerTransport instance is connected to an instance of armmigrationassessment.BusinessCaseIaasSummaryOperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBusinessCaseIaasSummaryOperationsServerTransport(srv *BusinessCaseIaasSummaryOperationsServer) *BusinessCaseIaasSummaryOperationsServerTransport {
	return &BusinessCaseIaasSummaryOperationsServerTransport{
		srv:                        srv,
		newListByBusinessCasePager: newTracker[azfake.PagerResponder[armmigrationassessment.BusinessCaseIaasSummaryOperationsClientListByBusinessCaseResponse]](),
	}
}

// BusinessCaseIaasSummaryOperationsServerTransport connects instances of armmigrationassessment.BusinessCaseIaasSummaryOperationsClient to instances of BusinessCaseIaasSummaryOperationsServer.
// Don't use this type directly, use NewBusinessCaseIaasSummaryOperationsServerTransport instead.
type BusinessCaseIaasSummaryOperationsServerTransport struct {
	srv                        *BusinessCaseIaasSummaryOperationsServer
	newListByBusinessCasePager *tracker[azfake.PagerResponder[armmigrationassessment.BusinessCaseIaasSummaryOperationsClientListByBusinessCaseResponse]]
}

// Do implements the policy.Transporter interface for BusinessCaseIaasSummaryOperationsServerTransport.
func (b *BusinessCaseIaasSummaryOperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "BusinessCaseIaasSummaryOperationsClient.Get":
		resp, err = b.dispatchGet(req)
	case "BusinessCaseIaasSummaryOperationsClient.NewListByBusinessCasePager":
		resp, err = b.dispatchNewListByBusinessCasePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (b *BusinessCaseIaasSummaryOperationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if b.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/assessmentProjects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/businessCases/(?P<businessCaseName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/iaasSummaries/(?P<iaasSummaryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
	if err != nil {
		return nil, err
	}
	businessCaseNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("businessCaseName")])
	if err != nil {
		return nil, err
	}
	iaasSummaryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("iaasSummaryName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Get(req.Context(), resourceGroupNameParam, projectNameParam, businessCaseNameParam, iaasSummaryNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).IaasSummary, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BusinessCaseIaasSummaryOperationsServerTransport) dispatchNewListByBusinessCasePager(req *http.Request) (*http.Response, error) {
	if b.srv.NewListByBusinessCasePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByBusinessCasePager not implemented")}
	}
	newListByBusinessCasePager := b.newListByBusinessCasePager.get(req)
	if newListByBusinessCasePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/assessmentProjects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/businessCases/(?P<businessCaseName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/iaasSummaries`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
		if err != nil {
			return nil, err
		}
		businessCaseNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("businessCaseName")])
		if err != nil {
			return nil, err
		}
		resp := b.srv.NewListByBusinessCasePager(resourceGroupNameParam, projectNameParam, businessCaseNameParam, nil)
		newListByBusinessCasePager = &resp
		b.newListByBusinessCasePager.add(req, newListByBusinessCasePager)
		server.PagerResponderInjectNextLinks(newListByBusinessCasePager, req, func(page *armmigrationassessment.BusinessCaseIaasSummaryOperationsClientListByBusinessCaseResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByBusinessCasePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		b.newListByBusinessCasePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByBusinessCasePager) {
		b.newListByBusinessCasePager.remove(req)
	}
	return resp, nil
}
