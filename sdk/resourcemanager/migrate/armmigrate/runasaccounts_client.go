//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// RunAsAccountsClient contains the methods for the RunAsAccounts group.
// Don't use this type directly, use NewRunAsAccountsClient() instead.
type RunAsAccountsClient struct {
	host string
	pl   runtime.Pipeline
}

// NewRunAsAccountsClient creates a new instance of RunAsAccountsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewRunAsAccountsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*RunAsAccountsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &RunAsAccountsClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// NewGetAllRunAsAccountsInSitePager - Method to get run as accounts.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - RunAsAccountsClientGetAllRunAsAccountsInSiteOptions contains the optional parameters for the RunAsAccountsClient.NewGetAllRunAsAccountsInSitePager
//     method.
func (client *RunAsAccountsClient) NewGetAllRunAsAccountsInSitePager(subscriptionID string, resourceGroupName string, siteName string, options *RunAsAccountsClientGetAllRunAsAccountsInSiteOptions) *runtime.Pager[RunAsAccountsClientGetAllRunAsAccountsInSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[RunAsAccountsClientGetAllRunAsAccountsInSiteResponse]{
		More: func(page RunAsAccountsClientGetAllRunAsAccountsInSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *RunAsAccountsClientGetAllRunAsAccountsInSiteResponse) (RunAsAccountsClientGetAllRunAsAccountsInSiteResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getAllRunAsAccountsInSiteCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return RunAsAccountsClientGetAllRunAsAccountsInSiteResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return RunAsAccountsClientGetAllRunAsAccountsInSiteResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return RunAsAccountsClientGetAllRunAsAccountsInSiteResponse{}, runtime.NewResponseError(resp)
			}
			return client.getAllRunAsAccountsInSiteHandleResponse(resp)
		},
	})
}

// getAllRunAsAccountsInSiteCreateRequest creates the GetAllRunAsAccountsInSite request.
func (client *RunAsAccountsClient) getAllRunAsAccountsInSiteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *RunAsAccountsClientGetAllRunAsAccountsInSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/runAsAccounts"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAllRunAsAccountsInSiteHandleResponse handles the GetAllRunAsAccountsInSite response.
func (client *RunAsAccountsClient) getAllRunAsAccountsInSiteHandleResponse(resp *http.Response) (RunAsAccountsClientGetAllRunAsAccountsInSiteResponse, error) {
	result := RunAsAccountsClientGetAllRunAsAccountsInSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMwareRunAsAccountCollection); err != nil {
		return RunAsAccountsClientGetAllRunAsAccountsInSiteResponse{}, err
	}
	return result, nil
}

// GetRunAsAccount - Method to get run as account.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - accountName - Run as account ARM name.
//   - options - RunAsAccountsClientGetRunAsAccountOptions contains the optional parameters for the RunAsAccountsClient.GetRunAsAccount
//     method.
func (client *RunAsAccountsClient) GetRunAsAccount(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, accountName string, options *RunAsAccountsClientGetRunAsAccountOptions) (RunAsAccountsClientGetRunAsAccountResponse, error) {
	req, err := client.getRunAsAccountCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, accountName, options)
	if err != nil {
		return RunAsAccountsClientGetRunAsAccountResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RunAsAccountsClientGetRunAsAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RunAsAccountsClientGetRunAsAccountResponse{}, runtime.NewResponseError(resp)
	}
	return client.getRunAsAccountHandleResponse(resp)
}

// getRunAsAccountCreateRequest creates the GetRunAsAccount request.
func (client *RunAsAccountsClient) getRunAsAccountCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, accountName string, options *RunAsAccountsClientGetRunAsAccountOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/runAsAccounts/{accountName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getRunAsAccountHandleResponse handles the GetRunAsAccount response.
func (client *RunAsAccountsClient) getRunAsAccountHandleResponse(resp *http.Response) (RunAsAccountsClientGetRunAsAccountResponse, error) {
	result := RunAsAccountsClientGetRunAsAccountResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMwareRunAsAccount); err != nil {
		return RunAsAccountsClientGetRunAsAccountResponse{}, err
	}
	return result, nil
}
