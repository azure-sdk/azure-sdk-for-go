//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import "encoding/json"

func unmarshalAwsOrganizationalDataClassification(rawMsg json.RawMessage) (AwsOrganizationalDataClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AwsOrganizationalDataClassification
	switch m["organizationMembershipType"] {
	case string(OrganizationMembershipTypeMember):
		b = &AwsOrganizationalDataMember{}
	case string(OrganizationMembershipTypeOrganization):
		b = &AwsOrganizationalDataMaster{}
	default:
		b = &AwsOrganizationalData{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalCloudOfferingClassification(rawMsg json.RawMessage) (CloudOfferingClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b CloudOfferingClassification
	switch m["offeringType"] {
	case string(OfferingTypeCspmMonitorAws):
		b = &CspmMonitorAwsOffering{}
	case string(OfferingTypeCspmMonitorAzureDevOps):
		b = &CspmMonitorAzureDevOpsOffering{}
	case string(OfferingTypeCspmMonitorGcp):
		b = &CspmMonitorGcpOffering{}
	case string(OfferingTypeCspmMonitorGitLab):
		b = &CspmMonitorGitLabOffering{}
	case string(OfferingTypeCspmMonitorGithub):
		b = &CspmMonitorGithubOffering{}
	case string(OfferingTypeDefenderCspmAws):
		b = &DefenderCspmAwsOffering{}
	case string(OfferingTypeDefenderCspmGcp):
		b = &DefenderCspmGcpOffering{}
	case string(OfferingTypeDefenderForContainersAws):
		b = &DefenderForContainersAwsOffering{}
	case string(OfferingTypeDefenderForContainersGcp):
		b = &DefenderForContainersGcpOffering{}
	case string(OfferingTypeDefenderForDatabasesAws):
		b = &DefenderFoDatabasesAwsOffering{}
	case string(OfferingTypeDefenderForDatabasesGcp):
		b = &DefenderForDatabasesGcpOffering{}
	case string(OfferingTypeDefenderForDevOpsAzureDevOps):
		b = &DefenderForDevOpsAzureDevOpsOffering{}
	case string(OfferingTypeDefenderForDevOpsGitLab):
		b = &DefenderForDevOpsGitLabOffering{}
	case string(OfferingTypeDefenderForDevOpsGithub):
		b = &DefenderForDevOpsGithubOffering{}
	case string(OfferingTypeDefenderForServersAws):
		b = &DefenderForServersAwsOffering{}
	case string(OfferingTypeDefenderForServersGcp):
		b = &DefenderForServersGcpOffering{}
	case string(OfferingTypeInformationProtectionAws):
		b = &InformationProtectionAwsOffering{}
	default:
		b = &CloudOffering{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalCloudOfferingClassificationArray(rawMsg json.RawMessage) ([]CloudOfferingClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]CloudOfferingClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalCloudOfferingClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEnvironmentDataClassification(rawMsg json.RawMessage) (EnvironmentDataClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EnvironmentDataClassification
	switch m["environmentType"] {
	case string(EnvironmentTypeAwsAccount):
		b = &AwsEnvironmentData{}
	case string(EnvironmentTypeAzureDevOpsScope):
		b = &AzureDevOpsScopeEnvironmentData{}
	case string(EnvironmentTypeGcpProject):
		b = &GcpProjectEnvironmentData{}
	case string(EnvironmentTypeGithubScope):
		b = &GithubScopeEnvironmentData{}
	case string(EnvironmentTypeGitlabScope):
		b = &GitlabScopeEnvironmentData{}
	default:
		b = &EnvironmentData{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalGcpOrganizationalDataClassification(rawMsg json.RawMessage) (GcpOrganizationalDataClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b GcpOrganizationalDataClassification
	switch m["organizationMembershipType"] {
	case string(OrganizationMembershipTypeMember):
		b = &GcpOrganizationalDataMember{}
	case string(OrganizationMembershipTypeOrganization):
		b = &GcpOrganizationalDataOrganization{}
	default:
		b = &GcpOrganizationalData{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
