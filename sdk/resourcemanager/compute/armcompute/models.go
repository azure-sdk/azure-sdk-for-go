//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcompute

// ContainerService - Container service.
type ContainerService struct {
	// REQUIRED; Resource location
	Location *string `json:"location,omitempty"`

	// Properties of the container service.
	Properties *ContainerServiceProperties `json:"properties,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ContainerServiceAgentPoolProfile - Profile for the container service agent pool.
type ContainerServiceAgentPoolProfile struct {
	// REQUIRED; Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive).
	// The default value is 1.
	Count *int32 `json:"count,omitempty"`

	// REQUIRED; DNS prefix to be used to create the FQDN for the agent pool.
	DNSPrefix *string `json:"dnsPrefix,omitempty"`

	// REQUIRED; Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Size of agent VMs.
	VMSize *ContainerServiceVMSizeTypes `json:"vmSize,omitempty"`

	// READ-ONLY; FQDN for the agent pool.
	Fqdn *string `json:"fqdn,omitempty" azure:"ro"`
}

// ContainerServiceCustomProfile - Properties to configure a custom container service cluster.
type ContainerServiceCustomProfile struct {
	// REQUIRED; The name of the custom orchestrator to use.
	Orchestrator *string `json:"orchestrator,omitempty"`
}

type ContainerServiceDiagnosticsProfile struct {
	// REQUIRED; Profile for the container service VM diagnostic agent.
	VMDiagnostics *ContainerServiceVMDiagnostics `json:"vmDiagnostics,omitempty"`
}

// ContainerServiceLinuxProfile - Profile for Linux VMs in the container service cluster.
type ContainerServiceLinuxProfile struct {
	// REQUIRED; The administrator username to use for Linux VMs.
	AdminUsername *string `json:"adminUsername,omitempty"`

	// REQUIRED; The ssh key configuration for Linux VMs.
	SSH *ContainerServiceSSHConfiguration `json:"ssh,omitempty"`
}

// ContainerServiceListResult - The response from the List Container Services operation.
type ContainerServiceListResult struct {
	// The URL to get the next set of container service results.
	NextLink *string `json:"nextLink,omitempty"`

	// the list of container services.
	Value []*ContainerService `json:"value,omitempty"`
}

// ContainerServiceMasterProfile - Profile for the container service master.
type ContainerServiceMasterProfile struct {
	// REQUIRED; DNS prefix to be used to create the FQDN for master.
	DNSPrefix *string `json:"dnsPrefix,omitempty"`

	// Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.
	Count *ContainerServiceMasterProfileCount `json:"count,omitempty"`

	// READ-ONLY; FQDN for the master.
	Fqdn *string `json:"fqdn,omitempty" azure:"ro"`
}

// ContainerServiceOrchestratorProfile - Profile for the container service orchestrator.
type ContainerServiceOrchestratorProfile struct {
	// REQUIRED; The orchestrator to use to manage container service cluster resources. Valid values are Swarm, DCOS, and Custom.
	OrchestratorType *ContainerServiceOrchestratorTypes `json:"orchestratorType,omitempty"`
}

// ContainerServicePrincipalProfile - Information about a service principal identity for the cluster to use for manipulating
// Azure APIs.
type ContainerServicePrincipalProfile struct {
	// REQUIRED; The ID for the service principal.
	ClientID *string `json:"clientId,omitempty"`

	// REQUIRED; The secret password associated with the service principal.
	Secret *string `json:"secret,omitempty"`
}

// ContainerServiceProperties - Properties of the container service.
type ContainerServiceProperties struct {
	// REQUIRED; Properties of the agent pool.
	AgentPoolProfiles []*ContainerServiceAgentPoolProfile `json:"agentPoolProfiles,omitempty"`

	// REQUIRED; Properties of Linux VMs.
	LinuxProfile *ContainerServiceLinuxProfile `json:"linuxProfile,omitempty"`

	// REQUIRED; Properties of master agents.
	MasterProfile *ContainerServiceMasterProfile `json:"masterProfile,omitempty"`

	// Properties for custom clusters.
	CustomProfile *ContainerServiceCustomProfile `json:"customProfile,omitempty"`

	// Properties of the diagnostic agent.
	DiagnosticsProfile *ContainerServiceDiagnosticsProfile `json:"diagnosticsProfile,omitempty"`

	// Properties of the orchestrator.
	OrchestratorProfile *ContainerServiceOrchestratorProfile `json:"orchestratorProfile,omitempty"`

	// Properties for cluster service principals.
	ServicePrincipalProfile *ContainerServicePrincipalProfile `json:"servicePrincipalProfile,omitempty"`

	// Properties of Windows VMs.
	WindowsProfile *ContainerServiceWindowsProfile `json:"windowsProfile,omitempty"`

	// READ-ONLY; the current deployment or provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// ContainerServiceSSHConfiguration - SSH configuration for Linux-based VMs running on Azure.
type ContainerServiceSSHConfiguration struct {
	// REQUIRED; the list of SSH public keys used to authenticate with Linux-based VMs.
	PublicKeys []*ContainerServiceSSHPublicKey `json:"publicKeys,omitempty"`
}

// ContainerServiceSSHPublicKey - Contains information about SSH certificate public key data.
type ContainerServiceSSHPublicKey struct {
	// REQUIRED; Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with
	// or without headers.
	KeyData *string `json:"keyData,omitempty"`
}

// ContainerServiceVMDiagnostics - Profile for diagnostics on the container service VMs.
type ContainerServiceVMDiagnostics struct {
	// REQUIRED; Whether the VM diagnostic agent is provisioned on the VM.
	Enabled *bool `json:"enabled,omitempty"`

	// READ-ONLY; The URI of the storage account where diagnostics are stored.
	StorageURI *string `json:"storageUri,omitempty" azure:"ro"`
}

// ContainerServiceWindowsProfile - Profile for Windows VMs in the container service cluster.
type ContainerServiceWindowsProfile struct {
	// REQUIRED; The administrator password to use for Windows VMs.
	AdminPassword *string `json:"adminPassword,omitempty"`

	// REQUIRED; The administrator username to use for Windows VMs.
	AdminUsername *string `json:"adminUsername,omitempty"`
}

// ContainerServicesClientBeginCreateOrUpdateOptions contains the optional parameters for the ContainerServicesClient.BeginCreateOrUpdate
// method.
type ContainerServicesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ContainerServicesClientBeginDeleteOptions contains the optional parameters for the ContainerServicesClient.BeginDelete
// method.
type ContainerServicesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ContainerServicesClientGetOptions contains the optional parameters for the ContainerServicesClient.Get method.
type ContainerServicesClientGetOptions struct {
	// placeholder for future optional parameters
}

// ContainerServicesClientListByResourceGroupOptions contains the optional parameters for the ContainerServicesClient.ListByResourceGroup
// method.
type ContainerServicesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ContainerServicesClientListOptions contains the optional parameters for the ContainerServicesClient.List method.
type ContainerServicesClientListOptions struct {
	// placeholder for future optional parameters
}

// Resource - The Resource model definition.
type Resource struct {
	// REQUIRED; Resource location
	Location *string `json:"location,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}
