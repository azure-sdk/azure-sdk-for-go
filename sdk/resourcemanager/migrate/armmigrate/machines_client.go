//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// MachinesClient contains the methods for the Machines group.
// Don't use this type directly, use NewMachinesClient() instead.
type MachinesClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewMachinesClient creates a new instance of MachinesClient with the specified values.
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewMachinesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MachinesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &MachinesClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// NewGetAllMachinesInSitePager - Method to get machine.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - MachinesClientGetAllMachinesInSiteOptions contains the optional parameters for the MachinesClient.NewGetAllMachinesInSitePager
//     method.
func (client *MachinesClient) NewGetAllMachinesInSitePager(resourceGroupName string, siteName string, options *MachinesClientGetAllMachinesInSiteOptions) *runtime.Pager[MachinesClientGetAllMachinesInSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[MachinesClientGetAllMachinesInSiteResponse]{
		More: func(page MachinesClientGetAllMachinesInSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MachinesClientGetAllMachinesInSiteResponse) (MachinesClientGetAllMachinesInSiteResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getAllMachinesInSiteCreateRequest(ctx, resourceGroupName, siteName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MachinesClientGetAllMachinesInSiteResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MachinesClientGetAllMachinesInSiteResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MachinesClientGetAllMachinesInSiteResponse{}, runtime.NewResponseError(resp)
			}
			return client.getAllMachinesInSiteHandleResponse(resp)
		},
	})
}

// getAllMachinesInSiteCreateRequest creates the GetAllMachinesInSite request.
func (client *MachinesClient) getAllMachinesInSiteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, options *MachinesClientGetAllMachinesInSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.TotalRecordCount != nil {
		reqQP.Set("totalRecordCount", strconv.FormatInt(int64(*options.TotalRecordCount), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAllMachinesInSiteHandleResponse handles the GetAllMachinesInSite response.
func (client *MachinesClient) getAllMachinesInSiteHandleResponse(resp *http.Response) (MachinesClientGetAllMachinesInSiteResponse, error) {
	result := MachinesClientGetAllMachinesInSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMwareMachineCollection); err != nil {
		return MachinesClientGetAllMachinesInSiteResponse{}, err
	}
	return result, nil
}

// GetMachine - Method to get machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - machineName - Machine ARM name.
//   - options - MachinesClientGetMachineOptions contains the optional parameters for the MachinesClient.GetMachine method.
func (client *MachinesClient) GetMachine(ctx context.Context, resourceGroupName string, siteName string, machineName string, options *MachinesClientGetMachineOptions) (MachinesClientGetMachineResponse, error) {
	req, err := client.getMachineCreateRequest(ctx, resourceGroupName, siteName, machineName, options)
	if err != nil {
		return MachinesClientGetMachineResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachinesClientGetMachineResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MachinesClientGetMachineResponse{}, runtime.NewResponseError(resp)
	}
	return client.getMachineHandleResponse(resp)
}

// getMachineCreateRequest creates the GetMachine request.
func (client *MachinesClient) getMachineCreateRequest(ctx context.Context, resourceGroupName string, siteName string, machineName string, options *MachinesClientGetMachineOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines/{machineName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMachineHandleResponse handles the GetMachine response.
func (client *MachinesClient) getMachineHandleResponse(resp *http.Response) (MachinesClientGetMachineResponse, error) {
	result := MachinesClientGetMachineResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMwareMachine); err != nil {
		return MachinesClientGetMachineResponse{}, err
	}
	return result, nil
}

// StartMachine - Method to start a machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - machineName - Machine ARM name.
//   - options - MachinesClientStartMachineOptions contains the optional parameters for the MachinesClient.StartMachine method.
func (client *MachinesClient) StartMachine(ctx context.Context, resourceGroupName string, siteName string, machineName string, options *MachinesClientStartMachineOptions) (MachinesClientStartMachineResponse, error) {
	req, err := client.startMachineCreateRequest(ctx, resourceGroupName, siteName, machineName, options)
	if err != nil {
		return MachinesClientStartMachineResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachinesClientStartMachineResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return MachinesClientStartMachineResponse{}, runtime.NewResponseError(resp)
	}
	return client.startMachineHandleResponse(resp)
}

// startMachineCreateRequest creates the StartMachine request.
func (client *MachinesClient) startMachineCreateRequest(ctx context.Context, resourceGroupName string, siteName string, machineName string, options *MachinesClientStartMachineOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines/{machineName}/start"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// startMachineHandleResponse handles the StartMachine response.
func (client *MachinesClient) startMachineHandleResponse(resp *http.Response) (MachinesClientStartMachineResponse, error) {
	result := MachinesClientStartMachineResponse{}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	return result, nil
}

// StopMachine - Method to stop a machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - machineName - Machine ARM name.
//   - options - MachinesClientStopMachineOptions contains the optional parameters for the MachinesClient.StopMachine method.
func (client *MachinesClient) StopMachine(ctx context.Context, resourceGroupName string, siteName string, machineName string, options *MachinesClientStopMachineOptions) (MachinesClientStopMachineResponse, error) {
	req, err := client.stopMachineCreateRequest(ctx, resourceGroupName, siteName, machineName, options)
	if err != nil {
		return MachinesClientStopMachineResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachinesClientStopMachineResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return MachinesClientStopMachineResponse{}, runtime.NewResponseError(resp)
	}
	return client.stopMachineHandleResponse(resp)
}

// stopMachineCreateRequest creates the StopMachine request.
func (client *MachinesClient) stopMachineCreateRequest(ctx context.Context, resourceGroupName string, siteName string, machineName string, options *MachinesClientStopMachineOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines/{machineName}/stop"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-07-07")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// stopMachineHandleResponse handles the StopMachine response.
func (client *MachinesClient) stopMachineHandleResponse(resp *http.Response) (MachinesClientStopMachineResponse, error) {
	result := MachinesClientStopMachineResponse{}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	return result, nil
}
