// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armhelp.ClientFactory type.
type ServerFactory struct {
	// CheckNameAvailabilityOperationGroupServer contains the fakes for client CheckNameAvailabilityOperationGroupClient
	CheckNameAvailabilityOperationGroupServer CheckNameAvailabilityOperationGroupServer

	// DiagnosticResourcesServer contains the fakes for client DiagnosticResourcesClient
	DiagnosticResourcesServer DiagnosticResourcesServer

	// DiscoverySolutionNLPOperationGroupServer contains the fakes for client DiscoverySolutionNLPOperationGroupClient
	DiscoverySolutionNLPOperationGroupServer DiscoverySolutionNLPOperationGroupServer

	// DiscoverySolutionOperationGroupServer contains the fakes for client DiscoverySolutionOperationGroupClient
	DiscoverySolutionOperationGroupServer DiscoverySolutionOperationGroupServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// SimplifiedSolutionsResourcesServer contains the fakes for client SimplifiedSolutionsResourcesClient
	SimplifiedSolutionsResourcesServer SimplifiedSolutionsResourcesServer

	// SolutionResourceSelfHelpsServer contains the fakes for client SolutionResourceSelfHelpsClient
	SolutionResourceSelfHelpsServer SolutionResourceSelfHelpsServer

	// SolutionResourcesServer contains the fakes for client SolutionResourcesClient
	SolutionResourcesServer SolutionResourcesServer

	// TroubleshooterResourcesServer contains the fakes for client TroubleshooterResourcesClient
	TroubleshooterResourcesServer TroubleshooterResourcesServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armhelp.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armhelp.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                         *ServerFactory
	trMu                                        sync.Mutex
	trCheckNameAvailabilityOperationGroupServer *CheckNameAvailabilityOperationGroupServerTransport
	trDiagnosticResourcesServer                 *DiagnosticResourcesServerTransport
	trDiscoverySolutionNLPOperationGroupServer  *DiscoverySolutionNLPOperationGroupServerTransport
	trDiscoverySolutionOperationGroupServer     *DiscoverySolutionOperationGroupServerTransport
	trOperationsServer                          *OperationsServerTransport
	trSimplifiedSolutionsResourcesServer        *SimplifiedSolutionsResourcesServerTransport
	trSolutionResourceSelfHelpsServer           *SolutionResourceSelfHelpsServerTransport
	trSolutionResourcesServer                   *SolutionResourcesServerTransport
	trTroubleshooterResourcesServer             *TroubleshooterResourcesServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "CheckNameAvailabilityOperationGroupClient":
		initServer(s, &s.trCheckNameAvailabilityOperationGroupServer, func() *CheckNameAvailabilityOperationGroupServerTransport {
			return NewCheckNameAvailabilityOperationGroupServerTransport(&s.srv.CheckNameAvailabilityOperationGroupServer)
		})
		resp, err = s.trCheckNameAvailabilityOperationGroupServer.Do(req)
	case "DiagnosticResourcesClient":
		initServer(s, &s.trDiagnosticResourcesServer, func() *DiagnosticResourcesServerTransport {
			return NewDiagnosticResourcesServerTransport(&s.srv.DiagnosticResourcesServer)
		})
		resp, err = s.trDiagnosticResourcesServer.Do(req)
	case "DiscoverySolutionNLPOperationGroupClient":
		initServer(s, &s.trDiscoverySolutionNLPOperationGroupServer, func() *DiscoverySolutionNLPOperationGroupServerTransport {
			return NewDiscoverySolutionNLPOperationGroupServerTransport(&s.srv.DiscoverySolutionNLPOperationGroupServer)
		})
		resp, err = s.trDiscoverySolutionNLPOperationGroupServer.Do(req)
	case "DiscoverySolutionOperationGroupClient":
		initServer(s, &s.trDiscoverySolutionOperationGroupServer, func() *DiscoverySolutionOperationGroupServerTransport {
			return NewDiscoverySolutionOperationGroupServerTransport(&s.srv.DiscoverySolutionOperationGroupServer)
		})
		resp, err = s.trDiscoverySolutionOperationGroupServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "SimplifiedSolutionsResourcesClient":
		initServer(s, &s.trSimplifiedSolutionsResourcesServer, func() *SimplifiedSolutionsResourcesServerTransport {
			return NewSimplifiedSolutionsResourcesServerTransport(&s.srv.SimplifiedSolutionsResourcesServer)
		})
		resp, err = s.trSimplifiedSolutionsResourcesServer.Do(req)
	case "SolutionResourceSelfHelpsClient":
		initServer(s, &s.trSolutionResourceSelfHelpsServer, func() *SolutionResourceSelfHelpsServerTransport {
			return NewSolutionResourceSelfHelpsServerTransport(&s.srv.SolutionResourceSelfHelpsServer)
		})
		resp, err = s.trSolutionResourceSelfHelpsServer.Do(req)
	case "SolutionResourcesClient":
		initServer(s, &s.trSolutionResourcesServer, func() *SolutionResourcesServerTransport {
			return NewSolutionResourcesServerTransport(&s.srv.SolutionResourcesServer)
		})
		resp, err = s.trSolutionResourcesServer.Do(req)
	case "TroubleshooterResourcesClient":
		initServer(s, &s.trTroubleshooterResourcesServer, func() *TroubleshooterResourcesServerTransport {
			return NewTroubleshooterResourcesServerTransport(&s.srv.TroubleshooterResourcesServer)
		})
		resp, err = s.trTroubleshooterResourcesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
