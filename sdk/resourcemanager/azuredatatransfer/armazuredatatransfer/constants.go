//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazuredatatransfer

const (
	moduleName    = "armazuredatatransfer"
	moduleVersion = "v0.1.0"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DataType - Transfer Storage Blobs or Tables
type DataType string

const (
	DataTypeBlob  DataType = "Blob"
	DataTypeTable DataType = "Table"
)

// PossibleDataTypeValues returns the possible values for the DataType const type.
func PossibleDataTypeValues() []DataType {
	return []DataType{
		DataTypeBlob,
		DataTypeTable,
	}
}

// Direction - Direction of data movement
type Direction string

const (
	DirectionReceive Direction = "Receive"
	DirectionSend    Direction = "Send"
)

// PossibleDirectionValues returns the possible values for the Direction const type.
func PossibleDirectionValues() []Direction {
	return []Direction{
		DirectionReceive,
		DirectionSend,
	}
}

// FlowStatus - Status of the current flow
type FlowStatus string

const (
	FlowStatusDisabled FlowStatus = "Disabled"
	FlowStatusEnabled  FlowStatus = "Enabled"
)

// PossibleFlowStatusValues returns the possible values for the FlowStatus const type.
func PossibleFlowStatusValues() []FlowStatus {
	return []FlowStatus{
		FlowStatusDisabled,
		FlowStatusEnabled,
	}
}

// FlowType - Flow type for the specified resource
type FlowType string

const (
	FlowTypeBasicFiles        FlowType = "BasicFiles"
	FlowTypeComplex           FlowType = "Complex"
	FlowTypeDevSecOps         FlowType = "DevSecOps"
	FlowTypeMessaging         FlowType = "Messaging"
	FlowTypeMicrosoftInternal FlowType = "MicrosoftInternal"
	FlowTypeMission           FlowType = "Mission"
	FlowTypeUnknown           FlowType = "Unknown"
)

// PossibleFlowTypeValues returns the possible values for the FlowType const type.
func PossibleFlowTypeValues() []FlowType {
	return []FlowType{
		FlowTypeBasicFiles,
		FlowTypeComplex,
		FlowTypeDevSecOps,
		FlowTypeMessaging,
		FlowTypeMicrosoftInternal,
		FlowTypeMission,
		FlowTypeUnknown,
	}
}

// LinkStatus - Link status of the current connection
type LinkStatus string

const (
	LinkStatusLinked   LinkStatus = "Linked"
	LinkStatusUnlinked LinkStatus = "Unlinked"
)

// PossibleLinkStatusValues returns the possible values for the LinkStatus const type.
func PossibleLinkStatusValues() []LinkStatus {
	return []LinkStatus{
		LinkStatusLinked,
		LinkStatusUnlinked,
	}
}

// LinkStatusFlow - Link status of the current flow
type LinkStatusFlow string

const (
	LinkStatusFlowLinked   LinkStatusFlow = "Linked"
	LinkStatusFlowUnlinked LinkStatusFlow = "Unlinked"
)

// PossibleLinkStatusFlowValues returns the possible values for the LinkStatusFlow const type.
func PossibleLinkStatusFlowValues() []LinkStatusFlow {
	return []LinkStatusFlow{
		LinkStatusFlowLinked,
		LinkStatusFlowUnlinked,
	}
}

// ManagedServiceIdentityType - Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                       ManagedServiceIdentityType = "None"
	ManagedServiceIdentityTypeSystemAssigned             ManagedServiceIdentityType = "SystemAssigned"
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned,UserAssigned"
	ManagedServiceIdentityTypeUserAssigned               ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns the possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{
		ManagedServiceIdentityTypeNone,
		ManagedServiceIdentityTypeSystemAssigned,
		ManagedServiceIdentityTypeSystemAssignedUserAssigned,
		ManagedServiceIdentityTypeUserAssigned,
	}
}

// OperationStatusEnum - Operation status for the last patch request for this connection.
type OperationStatusEnum string

const (
	OperationStatusEnumFailed    OperationStatusEnum = "Failed"
	OperationStatusEnumSucceeded OperationStatusEnum = "Succeeded"
)

// PossibleOperationStatusEnumValues returns the possible values for the OperationStatusEnum const type.
func PossibleOperationStatusEnumValues() []OperationStatusEnum {
	return []OperationStatusEnum{
		OperationStatusEnumFailed,
		OperationStatusEnumSucceeded,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// ProvisioningState - Provisioning state of the flow
type ProvisioningState string

const (
	ProvisioningStateAccepted  ProvisioningState = "Accepted"
	ProvisioningStateCanceled  ProvisioningState = "Canceled"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateAccepted,
		ProvisioningStateCanceled,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
	}
}

// SchemaStatus - Status of the schema
type SchemaStatus string

const (
	SchemaStatusApproved SchemaStatus = "Approved"
	SchemaStatusNew      SchemaStatus = "New"
)

// PossibleSchemaStatusValues returns the possible values for the SchemaStatus const type.
func PossibleSchemaStatusValues() []SchemaStatus {
	return []SchemaStatus{
		SchemaStatusApproved,
		SchemaStatusNew,
	}
}

// Status - Status of the connection
type Status string

const (
	StatusAccepted Status = "Accepted"
	StatusApproved Status = "Approved"
	StatusInReview Status = "InReview"
	StatusRejected Status = "Rejected"
)

// PossibleStatusValues returns the possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{
		StatusAccepted,
		StatusApproved,
		StatusInReview,
		StatusRejected,
	}
}
