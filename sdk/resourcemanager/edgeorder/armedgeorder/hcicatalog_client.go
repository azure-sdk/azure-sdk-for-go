//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armedgeorder

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HciCatalogClient contains the methods for the HciCatalog group.
// Don't use this type directly, use NewHciCatalogClient() instead.
type HciCatalogClient struct {
	internal *arm.Client
}

// NewHciCatalogClient creates a new instance of HciCatalogClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHciCatalogClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*HciCatalogClient, error) {
	cl, err := arm.NewClient(moduleName+".HciCatalogClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HciCatalogClient{
		internal: cl,
	}
	return client, nil
}

// Get - Get default HciCatalog resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - options - HciCatalogClientGetOptions contains the optional parameters for the HciCatalogClient.Get method.
func (client *HciCatalogClient) Get(ctx context.Context, catalogName string, options *HciCatalogClientGetOptions) (HciCatalogClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, catalogName, options)
	if err != nil {
		return HciCatalogClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciCatalogClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HciCatalogClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *HciCatalogClient) getCreateRequest(ctx context.Context, catalogName string, options *HciCatalogClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciCatalog/{catalogName}"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HciCatalogClient) getHandleResponse(resp *http.Response) (HciCatalogClientGetResponse, error) {
	result := HciCatalogClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HciCatalogResource); err != nil {
		return HciCatalogClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List HciCatalog resources.
//
// Generated from API version 2023-05-01-preview
//   - options - HciCatalogClientListOptions contains the optional parameters for the HciCatalogClient.NewListPager method.
func (client *HciCatalogClient) NewListPager(options *HciCatalogClientListOptions) *runtime.Pager[HciCatalogClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[HciCatalogClientListResponse]{
		More: func(page HciCatalogClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HciCatalogClientListResponse) (HciCatalogClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HciCatalogClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return HciCatalogClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HciCatalogClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *HciCatalogClient) listCreateRequest(ctx context.Context, options *HciCatalogClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciCatalog"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *HciCatalogClient) listHandleResponse(resp *http.Response) (HciCatalogClientListResponse, error) {
	result := HciCatalogClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HciCatalogResourceList); err != nil {
		return HciCatalogClientListResponse{}, err
	}
	return result, nil
}

// ListSolutionRecommendations - Get solution recommendation.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - solutionRecommendationRequest - Captures requirement and workloads for which solution is required.
//   - options - HciCatalogClientListSolutionRecommendationsOptions contains the optional parameters for the HciCatalogClient.ListSolutionRecommendations
//     method.
func (client *HciCatalogClient) ListSolutionRecommendations(ctx context.Context, catalogName string, solutionRecommendationRequest SolutionRecommendationRequest, options *HciCatalogClientListSolutionRecommendationsOptions) (HciCatalogClientListSolutionRecommendationsResponse, error) {
	req, err := client.listSolutionRecommendationsCreateRequest(ctx, catalogName, solutionRecommendationRequest, options)
	if err != nil {
		return HciCatalogClientListSolutionRecommendationsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciCatalogClientListSolutionRecommendationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HciCatalogClientListSolutionRecommendationsResponse{}, runtime.NewResponseError(resp)
	}
	return client.listSolutionRecommendationsHandleResponse(resp)
}

// listSolutionRecommendationsCreateRequest creates the ListSolutionRecommendations request.
func (client *HciCatalogClient) listSolutionRecommendationsCreateRequest(ctx context.Context, catalogName string, solutionRecommendationRequest SolutionRecommendationRequest, options *HciCatalogClientListSolutionRecommendationsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciCatalog/{catalogName}/listSolutionRecommendations"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, solutionRecommendationRequest)
}

// listSolutionRecommendationsHandleResponse handles the ListSolutionRecommendations response.
func (client *HciCatalogClient) listSolutionRecommendationsHandleResponse(resp *http.Response) (HciCatalogClientListSolutionRecommendationsResponse, error) {
	result := HciCatalogClientListSolutionRecommendationsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RecommendedSolutionArray); err != nil {
		return HciCatalogClientListSolutionRecommendationsResponse{}, err
	}
	return result, nil
}

// Search - Search HCI catalog.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - hciCatalogSearchRequest - Hci Catalog search request.
//   - options - HciCatalogClientSearchOptions contains the optional parameters for the HciCatalogClient.Search method.
func (client *HciCatalogClient) Search(ctx context.Context, catalogName string, hciCatalogSearchRequest HciCatalogSearchRequestClassification, options *HciCatalogClientSearchOptions) (HciCatalogClientSearchResponse, error) {
	req, err := client.searchCreateRequest(ctx, catalogName, hciCatalogSearchRequest, options)
	if err != nil {
		return HciCatalogClientSearchResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciCatalogClientSearchResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HciCatalogClientSearchResponse{}, runtime.NewResponseError(resp)
	}
	return client.searchHandleResponse(resp)
}

// searchCreateRequest creates the Search request.
func (client *HciCatalogClient) searchCreateRequest(ctx context.Context, catalogName string, hciCatalogSearchRequest HciCatalogSearchRequestClassification, options *HciCatalogClientSearchOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciCatalog/{catalogName}/search"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, hciCatalogSearchRequest)
}

// searchHandleResponse handles the Search response.
func (client *HciCatalogClient) searchHandleResponse(resp *http.Response) (HciCatalogClientSearchResponse, error) {
	result := HciCatalogClientSearchResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return HciCatalogClientSearchResponse{}, err
	}
	return result, nil
}
