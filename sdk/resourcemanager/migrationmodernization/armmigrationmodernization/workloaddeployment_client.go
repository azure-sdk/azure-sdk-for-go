//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationmodernization

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// WorkloadDeploymentClient contains the methods for the WorkloadDeployment group.
// Don't use this type directly, use NewWorkloadDeploymentClient() instead.
type WorkloadDeploymentClient struct {
	internal *arm.Client
}

// NewWorkloadDeploymentClient creates a new instance of WorkloadDeploymentClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewWorkloadDeploymentClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*WorkloadDeploymentClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &WorkloadDeploymentClient{
		internal: cl,
	}
	return client, nil
}

// BeginBuildContainerImage - Performs the build container image action on the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadDeploymentName - Workload deployment name.
//   - options - WorkloadDeploymentClientBeginBuildContainerImageOptions contains the optional parameters for the WorkloadDeploymentClient.BeginBuildContainerImage
//     method.
func (client *WorkloadDeploymentClient) BeginBuildContainerImage(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginBuildContainerImageOptions) (*runtime.Poller[WorkloadDeploymentClientBuildContainerImageResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.buildContainerImage(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadDeploymentClientBuildContainerImageResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadDeploymentClientBuildContainerImageResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// BuildContainerImage - Performs the build container image action on the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *WorkloadDeploymentClient) buildContainerImage(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginBuildContainerImageOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadDeploymentClient.BeginBuildContainerImage"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.buildContainerImageCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// buildContainerImageCreateRequest creates the BuildContainerImage request.
func (client *WorkloadDeploymentClient) buildContainerImageCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginBuildContainerImageOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments/{workloadDeploymentName}/buildContainerImage"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadDeploymentName == "" {
		return nil, errors.New("parameter workloadDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadDeploymentName}", url.PathEscape(workloadDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// Create - Creates the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadDeploymentName - Workload deployment name.
//   - body - Workload deployment model.
//   - options - WorkloadDeploymentClientCreateOptions contains the optional parameters for the WorkloadDeploymentClient.Create
//     method.
func (client *WorkloadDeploymentClient) Create(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, body WorkloadDeploymentModel, options *WorkloadDeploymentClientCreateOptions) (WorkloadDeploymentClientCreateResponse, error) {
	var err error
	const operationName = "WorkloadDeploymentClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, body, options)
	if err != nil {
		return WorkloadDeploymentClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkloadDeploymentClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return WorkloadDeploymentClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *WorkloadDeploymentClient) createCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, body WorkloadDeploymentModel, options *WorkloadDeploymentClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments/{workloadDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadDeploymentName == "" {
		return nil, errors.New("parameter workloadDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadDeploymentName}", url.PathEscape(workloadDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *WorkloadDeploymentClient) createHandleResponse(resp *http.Response) (WorkloadDeploymentClientCreateResponse, error) {
	result := WorkloadDeploymentClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadDeploymentModel); err != nil {
		return WorkloadDeploymentClientCreateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Removes the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadDeploymentName - Workload deployment name.
//   - options - WorkloadDeploymentClientBeginDeleteOptions contains the optional parameters for the WorkloadDeploymentClient.BeginDelete
//     method.
func (client *WorkloadDeploymentClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginDeleteOptions) (*runtime.Poller[WorkloadDeploymentClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadDeploymentClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadDeploymentClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Removes the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *WorkloadDeploymentClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadDeploymentClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *WorkloadDeploymentClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments/{workloadDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadDeploymentName == "" {
		return nil, errors.New("parameter workloadDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadDeploymentName}", url.PathEscape(workloadDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	if options != nil && options.ForceDelete != nil {
		reqQP.Set("forceDelete", strconv.FormatBool(*options.ForceDelete))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the details of the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadDeploymentName - Workload deployment name.
//   - options - WorkloadDeploymentClientGetOptions contains the optional parameters for the WorkloadDeploymentClient.Get method.
func (client *WorkloadDeploymentClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientGetOptions) (WorkloadDeploymentClientGetResponse, error) {
	var err error
	const operationName = "WorkloadDeploymentClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
	if err != nil {
		return WorkloadDeploymentClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkloadDeploymentClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WorkloadDeploymentClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *WorkloadDeploymentClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments/{workloadDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadDeploymentName == "" {
		return nil, errors.New("parameter workloadDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadDeploymentName}", url.PathEscape(workloadDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *WorkloadDeploymentClient) getHandleResponse(resp *http.Response) (WorkloadDeploymentClientGetResponse, error) {
	result := WorkloadDeploymentClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadDeploymentModel); err != nil {
		return WorkloadDeploymentClientGetResponse{}, err
	}
	return result, nil
}

// GetSecretConfigurations - Gets the secrets of the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadDeploymentName - Workload deployment name.
//   - options - WorkloadDeploymentClientGetSecretConfigurationsOptions contains the optional parameters for the WorkloadDeploymentClient.GetSecretConfigurations
//     method.
func (client *WorkloadDeploymentClient) GetSecretConfigurations(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientGetSecretConfigurationsOptions) (WorkloadDeploymentClientGetSecretConfigurationsResponse, error) {
	var err error
	const operationName = "WorkloadDeploymentClient.GetSecretConfigurations"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSecretConfigurationsCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
	if err != nil {
		return WorkloadDeploymentClientGetSecretConfigurationsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkloadDeploymentClientGetSecretConfigurationsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WorkloadDeploymentClientGetSecretConfigurationsResponse{}, err
	}
	resp, err := client.getSecretConfigurationsHandleResponse(httpResp)
	return resp, err
}

// getSecretConfigurationsCreateRequest creates the GetSecretConfigurations request.
func (client *WorkloadDeploymentClient) getSecretConfigurationsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientGetSecretConfigurationsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments/{workloadDeploymentName}/getSecrets"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadDeploymentName == "" {
		return nil, errors.New("parameter workloadDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadDeploymentName}", url.PathEscape(workloadDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSecretConfigurationsHandleResponse handles the GetSecretConfigurations response.
func (client *WorkloadDeploymentClient) getSecretConfigurationsHandleResponse(resp *http.Response) (WorkloadDeploymentClientGetSecretConfigurationsResponse, error) {
	result := WorkloadDeploymentClientGetSecretConfigurationsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadDeploymentModel); err != nil {
		return WorkloadDeploymentClientGetSecretConfigurationsResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets the list of workload deployments in the given modernizeProject.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - options - WorkloadDeploymentClientListOptions contains the optional parameters for the WorkloadDeploymentClient.NewListPager
//     method.
func (client *WorkloadDeploymentClient) NewListPager(subscriptionID string, resourceGroupName string, modernizeProjectName string, options *WorkloadDeploymentClientListOptions) *runtime.Pager[WorkloadDeploymentClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[WorkloadDeploymentClientListResponse]{
		More: func(page WorkloadDeploymentClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WorkloadDeploymentClientListResponse) (WorkloadDeploymentClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadDeploymentClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, options)
			}, nil)
			if err != nil {
				return WorkloadDeploymentClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *WorkloadDeploymentClient) listCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, options *WorkloadDeploymentClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *WorkloadDeploymentClient) listHandleResponse(resp *http.Response) (WorkloadDeploymentClientListResponse, error) {
	result := WorkloadDeploymentClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadDeploymentModelCollection); err != nil {
		return WorkloadDeploymentClientListResponse{}, err
	}
	return result, nil
}

// BeginMigrate - Performs migrate on the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadDeploymentName - Workload deployment name.
//   - options - WorkloadDeploymentClientBeginMigrateOptions contains the optional parameters for the WorkloadDeploymentClient.BeginMigrate
//     method.
func (client *WorkloadDeploymentClient) BeginMigrate(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginMigrateOptions) (*runtime.Poller[WorkloadDeploymentClientMigrateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.migrate(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadDeploymentClientMigrateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadDeploymentClientMigrateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Migrate - Performs migrate on the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *WorkloadDeploymentClient) migrate(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginMigrateOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadDeploymentClient.BeginMigrate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.migrateCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// migrateCreateRequest creates the Migrate request.
func (client *WorkloadDeploymentClient) migrateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginMigrateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments/{workloadDeploymentName}/migrate"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadDeploymentName == "" {
		return nil, errors.New("parameter workloadDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadDeploymentName}", url.PathEscape(workloadDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginTestMigrate - Performs the test migrate on the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadDeploymentName - Workload deployment name.
//   - options - WorkloadDeploymentClientBeginTestMigrateOptions contains the optional parameters for the WorkloadDeploymentClient.BeginTestMigrate
//     method.
func (client *WorkloadDeploymentClient) BeginTestMigrate(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginTestMigrateOptions) (*runtime.Poller[WorkloadDeploymentClientTestMigrateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.testMigrate(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadDeploymentClientTestMigrateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadDeploymentClientTestMigrateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// TestMigrate - Performs the test migrate on the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *WorkloadDeploymentClient) testMigrate(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginTestMigrateOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadDeploymentClient.BeginTestMigrate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.testMigrateCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// testMigrateCreateRequest creates the TestMigrate request.
func (client *WorkloadDeploymentClient) testMigrateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginTestMigrateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments/{workloadDeploymentName}/testMigrate"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadDeploymentName == "" {
		return nil, errors.New("parameter workloadDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadDeploymentName}", url.PathEscape(workloadDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// BeginTestMigrateCleanup - Performs the test migrate cleanup on the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
//   - subscriptionID - Azure Subscription Id in which project was created.
//   - resourceGroupName - Name of the Azure Resource Group that project is part of.
//   - modernizeProjectName - ModernizeProject name.
//   - workloadDeploymentName - Workload deployment name.
//   - options - WorkloadDeploymentClientBeginTestMigrateCleanupOptions contains the optional parameters for the WorkloadDeploymentClient.BeginTestMigrateCleanup
//     method.
func (client *WorkloadDeploymentClient) BeginTestMigrateCleanup(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginTestMigrateCleanupOptions) (*runtime.Poller[WorkloadDeploymentClientTestMigrateCleanupResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.testMigrateCleanup(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadDeploymentClientTestMigrateCleanupResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadDeploymentClientTestMigrateCleanupResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// TestMigrateCleanup - Performs the test migrate cleanup on the workload deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-05-01-preview
func (client *WorkloadDeploymentClient) testMigrateCleanup(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginTestMigrateCleanupOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadDeploymentClient.BeginTestMigrateCleanup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.testMigrateCleanupCreateRequest(ctx, subscriptionID, resourceGroupName, modernizeProjectName, workloadDeploymentName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// testMigrateCleanupCreateRequest creates the TestMigrateCleanup request.
func (client *WorkloadDeploymentClient) testMigrateCleanupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, modernizeProjectName string, workloadDeploymentName string, options *WorkloadDeploymentClientBeginTestMigrateCleanupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadDeployments/{workloadDeploymentName}/testMigrateCleanup"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if modernizeProjectName == "" {
		return nil, errors.New("parameter modernizeProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modernizeProjectName}", url.PathEscape(modernizeProjectName))
	if workloadDeploymentName == "" {
		return nil, errors.New("parameter workloadDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadDeploymentName}", url.PathEscape(workloadDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
