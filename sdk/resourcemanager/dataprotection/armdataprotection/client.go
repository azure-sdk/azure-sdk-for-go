//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armdataprotection

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// Client contains the methods for the DataProtectionClient group.
// Don't use this type directly, use NewClient() instead.
type Client struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewClient creates a new instance of Client with the specified values.
// subscriptionID - The subscription Id.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*Client, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &Client{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// DppResourceGuardProxyDelete -
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01-preview
// resourceGroupName - The name of the resource group where the backup vault is present.
// vaultName - The name of the backup vault.
// options - ClientDppResourceGuardProxyDeleteOptions contains the optional parameters for the Client.DppResourceGuardProxyDelete
// method.
func (client *Client) DppResourceGuardProxyDelete(ctx context.Context, resourceGroupName string, vaultName string, resourceGuardProxyName string, options *ClientDppResourceGuardProxyDeleteOptions) (ClientDppResourceGuardProxyDeleteResponse, error) {
	req, err := client.dppResourceGuardProxyDeleteCreateRequest(ctx, resourceGroupName, vaultName, resourceGuardProxyName, options)
	if err != nil {
		return ClientDppResourceGuardProxyDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDppResourceGuardProxyDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ClientDppResourceGuardProxyDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return ClientDppResourceGuardProxyDeleteResponse{}, nil
}

// dppResourceGuardProxyDeleteCreateRequest creates the DppResourceGuardProxyDelete request.
func (client *Client) dppResourceGuardProxyDeleteCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, resourceGuardProxyName string, options *ClientDppResourceGuardProxyDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if resourceGuardProxyName == "" {
		return nil, errors.New("parameter resourceGuardProxyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardProxyName}", url.PathEscape(resourceGuardProxyName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DppResourceGuardProxyGet -
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01-preview
// resourceGroupName - The name of the resource group where the backup vault is present.
// vaultName - The name of the backup vault.
// options - ClientDppResourceGuardProxyGetOptions contains the optional parameters for the Client.DppResourceGuardProxyGet
// method.
func (client *Client) DppResourceGuardProxyGet(ctx context.Context, resourceGroupName string, vaultName string, resourceGuardProxyName string, options *ClientDppResourceGuardProxyGetOptions) (ClientDppResourceGuardProxyGetResponse, error) {
	req, err := client.dppResourceGuardProxyGetCreateRequest(ctx, resourceGroupName, vaultName, resourceGuardProxyName, options)
	if err != nil {
		return ClientDppResourceGuardProxyGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDppResourceGuardProxyGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientDppResourceGuardProxyGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.dppResourceGuardProxyGetHandleResponse(resp)
}

// dppResourceGuardProxyGetCreateRequest creates the DppResourceGuardProxyGet request.
func (client *Client) dppResourceGuardProxyGetCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, resourceGuardProxyName string, options *ClientDppResourceGuardProxyGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if resourceGuardProxyName == "" {
		return nil, errors.New("parameter resourceGuardProxyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardProxyName}", url.PathEscape(resourceGuardProxyName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// dppResourceGuardProxyGetHandleResponse handles the DppResourceGuardProxyGet response.
func (client *Client) dppResourceGuardProxyGetHandleResponse(resp *http.Response) (ClientDppResourceGuardProxyGetResponse, error) {
	result := ClientDppResourceGuardProxyGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGuardProxyBaseResource); err != nil {
		return ClientDppResourceGuardProxyGetResponse{}, err
	}
	return result, nil
}

// resourceGroupName - The name of the resource group where the backup vault is present.
// vaultName - The name of the backup vault.
// options - ClientDppResourceGuardProxyListOptions contains the optional parameters for the Client.DppResourceGuardProxyList
// method.
func (client *Client) NewDppResourceGuardProxyListPager(resourceGroupName string, vaultName string, options *ClientDppResourceGuardProxyListOptions) *runtime.Pager[ClientDppResourceGuardProxyListResponse] {
	return runtime.NewPager(runtime.PagingHandler[ClientDppResourceGuardProxyListResponse]{
		More: func(page ClientDppResourceGuardProxyListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ClientDppResourceGuardProxyListResponse) (ClientDppResourceGuardProxyListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.dppResourceGuardProxyListCreateRequest(ctx, resourceGroupName, vaultName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ClientDppResourceGuardProxyListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ClientDppResourceGuardProxyListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ClientDppResourceGuardProxyListResponse{}, runtime.NewResponseError(resp)
			}
			return client.dppResourceGuardProxyListHandleResponse(resp)
		},
	})
}

// dppResourceGuardProxyListCreateRequest creates the DppResourceGuardProxyList request.
func (client *Client) dppResourceGuardProxyListCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, options *ClientDppResourceGuardProxyListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// dppResourceGuardProxyListHandleResponse handles the DppResourceGuardProxyList response.
func (client *Client) dppResourceGuardProxyListHandleResponse(resp *http.Response) (ClientDppResourceGuardProxyListResponse, error) {
	result := ClientDppResourceGuardProxyListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGuardProxyBaseResourceList); err != nil {
		return ClientDppResourceGuardProxyListResponse{}, err
	}
	return result, nil
}

// DppResourceGuardProxyPut -
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01-preview
// resourceGroupName - The name of the resource group where the backup vault is present.
// vaultName - The name of the backup vault.
// parameters - Request body for operation
// options - ClientDppResourceGuardProxyPutOptions contains the optional parameters for the Client.DppResourceGuardProxyPut
// method.
func (client *Client) DppResourceGuardProxyPut(ctx context.Context, resourceGroupName string, vaultName string, resourceGuardProxyName string, parameters ResourceGuardProxyBaseResource, options *ClientDppResourceGuardProxyPutOptions) (ClientDppResourceGuardProxyPutResponse, error) {
	req, err := client.dppResourceGuardProxyPutCreateRequest(ctx, resourceGroupName, vaultName, resourceGuardProxyName, parameters, options)
	if err != nil {
		return ClientDppResourceGuardProxyPutResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDppResourceGuardProxyPutResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientDppResourceGuardProxyPutResponse{}, runtime.NewResponseError(resp)
	}
	return client.dppResourceGuardProxyPutHandleResponse(resp)
}

// dppResourceGuardProxyPutCreateRequest creates the DppResourceGuardProxyPut request.
func (client *Client) dppResourceGuardProxyPutCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, resourceGuardProxyName string, parameters ResourceGuardProxyBaseResource, options *ClientDppResourceGuardProxyPutOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if resourceGuardProxyName == "" {
		return nil, errors.New("parameter resourceGuardProxyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardProxyName}", url.PathEscape(resourceGuardProxyName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// dppResourceGuardProxyPutHandleResponse handles the DppResourceGuardProxyPut response.
func (client *Client) dppResourceGuardProxyPutHandleResponse(resp *http.Response) (ClientDppResourceGuardProxyPutResponse, error) {
	result := ClientDppResourceGuardProxyPutResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGuardProxyBaseResource); err != nil {
		return ClientDppResourceGuardProxyPutResponse{}, err
	}
	return result, nil
}

// DppResourceGuardProxyUnlockDelete -
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01-preview
// resourceGroupName - The name of the resource group where the backup vault is present.
// vaultName - The name of the backup vault.
// parameters - Request body for operation
// options - ClientDppResourceGuardProxyUnlockDeleteOptions contains the optional parameters for the Client.DppResourceGuardProxyUnlockDelete
// method.
func (client *Client) DppResourceGuardProxyUnlockDelete(ctx context.Context, resourceGroupName string, vaultName string, resourceGuardProxyName string, parameters UnlockDeleteRequest, options *ClientDppResourceGuardProxyUnlockDeleteOptions) (ClientDppResourceGuardProxyUnlockDeleteResponse, error) {
	req, err := client.dppResourceGuardProxyUnlockDeleteCreateRequest(ctx, resourceGroupName, vaultName, resourceGuardProxyName, parameters, options)
	if err != nil {
		return ClientDppResourceGuardProxyUnlockDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDppResourceGuardProxyUnlockDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientDppResourceGuardProxyUnlockDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return client.dppResourceGuardProxyUnlockDeleteHandleResponse(resp)
}

// dppResourceGuardProxyUnlockDeleteCreateRequest creates the DppResourceGuardProxyUnlockDelete request.
func (client *Client) dppResourceGuardProxyUnlockDeleteCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, resourceGuardProxyName string, parameters UnlockDeleteRequest, options *ClientDppResourceGuardProxyUnlockDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}/unlockDelete"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if resourceGuardProxyName == "" {
		return nil, errors.New("parameter resourceGuardProxyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardProxyName}", url.PathEscape(resourceGuardProxyName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// dppResourceGuardProxyUnlockDeleteHandleResponse handles the DppResourceGuardProxyUnlockDelete response.
func (client *Client) dppResourceGuardProxyUnlockDeleteHandleResponse(resp *http.Response) (ClientDppResourceGuardProxyUnlockDeleteResponse, error) {
	result := ClientDppResourceGuardProxyUnlockDeleteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UnlockDeleteResponse); err != nil {
		return ClientDppResourceGuardProxyUnlockDeleteResponse{}, err
	}
	return result, nil
}
