// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationhub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// WebSitesControllerClient contains the methods for the WebSitesController group.
// Don't use this type directly, use NewWebSitesControllerClient() instead.
type WebSitesControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewWebSitesControllerClient creates a new instance of WebSitesControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewWebSitesControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*WebSitesControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &WebSitesControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// GetWebSite - Gets a website in the migrate project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - webSiteName - The ARM name of the website to be fetched.
//   - options - WebSitesControllerClientGetWebSiteOptions contains the optional parameters for the WebSitesControllerClient.GetWebSite
//     method.
func (client *WebSitesControllerClient) GetWebSite(ctx context.Context, resourceGroupName string, migrateProjectName string, webSiteName string, options *WebSitesControllerClientGetWebSiteOptions) (WebSitesControllerClientGetWebSiteResponse, error) {
	var err error
	const operationName = "WebSitesControllerClient.GetWebSite"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWebSiteCreateRequest(ctx, resourceGroupName, migrateProjectName, webSiteName, options)
	if err != nil {
		return WebSitesControllerClientGetWebSiteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WebSitesControllerClientGetWebSiteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WebSitesControllerClientGetWebSiteResponse{}, err
	}
	resp, err := client.getWebSiteHandleResponse(httpResp)
	return resp, err
}

// getWebSiteCreateRequest creates the GetWebSite request.
func (client *WebSitesControllerClient) getWebSiteCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, webSiteName string, _ *WebSitesControllerClientGetWebSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/webSites/{webSiteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if webSiteName == "" {
		return nil, errors.New("parameter webSiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{webSiteName}", url.PathEscape(webSiteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWebSiteHandleResponse handles the GetWebSite response.
func (client *WebSitesControllerClient) getWebSiteHandleResponse(resp *http.Response) (WebSitesControllerClientGetWebSiteResponse, error) {
	result := WebSitesControllerClientGetWebSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WebSite); err != nil {
		return WebSitesControllerClientGetWebSiteResponse{}, err
	}
	return result, nil
}

// NewListWebSitesPager - Gets a list of websites in the migrate project.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - options - WebSitesControllerClientListWebSitesOptions contains the optional parameters for the WebSitesControllerClient.NewListWebSitesPager
//     method.
func (client *WebSitesControllerClient) NewListWebSitesPager(resourceGroupName string, migrateProjectName string, options *WebSitesControllerClientListWebSitesOptions) *runtime.Pager[WebSitesControllerClientListWebSitesResponse] {
	return runtime.NewPager(runtime.PagingHandler[WebSitesControllerClientListWebSitesResponse]{
		More: func(page WebSitesControllerClientListWebSitesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WebSitesControllerClientListWebSitesResponse) (WebSitesControllerClientListWebSitesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WebSitesControllerClient.NewListWebSitesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWebSitesCreateRequest(ctx, resourceGroupName, migrateProjectName, options)
			}, nil)
			if err != nil {
				return WebSitesControllerClientListWebSitesResponse{}, err
			}
			return client.listWebSitesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWebSitesCreateRequest creates the ListWebSites request.
func (client *WebSitesControllerClient) listWebSitesCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, options *WebSitesControllerClientListWebSitesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/webSites"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.PageSize != nil {
		reqQP.Set("pageSize", strconv.FormatInt(int64(*options.PageSize), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWebSitesHandleResponse handles the ListWebSites response.
func (client *WebSitesControllerClient) listWebSitesHandleResponse(resp *http.Response) (WebSitesControllerClientListWebSitesResponse, error) {
	result := WebSitesControllerClientListWebSitesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WebSiteCollection); err != nil {
		return WebSitesControllerClientListWebSitesResponse{}, err
	}
	return result, nil
}
