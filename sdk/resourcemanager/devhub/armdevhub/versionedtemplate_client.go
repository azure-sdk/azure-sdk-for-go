// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevhub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// VersionedTemplateClient contains the methods for the VersionedTemplate group.
// Don't use this type directly, use NewVersionedTemplateClient() instead.
type VersionedTemplateClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewVersionedTemplateClient creates a new instance of VersionedTemplateClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewVersionedTemplateClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*VersionedTemplateClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &VersionedTemplateClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Generate - Generates a VersionedTemplate.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-01-preview
//   - templateName - The name of the Template.
//   - templateVersion - The template version.
//   - options - VersionedTemplateClientGenerateOptions contains the optional parameters for the VersionedTemplateClient.Generate
//     method.
func (client *VersionedTemplateClient) Generate(ctx context.Context, templateName string, templateVersion string, parameters map[string]*string, options *VersionedTemplateClientGenerateOptions) (VersionedTemplateClientGenerateResponse, error) {
	var err error
	const operationName = "VersionedTemplateClient.Generate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.generateCreateRequest(ctx, templateName, templateVersion, parameters, options)
	if err != nil {
		return VersionedTemplateClientGenerateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VersionedTemplateClientGenerateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return VersionedTemplateClientGenerateResponse{}, err
	}
	resp, err := client.generateHandleResponse(httpResp)
	return resp, err
}

// generateCreateRequest creates the Generate request.
func (client *VersionedTemplateClient) generateCreateRequest(ctx context.Context, templateName string, templateVersion string, parameters map[string]*string, _ *VersionedTemplateClientGenerateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/templates/{templateName}/versions/{templateVersion}/generate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if templateName == "" {
		return nil, errors.New("parameter templateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{templateName}", url.PathEscape(templateName))
	if templateVersion == "" {
		return nil, errors.New("parameter templateVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{templateVersion}", url.PathEscape(templateVersion))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// generateHandleResponse handles the Generate response.
func (client *VersionedTemplateClient) generateHandleResponse(resp *http.Response) (VersionedTemplateClientGenerateResponse, error) {
	result := VersionedTemplateClientGenerateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GenerateVersionedTemplateResponse); err != nil {
		return VersionedTemplateClientGenerateResponse{}, err
	}
	return result, nil
}

// Get - Gets a VersionedTemplate.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-01-preview
//   - templateName - The name of the Template.
//   - templateVersion - The template version.
//   - options - VersionedTemplateClientGetOptions contains the optional parameters for the VersionedTemplateClient.Get method.
func (client *VersionedTemplateClient) Get(ctx context.Context, templateName string, templateVersion string, options *VersionedTemplateClientGetOptions) (VersionedTemplateClientGetResponse, error) {
	var err error
	const operationName = "VersionedTemplateClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, templateName, templateVersion, options)
	if err != nil {
		return VersionedTemplateClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VersionedTemplateClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return VersionedTemplateClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *VersionedTemplateClient) getCreateRequest(ctx context.Context, templateName string, templateVersion string, _ *VersionedTemplateClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/templates/{templateName}/versions/{templateVersion}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if templateName == "" {
		return nil, errors.New("parameter templateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{templateName}", url.PathEscape(templateName))
	if templateVersion == "" {
		return nil, errors.New("parameter templateVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{templateVersion}", url.PathEscape(templateVersion))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *VersionedTemplateClient) getHandleResponse(resp *http.Response) (VersionedTemplateClientGetResponse, error) {
	result := VersionedTemplateClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VersionedTemplate); err != nil {
		return VersionedTemplateClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets a list of VersionedTemplate.
//
// Generated from API version 2025-03-01-preview
//   - templateName - The name of the Template.
//   - options - VersionedTemplateClientListOptions contains the optional parameters for the VersionedTemplateClient.NewListPager
//     method.
func (client *VersionedTemplateClient) NewListPager(templateName string, options *VersionedTemplateClientListOptions) *runtime.Pager[VersionedTemplateClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[VersionedTemplateClientListResponse]{
		More: func(page VersionedTemplateClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *VersionedTemplateClientListResponse) (VersionedTemplateClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "VersionedTemplateClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, templateName, options)
			}, nil)
			if err != nil {
				return VersionedTemplateClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *VersionedTemplateClient) listCreateRequest(ctx context.Context, templateName string, _ *VersionedTemplateClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/templates/{templateName}/versions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if templateName == "" {
		return nil, errors.New("parameter templateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{templateName}", url.PathEscape(templateName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *VersionedTemplateClient) listHandleResponse(resp *http.Response) (VersionedTemplateClientListResponse, error) {
	result := VersionedTemplateClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VersionedTemplateListResult); err != nil {
		return VersionedTemplateClientListResponse{}, err
	}
	return result, nil
}
