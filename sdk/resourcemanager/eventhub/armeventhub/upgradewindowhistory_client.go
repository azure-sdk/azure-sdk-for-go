//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventhub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// UpgradeWindowHistoryClient contains the methods for the UpgradeWindowHistory group.
// Don't use this type directly, use NewUpgradeWindowHistoryClient() instead.
type UpgradeWindowHistoryClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewUpgradeWindowHistoryClient creates a new instance of UpgradeWindowHistoryClient with the specified values.
//   - subscriptionID - Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewUpgradeWindowHistoryClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*UpgradeWindowHistoryClient, error) {
	cl, err := arm.NewClient(moduleName+".UpgradeWindowHistoryClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &UpgradeWindowHistoryClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// NewGetPager - Get Event Hubs Cluster upgrade window history
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - Name of the resource group within the azure subscription.
//   - clusterName - The name of the Event Hubs Cluster.
//   - options - UpgradeWindowHistoryClientGetOptions contains the optional parameters for the UpgradeWindowHistoryClient.NewGetPager
//     method.
func (client *UpgradeWindowHistoryClient) NewGetPager(resourceGroupName string, clusterName string, options *UpgradeWindowHistoryClientGetOptions) *runtime.Pager[UpgradeWindowHistoryClientGetResponse] {
	return runtime.NewPager(runtime.PagingHandler[UpgradeWindowHistoryClientGetResponse]{
		More: func(page UpgradeWindowHistoryClientGetResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *UpgradeWindowHistoryClientGetResponse) (UpgradeWindowHistoryClientGetResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getCreateRequest(ctx, resourceGroupName, clusterName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return UpgradeWindowHistoryClientGetResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return UpgradeWindowHistoryClientGetResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return UpgradeWindowHistoryClientGetResponse{}, runtime.NewResponseError(resp)
			}
			return client.getHandleResponse(resp)
		},
	})
}

// getCreateRequest creates the Get request.
func (client *UpgradeWindowHistoryClient) getCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, options *UpgradeWindowHistoryClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/upgradewindowhistory"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *UpgradeWindowHistoryClient) getHandleResponse(resp *http.Response) (UpgradeWindowHistoryClientGetResponse, error) {
	result := UpgradeWindowHistoryClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClusterUpgradeHistoryList); err != nil {
		return UpgradeWindowHistoryClientGetResponse{}, err
	}
	return result, nil
}
