// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armiotoperations

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DataflowGraphClient contains the methods for the DataflowGraph group.
// Don't use this type directly, use NewDataflowGraphClient() instead.
type DataflowGraphClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDataflowGraphClient creates a new instance of DataflowGraphClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDataflowGraphClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DataflowGraphClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DataflowGraphClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a DataflowGraphResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of instance.
//   - dataflowProfileName - Name of Instance dataflowProfile resource
//   - dataflowGraphName - Name of Instance dataflowEndpoint resource.
//   - resource - Resource create parameters.
//   - options - DataflowGraphClientBeginCreateOrUpdateOptions contains the optional parameters for the DataflowGraphClient.BeginCreateOrUpdate
//     method.
func (client *DataflowGraphClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, resource DataflowGraphResource, options *DataflowGraphClientBeginCreateOrUpdateOptions) (*runtime.Poller[DataflowGraphClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DataflowGraphClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DataflowGraphClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a DataflowGraphResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
func (client *DataflowGraphClient) createOrUpdate(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, resource DataflowGraphResource, options *DataflowGraphClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "DataflowGraphClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DataflowGraphClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, resource DataflowGraphResource, _ *DataflowGraphClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	if dataflowProfileName == "" {
		return nil, errors.New("parameter dataflowProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowProfileName}", url.PathEscape(dataflowProfileName))
	if dataflowGraphName == "" {
		return nil, errors.New("parameter dataflowGraphName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowGraphName}", url.PathEscape(dataflowGraphName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a DataflowGraphResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of instance.
//   - dataflowProfileName - Name of Instance dataflowProfile resource
//   - dataflowGraphName - Name of Instance dataflowEndpoint resource.
//   - options - DataflowGraphClientBeginDeleteOptions contains the optional parameters for the DataflowGraphClient.BeginDelete
//     method.
func (client *DataflowGraphClient) BeginDelete(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, options *DataflowGraphClientBeginDeleteOptions) (*runtime.Poller[DataflowGraphClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DataflowGraphClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DataflowGraphClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a DataflowGraphResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
func (client *DataflowGraphClient) deleteOperation(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, options *DataflowGraphClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "DataflowGraphClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DataflowGraphClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, _ *DataflowGraphClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	if dataflowProfileName == "" {
		return nil, errors.New("parameter dataflowProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowProfileName}", url.PathEscape(dataflowProfileName))
	if dataflowGraphName == "" {
		return nil, errors.New("parameter dataflowGraphName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowGraphName}", url.PathEscape(dataflowGraphName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a DataflowGraphResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of instance.
//   - dataflowProfileName - Name of Instance dataflowProfile resource
//   - dataflowGraphName - Name of Instance dataflowEndpoint resource.
//   - options - DataflowGraphClientGetOptions contains the optional parameters for the DataflowGraphClient.Get method.
func (client *DataflowGraphClient) Get(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, options *DataflowGraphClientGetOptions) (DataflowGraphClientGetResponse, error) {
	var err error
	const operationName = "DataflowGraphClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, options)
	if err != nil {
		return DataflowGraphClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataflowGraphClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataflowGraphClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DataflowGraphClient) getCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, _ *DataflowGraphClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	if dataflowProfileName == "" {
		return nil, errors.New("parameter dataflowProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowProfileName}", url.PathEscape(dataflowProfileName))
	if dataflowGraphName == "" {
		return nil, errors.New("parameter dataflowGraphName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowGraphName}", url.PathEscape(dataflowGraphName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DataflowGraphClient) getHandleResponse(resp *http.Response) (DataflowGraphClientGetResponse, error) {
	result := DataflowGraphClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataflowGraphResource); err != nil {
		return DataflowGraphClientGetResponse{}, err
	}
	return result, nil
}

// NewListByDataflowProfilePager - List DataflowGraphResource resources by DataflowProfileResource
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of instance.
//   - dataflowProfileName - Name of Instance dataflowProfile resource
//   - options - DataflowGraphClientListByDataflowProfileOptions contains the optional parameters for the DataflowGraphClient.NewListByDataflowProfilePager
//     method.
func (client *DataflowGraphClient) NewListByDataflowProfilePager(resourceGroupName string, instanceName string, dataflowProfileName string, options *DataflowGraphClientListByDataflowProfileOptions) *runtime.Pager[DataflowGraphClientListByDataflowProfileResponse] {
	return runtime.NewPager(runtime.PagingHandler[DataflowGraphClientListByDataflowProfileResponse]{
		More: func(page DataflowGraphClientListByDataflowProfileResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DataflowGraphClientListByDataflowProfileResponse) (DataflowGraphClientListByDataflowProfileResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DataflowGraphClient.NewListByDataflowProfilePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByDataflowProfileCreateRequest(ctx, resourceGroupName, instanceName, dataflowProfileName, options)
			}, nil)
			if err != nil {
				return DataflowGraphClientListByDataflowProfileResponse{}, err
			}
			return client.listByDataflowProfileHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByDataflowProfileCreateRequest creates the ListByDataflowProfile request.
func (client *DataflowGraphClient) listByDataflowProfileCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, _ *DataflowGraphClientListByDataflowProfileOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	if dataflowProfileName == "" {
		return nil, errors.New("parameter dataflowProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataflowProfileName}", url.PathEscape(dataflowProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByDataflowProfileHandleResponse handles the ListByDataflowProfile response.
func (client *DataflowGraphClient) listByDataflowProfileHandleResponse(resp *http.Response) (DataflowGraphClientListByDataflowProfileResponse, error) {
	result := DataflowGraphClientListByDataflowProfileResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataflowGraphResourceListResult); err != nil {
		return DataflowGraphClientListByDataflowProfileResponse{}, err
	}
	return result, nil
}
