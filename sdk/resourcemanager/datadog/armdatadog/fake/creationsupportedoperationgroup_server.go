// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datadog/armdatadog/v2"
	"net/http"
	"net/url"
	"regexp"
)

// CreationSupportedOperationGroupServer is a fake server for instances of the armdatadog.CreationSupportedOperationGroupClient type.
type CreationSupportedOperationGroupServer struct {
	// Get is the fake for method CreationSupportedOperationGroupClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, datadogOrganizationID string, options *armdatadog.CreationSupportedOperationGroupClientGetOptions) (resp azfake.Responder[armdatadog.CreationSupportedOperationGroupClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method CreationSupportedOperationGroupClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(datadogOrganizationID string, options *armdatadog.CreationSupportedOperationGroupClientListOptions) (resp azfake.PagerResponder[armdatadog.CreationSupportedOperationGroupClientListResponse])
}

// NewCreationSupportedOperationGroupServerTransport creates a new instance of CreationSupportedOperationGroupServerTransport with the provided implementation.
// The returned CreationSupportedOperationGroupServerTransport instance is connected to an instance of armdatadog.CreationSupportedOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCreationSupportedOperationGroupServerTransport(srv *CreationSupportedOperationGroupServer) *CreationSupportedOperationGroupServerTransport {
	return &CreationSupportedOperationGroupServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armdatadog.CreationSupportedOperationGroupClientListResponse]](),
	}
}

// CreationSupportedOperationGroupServerTransport connects instances of armdatadog.CreationSupportedOperationGroupClient to instances of CreationSupportedOperationGroupServer.
// Don't use this type directly, use NewCreationSupportedOperationGroupServerTransport instead.
type CreationSupportedOperationGroupServerTransport struct {
	srv          *CreationSupportedOperationGroupServer
	newListPager *tracker[azfake.PagerResponder[armdatadog.CreationSupportedOperationGroupClientListResponse]]
}

// Do implements the policy.Transporter interface for CreationSupportedOperationGroupServerTransport.
func (c *CreationSupportedOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *CreationSupportedOperationGroupServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if creationSupportedOperationGroupServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = creationSupportedOperationGroupServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "CreationSupportedOperationGroupClient.Get":
				res.resp, res.err = c.dispatchGet(req)
			case "CreationSupportedOperationGroupClient.NewListPager":
				res.resp, res.err = c.dispatchNewListPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *CreationSupportedOperationGroupServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Datadog/subscriptionStatuses/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	datadogOrganizationIDParam, err := url.QueryUnescape(qp.Get("datadogOrganizationId"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), datadogOrganizationIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CreateResourceSupportedResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CreationSupportedOperationGroupServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := c.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Datadog/subscriptionStatuses`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		datadogOrganizationIDParam, err := url.QueryUnescape(qp.Get("datadogOrganizationId"))
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListPager(datadogOrganizationIDParam, nil)
		newListPager = &resp
		c.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armdatadog.CreationSupportedOperationGroupClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		c.newListPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to CreationSupportedOperationGroupServerTransport
var creationSupportedOperationGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
