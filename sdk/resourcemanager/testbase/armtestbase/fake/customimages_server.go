//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/testbase/armtestbase"
	"net/http"
	"net/url"
	"regexp"
)

// CustomImagesServer is a fake server for instances of the armtestbase.CustomImagesClient type.
type CustomImagesServer struct {
	// CheckImageNameAvailability is the fake for method CustomImagesClient.CheckImageNameAvailability
	// HTTP status codes to indicate success: http.StatusOK
	CheckImageNameAvailability func(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters armtestbase.ImageNameCheckAvailabilityParameters, options *armtestbase.CustomImagesClientCheckImageNameAvailabilityOptions) (resp azfake.Responder[armtestbase.CustomImagesClientCheckImageNameAvailabilityResponse], errResp azfake.ErrorResponder)

	// BeginCreate is the fake for method CustomImagesClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, testBaseAccountName string, customImageName string, parameters armtestbase.CustomImageResource, options *armtestbase.CustomImagesClientBeginCreateOptions) (resp azfake.PollerResponder[armtestbase.CustomImagesClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method CustomImagesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, testBaseAccountName string, customImageName string, options *armtestbase.CustomImagesClientBeginDeleteOptions) (resp azfake.PollerResponder[armtestbase.CustomImagesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method CustomImagesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, testBaseAccountName string, customImageName string, options *armtestbase.CustomImagesClientGetOptions) (resp azfake.Responder[armtestbase.CustomImagesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByTestBaseAccountPager is the fake for method CustomImagesClient.NewListByTestBaseAccountPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByTestBaseAccountPager func(resourceGroupName string, testBaseAccountName string, options *armtestbase.CustomImagesClientListByTestBaseAccountOptions) (resp azfake.PagerResponder[armtestbase.CustomImagesClientListByTestBaseAccountResponse])
}

// NewCustomImagesServerTransport creates a new instance of CustomImagesServerTransport with the provided implementation.
// The returned CustomImagesServerTransport instance is connected to an instance of armtestbase.CustomImagesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCustomImagesServerTransport(srv *CustomImagesServer) *CustomImagesServerTransport {
	return &CustomImagesServerTransport{
		srv:                           srv,
		beginCreate:                   newTracker[azfake.PollerResponder[armtestbase.CustomImagesClientCreateResponse]](),
		beginDelete:                   newTracker[azfake.PollerResponder[armtestbase.CustomImagesClientDeleteResponse]](),
		newListByTestBaseAccountPager: newTracker[azfake.PagerResponder[armtestbase.CustomImagesClientListByTestBaseAccountResponse]](),
	}
}

// CustomImagesServerTransport connects instances of armtestbase.CustomImagesClient to instances of CustomImagesServer.
// Don't use this type directly, use NewCustomImagesServerTransport instead.
type CustomImagesServerTransport struct {
	srv                           *CustomImagesServer
	beginCreate                   *tracker[azfake.PollerResponder[armtestbase.CustomImagesClientCreateResponse]]
	beginDelete                   *tracker[azfake.PollerResponder[armtestbase.CustomImagesClientDeleteResponse]]
	newListByTestBaseAccountPager *tracker[azfake.PagerResponder[armtestbase.CustomImagesClientListByTestBaseAccountResponse]]
}

// Do implements the policy.Transporter interface for CustomImagesServerTransport.
func (c *CustomImagesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "CustomImagesClient.CheckImageNameAvailability":
		resp, err = c.dispatchCheckImageNameAvailability(req)
	case "CustomImagesClient.BeginCreate":
		resp, err = c.dispatchBeginCreate(req)
	case "CustomImagesClient.BeginDelete":
		resp, err = c.dispatchBeginDelete(req)
	case "CustomImagesClient.Get":
		resp, err = c.dispatchGet(req)
	case "CustomImagesClient.NewListByTestBaseAccountPager":
		resp, err = c.dispatchNewListByTestBaseAccountPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *CustomImagesServerTransport) dispatchCheckImageNameAvailability(req *http.Request) (*http.Response, error) {
	if c.srv.CheckImageNameAvailability == nil {
		return nil, &nonRetriableError{errors.New("fake for method CheckImageNameAvailability not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/checkImageNameAvailability`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armtestbase.ImageNameCheckAvailabilityParameters](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.CheckImageNameAvailability(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VerificationResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CustomImagesServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if c.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := c.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/customImages/(?P<customImageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armtestbase.CustomImageResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
		if err != nil {
			return nil, err
		}
		customImageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("customImageName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginCreate(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, customImageNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		c.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		c.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		c.beginCreate.remove(req)
	}

	return resp, nil
}

func (c *CustomImagesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if c.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := c.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/customImages/(?P<customImageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
		if err != nil {
			return nil, err
		}
		customImageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("customImageName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginDelete(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, customImageNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		c.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		c.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		c.beginDelete.remove(req)
	}

	return resp, nil
}

func (c *CustomImagesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/customImages/(?P<customImageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	customImageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("customImageName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, customImageNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CustomImageResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CustomImagesServerTransport) dispatchNewListByTestBaseAccountPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListByTestBaseAccountPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByTestBaseAccountPager not implemented")}
	}
	newListByTestBaseAccountPager := c.newListByTestBaseAccountPager.get(req)
	if newListByTestBaseAccountPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/customImages`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListByTestBaseAccountPager(resourceGroupNameParam, testBaseAccountNameParam, nil)
		newListByTestBaseAccountPager = &resp
		c.newListByTestBaseAccountPager.add(req, newListByTestBaseAccountPager)
		server.PagerResponderInjectNextLinks(newListByTestBaseAccountPager, req, func(page *armtestbase.CustomImagesClientListByTestBaseAccountResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByTestBaseAccountPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListByTestBaseAccountPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByTestBaseAccountPager) {
		c.newListByTestBaseAccountPager.remove(req)
	}
	return resp, nil
}
