// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/aznamespaces/v2"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// ReceiverServer is a fake server for instances of the aznamespaces.ReceiverClient type.
type ReceiverServer struct {
	// AcknowledgeEvents is the fake for method ReceiverClient.AcknowledgeEvents
	// HTTP status codes to indicate success: http.StatusOK
	AcknowledgeEvents func(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *aznamespaces.ReceiverClientAcknowledgeEventsOptions) (resp azfake.Responder[aznamespaces.ReceiverClientAcknowledgeEventsResponse], errResp azfake.ErrorResponder)

	// ReceiveEvents is the fake for method ReceiverClient.ReceiveEvents
	// HTTP status codes to indicate success: http.StatusOK
	ReceiveEvents func(ctx context.Context, topicName string, eventSubscriptionName string, options *aznamespaces.ReceiverClientReceiveEventsOptions) (resp azfake.Responder[aznamespaces.ReceiverClientReceiveEventsResponse], errResp azfake.ErrorResponder)

	// RejectEvents is the fake for method ReceiverClient.RejectEvents
	// HTTP status codes to indicate success: http.StatusOK
	RejectEvents func(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *aznamespaces.ReceiverClientRejectEventsOptions) (resp azfake.Responder[aznamespaces.ReceiverClientRejectEventsResponse], errResp azfake.ErrorResponder)

	// ReleaseEvents is the fake for method ReceiverClient.ReleaseEvents
	// HTTP status codes to indicate success: http.StatusOK
	ReleaseEvents func(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *aznamespaces.ReceiverClientReleaseEventsOptions) (resp azfake.Responder[aznamespaces.ReceiverClientReleaseEventsResponse], errResp azfake.ErrorResponder)

	// RenewEventLocks is the fake for method ReceiverClient.RenewEventLocks
	// HTTP status codes to indicate success: http.StatusOK
	RenewEventLocks func(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *aznamespaces.ReceiverClientRenewEventLocksOptions) (resp azfake.Responder[aznamespaces.ReceiverClientRenewEventLocksResponse], errResp azfake.ErrorResponder)
}

// NewReceiverServerTransport creates a new instance of ReceiverServerTransport with the provided implementation.
// The returned ReceiverServerTransport instance is connected to an instance of aznamespaces.ReceiverClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewReceiverServerTransport(srv *ReceiverServer) *ReceiverServerTransport {
	return &ReceiverServerTransport{srv: srv}
}

// ReceiverServerTransport connects instances of aznamespaces.ReceiverClient to instances of ReceiverServer.
// Don't use this type directly, use NewReceiverServerTransport instead.
type ReceiverServerTransport struct {
	srv *ReceiverServer
}

// Do implements the policy.Transporter interface for ReceiverServerTransport.
func (r *ReceiverServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return r.dispatchToMethodFake(req, method)
}

func (r *ReceiverServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if receiverServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = receiverServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ReceiverClient.AcknowledgeEvents":
				res.resp, res.err = r.dispatchAcknowledgeEvents(req)
			case "ReceiverClient.ReceiveEvents":
				res.resp, res.err = r.dispatchReceiveEvents(req)
			case "ReceiverClient.RejectEvents":
				res.resp, res.err = r.dispatchRejectEvents(req)
			case "ReceiverClient.ReleaseEvents":
				res.resp, res.err = r.dispatchReleaseEvents(req)
			case "ReceiverClient.RenewEventLocks":
				res.resp, res.err = r.dispatchRenewEventLocks(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (r *ReceiverServerTransport) dispatchAcknowledgeEvents(req *http.Request) (*http.Response, error) {
	if r.srv.AcknowledgeEvents == nil {
		return nil, &nonRetriableError{errors.New("fake for method AcknowledgeEvents not implemented")}
	}
	const regexStr = `/topics/(?P<topicName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventsubscriptions/(?P<eventSubscriptionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+):acknowledge`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	type partialBodyParams struct {
		LockTokens []string `json:"lockTokens"`
	}
	body, err := server.UnmarshalRequestAsJSON[partialBodyParams](req)
	if err != nil {
		return nil, err
	}
	topicNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topicName")])
	if err != nil {
		return nil, err
	}
	eventSubscriptionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventSubscriptionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.AcknowledgeEvents(req.Context(), topicNameParam, eventSubscriptionNameParam, body.LockTokens, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AcknowledgeResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ReceiverServerTransport) dispatchReceiveEvents(req *http.Request) (*http.Response, error) {
	if r.srv.ReceiveEvents == nil {
		return nil, &nonRetriableError{errors.New("fake for method ReceiveEvents not implemented")}
	}
	const regexStr = `/topics/(?P<topicName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventsubscriptions/(?P<eventSubscriptionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+):receive`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	topicNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topicName")])
	if err != nil {
		return nil, err
	}
	eventSubscriptionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventSubscriptionName")])
	if err != nil {
		return nil, err
	}
	maxEventsUnescaped, err := url.QueryUnescape(qp.Get("maxEvents"))
	if err != nil {
		return nil, err
	}
	maxEventsParam, err := parseOptional(maxEventsUnescaped, func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	maxWaitTimeUnescaped, err := url.QueryUnescape(qp.Get("maxWaitTime"))
	if err != nil {
		return nil, err
	}
	maxWaitTimeParam, err := parseOptional(maxWaitTimeUnescaped, func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	var options *aznamespaces.ReceiverClientReceiveEventsOptions
	if maxEventsParam != nil || maxWaitTimeParam != nil {
		options = &aznamespaces.ReceiverClientReceiveEventsOptions{
			MaxEvents:   maxEventsParam,
			MaxWaitTime: maxWaitTimeParam,
		}
	}
	respr, errRespr := r.srv.ReceiveEvents(req.Context(), topicNameParam, eventSubscriptionNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ReceiveResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ReceiverServerTransport) dispatchRejectEvents(req *http.Request) (*http.Response, error) {
	if r.srv.RejectEvents == nil {
		return nil, &nonRetriableError{errors.New("fake for method RejectEvents not implemented")}
	}
	const regexStr = `/topics/(?P<topicName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventsubscriptions/(?P<eventSubscriptionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+):reject`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	type partialBodyParams struct {
		LockTokens []string `json:"lockTokens"`
	}
	body, err := server.UnmarshalRequestAsJSON[partialBodyParams](req)
	if err != nil {
		return nil, err
	}
	topicNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topicName")])
	if err != nil {
		return nil, err
	}
	eventSubscriptionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventSubscriptionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.RejectEvents(req.Context(), topicNameParam, eventSubscriptionNameParam, body.LockTokens, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RejectResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ReceiverServerTransport) dispatchReleaseEvents(req *http.Request) (*http.Response, error) {
	if r.srv.ReleaseEvents == nil {
		return nil, &nonRetriableError{errors.New("fake for method ReleaseEvents not implemented")}
	}
	const regexStr = `/topics/(?P<topicName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventsubscriptions/(?P<eventSubscriptionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+):release`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	type partialBodyParams struct {
		LockTokens []string `json:"lockTokens"`
	}
	body, err := server.UnmarshalRequestAsJSON[partialBodyParams](req)
	if err != nil {
		return nil, err
	}
	topicNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topicName")])
	if err != nil {
		return nil, err
	}
	eventSubscriptionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventSubscriptionName")])
	if err != nil {
		return nil, err
	}
	releaseDelayInSecondsUnescaped, err := url.QueryUnescape(qp.Get("releaseDelayInSeconds"))
	if err != nil {
		return nil, err
	}
	releaseDelayInSecondsParam := getOptional(aznamespaces.ReleaseDelay(releaseDelayInSecondsUnescaped))
	var options *aznamespaces.ReceiverClientReleaseEventsOptions
	if releaseDelayInSecondsParam != nil {
		options = &aznamespaces.ReceiverClientReleaseEventsOptions{
			ReleaseDelayInSeconds: releaseDelayInSecondsParam,
		}
	}
	respr, errRespr := r.srv.ReleaseEvents(req.Context(), topicNameParam, eventSubscriptionNameParam, body.LockTokens, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ReleaseResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ReceiverServerTransport) dispatchRenewEventLocks(req *http.Request) (*http.Response, error) {
	if r.srv.RenewEventLocks == nil {
		return nil, &nonRetriableError{errors.New("fake for method RenewEventLocks not implemented")}
	}
	const regexStr = `/topics/(?P<topicName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/eventsubscriptions/(?P<eventSubscriptionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+):renewLock`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	type partialBodyParams struct {
		LockTokens []string `json:"lockTokens"`
	}
	body, err := server.UnmarshalRequestAsJSON[partialBodyParams](req)
	if err != nil {
		return nil, err
	}
	topicNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topicName")])
	if err != nil {
		return nil, err
	}
	eventSubscriptionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventSubscriptionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.RenewEventLocks(req.Context(), topicNameParam, eventSubscriptionNameParam, body.LockTokens, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RenewLocksResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ReceiverServerTransport
var receiverServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
