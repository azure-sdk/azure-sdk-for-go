// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos/v4"
	"net/http"
	"net/url"
	"regexp"
)

// MongoMIResourcesServer is a fake server for instances of the armcosmos.MongoMIResourcesClient type.
type MongoMIResourcesServer struct {
	// BeginCreateUpdateMongoMIRoleAssignment is the fake for method MongoMIResourcesClient.BeginCreateUpdateMongoMIRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateUpdateMongoMIRoleAssignment func(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, createUpdateMongoMIRoleAssignmentParameters armcosmos.MongoMIRoleAssignmentResource, options *armcosmos.MongoMIResourcesClientBeginCreateUpdateMongoMIRoleAssignmentOptions) (resp azfake.PollerResponder[armcosmos.MongoMIResourcesClientCreateUpdateMongoMIRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// BeginCreateUpdateMongoMIRoleDefinition is the fake for method MongoMIResourcesClient.BeginCreateUpdateMongoMIRoleDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateUpdateMongoMIRoleDefinition func(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, createUpdateMongoMIRoleDefinitionParameters armcosmos.MongoMIRoleDefinitionResource, options *armcosmos.MongoMIResourcesClientBeginCreateUpdateMongoMIRoleDefinitionOptions) (resp azfake.PollerResponder[armcosmos.MongoMIResourcesClientCreateUpdateMongoMIRoleDefinitionResponse], errResp azfake.ErrorResponder)

	// BeginDeleteMongoMIRoleAssignment is the fake for method MongoMIResourcesClient.BeginDeleteMongoMIRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteMongoMIRoleAssignment func(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, options *armcosmos.MongoMIResourcesClientBeginDeleteMongoMIRoleAssignmentOptions) (resp azfake.PollerResponder[armcosmos.MongoMIResourcesClientDeleteMongoMIRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// BeginDeleteMongoMIRoleDefinition is the fake for method MongoMIResourcesClient.BeginDeleteMongoMIRoleDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteMongoMIRoleDefinition func(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, options *armcosmos.MongoMIResourcesClientBeginDeleteMongoMIRoleDefinitionOptions) (resp azfake.PollerResponder[armcosmos.MongoMIResourcesClientDeleteMongoMIRoleDefinitionResponse], errResp azfake.ErrorResponder)

	// GetMongoMIRoleAssignment is the fake for method MongoMIResourcesClient.GetMongoMIRoleAssignment
	// HTTP status codes to indicate success: http.StatusOK
	GetMongoMIRoleAssignment func(ctx context.Context, resourceGroupName string, accountName string, roleAssignmentID string, options *armcosmos.MongoMIResourcesClientGetMongoMIRoleAssignmentOptions) (resp azfake.Responder[armcosmos.MongoMIResourcesClientGetMongoMIRoleAssignmentResponse], errResp azfake.ErrorResponder)

	// GetMongoMIRoleDefinition is the fake for method MongoMIResourcesClient.GetMongoMIRoleDefinition
	// HTTP status codes to indicate success: http.StatusOK
	GetMongoMIRoleDefinition func(ctx context.Context, resourceGroupName string, accountName string, roleDefinitionID string, options *armcosmos.MongoMIResourcesClientGetMongoMIRoleDefinitionOptions) (resp azfake.Responder[armcosmos.MongoMIResourcesClientGetMongoMIRoleDefinitionResponse], errResp azfake.ErrorResponder)

	// NewListMongoMIRoleAssignmentsPager is the fake for method MongoMIResourcesClient.NewListMongoMIRoleAssignmentsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMongoMIRoleAssignmentsPager func(resourceGroupName string, accountName string, options *armcosmos.MongoMIResourcesClientListMongoMIRoleAssignmentsOptions) (resp azfake.PagerResponder[armcosmos.MongoMIResourcesClientListMongoMIRoleAssignmentsResponse])

	// NewListMongoMIRoleDefinitionsPager is the fake for method MongoMIResourcesClient.NewListMongoMIRoleDefinitionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListMongoMIRoleDefinitionsPager func(resourceGroupName string, accountName string, options *armcosmos.MongoMIResourcesClientListMongoMIRoleDefinitionsOptions) (resp azfake.PagerResponder[armcosmos.MongoMIResourcesClientListMongoMIRoleDefinitionsResponse])
}

// NewMongoMIResourcesServerTransport creates a new instance of MongoMIResourcesServerTransport with the provided implementation.
// The returned MongoMIResourcesServerTransport instance is connected to an instance of armcosmos.MongoMIResourcesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMongoMIResourcesServerTransport(srv *MongoMIResourcesServer) *MongoMIResourcesServerTransport {
	return &MongoMIResourcesServerTransport{
		srv:                                    srv,
		beginCreateUpdateMongoMIRoleAssignment: newTracker[azfake.PollerResponder[armcosmos.MongoMIResourcesClientCreateUpdateMongoMIRoleAssignmentResponse]](),
		beginCreateUpdateMongoMIRoleDefinition: newTracker[azfake.PollerResponder[armcosmos.MongoMIResourcesClientCreateUpdateMongoMIRoleDefinitionResponse]](),
		beginDeleteMongoMIRoleAssignment:       newTracker[azfake.PollerResponder[armcosmos.MongoMIResourcesClientDeleteMongoMIRoleAssignmentResponse]](),
		beginDeleteMongoMIRoleDefinition:       newTracker[azfake.PollerResponder[armcosmos.MongoMIResourcesClientDeleteMongoMIRoleDefinitionResponse]](),
		newListMongoMIRoleAssignmentsPager:     newTracker[azfake.PagerResponder[armcosmos.MongoMIResourcesClientListMongoMIRoleAssignmentsResponse]](),
		newListMongoMIRoleDefinitionsPager:     newTracker[azfake.PagerResponder[armcosmos.MongoMIResourcesClientListMongoMIRoleDefinitionsResponse]](),
	}
}

// MongoMIResourcesServerTransport connects instances of armcosmos.MongoMIResourcesClient to instances of MongoMIResourcesServer.
// Don't use this type directly, use NewMongoMIResourcesServerTransport instead.
type MongoMIResourcesServerTransport struct {
	srv                                    *MongoMIResourcesServer
	beginCreateUpdateMongoMIRoleAssignment *tracker[azfake.PollerResponder[armcosmos.MongoMIResourcesClientCreateUpdateMongoMIRoleAssignmentResponse]]
	beginCreateUpdateMongoMIRoleDefinition *tracker[azfake.PollerResponder[armcosmos.MongoMIResourcesClientCreateUpdateMongoMIRoleDefinitionResponse]]
	beginDeleteMongoMIRoleAssignment       *tracker[azfake.PollerResponder[armcosmos.MongoMIResourcesClientDeleteMongoMIRoleAssignmentResponse]]
	beginDeleteMongoMIRoleDefinition       *tracker[azfake.PollerResponder[armcosmos.MongoMIResourcesClientDeleteMongoMIRoleDefinitionResponse]]
	newListMongoMIRoleAssignmentsPager     *tracker[azfake.PagerResponder[armcosmos.MongoMIResourcesClientListMongoMIRoleAssignmentsResponse]]
	newListMongoMIRoleDefinitionsPager     *tracker[azfake.PagerResponder[armcosmos.MongoMIResourcesClientListMongoMIRoleDefinitionsResponse]]
}

// Do implements the policy.Transporter interface for MongoMIResourcesServerTransport.
func (m *MongoMIResourcesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *MongoMIResourcesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if mongoMiResourcesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = mongoMiResourcesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "MongoMIResourcesClient.BeginCreateUpdateMongoMIRoleAssignment":
				res.resp, res.err = m.dispatchBeginCreateUpdateMongoMIRoleAssignment(req)
			case "MongoMIResourcesClient.BeginCreateUpdateMongoMIRoleDefinition":
				res.resp, res.err = m.dispatchBeginCreateUpdateMongoMIRoleDefinition(req)
			case "MongoMIResourcesClient.BeginDeleteMongoMIRoleAssignment":
				res.resp, res.err = m.dispatchBeginDeleteMongoMIRoleAssignment(req)
			case "MongoMIResourcesClient.BeginDeleteMongoMIRoleDefinition":
				res.resp, res.err = m.dispatchBeginDeleteMongoMIRoleDefinition(req)
			case "MongoMIResourcesClient.GetMongoMIRoleAssignment":
				res.resp, res.err = m.dispatchGetMongoMIRoleAssignment(req)
			case "MongoMIResourcesClient.GetMongoMIRoleDefinition":
				res.resp, res.err = m.dispatchGetMongoMIRoleDefinition(req)
			case "MongoMIResourcesClient.NewListMongoMIRoleAssignmentsPager":
				res.resp, res.err = m.dispatchNewListMongoMIRoleAssignmentsPager(req)
			case "MongoMIResourcesClient.NewListMongoMIRoleDefinitionsPager":
				res.resp, res.err = m.dispatchNewListMongoMIRoleDefinitionsPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *MongoMIResourcesServerTransport) dispatchBeginCreateUpdateMongoMIRoleAssignment(req *http.Request) (*http.Response, error) {
	if m.srv.BeginCreateUpdateMongoMIRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateUpdateMongoMIRoleAssignment not implemented")}
	}
	beginCreateUpdateMongoMIRoleAssignment := m.beginCreateUpdateMongoMIRoleAssignment.get(req)
	if beginCreateUpdateMongoMIRoleAssignment == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DocumentDB/databaseAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mongoMIRoleAssignments/(?P<roleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armcosmos.MongoMIRoleAssignmentResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		roleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleAssignmentId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginCreateUpdateMongoMIRoleAssignment(req.Context(), resourceGroupNameParam, accountNameParam, roleAssignmentIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateUpdateMongoMIRoleAssignment = &respr
		m.beginCreateUpdateMongoMIRoleAssignment.add(req, beginCreateUpdateMongoMIRoleAssignment)
	}

	resp, err := server.PollerResponderNext(beginCreateUpdateMongoMIRoleAssignment, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		m.beginCreateUpdateMongoMIRoleAssignment.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateUpdateMongoMIRoleAssignment) {
		m.beginCreateUpdateMongoMIRoleAssignment.remove(req)
	}

	return resp, nil
}

func (m *MongoMIResourcesServerTransport) dispatchBeginCreateUpdateMongoMIRoleDefinition(req *http.Request) (*http.Response, error) {
	if m.srv.BeginCreateUpdateMongoMIRoleDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateUpdateMongoMIRoleDefinition not implemented")}
	}
	beginCreateUpdateMongoMIRoleDefinition := m.beginCreateUpdateMongoMIRoleDefinition.get(req)
	if beginCreateUpdateMongoMIRoleDefinition == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DocumentDB/databaseAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mongoMIRoleDefinitions/(?P<roleDefinitionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armcosmos.MongoMIRoleDefinitionResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		roleDefinitionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleDefinitionId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginCreateUpdateMongoMIRoleDefinition(req.Context(), resourceGroupNameParam, accountNameParam, roleDefinitionIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateUpdateMongoMIRoleDefinition = &respr
		m.beginCreateUpdateMongoMIRoleDefinition.add(req, beginCreateUpdateMongoMIRoleDefinition)
	}

	resp, err := server.PollerResponderNext(beginCreateUpdateMongoMIRoleDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		m.beginCreateUpdateMongoMIRoleDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateUpdateMongoMIRoleDefinition) {
		m.beginCreateUpdateMongoMIRoleDefinition.remove(req)
	}

	return resp, nil
}

func (m *MongoMIResourcesServerTransport) dispatchBeginDeleteMongoMIRoleAssignment(req *http.Request) (*http.Response, error) {
	if m.srv.BeginDeleteMongoMIRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteMongoMIRoleAssignment not implemented")}
	}
	beginDeleteMongoMIRoleAssignment := m.beginDeleteMongoMIRoleAssignment.get(req)
	if beginDeleteMongoMIRoleAssignment == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DocumentDB/databaseAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mongoMIRoleAssignments/(?P<roleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		roleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleAssignmentId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginDeleteMongoMIRoleAssignment(req.Context(), resourceGroupNameParam, accountNameParam, roleAssignmentIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteMongoMIRoleAssignment = &respr
		m.beginDeleteMongoMIRoleAssignment.add(req, beginDeleteMongoMIRoleAssignment)
	}

	resp, err := server.PollerResponderNext(beginDeleteMongoMIRoleAssignment, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		m.beginDeleteMongoMIRoleAssignment.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteMongoMIRoleAssignment) {
		m.beginDeleteMongoMIRoleAssignment.remove(req)
	}

	return resp, nil
}

func (m *MongoMIResourcesServerTransport) dispatchBeginDeleteMongoMIRoleDefinition(req *http.Request) (*http.Response, error) {
	if m.srv.BeginDeleteMongoMIRoleDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteMongoMIRoleDefinition not implemented")}
	}
	beginDeleteMongoMIRoleDefinition := m.beginDeleteMongoMIRoleDefinition.get(req)
	if beginDeleteMongoMIRoleDefinition == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DocumentDB/databaseAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mongoMIRoleDefinitions/(?P<roleDefinitionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		roleDefinitionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleDefinitionId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginDeleteMongoMIRoleDefinition(req.Context(), resourceGroupNameParam, accountNameParam, roleDefinitionIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteMongoMIRoleDefinition = &respr
		m.beginDeleteMongoMIRoleDefinition.add(req, beginDeleteMongoMIRoleDefinition)
	}

	resp, err := server.PollerResponderNext(beginDeleteMongoMIRoleDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		m.beginDeleteMongoMIRoleDefinition.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteMongoMIRoleDefinition) {
		m.beginDeleteMongoMIRoleDefinition.remove(req)
	}

	return resp, nil
}

func (m *MongoMIResourcesServerTransport) dispatchGetMongoMIRoleAssignment(req *http.Request) (*http.Response, error) {
	if m.srv.GetMongoMIRoleAssignment == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMongoMIRoleAssignment not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DocumentDB/databaseAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mongoMIRoleAssignments/(?P<roleAssignmentId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	roleAssignmentIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleAssignmentId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.GetMongoMIRoleAssignment(req.Context(), resourceGroupNameParam, accountNameParam, roleAssignmentIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MongoMIRoleAssignmentResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MongoMIResourcesServerTransport) dispatchGetMongoMIRoleDefinition(req *http.Request) (*http.Response, error) {
	if m.srv.GetMongoMIRoleDefinition == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMongoMIRoleDefinition not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DocumentDB/databaseAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mongoMIRoleDefinitions/(?P<roleDefinitionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	roleDefinitionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("roleDefinitionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.GetMongoMIRoleDefinition(req.Context(), resourceGroupNameParam, accountNameParam, roleDefinitionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MongoMIRoleDefinitionResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MongoMIResourcesServerTransport) dispatchNewListMongoMIRoleAssignmentsPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListMongoMIRoleAssignmentsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMongoMIRoleAssignmentsPager not implemented")}
	}
	newListMongoMIRoleAssignmentsPager := m.newListMongoMIRoleAssignmentsPager.get(req)
	if newListMongoMIRoleAssignmentsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DocumentDB/databaseAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mongoMIRoleAssignments`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		resp := m.srv.NewListMongoMIRoleAssignmentsPager(resourceGroupNameParam, accountNameParam, nil)
		newListMongoMIRoleAssignmentsPager = &resp
		m.newListMongoMIRoleAssignmentsPager.add(req, newListMongoMIRoleAssignmentsPager)
	}
	resp, err := server.PagerResponderNext(newListMongoMIRoleAssignmentsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListMongoMIRoleAssignmentsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMongoMIRoleAssignmentsPager) {
		m.newListMongoMIRoleAssignmentsPager.remove(req)
	}
	return resp, nil
}

func (m *MongoMIResourcesServerTransport) dispatchNewListMongoMIRoleDefinitionsPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListMongoMIRoleDefinitionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListMongoMIRoleDefinitionsPager not implemented")}
	}
	newListMongoMIRoleDefinitionsPager := m.newListMongoMIRoleDefinitionsPager.get(req)
	if newListMongoMIRoleDefinitionsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DocumentDB/databaseAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/mongoMIRoleDefinitions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		resp := m.srv.NewListMongoMIRoleDefinitionsPager(resourceGroupNameParam, accountNameParam, nil)
		newListMongoMIRoleDefinitionsPager = &resp
		m.newListMongoMIRoleDefinitionsPager.add(req, newListMongoMIRoleDefinitionsPager)
	}
	resp, err := server.PagerResponderNext(newListMongoMIRoleDefinitionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListMongoMIRoleDefinitionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListMongoMIRoleDefinitionsPager) {
		m.newListMongoMIRoleDefinitionsPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to MongoMIResourcesServerTransport
var mongoMiResourcesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
