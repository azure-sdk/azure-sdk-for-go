// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/testbase/armtestbase"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// DraftPackagesServer is a fake server for instances of the armtestbase.DraftPackagesClient type.
type DraftPackagesServer struct {
	// BeginCopyFromPackage is the fake for method DraftPackagesClient.BeginCopyFromPackage
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginCopyFromPackage func(ctx context.Context, resourceGroupName string, testBaseAccountName string, draftPackageName string, parameters armtestbase.CopyFromPackageOperationParameters, options *armtestbase.DraftPackagesClientBeginCopyFromPackageOptions) (resp azfake.PollerResponder[armtestbase.DraftPackagesClientCopyFromPackageResponse], errResp azfake.ErrorResponder)

	// Create is the fake for method DraftPackagesClient.Create
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Create func(ctx context.Context, resourceGroupName string, testBaseAccountName string, draftPackageName string, parameters armtestbase.DraftPackageResource, options *armtestbase.DraftPackagesClientCreateOptions) (resp azfake.Responder[armtestbase.DraftPackagesClientCreateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method DraftPackagesClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, testBaseAccountName string, draftPackageName string, options *armtestbase.DraftPackagesClientDeleteOptions) (resp azfake.Responder[armtestbase.DraftPackagesClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginExtractFile is the fake for method DraftPackagesClient.BeginExtractFile
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginExtractFile func(ctx context.Context, resourceGroupName string, testBaseAccountName string, draftPackageName string, parameters armtestbase.ExtractFileOperationParameters, options *armtestbase.DraftPackagesClientBeginExtractFileOptions) (resp azfake.PollerResponder[armtestbase.DraftPackagesClientExtractFileResponse], errResp azfake.ErrorResponder)

	// BeginGenerateFoldersAndScripts is the fake for method DraftPackagesClient.BeginGenerateFoldersAndScripts
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginGenerateFoldersAndScripts func(ctx context.Context, resourceGroupName string, testBaseAccountName string, draftPackageName string, parameters armtestbase.GenerateOperationParameters, options *armtestbase.DraftPackagesClientBeginGenerateFoldersAndScriptsOptions) (resp azfake.PollerResponder[armtestbase.DraftPackagesClientGenerateFoldersAndScriptsResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method DraftPackagesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, testBaseAccountName string, draftPackageName string, options *armtestbase.DraftPackagesClientGetOptions) (resp azfake.Responder[armtestbase.DraftPackagesClientGetResponse], errResp azfake.ErrorResponder)

	// GetPath is the fake for method DraftPackagesClient.GetPath
	// HTTP status codes to indicate success: http.StatusOK
	GetPath func(ctx context.Context, resourceGroupName string, testBaseAccountName string, draftPackageName string, options *armtestbase.DraftPackagesClientGetPathOptions) (resp azfake.Responder[armtestbase.DraftPackagesClientGetPathResponse], errResp azfake.ErrorResponder)

	// NewListByTestBaseAccountPager is the fake for method DraftPackagesClient.NewListByTestBaseAccountPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByTestBaseAccountPager func(resourceGroupName string, testBaseAccountName string, options *armtestbase.DraftPackagesClientListByTestBaseAccountOptions) (resp azfake.PagerResponder[armtestbase.DraftPackagesClientListByTestBaseAccountResponse])

	// Update is the fake for method DraftPackagesClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, testBaseAccountName string, draftPackageName string, parameters armtestbase.DraftPackageUpdateParameters, options *armtestbase.DraftPackagesClientUpdateOptions) (resp azfake.Responder[armtestbase.DraftPackagesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewDraftPackagesServerTransport creates a new instance of DraftPackagesServerTransport with the provided implementation.
// The returned DraftPackagesServerTransport instance is connected to an instance of armtestbase.DraftPackagesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDraftPackagesServerTransport(srv *DraftPackagesServer) *DraftPackagesServerTransport {
	return &DraftPackagesServerTransport{
		srv:                            srv,
		beginCopyFromPackage:           newTracker[azfake.PollerResponder[armtestbase.DraftPackagesClientCopyFromPackageResponse]](),
		beginExtractFile:               newTracker[azfake.PollerResponder[armtestbase.DraftPackagesClientExtractFileResponse]](),
		beginGenerateFoldersAndScripts: newTracker[azfake.PollerResponder[armtestbase.DraftPackagesClientGenerateFoldersAndScriptsResponse]](),
		newListByTestBaseAccountPager:  newTracker[azfake.PagerResponder[armtestbase.DraftPackagesClientListByTestBaseAccountResponse]](),
	}
}

// DraftPackagesServerTransport connects instances of armtestbase.DraftPackagesClient to instances of DraftPackagesServer.
// Don't use this type directly, use NewDraftPackagesServerTransport instead.
type DraftPackagesServerTransport struct {
	srv                            *DraftPackagesServer
	beginCopyFromPackage           *tracker[azfake.PollerResponder[armtestbase.DraftPackagesClientCopyFromPackageResponse]]
	beginExtractFile               *tracker[azfake.PollerResponder[armtestbase.DraftPackagesClientExtractFileResponse]]
	beginGenerateFoldersAndScripts *tracker[azfake.PollerResponder[armtestbase.DraftPackagesClientGenerateFoldersAndScriptsResponse]]
	newListByTestBaseAccountPager  *tracker[azfake.PagerResponder[armtestbase.DraftPackagesClientListByTestBaseAccountResponse]]
}

// Do implements the policy.Transporter interface for DraftPackagesServerTransport.
func (d *DraftPackagesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DraftPackagesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if draftPackagesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = draftPackagesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DraftPackagesClient.BeginCopyFromPackage":
				res.resp, res.err = d.dispatchBeginCopyFromPackage(req)
			case "DraftPackagesClient.Create":
				res.resp, res.err = d.dispatchCreate(req)
			case "DraftPackagesClient.Delete":
				res.resp, res.err = d.dispatchDelete(req)
			case "DraftPackagesClient.BeginExtractFile":
				res.resp, res.err = d.dispatchBeginExtractFile(req)
			case "DraftPackagesClient.BeginGenerateFoldersAndScripts":
				res.resp, res.err = d.dispatchBeginGenerateFoldersAndScripts(req)
			case "DraftPackagesClient.Get":
				res.resp, res.err = d.dispatchGet(req)
			case "DraftPackagesClient.GetPath":
				res.resp, res.err = d.dispatchGetPath(req)
			case "DraftPackagesClient.NewListByTestBaseAccountPager":
				res.resp, res.err = d.dispatchNewListByTestBaseAccountPager(req)
			case "DraftPackagesClient.Update":
				res.resp, res.err = d.dispatchUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DraftPackagesServerTransport) dispatchBeginCopyFromPackage(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCopyFromPackage == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCopyFromPackage not implemented")}
	}
	beginCopyFromPackage := d.beginCopyFromPackage.get(req)
	if beginCopyFromPackage == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages/(?P<draftPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/copyFromPackage`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armtestbase.CopyFromPackageOperationParameters](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
		if err != nil {
			return nil, err
		}
		draftPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("draftPackageName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginCopyFromPackage(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, draftPackageNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCopyFromPackage = &respr
		d.beginCopyFromPackage.add(req, beginCopyFromPackage)
	}

	resp, err := server.PollerResponderNext(beginCopyFromPackage, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginCopyFromPackage.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCopyFromPackage) {
		d.beginCopyFromPackage.remove(req)
	}

	return resp, nil
}

func (d *DraftPackagesServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if d.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages/(?P<draftPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armtestbase.DraftPackageResource](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	draftPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("draftPackageName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Create(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, draftPackageNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DraftPackageResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DraftPackagesServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if d.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages/(?P<draftPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	draftPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("draftPackageName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Delete(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, draftPackageNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DraftPackagesServerTransport) dispatchBeginExtractFile(req *http.Request) (*http.Response, error) {
	if d.srv.BeginExtractFile == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginExtractFile not implemented")}
	}
	beginExtractFile := d.beginExtractFile.get(req)
	if beginExtractFile == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages/(?P<draftPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/extractFile`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armtestbase.ExtractFileOperationParameters](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
		if err != nil {
			return nil, err
		}
		draftPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("draftPackageName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginExtractFile(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, draftPackageNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginExtractFile = &respr
		d.beginExtractFile.add(req, beginExtractFile)
	}

	resp, err := server.PollerResponderNext(beginExtractFile, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginExtractFile.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginExtractFile) {
		d.beginExtractFile.remove(req)
	}

	return resp, nil
}

func (d *DraftPackagesServerTransport) dispatchBeginGenerateFoldersAndScripts(req *http.Request) (*http.Response, error) {
	if d.srv.BeginGenerateFoldersAndScripts == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGenerateFoldersAndScripts not implemented")}
	}
	beginGenerateFoldersAndScripts := d.beginGenerateFoldersAndScripts.get(req)
	if beginGenerateFoldersAndScripts == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages/(?P<draftPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/generateFoldersAndScripts`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armtestbase.GenerateOperationParameters](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
		if err != nil {
			return nil, err
		}
		draftPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("draftPackageName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginGenerateFoldersAndScripts(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, draftPackageNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGenerateFoldersAndScripts = &respr
		d.beginGenerateFoldersAndScripts.add(req, beginGenerateFoldersAndScripts)
	}

	resp, err := server.PollerResponderNext(beginGenerateFoldersAndScripts, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginGenerateFoldersAndScripts.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGenerateFoldersAndScripts) {
		d.beginGenerateFoldersAndScripts.remove(req)
	}

	return resp, nil
}

func (d *DraftPackagesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages/(?P<draftPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	draftPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("draftPackageName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Get(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, draftPackageNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DraftPackageResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DraftPackagesServerTransport) dispatchGetPath(req *http.Request) (*http.Response, error) {
	if d.srv.GetPath == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetPath not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages/(?P<draftPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getPath`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	draftPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("draftPackageName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.GetPath(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, draftPackageNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DraftPackageGetPathResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DraftPackagesServerTransport) dispatchNewListByTestBaseAccountPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByTestBaseAccountPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByTestBaseAccountPager not implemented")}
	}
	newListByTestBaseAccountPager := d.newListByTestBaseAccountPager.get(req)
	if newListByTestBaseAccountPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
		if err != nil {
			return nil, err
		}
		packageNameUnescaped, err := url.QueryUnescape(qp.Get("packageName"))
		if err != nil {
			return nil, err
		}
		packageNameParam := getOptional(packageNameUnescaped)
		editPackageUnescaped, err := url.QueryUnescape(qp.Get("editPackage"))
		if err != nil {
			return nil, err
		}
		editPackageParam, err := parseOptional(editPackageUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *armtestbase.DraftPackagesClientListByTestBaseAccountOptions
		if packageNameParam != nil || editPackageParam != nil {
			options = &armtestbase.DraftPackagesClientListByTestBaseAccountOptions{
				PackageName: packageNameParam,
				EditPackage: editPackageParam,
			}
		}
		resp := d.srv.NewListByTestBaseAccountPager(resourceGroupNameParam, testBaseAccountNameParam, options)
		newListByTestBaseAccountPager = &resp
		d.newListByTestBaseAccountPager.add(req, newListByTestBaseAccountPager)
		server.PagerResponderInjectNextLinks(newListByTestBaseAccountPager, req, func(page *armtestbase.DraftPackagesClientListByTestBaseAccountResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByTestBaseAccountPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListByTestBaseAccountPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByTestBaseAccountPager) {
		d.newListByTestBaseAccountPager.remove(req)
	}
	return resp, nil
}

func (d *DraftPackagesServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/draftPackages/(?P<draftPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armtestbase.DraftPackageUpdateParameters](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	draftPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("draftPackageName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Update(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, draftPackageNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DraftPackageResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to DraftPackagesServerTransport
var draftPackagesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
