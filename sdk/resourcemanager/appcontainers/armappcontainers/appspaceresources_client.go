//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappcontainers

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AppSpaceResourcesClient contains the methods for the AppSpaceResources group.
// Don't use this type directly, use NewAppSpaceResourcesClient() instead.
type AppSpaceResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAppSpaceResourcesClient creates a new instance of AppSpaceResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAppSpaceResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AppSpaceResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AppSpaceResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update an App Space Resource used to track an ARM resource the customer would like to track
// in an App Space.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - spaceResourceName - Name of the App Space Resource.
//   - spaceResourceEnvelope - Properties used to create an app space resource
//   - options - AppSpaceResourcesClientCreateOrUpdateOptions contains the optional parameters for the AppSpaceResourcesClient.CreateOrUpdate
//     method.
func (client *AppSpaceResourcesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, spaceResourceEnvelope AppSpaceResource, options *AppSpaceResourcesClientCreateOrUpdateOptions) (AppSpaceResourcesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "AppSpaceResourcesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, appSpaceName, spaceResourceName, spaceResourceEnvelope, options)
	if err != nil {
		return AppSpaceResourcesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AppSpaceResourcesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return AppSpaceResourcesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AppSpaceResourcesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, spaceResourceEnvelope AppSpaceResource, options *AppSpaceResourcesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources/{spaceResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	if spaceResourceName == "" {
		return nil, errors.New("parameter spaceResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{spaceResourceName}", url.PathEscape(spaceResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, spaceResourceEnvelope); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *AppSpaceResourcesClient) createOrUpdateHandleResponse(resp *http.Response) (AppSpaceResourcesClientCreateOrUpdateResponse, error) {
	result := AppSpaceResourcesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpaceResource); err != nil {
		return AppSpaceResourcesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Remove the App Space Resource which tracks an ARM resource from an App Space.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - spaceResourceName - Name of the App Space Resource.
//   - options - AppSpaceResourcesClientDeleteOptions contains the optional parameters for the AppSpaceResourcesClient.Delete
//     method.
func (client *AppSpaceResourcesClient) Delete(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, options *AppSpaceResourcesClientDeleteOptions) (AppSpaceResourcesClientDeleteResponse, error) {
	var err error
	const operationName = "AppSpaceResourcesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, appSpaceName, spaceResourceName, options)
	if err != nil {
		return AppSpaceResourcesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AppSpaceResourcesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return AppSpaceResourcesClientDeleteResponse{}, err
	}
	return AppSpaceResourcesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AppSpaceResourcesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, options *AppSpaceResourcesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources/{spaceResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	if spaceResourceName == "" {
		return nil, errors.New("parameter spaceResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{spaceResourceName}", url.PathEscape(spaceResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get an App Space Resource in an App Space.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - spaceResourceName - Name of the App Space Resource.
//   - options - AppSpaceResourcesClientGetOptions contains the optional parameters for the AppSpaceResourcesClient.Get method.
func (client *AppSpaceResourcesClient) Get(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, options *AppSpaceResourcesClientGetOptions) (AppSpaceResourcesClientGetResponse, error) {
	var err error
	const operationName = "AppSpaceResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, appSpaceName, spaceResourceName, options)
	if err != nil {
		return AppSpaceResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AppSpaceResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AppSpaceResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AppSpaceResourcesClient) getCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, options *AppSpaceResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources/{spaceResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	if spaceResourceName == "" {
		return nil, errors.New("parameter spaceResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{spaceResourceName}", url.PathEscape(spaceResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AppSpaceResourcesClient) getHandleResponse(resp *http.Response) (AppSpaceResourcesClientGetResponse, error) {
	result := AppSpaceResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpaceResource); err != nil {
		return AppSpaceResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByAppSpacePager - Get all of the App Space Resources in a given App Space. Returns a collection of App Space Resources.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - options - AppSpaceResourcesClientListByAppSpaceOptions contains the optional parameters for the AppSpaceResourcesClient.NewListByAppSpacePager
//     method.
func (client *AppSpaceResourcesClient) NewListByAppSpacePager(resourceGroupName string, appSpaceName string, options *AppSpaceResourcesClientListByAppSpaceOptions) *runtime.Pager[AppSpaceResourcesClientListByAppSpaceResponse] {
	return runtime.NewPager(runtime.PagingHandler[AppSpaceResourcesClientListByAppSpaceResponse]{
		More: func(page AppSpaceResourcesClientListByAppSpaceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AppSpaceResourcesClientListByAppSpaceResponse) (AppSpaceResourcesClientListByAppSpaceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AppSpaceResourcesClient.NewListByAppSpacePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByAppSpaceCreateRequest(ctx, resourceGroupName, appSpaceName, options)
			}, nil)
			if err != nil {
				return AppSpaceResourcesClientListByAppSpaceResponse{}, err
			}
			return client.listByAppSpaceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByAppSpaceCreateRequest creates the ListByAppSpace request.
func (client *AppSpaceResourcesClient) listByAppSpaceCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, options *AppSpaceResourcesClientListByAppSpaceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByAppSpaceHandleResponse handles the ListByAppSpace response.
func (client *AppSpaceResourcesClient) listByAppSpaceHandleResponse(resp *http.Response) (AppSpaceResourcesClientListByAppSpaceResponse, error) {
	result := AppSpaceResourcesClientListByAppSpaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpaceResourcesCollection); err != nil {
		return AppSpaceResourcesClientListByAppSpaceResponse{}, err
	}
	return result, nil
}

// Update - Patches an App Space Resource using JSON Merge Patch
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - spaceResourceName - Name of the App Space Resource.
//   - spaceResourceEnvelope - Properties of an App Space Resource that need to be updated
//   - options - AppSpaceResourcesClientUpdateOptions contains the optional parameters for the AppSpaceResourcesClient.Update
//     method.
func (client *AppSpaceResourcesClient) Update(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, spaceResourceEnvelope AppSpaceResourcePatch, options *AppSpaceResourcesClientUpdateOptions) (AppSpaceResourcesClientUpdateResponse, error) {
	var err error
	const operationName = "AppSpaceResourcesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, appSpaceName, spaceResourceName, spaceResourceEnvelope, options)
	if err != nil {
		return AppSpaceResourcesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AppSpaceResourcesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AppSpaceResourcesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *AppSpaceResourcesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, spaceResourceName string, spaceResourceEnvelope AppSpaceResourcePatch, options *AppSpaceResourcesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources/{spaceResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	if spaceResourceName == "" {
		return nil, errors.New("parameter spaceResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{spaceResourceName}", url.PathEscape(spaceResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, spaceResourceEnvelope); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *AppSpaceResourcesClient) updateHandleResponse(resp *http.Response) (AppSpaceResourcesClientUpdateResponse, error) {
	result := AppSpaceResourcesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpaceResource); err != nil {
		return AppSpaceResourcesClientUpdateResponse{}, err
	}
	return result, nil
}
