// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/fileshares/armfileshares"
	"net/http"
	"net/url"
	"regexp"
)

// FileSharesServer is a fake server for instances of the armfileshares.FileSharesClient type.
type FileSharesServer struct {
	// CheckNameAvailability is the fake for method FileSharesClient.CheckNameAvailability
	// HTTP status codes to indicate success: http.StatusOK
	CheckNameAvailability func(ctx context.Context, location string, body armfileshares.CheckNameAvailabilityRequest, options *armfileshares.FileSharesClientCheckNameAvailabilityOptions) (resp azfake.Responder[armfileshares.FileSharesClientCheckNameAvailabilityResponse], errResp azfake.ErrorResponder)

	// BeginCreateOrUpdate is the fake for method FileSharesClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, resourceName string, resource armfileshares.FileShare, options *armfileshares.FileSharesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armfileshares.FileSharesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// CreateOrUpdateFileShareSnapshot is the fake for method FileSharesClient.CreateOrUpdateFileShareSnapshot
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdateFileShareSnapshot func(ctx context.Context, resourceGroupName string, resourceName string, name string, resource armfileshares.FileShareSnapshot, options *armfileshares.FileSharesClientCreateOrUpdateFileShareSnapshotOptions) (resp azfake.Responder[armfileshares.FileSharesClientCreateOrUpdateFileShareSnapshotResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method FileSharesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, resourceName string, options *armfileshares.FileSharesClientBeginDeleteOptions) (resp azfake.PollerResponder[armfileshares.FileSharesClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginDeleteFileShareSnapshot is the fake for method FileSharesClient.BeginDeleteFileShareSnapshot
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteFileShareSnapshot func(ctx context.Context, resourceGroupName string, resourceName string, name string, options *armfileshares.FileSharesClientBeginDeleteFileShareSnapshotOptions) (resp azfake.PollerResponder[armfileshares.FileSharesClientDeleteFileShareSnapshotResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method FileSharesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, resourceName string, options *armfileshares.FileSharesClientGetOptions) (resp azfake.Responder[armfileshares.FileSharesClientGetResponse], errResp azfake.ErrorResponder)

	// GetFileShareSnapshot is the fake for method FileSharesClient.GetFileShareSnapshot
	// HTTP status codes to indicate success: http.StatusOK
	GetFileShareSnapshot func(ctx context.Context, resourceGroupName string, resourceName string, name string, options *armfileshares.FileSharesClientGetFileShareSnapshotOptions) (resp azfake.Responder[armfileshares.FileSharesClientGetFileShareSnapshotResponse], errResp azfake.ErrorResponder)

	// NewListByFileSharePager is the fake for method FileSharesClient.NewListByFileSharePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByFileSharePager func(resourceGroupName string, resourceName string, options *armfileshares.FileSharesClientListByFileShareOptions) (resp azfake.PagerResponder[armfileshares.FileSharesClientListByFileShareResponse])

	// NewListByParentPager is the fake for method FileSharesClient.NewListByParentPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByParentPager func(resourceGroupName string, options *armfileshares.FileSharesClientListByParentOptions) (resp azfake.PagerResponder[armfileshares.FileSharesClientListByParentResponse])

	// NewListBySubscriptionPager is the fake for method FileSharesClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armfileshares.FileSharesClientListBySubscriptionOptions) (resp azfake.PagerResponder[armfileshares.FileSharesClientListBySubscriptionResponse])

	// BeginUpdate is the fake for method FileSharesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, resourceName string, properties armfileshares.FileShareUpdate, options *armfileshares.FileSharesClientBeginUpdateOptions) (resp azfake.PollerResponder[armfileshares.FileSharesClientUpdateResponse], errResp azfake.ErrorResponder)

	// BeginUpdateFileShareSnapshot is the fake for method FileSharesClient.BeginUpdateFileShareSnapshot
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdateFileShareSnapshot func(ctx context.Context, resourceGroupName string, resourceName string, name string, properties armfileshares.FileShareSnapshotUpdate, options *armfileshares.FileSharesClientBeginUpdateFileShareSnapshotOptions) (resp azfake.PollerResponder[armfileshares.FileSharesClientUpdateFileShareSnapshotResponse], errResp azfake.ErrorResponder)
}

// NewFileSharesServerTransport creates a new instance of FileSharesServerTransport with the provided implementation.
// The returned FileSharesServerTransport instance is connected to an instance of armfileshares.FileSharesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewFileSharesServerTransport(srv *FileSharesServer) *FileSharesServerTransport {
	return &FileSharesServerTransport{
		srv:                          srv,
		beginCreateOrUpdate:          newTracker[azfake.PollerResponder[armfileshares.FileSharesClientCreateOrUpdateResponse]](),
		beginDelete:                  newTracker[azfake.PollerResponder[armfileshares.FileSharesClientDeleteResponse]](),
		beginDeleteFileShareSnapshot: newTracker[azfake.PollerResponder[armfileshares.FileSharesClientDeleteFileShareSnapshotResponse]](),
		newListByFileSharePager:      newTracker[azfake.PagerResponder[armfileshares.FileSharesClientListByFileShareResponse]](),
		newListByParentPager:         newTracker[azfake.PagerResponder[armfileshares.FileSharesClientListByParentResponse]](),
		newListBySubscriptionPager:   newTracker[azfake.PagerResponder[armfileshares.FileSharesClientListBySubscriptionResponse]](),
		beginUpdate:                  newTracker[azfake.PollerResponder[armfileshares.FileSharesClientUpdateResponse]](),
		beginUpdateFileShareSnapshot: newTracker[azfake.PollerResponder[armfileshares.FileSharesClientUpdateFileShareSnapshotResponse]](),
	}
}

// FileSharesServerTransport connects instances of armfileshares.FileSharesClient to instances of FileSharesServer.
// Don't use this type directly, use NewFileSharesServerTransport instead.
type FileSharesServerTransport struct {
	srv                          *FileSharesServer
	beginCreateOrUpdate          *tracker[azfake.PollerResponder[armfileshares.FileSharesClientCreateOrUpdateResponse]]
	beginDelete                  *tracker[azfake.PollerResponder[armfileshares.FileSharesClientDeleteResponse]]
	beginDeleteFileShareSnapshot *tracker[azfake.PollerResponder[armfileshares.FileSharesClientDeleteFileShareSnapshotResponse]]
	newListByFileSharePager      *tracker[azfake.PagerResponder[armfileshares.FileSharesClientListByFileShareResponse]]
	newListByParentPager         *tracker[azfake.PagerResponder[armfileshares.FileSharesClientListByParentResponse]]
	newListBySubscriptionPager   *tracker[azfake.PagerResponder[armfileshares.FileSharesClientListBySubscriptionResponse]]
	beginUpdate                  *tracker[azfake.PollerResponder[armfileshares.FileSharesClientUpdateResponse]]
	beginUpdateFileShareSnapshot *tracker[azfake.PollerResponder[armfileshares.FileSharesClientUpdateFileShareSnapshotResponse]]
}

// Do implements the policy.Transporter interface for FileSharesServerTransport.
func (f *FileSharesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return f.dispatchToMethodFake(req, method)
}

func (f *FileSharesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if fileSharesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = fileSharesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "FileSharesClient.CheckNameAvailability":
				res.resp, res.err = f.dispatchCheckNameAvailability(req)
			case "FileSharesClient.BeginCreateOrUpdate":
				res.resp, res.err = f.dispatchBeginCreateOrUpdate(req)
			case "FileSharesClient.CreateOrUpdateFileShareSnapshot":
				res.resp, res.err = f.dispatchCreateOrUpdateFileShareSnapshot(req)
			case "FileSharesClient.BeginDelete":
				res.resp, res.err = f.dispatchBeginDelete(req)
			case "FileSharesClient.BeginDeleteFileShareSnapshot":
				res.resp, res.err = f.dispatchBeginDeleteFileShareSnapshot(req)
			case "FileSharesClient.Get":
				res.resp, res.err = f.dispatchGet(req)
			case "FileSharesClient.GetFileShareSnapshot":
				res.resp, res.err = f.dispatchGetFileShareSnapshot(req)
			case "FileSharesClient.NewListByFileSharePager":
				res.resp, res.err = f.dispatchNewListByFileSharePager(req)
			case "FileSharesClient.NewListByParentPager":
				res.resp, res.err = f.dispatchNewListByParentPager(req)
			case "FileSharesClient.NewListBySubscriptionPager":
				res.resp, res.err = f.dispatchNewListBySubscriptionPager(req)
			case "FileSharesClient.BeginUpdate":
				res.resp, res.err = f.dispatchBeginUpdate(req)
			case "FileSharesClient.BeginUpdateFileShareSnapshot":
				res.resp, res.err = f.dispatchBeginUpdateFileShareSnapshot(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (f *FileSharesServerTransport) dispatchCheckNameAvailability(req *http.Request) (*http.Response, error) {
	if f.srv.CheckNameAvailability == nil {
		return nil, &nonRetriableError{errors.New("fake for method CheckNameAvailability not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/checkNameAvailability`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armfileshares.CheckNameAvailabilityRequest](req)
	if err != nil {
		return nil, err
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.CheckNameAvailability(req.Context(), locationParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CheckNameAvailabilityResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FileSharesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if f.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := f.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armfileshares.FileShare](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, resourceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		f.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		f.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		f.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (f *FileSharesServerTransport) dispatchCreateOrUpdateFileShareSnapshot(req *http.Request) (*http.Response, error) {
	if f.srv.CreateOrUpdateFileShareSnapshot == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdateFileShareSnapshot not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/fileShareSnapshots/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armfileshares.FileShareSnapshot](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.CreateOrUpdateFileShareSnapshot(req.Context(), resourceGroupNameParam, resourceNameParam, nameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FileShareSnapshot, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FileSharesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if f.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := f.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginDelete(req.Context(), resourceGroupNameParam, resourceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		f.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		f.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		f.beginDelete.remove(req)
	}

	return resp, nil
}

func (f *FileSharesServerTransport) dispatchBeginDeleteFileShareSnapshot(req *http.Request) (*http.Response, error) {
	if f.srv.BeginDeleteFileShareSnapshot == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteFileShareSnapshot not implemented")}
	}
	beginDeleteFileShareSnapshot := f.beginDeleteFileShareSnapshot.get(req)
	if beginDeleteFileShareSnapshot == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/fileShareSnapshots/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginDeleteFileShareSnapshot(req.Context(), resourceGroupNameParam, resourceNameParam, nameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteFileShareSnapshot = &respr
		f.beginDeleteFileShareSnapshot.add(req, beginDeleteFileShareSnapshot)
	}

	resp, err := server.PollerResponderNext(beginDeleteFileShareSnapshot, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		f.beginDeleteFileShareSnapshot.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteFileShareSnapshot) {
		f.beginDeleteFileShareSnapshot.remove(req)
	}

	return resp, nil
}

func (f *FileSharesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if f.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.Get(req.Context(), resourceGroupNameParam, resourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FileShare, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FileSharesServerTransport) dispatchGetFileShareSnapshot(req *http.Request) (*http.Response, error) {
	if f.srv.GetFileShareSnapshot == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFileShareSnapshot not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/fileShareSnapshots/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.GetFileShareSnapshot(req.Context(), resourceGroupNameParam, resourceNameParam, nameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FileShareSnapshot, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FileSharesServerTransport) dispatchNewListByFileSharePager(req *http.Request) (*http.Response, error) {
	if f.srv.NewListByFileSharePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByFileSharePager not implemented")}
	}
	newListByFileSharePager := f.newListByFileSharePager.get(req)
	if newListByFileSharePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/fileShareSnapshots`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		resp := f.srv.NewListByFileSharePager(resourceGroupNameParam, resourceNameParam, nil)
		newListByFileSharePager = &resp
		f.newListByFileSharePager.add(req, newListByFileSharePager)
		server.PagerResponderInjectNextLinks(newListByFileSharePager, req, func(page *armfileshares.FileSharesClientListByFileShareResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByFileSharePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		f.newListByFileSharePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByFileSharePager) {
		f.newListByFileSharePager.remove(req)
	}
	return resp, nil
}

func (f *FileSharesServerTransport) dispatchNewListByParentPager(req *http.Request) (*http.Response, error) {
	if f.srv.NewListByParentPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByParentPager not implemented")}
	}
	newListByParentPager := f.newListByParentPager.get(req)
	if newListByParentPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := f.srv.NewListByParentPager(resourceGroupNameParam, nil)
		newListByParentPager = &resp
		f.newListByParentPager.add(req, newListByParentPager)
		server.PagerResponderInjectNextLinks(newListByParentPager, req, func(page *armfileshares.FileSharesClientListByParentResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByParentPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		f.newListByParentPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByParentPager) {
		f.newListByParentPager.remove(req)
	}
	return resp, nil
}

func (f *FileSharesServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if f.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := f.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := f.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		f.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armfileshares.FileSharesClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		f.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		f.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (f *FileSharesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if f.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := f.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armfileshares.FileShareUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginUpdate(req.Context(), resourceGroupNameParam, resourceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		f.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		f.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		f.beginUpdate.remove(req)
	}

	return resp, nil
}

func (f *FileSharesServerTransport) dispatchBeginUpdateFileShareSnapshot(req *http.Request) (*http.Response, error) {
	if f.srv.BeginUpdateFileShareSnapshot == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateFileShareSnapshot not implemented")}
	}
	beginUpdateFileShareSnapshot := f.beginUpdateFileShareSnapshot.get(req)
	if beginUpdateFileShareSnapshot == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FileShares/fileShares/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/fileShareSnapshots/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armfileshares.FileShareSnapshotUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := f.srv.BeginUpdateFileShareSnapshot(req.Context(), resourceGroupNameParam, resourceNameParam, nameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateFileShareSnapshot = &respr
		f.beginUpdateFileShareSnapshot.add(req, beginUpdateFileShareSnapshot)
	}

	resp, err := server.PollerResponderNext(beginUpdateFileShareSnapshot, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		f.beginUpdateFileShareSnapshot.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateFileShareSnapshot) {
		f.beginUpdateFileShareSnapshot.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to FileSharesServerTransport
var fileSharesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
