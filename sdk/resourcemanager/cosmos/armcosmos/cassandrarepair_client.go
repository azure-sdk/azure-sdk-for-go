//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcosmos

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CassandraRepairClient contains the methods for the CassandraRepair group.
// Don't use this type directly, use NewCassandraRepairClient() instead.
type CassandraRepairClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewCassandraRepairClient creates a new instance of CassandraRepairClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCassandraRepairClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CassandraRepairClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &CassandraRepairClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginAbortSegment -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - repairRunID - Id of repair run created to repair Cassandra cluster.
//   - segmentID - Id of a segment of a repair run.
//   - options - CassandraRepairClientBeginAbortSegmentOptions contains the optional parameters for the CassandraRepairClient.BeginAbortSegment
//     method.
func (client *CassandraRepairClient) BeginAbortSegment(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, segmentID string, options *CassandraRepairClientBeginAbortSegmentOptions) (*runtime.Poller[CassandraRepairClientAbortSegmentResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.abortSegment(ctx, resourceGroupName, clusterName, repairRunID, segmentID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientAbortSegmentResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientAbortSegmentResponse](options.ResumeToken, client.pl, nil)
	}
}

// AbortSegment -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) abortSegment(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, segmentID string, options *CassandraRepairClientBeginAbortSegmentOptions) (*http.Response, error) {
	req, err := client.abortSegmentCreateRequest(ctx, resourceGroupName, clusterName, repairRunID, segmentID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// abortSegmentCreateRequest creates the AbortSegment request.
func (client *CassandraRepairClient) abortSegmentCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, segmentID string, options *CassandraRepairClientBeginAbortSegmentOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns/{repairRunId}/segments/{segmentId}/abort"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if repairRunID == "" {
		return nil, errors.New("parameter repairRunID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{repairRunId}", url.PathEscape(repairRunID))
	if segmentID == "" {
		return nil, errors.New("parameter segmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{segmentId}", url.PathEscape(segmentID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginCreate -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - body - The properties specifying the desired state of repairRun to be created.
//   - options - CassandraRepairClientBeginCreateOptions contains the optional parameters for the CassandraRepairClient.BeginCreate
//     method.
func (client *CassandraRepairClient) BeginCreate(ctx context.Context, resourceGroupName string, clusterName string, body CassandraClusterRepairPublicResource, options *CassandraRepairClientBeginCreateOptions) (*runtime.Poller[CassandraRepairClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, clusterName, body, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientCreateResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientCreateResponse](options.ResumeToken, client.pl, nil)
	}
}

// Create -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) create(ctx context.Context, resourceGroupName string, clusterName string, body CassandraClusterRepairPublicResource, options *CassandraRepairClientBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, clusterName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *CassandraRepairClient) createCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, body CassandraClusterRepairPublicResource, options *CassandraRepairClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// BeginDelete -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - repairRunID - Id of repair run created to repair Cassandra cluster.
//   - ownerName - Owner Name that was used to create the Repair Run.
//   - options - CassandraRepairClientBeginDeleteOptions contains the optional parameters for the CassandraRepairClient.BeginDelete
//     method.
func (client *CassandraRepairClient) BeginDelete(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, ownerName string, options *CassandraRepairClientBeginDeleteOptions) (*runtime.Poller[CassandraRepairClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, clusterName, repairRunID, ownerName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientDeleteResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) deleteOperation(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, ownerName string, options *CassandraRepairClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, clusterName, repairRunID, ownerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CassandraRepairClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, ownerName string, options *CassandraRepairClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns/{repairRunId}/owner/{ownerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if repairRunID == "" {
		return nil, errors.New("parameter repairRunID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{repairRunId}", url.PathEscape(repairRunID))
	if ownerName == "" {
		return nil, errors.New("parameter ownerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ownerName}", url.PathEscape(ownerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginGetClusterStatus -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - options - CassandraRepairClientBeginGetClusterStatusOptions contains the optional parameters for the CassandraRepairClient.BeginGetClusterStatus
//     method.
func (client *CassandraRepairClient) BeginGetClusterStatus(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginGetClusterStatusOptions) (*runtime.Poller[CassandraRepairClientGetClusterStatusResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getClusterStatus(ctx, resourceGroupName, clusterName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientGetClusterStatusResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientGetClusterStatusResponse](options.ResumeToken, client.pl, nil)
	}
}

// GetClusterStatus -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) getClusterStatus(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginGetClusterStatusOptions) (*http.Response, error) {
	req, err := client.getClusterStatusCreateRequest(ctx, resourceGroupName, clusterName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// getClusterStatusCreateRequest creates the GetClusterStatus request.
func (client *CassandraRepairClient) getClusterStatusCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginGetClusterStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairStatus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginGetTableStatus -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - options - CassandraRepairClientBeginGetTableStatusOptions contains the optional parameters for the CassandraRepairClient.BeginGetTableStatus
//     method.
func (client *CassandraRepairClient) BeginGetTableStatus(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginGetTableStatusOptions) (*runtime.Poller[CassandraRepairClientGetTableStatusResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getTableStatus(ctx, resourceGroupName, clusterName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientGetTableStatusResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientGetTableStatusResponse](options.ResumeToken, client.pl, nil)
	}
}

// GetTableStatus -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) getTableStatus(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginGetTableStatusOptions) (*http.Response, error) {
	req, err := client.getTableStatusCreateRequest(ctx, resourceGroupName, clusterName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// getTableStatusCreateRequest creates the GetTableStatus request.
func (client *CassandraRepairClient) getTableStatusCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginGetTableStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairTables"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginList -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - options - CassandraRepairClientBeginListOptions contains the optional parameters for the CassandraRepairClient.BeginList
//     method.
func (client *CassandraRepairClient) BeginList(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginListOptions) (*runtime.Poller[CassandraRepairClientListResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.listOperation(ctx, resourceGroupName, clusterName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientListResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientListResponse](options.ResumeToken, client.pl, nil)
	}
}

// List -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) listOperation(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginListOptions) (*http.Response, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, clusterName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// listCreateRequest creates the List request.
func (client *CassandraRepairClient) listCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, options *CassandraRepairClientBeginListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns/list"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// BeginListSegments -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - repairRunID - Id of repair run created to repair Cassandra cluster.
//   - options - CassandraRepairClientBeginListSegmentsOptions contains the optional parameters for the CassandraRepairClient.BeginListSegments
//     method.
func (client *CassandraRepairClient) BeginListSegments(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginListSegmentsOptions) (*runtime.Poller[CassandraRepairClientListSegmentsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.listSegments(ctx, resourceGroupName, clusterName, repairRunID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientListSegmentsResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientListSegmentsResponse](options.ResumeToken, client.pl, nil)
	}
}

// ListSegments -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) listSegments(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginListSegmentsOptions) (*http.Response, error) {
	req, err := client.listSegmentsCreateRequest(ctx, resourceGroupName, clusterName, repairRunID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// listSegmentsCreateRequest creates the ListSegments request.
func (client *CassandraRepairClient) listSegmentsCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginListSegmentsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns/{repairRunId}/segments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if repairRunID == "" {
		return nil, errors.New("parameter repairRunID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{repairRunId}", url.PathEscape(repairRunID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginPause -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - repairRunID - Id of repair run created to repair Cassandra cluster.
//   - options - CassandraRepairClientBeginPauseOptions contains the optional parameters for the CassandraRepairClient.BeginPause
//     method.
func (client *CassandraRepairClient) BeginPause(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginPauseOptions) (*runtime.Poller[CassandraRepairClientPauseResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.pause(ctx, resourceGroupName, clusterName, repairRunID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientPauseResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientPauseResponse](options.ResumeToken, client.pl, nil)
	}
}

// Pause -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) pause(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginPauseOptions) (*http.Response, error) {
	req, err := client.pauseCreateRequest(ctx, resourceGroupName, clusterName, repairRunID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// pauseCreateRequest creates the Pause request.
func (client *CassandraRepairClient) pauseCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginPauseOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns/{repairRunId}/pause"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if repairRunID == "" {
		return nil, errors.New("parameter repairRunID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{repairRunId}", url.PathEscape(repairRunID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginResume -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - repairRunID - Id of repair run created to repair Cassandra cluster.
//   - options - CassandraRepairClientBeginResumeOptions contains the optional parameters for the CassandraRepairClient.BeginResume
//     method.
func (client *CassandraRepairClient) BeginResume(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginResumeOptions) (*runtime.Poller[CassandraRepairClientResumeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.resume(ctx, resourceGroupName, clusterName, repairRunID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientResumeResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientResumeResponse](options.ResumeToken, client.pl, nil)
	}
}

// Resume -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) resume(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginResumeOptions) (*http.Response, error) {
	req, err := client.resumeCreateRequest(ctx, resourceGroupName, clusterName, repairRunID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// resumeCreateRequest creates the Resume request.
func (client *CassandraRepairClient) resumeCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginResumeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns/{repairRunId}/resume"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if repairRunID == "" {
		return nil, errors.New("parameter repairRunID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{repairRunId}", url.PathEscape(repairRunID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginShow -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - repairRunID - Id of repair run created to repair Cassandra cluster.
//   - options - CassandraRepairClientBeginShowOptions contains the optional parameters for the CassandraRepairClient.BeginShow
//     method.
func (client *CassandraRepairClient) BeginShow(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginShowOptions) (*runtime.Poller[CassandraRepairClientShowResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.show(ctx, resourceGroupName, clusterName, repairRunID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientShowResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientShowResponse](options.ResumeToken, client.pl, nil)
	}
}

// Show -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) show(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginShowOptions) (*http.Response, error) {
	req, err := client.showCreateRequest(ctx, resourceGroupName, clusterName, repairRunID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// showCreateRequest creates the Show request.
func (client *CassandraRepairClient) showCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, options *CassandraRepairClientBeginShowOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns/{repairRunId}/show"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if repairRunID == "" {
		return nil, errors.New("parameter repairRunID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{repairRunId}", url.PathEscape(repairRunID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginUpdate -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - clusterName - Managed Cassandra cluster name.
//   - repairRunID - Id of repair run created to repair Cassandra cluster.
//   - intensityValue - Floating point value representing intensity of the repair.
//   - options - CassandraRepairClientBeginUpdateOptions contains the optional parameters for the CassandraRepairClient.BeginUpdate
//     method.
func (client *CassandraRepairClient) BeginUpdate(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, intensityValue string, options *CassandraRepairClientBeginUpdateOptions) (*runtime.Poller[CassandraRepairClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, clusterName, repairRunID, intensityValue, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[CassandraRepairClientUpdateResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[CassandraRepairClientUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// Update -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *CassandraRepairClient) update(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, intensityValue string, options *CassandraRepairClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, clusterName, repairRunID, intensityValue, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *CassandraRepairClient) updateCreateRequest(ctx context.Context, resourceGroupName string, clusterName string, repairRunID string, intensityValue string, options *CassandraRepairClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/repairRuns/{repairRunId}/intensity/{intensityValue}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if repairRunID == "" {
		return nil, errors.New("parameter repairRunID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{repairRunId}", url.PathEscape(repairRunID))
	if intensityValue == "" {
		return nil, errors.New("parameter intensityValue cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{intensityValue}", url.PathEscape(intensityValue))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
