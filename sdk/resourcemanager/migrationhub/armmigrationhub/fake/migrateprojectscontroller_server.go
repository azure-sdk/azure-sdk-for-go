// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// MigrateProjectsControllerServer is a fake server for instances of the armmigrationhub.MigrateProjectsControllerClient type.
type MigrateProjectsControllerServer struct {
	// DeleteMigrateProject is the fake for method MigrateProjectsControllerClient.DeleteMigrateProject
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	DeleteMigrateProject func(ctx context.Context, resourceGroupName string, migrateProjectName string, options *armmigrationhub.MigrateProjectsControllerClientDeleteMigrateProjectOptions) (resp azfake.Responder[armmigrationhub.MigrateProjectsControllerClientDeleteMigrateProjectResponse], errResp azfake.ErrorResponder)

	// GetMigrateProject is the fake for method MigrateProjectsControllerClient.GetMigrateProject
	// HTTP status codes to indicate success: http.StatusOK
	GetMigrateProject func(ctx context.Context, resourceGroupName string, migrateProjectName string, options *armmigrationhub.MigrateProjectsControllerClientGetMigrateProjectOptions) (resp azfake.Responder[armmigrationhub.MigrateProjectsControllerClientGetMigrateProjectResponse], errResp azfake.ErrorResponder)

	// GetToolRegistrationDetails is the fake for method MigrateProjectsControllerClient.GetToolRegistrationDetails
	// HTTP status codes to indicate success: http.StatusOK
	GetToolRegistrationDetails func(ctx context.Context, resourceGroupName string, migrateProjectName string, input armmigrationhub.RegistrationDetailsInput, options *armmigrationhub.MigrateProjectsControllerClientGetToolRegistrationDetailsOptions) (resp azfake.Responder[armmigrationhub.MigrateProjectsControllerClientGetToolRegistrationDetailsResponse], errResp azfake.ErrorResponder)

	// PatchMigrateProject is the fake for method MigrateProjectsControllerClient.PatchMigrateProject
	// HTTP status codes to indicate success: http.StatusOK
	PatchMigrateProject func(ctx context.Context, resourceGroupName string, migrateProjectName string, body armmigrationhub.MigrateProject, options *armmigrationhub.MigrateProjectsControllerClientPatchMigrateProjectOptions) (resp azfake.Responder[armmigrationhub.MigrateProjectsControllerClientPatchMigrateProjectResponse], errResp azfake.ErrorResponder)

	// PutMigrateProject is the fake for method MigrateProjectsControllerClient.PutMigrateProject
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	PutMigrateProject func(ctx context.Context, resourceGroupName string, migrateProjectName string, body armmigrationhub.MigrateProject, options *armmigrationhub.MigrateProjectsControllerClientPutMigrateProjectOptions) (resp azfake.Responder[armmigrationhub.MigrateProjectsControllerClientPutMigrateProjectResponse], errResp azfake.ErrorResponder)

	// RefreshSummary is the fake for method MigrateProjectsControllerClient.RefreshSummary
	// HTTP status codes to indicate success: http.StatusOK
	RefreshSummary func(ctx context.Context, resourceGroupName string, migrateProjectName string, input armmigrationhub.RefreshSummaryInput, options *armmigrationhub.MigrateProjectsControllerClientRefreshSummaryOptions) (resp azfake.Responder[armmigrationhub.MigrateProjectsControllerClientRefreshSummaryResponse], errResp azfake.ErrorResponder)

	// RegisterTool is the fake for method MigrateProjectsControllerClient.RegisterTool
	// HTTP status codes to indicate success: http.StatusOK
	RegisterTool func(ctx context.Context, resourceGroupName string, migrateProjectName string, input armmigrationhub.RegisterToolInput, options *armmigrationhub.MigrateProjectsControllerClientRegisterToolOptions) (resp azfake.Responder[armmigrationhub.MigrateProjectsControllerClientRegisterToolResponse], errResp azfake.ErrorResponder)
}

// NewMigrateProjectsControllerServerTransport creates a new instance of MigrateProjectsControllerServerTransport with the provided implementation.
// The returned MigrateProjectsControllerServerTransport instance is connected to an instance of armmigrationhub.MigrateProjectsControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMigrateProjectsControllerServerTransport(srv *MigrateProjectsControllerServer) *MigrateProjectsControllerServerTransport {
	return &MigrateProjectsControllerServerTransport{srv: srv}
}

// MigrateProjectsControllerServerTransport connects instances of armmigrationhub.MigrateProjectsControllerClient to instances of MigrateProjectsControllerServer.
// Don't use this type directly, use NewMigrateProjectsControllerServerTransport instead.
type MigrateProjectsControllerServerTransport struct {
	srv *MigrateProjectsControllerServer
}

// Do implements the policy.Transporter interface for MigrateProjectsControllerServerTransport.
func (m *MigrateProjectsControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *MigrateProjectsControllerServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if migrateProjectsControllerServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = migrateProjectsControllerServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "MigrateProjectsControllerClient.DeleteMigrateProject":
				res.resp, res.err = m.dispatchDeleteMigrateProject(req)
			case "MigrateProjectsControllerClient.GetMigrateProject":
				res.resp, res.err = m.dispatchGetMigrateProject(req)
			case "MigrateProjectsControllerClient.GetToolRegistrationDetails":
				res.resp, res.err = m.dispatchGetToolRegistrationDetails(req)
			case "MigrateProjectsControllerClient.PatchMigrateProject":
				res.resp, res.err = m.dispatchPatchMigrateProject(req)
			case "MigrateProjectsControllerClient.PutMigrateProject":
				res.resp, res.err = m.dispatchPutMigrateProject(req)
			case "MigrateProjectsControllerClient.RefreshSummary":
				res.resp, res.err = m.dispatchRefreshSummary(req)
			case "MigrateProjectsControllerClient.RegisterTool":
				res.resp, res.err = m.dispatchRegisterTool(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *MigrateProjectsControllerServerTransport) dispatchDeleteMigrateProject(req *http.Request) (*http.Response, error) {
	if m.srv.DeleteMigrateProject == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteMigrateProject not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.DeleteMigrateProject(req.Context(), resourceGroupNameParam, migrateProjectNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MigrateProjectsControllerServerTransport) dispatchGetMigrateProject(req *http.Request) (*http.Response, error) {
	if m.srv.GetMigrateProject == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMigrateProject not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.GetMigrateProject(req.Context(), resourceGroupNameParam, migrateProjectNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MigrateProject, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MigrateProjectsControllerServerTransport) dispatchGetToolRegistrationDetails(req *http.Request) (*http.Response, error) {
	if m.srv.GetToolRegistrationDetails == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetToolRegistrationDetails not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/registrationDetails`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.RegistrationDetailsInput](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.GetToolRegistrationDetails(req.Context(), resourceGroupNameParam, migrateProjectNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RegistrationDetailsResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MigrateProjectsControllerServerTransport) dispatchPatchMigrateProject(req *http.Request) (*http.Response, error) {
	if m.srv.PatchMigrateProject == nil {
		return nil, &nonRetriableError{errors.New("fake for method PatchMigrateProject not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.MigrateProject](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.PatchMigrateProject(req.Context(), resourceGroupNameParam, migrateProjectNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MigrateProject, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MigrateProjectsControllerServerTransport) dispatchPutMigrateProject(req *http.Request) (*http.Response, error) {
	if m.srv.PutMigrateProject == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutMigrateProject not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.MigrateProject](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.PutMigrateProject(req.Context(), resourceGroupNameParam, migrateProjectNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MigrateProject, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).RetryAfter; val != nil {
		resp.Header.Set("Retry-After", strconv.FormatInt(int64(*val), 10))
	}
	return resp, nil
}

func (m *MigrateProjectsControllerServerTransport) dispatchRefreshSummary(req *http.Request) (*http.Response, error) {
	if m.srv.RefreshSummary == nil {
		return nil, &nonRetriableError{errors.New("fake for method RefreshSummary not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/refreshSummary`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.RefreshSummaryInput](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.RefreshSummary(req.Context(), resourceGroupNameParam, migrateProjectNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RefreshSummaryResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MigrateProjectsControllerServerTransport) dispatchRegisterTool(req *http.Request) (*http.Response, error) {
	if m.srv.RegisterTool == nil {
		return nil, &nonRetriableError{errors.New("fake for method RegisterTool not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/registerTool`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.RegisterToolInput](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.RegisterTool(req.Context(), resourceGroupNameParam, migrateProjectNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RegistrationResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to MigrateProjectsControllerServerTransport
var migrateProjectsControllerServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
