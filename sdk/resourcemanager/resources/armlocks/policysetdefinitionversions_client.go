//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlocks

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PolicySetDefinitionVersionsClient contains the methods for the PolicySetDefinitionVersions group.
// Don't use this type directly, use NewPolicySetDefinitionVersionsClient() instead.
type PolicySetDefinitionVersionsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPolicySetDefinitionVersionsClient creates a new instance of PolicySetDefinitionVersionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPolicySetDefinitionVersionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PolicySetDefinitionVersionsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PolicySetDefinitionVersionsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - This operation creates or updates a policy set definition version in the given subscription with the given
// name and version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policySetDefinitionName - The name of the policy set definition.
//   - policyDefinitionVersion - The policy set definition version. The format is x.y.z where x is the major version number, y
//     is the minor version number, and z is the patch number
//   - parameters - The policy set definition properties.
//   - options - PolicySetDefinitionVersionsClientCreateOrUpdateOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.CreateOrUpdate
//     method.
func (client *PolicySetDefinitionVersionsClient) CreateOrUpdate(ctx context.Context, policySetDefinitionName string, policyDefinitionVersion string, parameters PolicySetDefinitionVersion, options *PolicySetDefinitionVersionsClientCreateOrUpdateOptions) (PolicySetDefinitionVersionsClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, policySetDefinitionName, policyDefinitionVersion, parameters, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PolicySetDefinitionVersionsClient) createOrUpdateCreateRequest(ctx context.Context, policySetDefinitionName string, policyDefinitionVersion string, parameters PolicySetDefinitionVersion, options *PolicySetDefinitionVersionsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *PolicySetDefinitionVersionsClient) createOrUpdateHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientCreateOrUpdateResponse, error) {
	result := PolicySetDefinitionVersionsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersion); err != nil {
		return PolicySetDefinitionVersionsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// CreateOrUpdateAtManagementGroup - This operation creates or updates a policy set definition version in the given management
// group with the given name and version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - policySetDefinitionName - The name of the policy set definition.
//   - policyDefinitionVersion - The policy set definition version. The format is x.y.z where x is the major version number, y
//     is the minor version number, and z is the patch number
//   - parameters - The policy set definition version properties.
//   - options - PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for
//     the PolicySetDefinitionVersionsClient.CreateOrUpdateAtManagementGroup method.
func (client *PolicySetDefinitionVersionsClient) CreateOrUpdateAtManagementGroup(ctx context.Context, managementGroupName string, policySetDefinitionName string, policyDefinitionVersion string, parameters PolicySetDefinitionVersion, options *PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions) (PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.CreateOrUpdateAtManagementGroup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateAtManagementGroupCreateRequest(ctx, managementGroupName, policySetDefinitionName, policyDefinitionVersion, parameters, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}, err
	}
	resp, err := client.createOrUpdateAtManagementGroupHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateAtManagementGroupCreateRequest creates the CreateOrUpdateAtManagementGroup request.
func (client *PolicySetDefinitionVersionsClient) createOrUpdateAtManagementGroupCreateRequest(ctx context.Context, managementGroupName string, policySetDefinitionName string, policyDefinitionVersion string, parameters PolicySetDefinitionVersion, options *PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateAtManagementGroupHandleResponse handles the CreateOrUpdateAtManagementGroup response.
func (client *PolicySetDefinitionVersionsClient) createOrUpdateAtManagementGroupHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse, error) {
	result := PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersion); err != nil {
		return PolicySetDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}, err
	}
	return result, nil
}

// Delete - This operation deletes the policy set definition version in the given subscription with the given name and version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policySetDefinitionName - The name of the policy set definition.
//   - policyDefinitionVersion - The policy set definition version. The format is x.y.z where x is the major version number, y
//     is the minor version number, and z is the patch number
//   - options - PolicySetDefinitionVersionsClientDeleteOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.Delete
//     method.
func (client *PolicySetDefinitionVersionsClient) Delete(ctx context.Context, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientDeleteOptions) (PolicySetDefinitionVersionsClientDeleteResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, policySetDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientDeleteResponse{}, err
	}
	return PolicySetDefinitionVersionsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PolicySetDefinitionVersionsClient) deleteCreateRequest(ctx context.Context, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteAtManagementGroup - This operation deletes the policy set definition version in the given management group with the
// given name and version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - policySetDefinitionName - The name of the policy set definition.
//   - policyDefinitionVersion - The policy set definition version. The format is x.y.z where x is the major version number, y
//     is the minor version number, and z is the patch number
//   - options - PolicySetDefinitionVersionsClientDeleteAtManagementGroupOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.DeleteAtManagementGroup
//     method.
func (client *PolicySetDefinitionVersionsClient) DeleteAtManagementGroup(ctx context.Context, managementGroupName string, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientDeleteAtManagementGroupOptions) (PolicySetDefinitionVersionsClientDeleteAtManagementGroupResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.DeleteAtManagementGroup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteAtManagementGroupCreateRequest(ctx, managementGroupName, policySetDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientDeleteAtManagementGroupResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientDeleteAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientDeleteAtManagementGroupResponse{}, err
	}
	return PolicySetDefinitionVersionsClientDeleteAtManagementGroupResponse{}, nil
}

// deleteAtManagementGroupCreateRequest creates the DeleteAtManagementGroup request.
func (client *PolicySetDefinitionVersionsClient) deleteAtManagementGroupCreateRequest(ctx context.Context, managementGroupName string, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientDeleteAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - This operation retrieves the policy set definition version in the given subscription with the given name and version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policySetDefinitionName - The name of the policy set definition.
//   - policyDefinitionVersion - The policy set definition version. The format is x.y.z where x is the major version number, y
//     is the minor version number, and z is the patch number
//   - options - PolicySetDefinitionVersionsClientGetOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.Get
//     method.
func (client *PolicySetDefinitionVersionsClient) Get(ctx context.Context, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientGetOptions) (PolicySetDefinitionVersionsClientGetResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, policySetDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PolicySetDefinitionVersionsClient) getCreateRequest(ctx context.Context, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PolicySetDefinitionVersionsClient) getHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientGetResponse, error) {
	result := PolicySetDefinitionVersionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersion); err != nil {
		return PolicySetDefinitionVersionsClientGetResponse{}, err
	}
	return result, nil
}

// GetAtManagementGroup - This operation retrieves the policy set definition version in the given management group with the
// given name and version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - policySetDefinitionName - The name of the policy set definition.
//   - policyDefinitionVersion - The policy set definition version. The format is x.y.z where x is the major version number, y
//     is the minor version number, and z is the patch number
//   - options - PolicySetDefinitionVersionsClientGetAtManagementGroupOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.GetAtManagementGroup
//     method.
func (client *PolicySetDefinitionVersionsClient) GetAtManagementGroup(ctx context.Context, managementGroupName string, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientGetAtManagementGroupOptions) (PolicySetDefinitionVersionsClientGetAtManagementGroupResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.GetAtManagementGroup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAtManagementGroupCreateRequest(ctx, managementGroupName, policySetDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientGetAtManagementGroupResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientGetAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientGetAtManagementGroupResponse{}, err
	}
	resp, err := client.getAtManagementGroupHandleResponse(httpResp)
	return resp, err
}

// getAtManagementGroupCreateRequest creates the GetAtManagementGroup request.
func (client *PolicySetDefinitionVersionsClient) getAtManagementGroupCreateRequest(ctx context.Context, managementGroupName string, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientGetAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAtManagementGroupHandleResponse handles the GetAtManagementGroup response.
func (client *PolicySetDefinitionVersionsClient) getAtManagementGroupHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientGetAtManagementGroupResponse, error) {
	result := PolicySetDefinitionVersionsClientGetAtManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersion); err != nil {
		return PolicySetDefinitionVersionsClientGetAtManagementGroupResponse{}, err
	}
	return result, nil
}

// GetBuiltIn - This operation retrieves the built-in policy set definition version with the given name and version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policySetDefinitionName - The name of the policy set definition.
//   - policyDefinitionVersion - The policy set definition version. The format is x.y.z where x is the major version number, y
//     is the minor version number, and z is the patch number
//   - options - PolicySetDefinitionVersionsClientGetBuiltInOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.GetBuiltIn
//     method.
func (client *PolicySetDefinitionVersionsClient) GetBuiltIn(ctx context.Context, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientGetBuiltInOptions) (PolicySetDefinitionVersionsClientGetBuiltInResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.GetBuiltIn"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBuiltInCreateRequest(ctx, policySetDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientGetBuiltInResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientGetBuiltInResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientGetBuiltInResponse{}, err
	}
	resp, err := client.getBuiltInHandleResponse(httpResp)
	return resp, err
}

// getBuiltInCreateRequest creates the GetBuiltIn request.
func (client *PolicySetDefinitionVersionsClient) getBuiltInCreateRequest(ctx context.Context, policySetDefinitionName string, policyDefinitionVersion string, options *PolicySetDefinitionVersionsClientGetBuiltInOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBuiltInHandleResponse handles the GetBuiltIn response.
func (client *PolicySetDefinitionVersionsClient) getBuiltInHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientGetBuiltInResponse, error) {
	result := PolicySetDefinitionVersionsClientGetBuiltInResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersion); err != nil {
		return PolicySetDefinitionVersionsClientGetBuiltInResponse{}, err
	}
	return result, nil
}

// NewListPager - This operation retrieves a list of all the policy set definition versions for the given policy set definition.
//
// Generated from API version 2025-01-01
//   - policySetDefinitionName - The name of the policy set definition.
//   - options - PolicySetDefinitionVersionsClientListOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.NewListPager
//     method.
func (client *PolicySetDefinitionVersionsClient) NewListPager(policySetDefinitionName string, options *PolicySetDefinitionVersionsClientListOptions) *runtime.Pager[PolicySetDefinitionVersionsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicySetDefinitionVersionsClientListResponse]{
		More: func(page PolicySetDefinitionVersionsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicySetDefinitionVersionsClientListResponse) (PolicySetDefinitionVersionsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicySetDefinitionVersionsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, policySetDefinitionName, options)
			}, nil)
			if err != nil {
				return PolicySetDefinitionVersionsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *PolicySetDefinitionVersionsClient) listCreateRequest(ctx context.Context, policySetDefinitionName string, options *PolicySetDefinitionVersionsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PolicySetDefinitionVersionsClient) listHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientListResponse, error) {
	result := PolicySetDefinitionVersionsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersionListResult); err != nil {
		return PolicySetDefinitionVersionsClientListResponse{}, err
	}
	return result, nil
}

// ListAll - This operation lists all the policy set definition versions for all policy set definitions within a subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - options - PolicySetDefinitionVersionsClientListAllOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.ListAll
//     method.
func (client *PolicySetDefinitionVersionsClient) ListAll(ctx context.Context, options *PolicySetDefinitionVersionsClientListAllOptions) (PolicySetDefinitionVersionsClientListAllResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.ListAll"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listAllCreateRequest(ctx, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientListAllResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientListAllResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientListAllResponse{}, err
	}
	resp, err := client.listAllHandleResponse(httpResp)
	return resp, err
}

// listAllCreateRequest creates the ListAll request.
func (client *PolicySetDefinitionVersionsClient) listAllCreateRequest(ctx context.Context, options *PolicySetDefinitionVersionsClientListAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/listPolicySetDefinitionVersions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *PolicySetDefinitionVersionsClient) listAllHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientListAllResponse, error) {
	result := PolicySetDefinitionVersionsClientListAllResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersionListResult); err != nil {
		return PolicySetDefinitionVersionsClientListAllResponse{}, err
	}
	return result, nil
}

// ListAllAtManagementGroup - This operation lists all the policy set definition versions for all policy set definitions at
// the management group scope.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - options - PolicySetDefinitionVersionsClientListAllAtManagementGroupOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.ListAllAtManagementGroup
//     method.
func (client *PolicySetDefinitionVersionsClient) ListAllAtManagementGroup(ctx context.Context, managementGroupName string, options *PolicySetDefinitionVersionsClientListAllAtManagementGroupOptions) (PolicySetDefinitionVersionsClientListAllAtManagementGroupResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.ListAllAtManagementGroup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listAllAtManagementGroupCreateRequest(ctx, managementGroupName, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientListAllAtManagementGroupResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientListAllAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientListAllAtManagementGroupResponse{}, err
	}
	resp, err := client.listAllAtManagementGroupHandleResponse(httpResp)
	return resp, err
}

// listAllAtManagementGroupCreateRequest creates the ListAllAtManagementGroup request.
func (client *PolicySetDefinitionVersionsClient) listAllAtManagementGroupCreateRequest(ctx context.Context, managementGroupName string, options *PolicySetDefinitionVersionsClientListAllAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/listPolicySetDefinitionVersions"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllAtManagementGroupHandleResponse handles the ListAllAtManagementGroup response.
func (client *PolicySetDefinitionVersionsClient) listAllAtManagementGroupHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientListAllAtManagementGroupResponse, error) {
	result := PolicySetDefinitionVersionsClientListAllAtManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersionListResult); err != nil {
		return PolicySetDefinitionVersionsClientListAllAtManagementGroupResponse{}, err
	}
	return result, nil
}

// ListAllBuiltins - This operation lists all the built-in policy set definition versions for all built-in policy set definitions.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - options - PolicySetDefinitionVersionsClientListAllBuiltinsOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.ListAllBuiltins
//     method.
func (client *PolicySetDefinitionVersionsClient) ListAllBuiltins(ctx context.Context, options *PolicySetDefinitionVersionsClientListAllBuiltinsOptions) (PolicySetDefinitionVersionsClientListAllBuiltinsResponse, error) {
	var err error
	const operationName = "PolicySetDefinitionVersionsClient.ListAllBuiltins"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listAllBuiltinsCreateRequest(ctx, options)
	if err != nil {
		return PolicySetDefinitionVersionsClientListAllBuiltinsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicySetDefinitionVersionsClientListAllBuiltinsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicySetDefinitionVersionsClientListAllBuiltinsResponse{}, err
	}
	resp, err := client.listAllBuiltinsHandleResponse(httpResp)
	return resp, err
}

// listAllBuiltinsCreateRequest creates the ListAllBuiltins request.
func (client *PolicySetDefinitionVersionsClient) listAllBuiltinsCreateRequest(ctx context.Context, options *PolicySetDefinitionVersionsClientListAllBuiltinsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Authorization/listPolicySetDefinitionVersions"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllBuiltinsHandleResponse handles the ListAllBuiltins response.
func (client *PolicySetDefinitionVersionsClient) listAllBuiltinsHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientListAllBuiltinsResponse, error) {
	result := PolicySetDefinitionVersionsClientListAllBuiltinsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersionListResult); err != nil {
		return PolicySetDefinitionVersionsClientListAllBuiltinsResponse{}, err
	}
	return result, nil
}

// NewListBuiltInPager - This operation retrieves a list of all the built-in policy set definition versions for the given
// built-in policy set definition.
//
// Generated from API version 2025-01-01
//   - policySetDefinitionName - The name of the policy set definition.
//   - options - PolicySetDefinitionVersionsClientListBuiltInOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.NewListBuiltInPager
//     method.
func (client *PolicySetDefinitionVersionsClient) NewListBuiltInPager(policySetDefinitionName string, options *PolicySetDefinitionVersionsClientListBuiltInOptions) *runtime.Pager[PolicySetDefinitionVersionsClientListBuiltInResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicySetDefinitionVersionsClientListBuiltInResponse]{
		More: func(page PolicySetDefinitionVersionsClientListBuiltInResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicySetDefinitionVersionsClientListBuiltInResponse) (PolicySetDefinitionVersionsClientListBuiltInResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicySetDefinitionVersionsClient.NewListBuiltInPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBuiltInCreateRequest(ctx, policySetDefinitionName, options)
			}, nil)
			if err != nil {
				return PolicySetDefinitionVersionsClientListBuiltInResponse{}, err
			}
			return client.listBuiltInHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBuiltInCreateRequest creates the ListBuiltIn request.
func (client *PolicySetDefinitionVersionsClient) listBuiltInCreateRequest(ctx context.Context, policySetDefinitionName string, options *PolicySetDefinitionVersionsClientListBuiltInOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBuiltInHandleResponse handles the ListBuiltIn response.
func (client *PolicySetDefinitionVersionsClient) listBuiltInHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientListBuiltInResponse, error) {
	result := PolicySetDefinitionVersionsClientListBuiltInResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersionListResult); err != nil {
		return PolicySetDefinitionVersionsClientListBuiltInResponse{}, err
	}
	return result, nil
}

// NewListByManagementGroupPager - This operation retrieves a list of all the policy set definition versions for the given
// policy set definition in a given management group.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - policySetDefinitionName - The name of the policy set definition.
//   - options - PolicySetDefinitionVersionsClientListByManagementGroupOptions contains the optional parameters for the PolicySetDefinitionVersionsClient.NewListByManagementGroupPager
//     method.
func (client *PolicySetDefinitionVersionsClient) NewListByManagementGroupPager(managementGroupName string, policySetDefinitionName string, options *PolicySetDefinitionVersionsClientListByManagementGroupOptions) *runtime.Pager[PolicySetDefinitionVersionsClientListByManagementGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicySetDefinitionVersionsClientListByManagementGroupResponse]{
		More: func(page PolicySetDefinitionVersionsClientListByManagementGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicySetDefinitionVersionsClientListByManagementGroupResponse) (PolicySetDefinitionVersionsClientListByManagementGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicySetDefinitionVersionsClient.NewListByManagementGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByManagementGroupCreateRequest(ctx, managementGroupName, policySetDefinitionName, options)
			}, nil)
			if err != nil {
				return PolicySetDefinitionVersionsClientListByManagementGroupResponse{}, err
			}
			return client.listByManagementGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByManagementGroupCreateRequest creates the ListByManagementGroup request.
func (client *PolicySetDefinitionVersionsClient) listByManagementGroupCreateRequest(ctx context.Context, managementGroupName string, policySetDefinitionName string, options *PolicySetDefinitionVersionsClientListByManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByManagementGroupHandleResponse handles the ListByManagementGroup response.
func (client *PolicySetDefinitionVersionsClient) listByManagementGroupHandleResponse(resp *http.Response) (PolicySetDefinitionVersionsClientListByManagementGroupResponse, error) {
	result := PolicySetDefinitionVersionsClientListByManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionVersionListResult); err != nil {
		return PolicySetDefinitionVersionsClientListByManagementGroupResponse{}, err
	}
	return result, nil
}
