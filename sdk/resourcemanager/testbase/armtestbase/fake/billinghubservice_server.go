//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/testbase/armtestbase"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// BillingHubServiceServer is a fake server for instances of the armtestbase.BillingHubServiceClient type.
type BillingHubServiceServer struct {
	// GetFreeHourBalance is the fake for method BillingHubServiceClient.GetFreeHourBalance
	// HTTP status codes to indicate success: http.StatusOK
	GetFreeHourBalance func(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *armtestbase.BillingHubServiceClientGetFreeHourBalanceOptions) (resp azfake.Responder[armtestbase.BillingHubServiceClientGetFreeHourBalanceResponse], errResp azfake.ErrorResponder)

	// GetUsage is the fake for method BillingHubServiceClient.GetUsage
	// HTTP status codes to indicate success: http.StatusOK
	GetUsage func(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *armtestbase.BillingHubServiceClientGetUsageOptions) (resp azfake.Responder[armtestbase.BillingHubServiceClientGetUsageResponse], errResp azfake.ErrorResponder)
}

// NewBillingHubServiceServerTransport creates a new instance of BillingHubServiceServerTransport with the provided implementation.
// The returned BillingHubServiceServerTransport instance is connected to an instance of armtestbase.BillingHubServiceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBillingHubServiceServerTransport(srv *BillingHubServiceServer) *BillingHubServiceServerTransport {
	return &BillingHubServiceServerTransport{srv: srv}
}

// BillingHubServiceServerTransport connects instances of armtestbase.BillingHubServiceClient to instances of BillingHubServiceServer.
// Don't use this type directly, use NewBillingHubServiceServerTransport instead.
type BillingHubServiceServerTransport struct {
	srv *BillingHubServiceServer
}

// Do implements the policy.Transporter interface for BillingHubServiceServerTransport.
func (b *BillingHubServiceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "BillingHubServiceClient.GetFreeHourBalance":
		resp, err = b.dispatchGetFreeHourBalance(req)
	case "BillingHubServiceClient.GetUsage":
		resp, err = b.dispatchGetUsage(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (b *BillingHubServiceServerTransport) dispatchGetFreeHourBalance(req *http.Request) (*http.Response, error) {
	if b.srv.GetFreeHourBalance == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFreeHourBalance not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getFreeHourBalance`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.GetFreeHourBalance(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BillingHubGetFreeHourBalanceResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BillingHubServiceServerTransport) dispatchGetUsage(req *http.Request) (*http.Response, error) {
	if b.srv.GetUsage == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetUsage not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.TestBase/testBaseAccounts/(?P<testBaseAccountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getUsage`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armtestbase.BillingHubGetUsageRequest](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	testBaseAccountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("testBaseAccountName")])
	if err != nil {
		return nil, err
	}
	var options *armtestbase.BillingHubServiceClientGetUsageOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armtestbase.BillingHubServiceClientGetUsageOptions{
			GetUsageRequest: &body,
		}
	}
	respr, errRespr := b.srv.GetUsage(req.Context(), resourceGroupNameParam, testBaseAccountNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BillingHubGetUsageResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
