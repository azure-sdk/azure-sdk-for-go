//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazuresiterecovery

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ManagementServiceAPIClient contains the methods for the AzureSiteRecoveryManagementServiceAPI group.
// Don't use this type directly, use NewManagementServiceAPIClient() instead.
type ManagementServiceAPIClient struct {
	internal *arm.Client
}

// NewManagementServiceAPIClient creates a new instance of ManagementServiceAPIClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewManagementServiceAPIClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*ManagementServiceAPIClient, error) {
	cl, err := arm.NewClient(moduleName+".ManagementServiceAPIClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ManagementServiceAPIClient{
		internal: cl,
	}
	return client, nil
}

// CheckNameAvailability - Checks the resource name availability.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-02-16-preview
//   - subscriptionID - The subscription Id.
//   - location - Resource location.
//   - options - ManagementServiceAPIClientCheckNameAvailabilityOptions contains the optional parameters for the ManagementServiceAPIClient.CheckNameAvailability
//     method.
func (client *ManagementServiceAPIClient) CheckNameAvailability(ctx context.Context, subscriptionID string, location string, options *ManagementServiceAPIClientCheckNameAvailabilityOptions) (ManagementServiceAPIClientCheckNameAvailabilityResponse, error) {
	var err error
	req, err := client.checkNameAvailabilityCreateRequest(ctx, subscriptionID, location, options)
	if err != nil {
		return ManagementServiceAPIClientCheckNameAvailabilityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManagementServiceAPIClientCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ManagementServiceAPIClientCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.checkNameAvailabilityHandleResponse(httpResp)
	return resp, err
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *ManagementServiceAPIClient) checkNameAvailabilityCreateRequest(ctx context.Context, subscriptionID string, location string, options *ManagementServiceAPIClientCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DataReplication/locations/{location}/checkNameAvailability"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *ManagementServiceAPIClient) checkNameAvailabilityHandleResponse(resp *http.Response) (ManagementServiceAPIClientCheckNameAvailabilityResponse, error) {
	result := ManagementServiceAPIClientCheckNameAvailabilityResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityResponseModel); err != nil {
		return ManagementServiceAPIClientCheckNameAvailabilityResponse{}, err
	}
	return result, nil
}

// DeploymentPreflight - Performs resource deployment validation.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-02-16-preview
//   - subscriptionID - The subscription Id.
//   - resourceGroupName - Resource group name.
//   - deploymentID - Deployment Id.
//   - options - ManagementServiceAPIClientDeploymentPreflightOptions contains the optional parameters for the ManagementServiceAPIClient.DeploymentPreflight
//     method.
func (client *ManagementServiceAPIClient) DeploymentPreflight(ctx context.Context, subscriptionID string, resourceGroupName string, deploymentID string, options *ManagementServiceAPIClientDeploymentPreflightOptions) (ManagementServiceAPIClientDeploymentPreflightResponse, error) {
	var err error
	req, err := client.deploymentPreflightCreateRequest(ctx, subscriptionID, resourceGroupName, deploymentID, options)
	if err != nil {
		return ManagementServiceAPIClientDeploymentPreflightResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManagementServiceAPIClientDeploymentPreflightResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ManagementServiceAPIClientDeploymentPreflightResponse{}, err
	}
	resp, err := client.deploymentPreflightHandleResponse(httpResp)
	return resp, err
}

// deploymentPreflightCreateRequest creates the DeploymentPreflight request.
func (client *ManagementServiceAPIClient) deploymentPreflightCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, deploymentID string, options *ManagementServiceAPIClientDeploymentPreflightOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/deployments/{deploymentId}/preflight"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if deploymentID == "" {
		return nil, errors.New("parameter deploymentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deploymentId}", url.PathEscape(deploymentID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// deploymentPreflightHandleResponse handles the DeploymentPreflight response.
func (client *ManagementServiceAPIClient) deploymentPreflightHandleResponse(resp *http.Response) (ManagementServiceAPIClientDeploymentPreflightResponse, error) {
	result := ManagementServiceAPIClientDeploymentPreflightResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeploymentPreflightModel); err != nil {
		return ManagementServiceAPIClientDeploymentPreflightResponse{}, err
	}
	return result, nil
}
