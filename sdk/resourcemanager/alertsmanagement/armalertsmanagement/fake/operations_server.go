//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/alertsmanagement/armalertsmanagement"
	"net/http"
)

// OperationsServer is a fake server for instances of the armalertsmanagement.OperationsClient type.
type OperationsServer struct {
	// NewListTestPager is the fake for method OperationsClient.NewListTestPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListTestPager func(options *armalertsmanagement.OperationsClientListTestOptions) (resp azfake.PagerResponder[armalertsmanagement.OperationsClientListTestResponse])
}

// NewOperationsServerTransport creates a new instance of OperationsServerTransport with the provided implementation.
// The returned OperationsServerTransport instance is connected to an instance of armalertsmanagement.OperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOperationsServerTransport(srv *OperationsServer) *OperationsServerTransport {
	return &OperationsServerTransport{
		srv:              srv,
		newListTestPager: newTracker[azfake.PagerResponder[armalertsmanagement.OperationsClientListTestResponse]](),
	}
}

// OperationsServerTransport connects instances of armalertsmanagement.OperationsClient to instances of OperationsServer.
// Don't use this type directly, use NewOperationsServerTransport instead.
type OperationsServerTransport struct {
	srv              *OperationsServer
	newListTestPager *tracker[azfake.PagerResponder[armalertsmanagement.OperationsClientListTestResponse]]
}

// Do implements the policy.Transporter interface for OperationsServerTransport.
func (o *OperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "OperationsClient.NewListTestPager":
		resp, err = o.dispatchNewListTestPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (o *OperationsServerTransport) dispatchNewListTestPager(req *http.Request) (*http.Response, error) {
	if o.srv.NewListTestPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListTestPager not implemented")}
	}
	newListTestPager := o.newListTestPager.get(req)
	if newListTestPager == nil {
		resp := o.srv.NewListTestPager(nil)
		newListTestPager = &resp
		o.newListTestPager.add(req, newListTestPager)
		server.PagerResponderInjectNextLinks(newListTestPager, req, func(page *armalertsmanagement.OperationsClientListTestResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListTestPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		o.newListTestPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListTestPager) {
		o.newListTestPager.remove(req)
	}
	return resp, nil
}
