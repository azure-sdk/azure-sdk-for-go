// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GalleryScriptVersionsClient contains the methods for the GalleryScriptVersions group.
// Don't use this type directly, use NewGalleryScriptVersionsClient() instead.
type GalleryScriptVersionsClient struct {
	internal                 *arm.Client
	subscriptionID           string
	galleryName              string
	galleryScriptName        string
	galleryScriptVersionName string
}

// NewGalleryScriptVersionsClient creates a new instance of GalleryScriptVersionsClient with the specified values.
//   - subscriptionID - Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - galleryName - The name of the Shared Image Gallery where Image Definitions or other artifacts reside.
//   - galleryScriptName - The name of the gallery Script Definition in which the Script Version is to be created.
//   - galleryScriptVersionName - The name of the gallery Script Version to be created. Needs to follow semantic version name
//     pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer.
//     Format: ..
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGalleryScriptVersionsClient(subscriptionID string, galleryName string, galleryScriptName string, galleryScriptVersionName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GalleryScriptVersionsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GalleryScriptVersionsClient{
		subscriptionID:           subscriptionID,
		galleryName:              galleryName,
		galleryScriptName:        galleryScriptName,
		galleryScriptVersionName: galleryScriptVersionName,
		internal:                 cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create or update a gallery Script Version. Script versions helps save different states/iterations
// of a Gallery script. They are referred in format: ..
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-03
//   - resourceGroupName - The name of the resource group.
//   - galleryScriptVersion - Parameters supplied to the create or update gallery Script Version operation.
//   - options - GalleryScriptVersionsClientBeginCreateOrUpdateOptions contains the optional parameters for the GalleryScriptVersionsClient.BeginCreateOrUpdate
//     method.
func (client *GalleryScriptVersionsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, galleryScriptVersion GalleryScriptVersion, options *GalleryScriptVersionsClientBeginCreateOrUpdateOptions) (*runtime.Poller[GalleryScriptVersionsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, galleryScriptVersion, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GalleryScriptVersionsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GalleryScriptVersionsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create or update a gallery Script Version. Script versions helps save different states/iterations of a
// Gallery script. They are referred in format: ..
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-03
func (client *GalleryScriptVersionsClient) createOrUpdate(ctx context.Context, resourceGroupName string, galleryScriptVersion GalleryScriptVersion, options *GalleryScriptVersionsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "GalleryScriptVersionsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, galleryScriptVersion, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *GalleryScriptVersionsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, galleryScriptVersion GalleryScriptVersion, _ *GalleryScriptVersionsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}/versions/{galleryScriptVersionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.galleryName == "" {
		return nil, errors.New("parameter client.galleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryName}", url.PathEscape(client.galleryName))
	if client.galleryScriptName == "" {
		return nil, errors.New("parameter client.galleryScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptName}", url.PathEscape(client.galleryScriptName))
	if client.galleryScriptVersionName == "" {
		return nil, errors.New("parameter client.galleryScriptVersionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptVersionName}", url.PathEscape(client.galleryScriptVersionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-03")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, galleryScriptVersion); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a gallery Script Version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-03
//   - resourceGroupName - The name of the resource group.
//   - options - GalleryScriptVersionsClientBeginDeleteOptions contains the optional parameters for the GalleryScriptVersionsClient.BeginDelete
//     method.
func (client *GalleryScriptVersionsClient) BeginDelete(ctx context.Context, resourceGroupName string, options *GalleryScriptVersionsClientBeginDeleteOptions) (*runtime.Poller[GalleryScriptVersionsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GalleryScriptVersionsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GalleryScriptVersionsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a gallery Script Version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-03
func (client *GalleryScriptVersionsClient) deleteOperation(ctx context.Context, resourceGroupName string, options *GalleryScriptVersionsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "GalleryScriptVersionsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *GalleryScriptVersionsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, _ *GalleryScriptVersionsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}/versions/{galleryScriptVersionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.galleryName == "" {
		return nil, errors.New("parameter client.galleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryName}", url.PathEscape(client.galleryName))
	if client.galleryScriptName == "" {
		return nil, errors.New("parameter client.galleryScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptName}", url.PathEscape(client.galleryScriptName))
	if client.galleryScriptVersionName == "" {
		return nil, errors.New("parameter client.galleryScriptVersionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptVersionName}", url.PathEscape(client.galleryScriptVersionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-03")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieves information about a gallery Script Version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-03
//   - resourceGroupName - The name of the resource group.
//   - options - GalleryScriptVersionsClientGetOptions contains the optional parameters for the GalleryScriptVersionsClient.Get
//     method.
func (client *GalleryScriptVersionsClient) Get(ctx context.Context, resourceGroupName string, options *GalleryScriptVersionsClientGetOptions) (GalleryScriptVersionsClientGetResponse, error) {
	var err error
	const operationName = "GalleryScriptVersionsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return GalleryScriptVersionsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GalleryScriptVersionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GalleryScriptVersionsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *GalleryScriptVersionsClient) getCreateRequest(ctx context.Context, resourceGroupName string, _ *GalleryScriptVersionsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}/versions/{galleryScriptVersionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.galleryName == "" {
		return nil, errors.New("parameter client.galleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryName}", url.PathEscape(client.galleryName))
	if client.galleryScriptName == "" {
		return nil, errors.New("parameter client.galleryScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptName}", url.PathEscape(client.galleryScriptName))
	if client.galleryScriptVersionName == "" {
		return nil, errors.New("parameter client.galleryScriptVersionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptVersionName}", url.PathEscape(client.galleryScriptVersionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-03")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GalleryScriptVersionsClient) getHandleResponse(resp *http.Response) (GalleryScriptVersionsClientGetResponse, error) {
	result := GalleryScriptVersionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GalleryScriptVersion); err != nil {
		return GalleryScriptVersionsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByGalleryScriptPager - List gallery Script Versions in a gallery Script Definition.
//
// Generated from API version 2025-03-03
//   - resourceGroupName - The name of the resource group.
//   - options - GalleryScriptVersionsClientListByGalleryScriptOptions contains the optional parameters for the GalleryScriptVersionsClient.NewListByGalleryScriptPager
//     method.
func (client *GalleryScriptVersionsClient) NewListByGalleryScriptPager(resourceGroupName string, options *GalleryScriptVersionsClientListByGalleryScriptOptions) *runtime.Pager[GalleryScriptVersionsClientListByGalleryScriptResponse] {
	return runtime.NewPager(runtime.PagingHandler[GalleryScriptVersionsClientListByGalleryScriptResponse]{
		More: func(page GalleryScriptVersionsClientListByGalleryScriptResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GalleryScriptVersionsClientListByGalleryScriptResponse) (GalleryScriptVersionsClientListByGalleryScriptResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "GalleryScriptVersionsClient.NewListByGalleryScriptPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByGalleryScriptCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return GalleryScriptVersionsClientListByGalleryScriptResponse{}, err
			}
			return client.listByGalleryScriptHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByGalleryScriptCreateRequest creates the ListByGalleryScript request.
func (client *GalleryScriptVersionsClient) listByGalleryScriptCreateRequest(ctx context.Context, resourceGroupName string, _ *GalleryScriptVersionsClientListByGalleryScriptOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}/versions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.galleryName == "" {
		return nil, errors.New("parameter client.galleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryName}", url.PathEscape(client.galleryName))
	if client.galleryScriptName == "" {
		return nil, errors.New("parameter client.galleryScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptName}", url.PathEscape(client.galleryScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-03")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByGalleryScriptHandleResponse handles the ListByGalleryScript response.
func (client *GalleryScriptVersionsClient) listByGalleryScriptHandleResponse(resp *http.Response) (GalleryScriptVersionsClientListByGalleryScriptResponse, error) {
	result := GalleryScriptVersionsClientListByGalleryScriptResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GalleryScriptVersionList); err != nil {
		return GalleryScriptVersionsClientListByGalleryScriptResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a gallery Script Version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-03
//   - resourceGroupName - The name of the resource group.
//   - galleryScriptVersion - Parameters supplied to the update gallery Script Version operation.
//   - options - GalleryScriptVersionsClientBeginUpdateOptions contains the optional parameters for the GalleryScriptVersionsClient.BeginUpdate
//     method.
func (client *GalleryScriptVersionsClient) BeginUpdate(ctx context.Context, resourceGroupName string, galleryScriptVersion GalleryScriptVersionUpdate, options *GalleryScriptVersionsClientBeginUpdateOptions) (*runtime.Poller[GalleryScriptVersionsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, galleryScriptVersion, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GalleryScriptVersionsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GalleryScriptVersionsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a gallery Script Version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-03
func (client *GalleryScriptVersionsClient) update(ctx context.Context, resourceGroupName string, galleryScriptVersion GalleryScriptVersionUpdate, options *GalleryScriptVersionsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "GalleryScriptVersionsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, galleryScriptVersion, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *GalleryScriptVersionsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, galleryScriptVersion GalleryScriptVersionUpdate, _ *GalleryScriptVersionsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}/versions/{galleryScriptVersionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.galleryName == "" {
		return nil, errors.New("parameter client.galleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryName}", url.PathEscape(client.galleryName))
	if client.galleryScriptName == "" {
		return nil, errors.New("parameter client.galleryScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptName}", url.PathEscape(client.galleryScriptName))
	if client.galleryScriptVersionName == "" {
		return nil, errors.New("parameter client.galleryScriptVersionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{galleryScriptVersionName}", url.PathEscape(client.galleryScriptVersionName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-03")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, galleryScriptVersion); err != nil {
		return nil, err
	}
	return req, nil
}
