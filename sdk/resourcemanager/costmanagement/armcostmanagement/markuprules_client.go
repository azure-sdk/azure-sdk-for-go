//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcostmanagement

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MarkupRulesClient contains the methods for the MarkupRules group.
// Don't use this type directly, use NewMarkupRulesClient() instead.
type MarkupRulesClient struct {
	host string
	pl   runtime.Pipeline
}

// NewMarkupRulesClient creates a new instance of MarkupRulesClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewMarkupRulesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*MarkupRulesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &MarkupRulesClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update a markup rule
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// billingAccountID - BillingAccount ID
// billingProfileID - BillingProfile ID
// name - Markup rule name.
// markupRule - Markup rule to be created or updated.
// options - MarkupRulesClientCreateOrUpdateOptions contains the optional parameters for the MarkupRulesClient.CreateOrUpdate
// method.
func (client *MarkupRulesClient) CreateOrUpdate(ctx context.Context, billingAccountID string, billingProfileID string, name string, markupRule MarkupRule, options *MarkupRulesClientCreateOrUpdateOptions) (MarkupRulesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, billingAccountID, billingProfileID, name, markupRule, options)
	if err != nil {
		return MarkupRulesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarkupRulesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return MarkupRulesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *MarkupRulesClient) createOrUpdateCreateRequest(ctx context.Context, billingAccountID string, billingProfileID string, name string, markupRule MarkupRule, options *MarkupRulesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/markupRules/{name}"
	if billingAccountID == "" {
		return nil, errors.New("parameter billingAccountID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountId}", url.PathEscape(billingAccountID))
	if billingProfileID == "" {
		return nil, errors.New("parameter billingProfileID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileId}", url.PathEscape(billingProfileID))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, markupRule)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *MarkupRulesClient) createOrUpdateHandleResponse(resp *http.Response) (MarkupRulesClientCreateOrUpdateResponse, error) {
	result := MarkupRulesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MarkupRule); err != nil {
		return MarkupRulesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a markup rule. This will not have an effect on closed month markups
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// billingAccountID - BillingAccount ID
// billingProfileID - BillingProfile ID
// name - Markup rule name.
// options - MarkupRulesClientDeleteOptions contains the optional parameters for the MarkupRulesClient.Delete method.
func (client *MarkupRulesClient) Delete(ctx context.Context, billingAccountID string, billingProfileID string, name string, options *MarkupRulesClientDeleteOptions) (MarkupRulesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, billingAccountID, billingProfileID, name, options)
	if err != nil {
		return MarkupRulesClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarkupRulesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return MarkupRulesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return MarkupRulesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *MarkupRulesClient) deleteCreateRequest(ctx context.Context, billingAccountID string, billingProfileID string, name string, options *MarkupRulesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/markupRules/{name}"
	if billingAccountID == "" {
		return nil, errors.New("parameter billingAccountID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountId}", url.PathEscape(billingAccountID))
	if billingProfileID == "" {
		return nil, errors.New("parameter billingProfileID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileId}", url.PathEscape(billingProfileID))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a markup rule by its rule name.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-15-preview
// billingAccountID - BillingAccount ID
// billingProfileID - BillingProfile ID
// name - Markup rule name.
// options - MarkupRulesClientGetOptions contains the optional parameters for the MarkupRulesClient.Get method.
func (client *MarkupRulesClient) Get(ctx context.Context, billingAccountID string, billingProfileID string, name string, options *MarkupRulesClientGetOptions) (MarkupRulesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, billingAccountID, billingProfileID, name, options)
	if err != nil {
		return MarkupRulesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarkupRulesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MarkupRulesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *MarkupRulesClient) getCreateRequest(ctx context.Context, billingAccountID string, billingProfileID string, name string, options *MarkupRulesClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/markupRules/{name}"
	if billingAccountID == "" {
		return nil, errors.New("parameter billingAccountID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountId}", url.PathEscape(billingAccountID))
	if billingProfileID == "" {
		return nil, errors.New("parameter billingProfileID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileId}", url.PathEscape(billingProfileID))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MarkupRulesClient) getHandleResponse(resp *http.Response) (MarkupRulesClientGetResponse, error) {
	result := MarkupRulesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MarkupRule); err != nil {
		return MarkupRulesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Retrieve all the active markup rules for the partner billing account/billing profile calling the API.
// Generated from API version 2022-10-15-preview
// billingAccountID - BillingAccount ID
// billingProfileID - BillingProfile ID
// options - MarkupRulesClientListOptions contains the optional parameters for the MarkupRulesClient.List method.
func (client *MarkupRulesClient) NewListPager(billingAccountID string, billingProfileID string, options *MarkupRulesClientListOptions) *runtime.Pager[MarkupRulesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[MarkupRulesClientListResponse]{
		More: func(page MarkupRulesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MarkupRulesClientListResponse) (MarkupRulesClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, billingAccountID, billingProfileID, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MarkupRulesClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MarkupRulesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MarkupRulesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *MarkupRulesClient) listCreateRequest(ctx context.Context, billingAccountID string, billingProfileID string, options *MarkupRulesClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/markupRules"
	if billingAccountID == "" {
		return nil, errors.New("parameter billingAccountID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountId}", url.PathEscape(billingAccountID))
	if billingProfileID == "" {
		return nil, errors.New("parameter billingProfileID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileId}", url.PathEscape(billingProfileID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *MarkupRulesClient) listHandleResponse(resp *http.Response) (MarkupRulesClientListResponse, error) {
	result := MarkupRulesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MarkupRulePagedResponse); err != nil {
		return MarkupRulesClientListResponse{}, err
	}
	return result, nil
}
