// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/keyvault/armkeyvault"
	"net/http"
	"net/url"
	"regexp"
)

// NetworkSecurityPerimeterServer is a fake server for instances of the armkeyvault.NetworkSecurityPerimeterClient type.
type NetworkSecurityPerimeterServer struct {
	// GetConfiguration is the fake for method NetworkSecurityPerimeterClient.GetConfiguration
	// HTTP status codes to indicate success: http.StatusOK
	GetConfiguration func(ctx context.Context, resourceGroupName string, vaultName string, associationProxyName string, options *armkeyvault.NetworkSecurityPerimeterClientGetConfigurationOptions) (resp azfake.Responder[armkeyvault.NetworkSecurityPerimeterClientGetConfigurationResponse], errResp azfake.ErrorResponder)

	// NewListConfigurationPager is the fake for method NetworkSecurityPerimeterClient.NewListConfigurationPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListConfigurationPager func(resourceGroupName string, vaultName string, options *armkeyvault.NetworkSecurityPerimeterClientListConfigurationOptions) (resp azfake.PagerResponder[armkeyvault.NetworkSecurityPerimeterClientListConfigurationResponse])
}

// NewNetworkSecurityPerimeterServerTransport creates a new instance of NetworkSecurityPerimeterServerTransport with the provided implementation.
// The returned NetworkSecurityPerimeterServerTransport instance is connected to an instance of armkeyvault.NetworkSecurityPerimeterClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNetworkSecurityPerimeterServerTransport(srv *NetworkSecurityPerimeterServer) *NetworkSecurityPerimeterServerTransport {
	return &NetworkSecurityPerimeterServerTransport{
		srv:                       srv,
		newListConfigurationPager: newTracker[azfake.PagerResponder[armkeyvault.NetworkSecurityPerimeterClientListConfigurationResponse]](),
	}
}

// NetworkSecurityPerimeterServerTransport connects instances of armkeyvault.NetworkSecurityPerimeterClient to instances of NetworkSecurityPerimeterServer.
// Don't use this type directly, use NewNetworkSecurityPerimeterServerTransport instead.
type NetworkSecurityPerimeterServerTransport struct {
	srv                       *NetworkSecurityPerimeterServer
	newListConfigurationPager *tracker[azfake.PagerResponder[armkeyvault.NetworkSecurityPerimeterClientListConfigurationResponse]]
}

// Do implements the policy.Transporter interface for NetworkSecurityPerimeterServerTransport.
func (n *NetworkSecurityPerimeterServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return n.dispatchToMethodFake(req, method)
}

func (n *NetworkSecurityPerimeterServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if networkSecurityPerimeterServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = networkSecurityPerimeterServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "NetworkSecurityPerimeterClient.GetConfiguration":
				res.resp, res.err = n.dispatchGetConfiguration(req)
			case "NetworkSecurityPerimeterClient.NewListConfigurationPager":
				res.resp, res.err = n.dispatchNewListConfigurationPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (n *NetworkSecurityPerimeterServerTransport) dispatchGetConfiguration(req *http.Request) (*http.Response, error) {
	if n.srv.GetConfiguration == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetConfiguration not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KeyVault/vaults/(?P<vaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networkSecurityPerimeterConfigurations/(?P<associationProxyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	vaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vaultName")])
	if err != nil {
		return nil, err
	}
	associationProxyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("associationProxyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.GetConfiguration(req.Context(), resourceGroupNameParam, vaultNameParam, associationProxyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).NetworkSecurityPerimeterConfiguration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NetworkSecurityPerimeterServerTransport) dispatchNewListConfigurationPager(req *http.Request) (*http.Response, error) {
	if n.srv.NewListConfigurationPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListConfigurationPager not implemented")}
	}
	newListConfigurationPager := n.newListConfigurationPager.get(req)
	if newListConfigurationPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.KeyVault/vaults/(?P<vaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networkSecurityPerimeterConfigurations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		vaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vaultName")])
		if err != nil {
			return nil, err
		}
		resp := n.srv.NewListConfigurationPager(resourceGroupNameParam, vaultNameParam, nil)
		newListConfigurationPager = &resp
		n.newListConfigurationPager.add(req, newListConfigurationPager)
	}
	resp, err := server.PagerResponderNext(newListConfigurationPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		n.newListConfigurationPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListConfigurationPager) {
		n.newListConfigurationPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to NetworkSecurityPerimeterServerTransport
var networkSecurityPerimeterServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
