//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// VirtualMachineScaleSetVirtualMachineApplicationsClient contains the methods for the VirtualMachineScaleSetVirtualMachineApplications group.
// Don't use this type directly, use NewVirtualMachineScaleSetVirtualMachineApplicationsClient() instead.
type VirtualMachineScaleSetVirtualMachineApplicationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewVirtualMachineScaleSetVirtualMachineApplicationsClient creates a new instance of VirtualMachineScaleSetVirtualMachineApplicationsClient with the specified values.
//   - subscriptionID - Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewVirtualMachineScaleSetVirtualMachineApplicationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*VirtualMachineScaleSetVirtualMachineApplicationsClient, error) {
	cl, err := arm.NewClient(moduleName+".VirtualMachineScaleSetVirtualMachineApplicationsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &VirtualMachineScaleSetVirtualMachineApplicationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// NewGetPager - Gets an application in a VM scale set instance.
//
// Generated from API version 2023-09-01
//   - resourceGroupName - The name of the resource group.
//   - vmScaleSetName - The name of the VM scale set containing the extension.
//   - instanceID - The instance ID of the virtual machine.
//   - applicationName - The name of the application to query.
//   - options - VirtualMachineScaleSetVirtualMachineApplicationsClientGetOptions contains the optional parameters for the VirtualMachineScaleSetVirtualMachineApplicationsClient.NewGetPager
//     method.
func (client *VirtualMachineScaleSetVirtualMachineApplicationsClient) NewGetPager(resourceGroupName string, vmScaleSetName string, instanceID string, applicationName string, options *VirtualMachineScaleSetVirtualMachineApplicationsClientGetOptions) *runtime.Pager[VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse] {
	return runtime.NewPager(runtime.PagingHandler[VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse]{
		More: func(page VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse) (VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "VirtualMachineScaleSetVirtualMachineApplicationsClient.NewGetPager")
			req, err := client.getCreateRequest(ctx, resourceGroupName, vmScaleSetName, instanceID, applicationName, options)
			if err != nil {
				return VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse{}, runtime.NewResponseError(resp)
			}
			return client.getHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// getCreateRequest creates the Get request.
func (client *VirtualMachineScaleSetVirtualMachineApplicationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, applicationName string, options *VirtualMachineScaleSetVirtualMachineApplicationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/applications/{applicationName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vmScaleSetName == "" {
		return nil, errors.New("parameter vmScaleSetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	if instanceID == "" {
		return nil, errors.New("parameter instanceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceID))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", "instanceView")
	}
	reqQP.Set("api-version", "2023-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *VirtualMachineScaleSetVirtualMachineApplicationsClient) getHandleResponse(resp *http.Response) (VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse, error) {
	result := VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMApplicationWithInstanceView); err != nil {
		return VirtualMachineScaleSetVirtualMachineApplicationsClientGetResponse{}, err
	}
	return result, nil
}

// GetInstanceView - Gets an application in a VM scale set instance with instanceView.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-09-01
//   - resourceGroupName - The name of the resource group.
//   - vmScaleSetName - The name of the VM scale set containing the extension.
//   - instanceID - The instance ID of the virtual machine.
//   - applicationName - The name of the application to query.
//   - options - VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewOptions contains the optional parameters
//     for the VirtualMachineScaleSetVirtualMachineApplicationsClient.GetInstanceView method.
func (client *VirtualMachineScaleSetVirtualMachineApplicationsClient) GetInstanceView(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, applicationName string, options *VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewOptions) (VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewResponse, error) {
	var err error
	const operationName = "VirtualMachineScaleSetVirtualMachineApplicationsClient.GetInstanceView"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getInstanceViewCreateRequest(ctx, resourceGroupName, vmScaleSetName, instanceID, applicationName, options)
	if err != nil {
		return VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewResponse{}, err
	}
	resp, err := client.getInstanceViewHandleResponse(httpResp)
	return resp, err
}

// getInstanceViewCreateRequest creates the GetInstanceView request.
func (client *VirtualMachineScaleSetVirtualMachineApplicationsClient) getInstanceViewCreateRequest(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, applicationName string, options *VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/applications/{applicationName}/instanceView"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vmScaleSetName == "" {
		return nil, errors.New("parameter vmScaleSetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	if instanceID == "" {
		return nil, errors.New("parameter instanceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceID))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInstanceViewHandleResponse handles the GetInstanceView response.
func (client *VirtualMachineScaleSetVirtualMachineApplicationsClient) getInstanceViewHandleResponse(resp *http.Response) (VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewResponse, error) {
	result := VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VMApplicationWithInstanceView); err != nil {
		return VirtualMachineScaleSetVirtualMachineApplicationsClientGetInstanceViewResponse{}, err
	}
	return result, nil
}
