//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsights

import "encoding/json"

func unmarshalActionClassification(rawMsg json.RawMessage) (ActionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ActionClassification
	switch m["kind"] {
	case string(ListActionKindLockUser):
		b = &LockUserAction{}
	case string(ListActionKindUnlockUser):
		b = &UnlockUserAction{}
	default:
		b = &Action{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalActionClassificationArray(rawMsg json.RawMessage) ([]ActionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]ActionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalActionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalAgentConfigurationClassification(rawMsg json.RawMessage) (AgentConfigurationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AgentConfigurationClassification
	switch m["type"] {
	case string(AgentTypeSAP):
		b = &SapAgentConfiguration{}
	default:
		b = &AgentConfiguration{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAlertRuleClassification(rawMsg json.RawMessage) (AlertRuleClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AlertRuleClassification
	switch m["kind"] {
	case string(AlertRuleKindFusion):
		b = &FusionAlertRule{}
	case string(AlertRuleKindMLBehaviorAnalytics):
		b = &MLBehaviorAnalyticsAlertRule{}
	case string(AlertRuleKindMicrosoftSecurityIncidentCreation):
		b = &MicrosoftSecurityIncidentCreationAlertRule{}
	case string(AlertRuleKindNRT):
		b = &NrtAlertRule{}
	case string(AlertRuleKindScheduled):
		b = &ScheduledAlertRule{}
	case string(AlertRuleKindThreatIntelligence):
		b = &ThreatIntelligenceAlertRule{}
	default:
		b = &AlertRule{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAlertRuleClassificationArray(rawMsg json.RawMessage) ([]AlertRuleClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]AlertRuleClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalAlertRuleClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalAlertRuleTemplateClassification(rawMsg json.RawMessage) (AlertRuleTemplateClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AlertRuleTemplateClassification
	switch m["kind"] {
	case string(AlertRuleKindFusion):
		b = &FusionAlertRuleTemplate{}
	case string(AlertRuleKindMLBehaviorAnalytics):
		b = &MLBehaviorAnalyticsAlertRuleTemplate{}
	case string(AlertRuleKindMicrosoftSecurityIncidentCreation):
		b = &MicrosoftSecurityIncidentCreationAlertRuleTemplate{}
	case string(AlertRuleKindNRT):
		b = &NrtAlertRuleTemplate{}
	case string(AlertRuleKindScheduled):
		b = &ScheduledAlertRuleTemplate{}
	case string(AlertRuleKindThreatIntelligence):
		b = &ThreatIntelligenceAlertRuleTemplate{}
	default:
		b = &AlertRuleTemplate{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAlertRuleTemplateClassificationArray(rawMsg json.RawMessage) ([]AlertRuleTemplateClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]AlertRuleTemplateClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalAlertRuleTemplateClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalAutomationRuleActionClassification(rawMsg json.RawMessage) (AutomationRuleActionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AutomationRuleActionClassification
	switch m["actionType"] {
	case string(ActionTypeAddIncidentTask):
		b = &AutomationRuleAddIncidentTaskAction{}
	case string(ActionTypeModifyProperties):
		b = &AutomationRuleModifyPropertiesAction{}
	case string(ActionTypeRunPlaybook):
		b = &AutomationRuleRunPlaybookAction{}
	default:
		b = &AutomationRuleAction{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAutomationRuleActionClassificationArray(rawMsg json.RawMessage) ([]AutomationRuleActionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]AutomationRuleActionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalAutomationRuleActionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalAutomationRuleConditionClassification(rawMsg json.RawMessage) (AutomationRuleConditionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AutomationRuleConditionClassification
	switch m["conditionType"] {
	case string(ConditionTypeBoolean):
		b = &BooleanConditionProperties{}
	case string(ConditionTypeProperty):
		b = &PropertyConditionProperties{}
	case string(ConditionTypePropertyArray):
		b = &PropertyArrayConditionProperties{}
	case string(ConditionTypePropertyArrayChanged):
		b = &PropertyArrayChangedConditionProperties{}
	case string(ConditionTypePropertyChanged):
		b = &PropertyChangedConditionProperties{}
	default:
		b = &AutomationRuleCondition{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalAutomationRuleConditionClassificationArray(rawMsg json.RawMessage) ([]AutomationRuleConditionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]AutomationRuleConditionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalAutomationRuleConditionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalBillingStatisticClassification(rawMsg json.RawMessage) (BillingStatisticClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b BillingStatisticClassification
	switch m["kind"] {
	case string(BillingStatisticKindSapSolutionUsage):
		b = &SapSolutionUsageStatistic{}
	default:
		b = &BillingStatistic{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalBillingStatisticClassificationArray(rawMsg json.RawMessage) ([]BillingStatisticClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]BillingStatisticClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalBillingStatisticClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalCcpAuthConfigClassification(rawMsg json.RawMessage) (CcpAuthConfigClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b CcpAuthConfigClassification
	switch m["type"] {
	case string(CcpAuthTypeAPIKey):
		b = &APIKeyAuthModel{}
	case string(CcpAuthTypeAWS):
		b = &AWSAuthModel{}
	case string(CcpAuthTypeBasic):
		b = &BasicAuthModel{}
	case string(CcpAuthTypeGCP):
		b = &GCPAuthModel{}
	case string(CcpAuthTypeGitHub):
		b = &GitHubAuthModel{}
	case string(CcpAuthTypeJwtToken):
		b = &JwtAuthModel{}
	case string(CcpAuthTypeNone):
		b = &NoneAuthModel{}
	case string(CcpAuthTypeOAuth2):
		b = &OAuthModel{}
	case string(CcpAuthTypeOracle):
		b = &OracleAuthModel{}
	case string(CcpAuthTypeServiceBus):
		b = &GenericBlobSbsAuthModel{}
	case string(CcpAuthTypeSession):
		b = &SessionAuthModel{}
	default:
		b = &CcpAuthConfig{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDataConnectorClassification(rawMsg json.RawMessage) (DataConnectorClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DataConnectorClassification
	switch m["kind"] {
	case string(DataConnectorKindAPIPolling):
		b = &CodelessAPIPollingDataConnector{}
	case string(DataConnectorKindAmazonWebServicesCloudTrail):
		b = &AwsCloudTrailDataConnector{}
	case string(DataConnectorKindAmazonWebServicesS3):
		b = &AwsS3DataConnector{}
	case string(DataConnectorKindAzureActiveDirectory):
		b = &AADDataConnector{}
	case string(DataConnectorKindAzureAdvancedThreatProtection):
		b = &AATPDataConnector{}
	case string(DataConnectorKindAzureSecurityCenter):
		b = &ASCDataConnector{}
	case string(DataConnectorKindDynamics365):
		b = &Dynamics365DataConnector{}
	case string(DataConnectorKindGCP):
		b = &GCPDataConnector{}
	case string(DataConnectorKindGenericUI):
		b = &CodelessUIDataConnector{}
	case string(DataConnectorKindIOT):
		b = &IoTDataConnector{}
	case string(DataConnectorKindMicrosoftCloudAppSecurity):
		b = &MCASDataConnector{}
	case string(DataConnectorKindMicrosoftDefenderAdvancedThreatProtection):
		b = &MDATPDataConnector{}
	case string(DataConnectorKindMicrosoftPurviewInformationProtection):
		b = &MicrosoftPurviewInformationProtectionDataConnector{}
	case string(DataConnectorKindMicrosoftThreatIntelligence):
		b = &MSTIDataConnector{}
	case string(DataConnectorKindMicrosoftThreatProtection):
		b = &MTPDataConnector{}
	case string(DataConnectorKindOffice365):
		b = &OfficeDataConnector{}
	case string(DataConnectorKindOffice365Project):
		b = &Office365ProjectDataConnector{}
	case string(DataConnectorKindOfficeATP):
		b = &OfficeATPDataConnector{}
	case string(DataConnectorKindOfficeIRM):
		b = &OfficeIRMDataConnector{}
	case string(DataConnectorKindOfficePowerBI):
		b = &OfficePowerBIDataConnector{}
	case string(DataConnectorKindRestAPIPoller):
		b = &RestAPIPollerDataConnector{}
	case string(DataConnectorKindThreatIntelligence):
		b = &TIDataConnector{}
	case string(DataConnectorKindThreatIntelligenceTaxii):
		b = &TiTaxiiDataConnector{}
	default:
		b = &DataConnector{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDataConnectorClassificationArray(rawMsg json.RawMessage) ([]DataConnectorClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]DataConnectorClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalDataConnectorClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalDataConnectorDefinitionClassification(rawMsg json.RawMessage) (DataConnectorDefinitionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DataConnectorDefinitionClassification
	switch m["kind"] {
	case string(DataConnectorDefinitionKindCustomizable):
		b = &CustomizableConnectorDefinition{}
	default:
		b = &DataConnectorDefinition{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDataConnectorDefinitionClassificationArray(rawMsg json.RawMessage) ([]DataConnectorDefinitionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]DataConnectorDefinitionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalDataConnectorDefinitionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEntityClassification(rawMsg json.RawMessage) (EntityClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EntityClassification
	switch m["kind"] {
	case string(EntityKindEnumAccount):
		b = &AccountEntity{}
	case string(EntityKindEnumAzureResource):
		b = &AzureResourceEntity{}
	case string(EntityKindEnumBookmark):
		b = &HuntingBookmark{}
	case string(EntityKindEnumCloudApplication):
		b = &CloudApplicationEntity{}
	case string(EntityKindEnumDNSResolution):
		b = &DNSEntity{}
	case string(EntityKindEnumFile):
		b = &FileEntity{}
	case string(EntityKindEnumFileHash):
		b = &FileHashEntity{}
	case string(EntityKindEnumHost):
		b = &HostEntity{}
	case string(EntityKindEnumIoTDevice):
		b = &IoTDeviceEntity{}
	case string(EntityKindEnumIP):
		b = &IPEntity{}
	case string(EntityKindEnumMailCluster):
		b = &MailClusterEntity{}
	case string(EntityKindEnumMailMessage):
		b = &MailMessageEntity{}
	case string(EntityKindEnumMailbox):
		b = &MailboxEntity{}
	case string(EntityKindEnumMalware):
		b = &MalwareEntity{}
	case string(EntityKindEnumNic):
		b = &NicEntity{}
	case string(EntityKindEnumProcess):
		b = &ProcessEntity{}
	case string(EntityKindEnumRegistryKey):
		b = &RegistryKeyEntity{}
	case string(EntityKindEnumRegistryValue):
		b = &RegistryValueEntity{}
	case string(EntityKindEnumSecurityAlert):
		b = &SecurityAlert{}
	case string(EntityKindEnumSecurityGroup):
		b = &SecurityGroupEntity{}
	case string(EntityKindEnumSubmissionMail):
		b = &SubmissionMailEntity{}
	case string(EntityKindEnumURL):
		b = &URLEntity{}
	default:
		b = &Entity{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalEntityClassificationArray(rawMsg json.RawMessage) ([]EntityClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EntityClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEntityClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEntityQueryClassification(rawMsg json.RawMessage) (EntityQueryClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EntityQueryClassification
	switch m["kind"] {
	case string(EntityQueryKindActivity):
		b = &ActivityEntityQuery{}
	case string(EntityQueryKindExpansion):
		b = &ExpansionEntityQuery{}
	default:
		b = &EntityQuery{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalEntityQueryClassificationArray(rawMsg json.RawMessage) ([]EntityQueryClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EntityQueryClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEntityQueryClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEntityQueryItemClassification(rawMsg json.RawMessage) (EntityQueryItemClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EntityQueryItemClassification
	switch m["kind"] {
	case string(EntityQueryKindInsight):
		b = &InsightQueryItem{}
	default:
		b = &EntityQueryItem{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalEntityQueryItemClassificationArray(rawMsg json.RawMessage) ([]EntityQueryItemClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EntityQueryItemClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEntityQueryItemClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEntityQueryTemplateClassification(rawMsg json.RawMessage) (EntityQueryTemplateClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EntityQueryTemplateClassification
	switch m["kind"] {
	case string(EntityQueryTemplateKindActivity):
		b = &ActivityEntityQueryTemplate{}
	default:
		b = &EntityQueryTemplate{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalEntityQueryTemplateClassificationArray(rawMsg json.RawMessage) ([]EntityQueryTemplateClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EntityQueryTemplateClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEntityQueryTemplateClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEntityTimelineItemClassification(rawMsg json.RawMessage) (EntityTimelineItemClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EntityTimelineItemClassification
	switch m["kind"] {
	case string(EntityTimelineKindActivity):
		b = &ActivityTimelineItem{}
	case string(EntityTimelineKindAnomaly):
		b = &AnomalyTimelineItem{}
	case string(EntityTimelineKindBookmark):
		b = &BookmarkTimelineItem{}
	case string(EntityTimelineKindSecurityAlert):
		b = &SecurityAlertTimelineItem{}
	default:
		b = &EntityTimelineItem{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalEntityTimelineItemClassificationArray(rawMsg json.RawMessage) ([]EntityTimelineItemClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EntityTimelineItemClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEntityTimelineItemClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalSecurityMLAnalyticsSettingClassification(rawMsg json.RawMessage) (SecurityMLAnalyticsSettingClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SecurityMLAnalyticsSettingClassification
	switch m["kind"] {
	case string(SecurityMLAnalyticsSettingsKindAnomaly):
		b = &AnomalySecurityMLAnalyticsSettings{}
	default:
		b = &SecurityMLAnalyticsSetting{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalSecurityMLAnalyticsSettingClassificationArray(rawMsg json.RawMessage) ([]SecurityMLAnalyticsSettingClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]SecurityMLAnalyticsSettingClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalSecurityMLAnalyticsSettingClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalSettingsClassification(rawMsg json.RawMessage) (SettingsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SettingsClassification
	switch m["kind"] {
	case string(SettingKindAnomalies):
		b = &Anomalies{}
	case string(SettingKindEntityAnalytics):
		b = &EntityAnalytics{}
	case string(SettingKindEyesOn):
		b = &EyesOn{}
	case string(SettingKindUeba):
		b = &Ueba{}
	default:
		b = &Settings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalSettingsClassificationArray(rawMsg json.RawMessage) ([]SettingsClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]SettingsClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalSettingsClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalSystemsConfigurationClassification(rawMsg json.RawMessage) (SystemsConfigurationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SystemsConfigurationClassification
	switch m["type"] {
	case string(ConfigurationTypeSAP):
		b = &SapSystemsConfiguration{}
	default:
		b = &SystemsConfiguration{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalSystemsConfigurationConnectorClassification(rawMsg json.RawMessage) (SystemsConfigurationConnectorClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SystemsConfigurationConnectorClassification
	switch m["type"] {
	case string(SystemConfigurationConnectorTypeRFC):
		b = &RFCConnector{}
	case string(SystemConfigurationConnectorTypeSapControl):
		b = &SapControlConnector{}
	default:
		b = &SystemsConfigurationConnector{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalTIObjectClassification(rawMsg json.RawMessage) (TIObjectClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b TIObjectClassification
	switch m["kind"] {
	case string(TIObjectKindAttackPattern):
		b = &AttackPattern{}
	case string(TIObjectKindIdentity):
		b = &Identity{}
	case string(TIObjectKindIndicator):
		b = &Indicator{}
	case string(TIObjectKindRelationship):
		b = &Relationship{}
	case string(TIObjectKindThreatActor):
		b = &ThreatActor{}
	default:
		b = &TIObject{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalTIObjectClassificationArray(rawMsg json.RawMessage) ([]TIObjectClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]TIObjectClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalTIObjectClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalThreatIntelligenceInformationClassification(rawMsg json.RawMessage) (ThreatIntelligenceInformationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ThreatIntelligenceInformationClassification
	switch m["kind"] {
	case string(ThreatIntelligenceResourceInnerKindIndicator):
		b = &ThreatIntelligenceIndicatorModel{}
	default:
		b = &ThreatIntelligenceInformation{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalThreatIntelligenceInformationClassificationArray(rawMsg json.RawMessage) ([]ThreatIntelligenceInformationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]ThreatIntelligenceInformationClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalThreatIntelligenceInformationClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}
