//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// PrivateEndpointConnectionProxyControllerServer is a fake server for instances of the armmigrationhub.PrivateEndpointConnectionProxyControllerClient type.
type PrivateEndpointConnectionProxyControllerServer struct {
	// Create is the fake for method PrivateEndpointConnectionProxyControllerClient.Create
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Create func(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, body armmigrationhub.PrivateEndpointConnectionProxy, options *armmigrationhub.PrivateEndpointConnectionProxyControllerClientCreateOptions) (resp azfake.Responder[armmigrationhub.PrivateEndpointConnectionProxyControllerClientCreateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method PrivateEndpointConnectionProxyControllerClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, options *armmigrationhub.PrivateEndpointConnectionProxyControllerClientDeleteOptions) (resp azfake.Responder[armmigrationhub.PrivateEndpointConnectionProxyControllerClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method PrivateEndpointConnectionProxyControllerClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, options *armmigrationhub.PrivateEndpointConnectionProxyControllerClientGetOptions) (resp azfake.Responder[armmigrationhub.PrivateEndpointConnectionProxyControllerClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPrivateEndpointConnectionProxiesPager is the fake for method PrivateEndpointConnectionProxyControllerClient.NewListPrivateEndpointConnectionProxiesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPrivateEndpointConnectionProxiesPager func(resourceGroupName string, migrateProjectName string, options *armmigrationhub.PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesOptions) (resp azfake.PagerResponder[armmigrationhub.PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse])

	// Validate is the fake for method PrivateEndpointConnectionProxyControllerClient.Validate
	// HTTP status codes to indicate success: http.StatusOK
	Validate func(ctx context.Context, resourceGroupName string, migrateProjectName string, pecProxyName string, body armmigrationhub.PrivateEndpointConnectionProxy, options *armmigrationhub.PrivateEndpointConnectionProxyControllerClientValidateOptions) (resp azfake.Responder[armmigrationhub.PrivateEndpointConnectionProxyControllerClientValidateResponse], errResp azfake.ErrorResponder)
}

// NewPrivateEndpointConnectionProxyControllerServerTransport creates a new instance of PrivateEndpointConnectionProxyControllerServerTransport with the provided implementation.
// The returned PrivateEndpointConnectionProxyControllerServerTransport instance is connected to an instance of armmigrationhub.PrivateEndpointConnectionProxyControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPrivateEndpointConnectionProxyControllerServerTransport(srv *PrivateEndpointConnectionProxyControllerServer) *PrivateEndpointConnectionProxyControllerServerTransport {
	return &PrivateEndpointConnectionProxyControllerServerTransport{
		srv: srv,
		newListPrivateEndpointConnectionProxiesPager: newTracker[azfake.PagerResponder[armmigrationhub.PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse]](),
	}
}

// PrivateEndpointConnectionProxyControllerServerTransport connects instances of armmigrationhub.PrivateEndpointConnectionProxyControllerClient to instances of PrivateEndpointConnectionProxyControllerServer.
// Don't use this type directly, use NewPrivateEndpointConnectionProxyControllerServerTransport instead.
type PrivateEndpointConnectionProxyControllerServerTransport struct {
	srv                                          *PrivateEndpointConnectionProxyControllerServer
	newListPrivateEndpointConnectionProxiesPager *tracker[azfake.PagerResponder[armmigrationhub.PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse]]
}

// Do implements the policy.Transporter interface for PrivateEndpointConnectionProxyControllerServerTransport.
func (p *PrivateEndpointConnectionProxyControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PrivateEndpointConnectionProxyControllerClient.Create":
		resp, err = p.dispatchCreate(req)
	case "PrivateEndpointConnectionProxyControllerClient.Delete":
		resp, err = p.dispatchDelete(req)
	case "PrivateEndpointConnectionProxyControllerClient.Get":
		resp, err = p.dispatchGet(req)
	case "PrivateEndpointConnectionProxyControllerClient.NewListPrivateEndpointConnectionProxiesPager":
		resp, err = p.dispatchNewListPrivateEndpointConnectionProxiesPager(req)
	case "PrivateEndpointConnectionProxyControllerClient.Validate":
		resp, err = p.dispatchValidate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PrivateEndpointConnectionProxyControllerServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if p.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/privateEndpointConnectionProxies/(?P<pecProxyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.PrivateEndpointConnectionProxy](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	pecProxyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pecProxyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Create(req.Context(), resourceGroupNameParam, migrateProjectNameParam, pecProxyNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PrivateEndpointConnectionProxy, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).RetryAfter; val != nil {
		resp.Header.Set("Retry-After", strconv.FormatInt(int64(*val), 10))
	}
	return resp, nil
}

func (p *PrivateEndpointConnectionProxyControllerServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if p.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/privateEndpointConnectionProxies/(?P<pecProxyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	pecProxyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pecProxyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Delete(req.Context(), resourceGroupNameParam, migrateProjectNameParam, pecProxyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Interface, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PrivateEndpointConnectionProxyControllerServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/privateEndpointConnectionProxies/(?P<pecProxyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	pecProxyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pecProxyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), resourceGroupNameParam, migrateProjectNameParam, pecProxyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PrivateEndpointConnectionProxy, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PrivateEndpointConnectionProxyControllerServerTransport) dispatchNewListPrivateEndpointConnectionProxiesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListPrivateEndpointConnectionProxiesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPrivateEndpointConnectionProxiesPager not implemented")}
	}
	newListPrivateEndpointConnectionProxiesPager := p.newListPrivateEndpointConnectionProxiesPager.get(req)
	if newListPrivateEndpointConnectionProxiesPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/privateEndpointConnectionProxies`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewListPrivateEndpointConnectionProxiesPager(resourceGroupNameParam, migrateProjectNameParam, nil)
		newListPrivateEndpointConnectionProxiesPager = &resp
		p.newListPrivateEndpointConnectionProxiesPager.add(req, newListPrivateEndpointConnectionProxiesPager)
		server.PagerResponderInjectNextLinks(newListPrivateEndpointConnectionProxiesPager, req, func(page *armmigrationhub.PrivateEndpointConnectionProxyControllerClientListPrivateEndpointConnectionProxiesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPrivateEndpointConnectionProxiesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListPrivateEndpointConnectionProxiesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPrivateEndpointConnectionProxiesPager) {
		p.newListPrivateEndpointConnectionProxiesPager.remove(req)
	}
	return resp, nil
}

func (p *PrivateEndpointConnectionProxyControllerServerTransport) dispatchValidate(req *http.Request) (*http.Response, error) {
	if p.srv.Validate == nil {
		return nil, &nonRetriableError{errors.New("fake for method Validate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/privateEndpointConnectionProxies/(?P<pecProxyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.PrivateEndpointConnectionProxy](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	pecProxyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("pecProxyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Validate(req.Context(), resourceGroupNameParam, migrateProjectNameParam, pecProxyNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PrivateEndpointConnectionProxy, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
