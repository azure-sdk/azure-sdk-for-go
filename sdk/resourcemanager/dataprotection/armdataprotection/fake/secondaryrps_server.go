//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dataprotection/armdataprotection/v2"
	"net/http"
	"net/url"
	"regexp"
)

// SecondaryRPsServer is a fake server for instances of the armdataprotection.SecondaryRPsClient type.
type SecondaryRPsServer struct {
	// NewFetchPager is the fake for method SecondaryRPsClient.NewFetchPager
	// HTTP status codes to indicate success: http.StatusOK
	NewFetchPager func(resourceGroupName string, location string, parameters armdataprotection.FetchSecondaryRPsRequestParameters, options *armdataprotection.SecondaryRPsClientFetchOptions) (resp azfake.PagerResponder[armdataprotection.SecondaryRPsClientFetchResponse])
}

// NewSecondaryRPsServerTransport creates a new instance of SecondaryRPsServerTransport with the provided implementation.
// The returned SecondaryRPsServerTransport instance is connected to an instance of armdataprotection.SecondaryRPsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSecondaryRPsServerTransport(srv *SecondaryRPsServer) *SecondaryRPsServerTransport {
	return &SecondaryRPsServerTransport{
		srv:           srv,
		newFetchPager: newTracker[azfake.PagerResponder[armdataprotection.SecondaryRPsClientFetchResponse]](),
	}
}

// SecondaryRPsServerTransport connects instances of armdataprotection.SecondaryRPsClient to instances of SecondaryRPsServer.
// Don't use this type directly, use NewSecondaryRPsServerTransport instead.
type SecondaryRPsServerTransport struct {
	srv           *SecondaryRPsServer
	newFetchPager *tracker[azfake.PagerResponder[armdataprotection.SecondaryRPsClientFetchResponse]]
}

// Do implements the policy.Transporter interface for SecondaryRPsServerTransport.
func (s *SecondaryRPsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SecondaryRPsClient.NewFetchPager":
		resp, err = s.dispatchNewFetchPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SecondaryRPsServerTransport) dispatchNewFetchPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewFetchPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewFetchPager not implemented")}
	}
	newFetchPager := s.newFetchPager.get(req)
	if newFetchPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DataProtection/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/fetchSecondaryRecoveryPoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[armdataprotection.FetchSecondaryRPsRequestParameters](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armdataprotection.SecondaryRPsClientFetchOptions
		if filterParam != nil || skipTokenParam != nil {
			options = &armdataprotection.SecondaryRPsClientFetchOptions{
				Filter:    filterParam,
				SkipToken: skipTokenParam,
			}
		}
		resp := s.srv.NewFetchPager(resourceGroupNameParam, locationParam, body, options)
		newFetchPager = &resp
		s.newFetchPager.add(req, newFetchPager)
		server.PagerResponderInjectNextLinks(newFetchPager, req, func(page *armdataprotection.SecondaryRPsClientFetchResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newFetchPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newFetchPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newFetchPager) {
		s.newFetchPager.remove(req)
	}
	return resp, nil
}
