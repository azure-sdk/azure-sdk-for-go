// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armhelp

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SolutionResourcesClient contains the methods for the SolutionResources group.
// Don't use this type directly, use NewSolutionResourcesClient() instead.
type SolutionResourcesClient struct {
	internal *arm.Client
}

// NewSolutionResourcesClient creates a new instance of SolutionResourcesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSolutionResourcesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SolutionResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SolutionResourcesClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreate - Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and requiredInputs’
// from discovery solutions. <br/> Azure solutions comprise a comprehensive library of self-help resources that have been
// thoughtfully curated by Azure engineers to aid customers in resolving typical troubleshooting issues. These solutions encompass:
// <br/> (1.) Dynamic and context-aware diagnostics, guided troubleshooting wizards, and data visualizations. <br/> (2.) Rich
// instructional video tutorials and illustrative diagrams and images. <br/> (3.) Thoughtfully assembled textual troubleshooting
// instructions. <br/> All these components are seamlessly converged into unified solutions tailored to address a specific
// support problem area.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - solutionResourceName - Solution resource Name.
//   - solutionRequestBody - The required request body for this solution resource creation.
//   - options - SolutionResourcesClientBeginCreateOptions contains the optional parameters for the SolutionResourcesClient.BeginCreate
//     method.
func (client *SolutionResourcesClient) BeginCreate(ctx context.Context, scope string, solutionResourceName string, solutionRequestBody SolutionResource, options *SolutionResourcesClientBeginCreateOptions) (*runtime.Poller[SolutionResourcesClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, scope, solutionResourceName, solutionRequestBody, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SolutionResourcesClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SolutionResourcesClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and requiredInputs’
// from discovery solutions. <br/> Azure solutions comprise a comprehensive library of self-help resources that have been
// thoughtfully curated by Azure engineers to aid customers in resolving typical troubleshooting issues. These solutions encompass:
// <br/> (1.) Dynamic and context-aware diagnostics, guided troubleshooting wizards, and data visualizations. <br/> (2.) Rich
// instructional video tutorials and illustrative diagrams and images. <br/> (3.) Thoughtfully assembled textual troubleshooting
// instructions. <br/> All these components are seamlessly converged into unified solutions tailored to address a specific
// support problem area.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
func (client *SolutionResourcesClient) create(ctx context.Context, scope string, solutionResourceName string, solutionRequestBody SolutionResource, options *SolutionResourcesClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "SolutionResourcesClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, scope, solutionResourceName, solutionRequestBody, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *SolutionResourcesClient) createCreateRequest(ctx context.Context, scope string, solutionResourceName string, solutionRequestBody SolutionResource, _ *SolutionResourcesClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if solutionResourceName == "" {
		return nil, errors.New("parameter solutionResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{solutionResourceName}", url.PathEscape(solutionResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, solutionRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Get the solution using the applicable solutionResourceName while creating the solution.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - solutionResourceName - Solution resource Name.
//   - options - SolutionResourcesClientGetOptions contains the optional parameters for the SolutionResourcesClient.Get method.
func (client *SolutionResourcesClient) Get(ctx context.Context, scope string, solutionResourceName string, options *SolutionResourcesClientGetOptions) (SolutionResourcesClientGetResponse, error) {
	var err error
	const operationName = "SolutionResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, scope, solutionResourceName, options)
	if err != nil {
		return SolutionResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SolutionResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SolutionResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SolutionResourcesClient) getCreateRequest(ctx context.Context, scope string, solutionResourceName string, _ *SolutionResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if solutionResourceName == "" {
		return nil, errors.New("parameter solutionResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{solutionResourceName}", url.PathEscape(solutionResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SolutionResourcesClient) getHandleResponse(resp *http.Response) (SolutionResourcesClientGetResponse, error) {
	result := SolutionResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SolutionResource); err != nil {
		return SolutionResourcesClientGetResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update the requiredInputs or additional information needed to execute the solution
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - solutionResourceName - Solution resource Name.
//   - solutionPatchRequestBody - The required request body for updating a solution resource.
//   - options - SolutionResourcesClientBeginUpdateOptions contains the optional parameters for the SolutionResourcesClient.BeginUpdate
//     method.
func (client *SolutionResourcesClient) BeginUpdate(ctx context.Context, scope string, solutionResourceName string, solutionPatchRequestBody SolutionPatchRequestBody, options *SolutionResourcesClientBeginUpdateOptions) (*runtime.Poller[SolutionResourcesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, scope, solutionResourceName, solutionPatchRequestBody, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SolutionResourcesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SolutionResourcesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update the requiredInputs or additional information needed to execute the solution
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
func (client *SolutionResourcesClient) update(ctx context.Context, scope string, solutionResourceName string, solutionPatchRequestBody SolutionPatchRequestBody, options *SolutionResourcesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "SolutionResourcesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, scope, solutionResourceName, solutionPatchRequestBody, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *SolutionResourcesClient) updateCreateRequest(ctx context.Context, scope string, solutionResourceName string, solutionPatchRequestBody SolutionPatchRequestBody, _ *SolutionResourcesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if solutionResourceName == "" {
		return nil, errors.New("parameter solutionResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{solutionResourceName}", url.PathEscape(solutionResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, solutionPatchRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}

// WarmUp - Warm up the solution resource by preloading asynchronous diagnostics results into cache
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - scope - The fully qualified Azure Resource manager identifier of the resource.
//   - solutionResourceName - Solution resource Name.
//   - options - SolutionResourcesClientWarmUpOptions contains the optional parameters for the SolutionResourcesClient.WarmUp
//     method.
func (client *SolutionResourcesClient) WarmUp(ctx context.Context, scope string, solutionResourceName string, options *SolutionResourcesClientWarmUpOptions) (SolutionResourcesClientWarmUpResponse, error) {
	var err error
	const operationName = "SolutionResourcesClient.WarmUp"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.warmUpCreateRequest(ctx, scope, solutionResourceName, options)
	if err != nil {
		return SolutionResourcesClientWarmUpResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SolutionResourcesClientWarmUpResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SolutionResourcesClientWarmUpResponse{}, err
	}
	return SolutionResourcesClientWarmUpResponse{}, nil
}

// warmUpCreateRequest creates the WarmUp request.
func (client *SolutionResourcesClient) warmUpCreateRequest(ctx context.Context, scope string, solutionResourceName string, options *SolutionResourcesClientWarmUpOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}/warmup"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if solutionResourceName == "" {
		return nil, errors.New("parameter solutionResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{solutionResourceName}", url.PathEscape(solutionResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.SolutionWarmUpRequestBody != nil {
		req.Raw().Header["Content-Type"] = []string{"application/json"}
		if err := runtime.MarshalAsJSON(req, *options.SolutionWarmUpRequestBody); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}
