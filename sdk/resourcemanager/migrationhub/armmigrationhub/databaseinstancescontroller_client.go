//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationhub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// DatabaseInstancesControllerClient contains the methods for the DatabaseInstancesController group.
// Don't use this type directly, use NewDatabaseInstancesControllerClient() instead.
type DatabaseInstancesControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDatabaseInstancesControllerClient creates a new instance of DatabaseInstancesControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDatabaseInstancesControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DatabaseInstancesControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DatabaseInstancesControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// GetDatabaseInstance - Gets a database instance in the migrate project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - databaseInstanceName - Unique name of a database instance in Azure migration hub.
//   - options - DatabaseInstancesControllerClientGetDatabaseInstanceOptions contains the optional parameters for the DatabaseInstancesControllerClient.GetDatabaseInstance
//     method.
func (client *DatabaseInstancesControllerClient) GetDatabaseInstance(ctx context.Context, resourceGroupName string, migrateProjectName string, databaseInstanceName string, options *DatabaseInstancesControllerClientGetDatabaseInstanceOptions) (DatabaseInstancesControllerClientGetDatabaseInstanceResponse, error) {
	var err error
	const operationName = "DatabaseInstancesControllerClient.GetDatabaseInstance"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDatabaseInstanceCreateRequest(ctx, resourceGroupName, migrateProjectName, databaseInstanceName, options)
	if err != nil {
		return DatabaseInstancesControllerClientGetDatabaseInstanceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatabaseInstancesControllerClientGetDatabaseInstanceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DatabaseInstancesControllerClientGetDatabaseInstanceResponse{}, err
	}
	resp, err := client.getDatabaseInstanceHandleResponse(httpResp)
	return resp, err
}

// getDatabaseInstanceCreateRequest creates the GetDatabaseInstance request.
func (client *DatabaseInstancesControllerClient) getDatabaseInstanceCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, databaseInstanceName string, options *DatabaseInstancesControllerClientGetDatabaseInstanceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/databaseInstances/{databaseInstanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if databaseInstanceName == "" {
		return nil, errors.New("parameter databaseInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{databaseInstanceName}", url.PathEscape(databaseInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDatabaseInstanceHandleResponse handles the GetDatabaseInstance response.
func (client *DatabaseInstancesControllerClient) getDatabaseInstanceHandleResponse(resp *http.Response) (DatabaseInstancesControllerClientGetDatabaseInstanceResponse, error) {
	result := DatabaseInstancesControllerClientGetDatabaseInstanceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DatabaseInstance); err != nil {
		return DatabaseInstancesControllerClientGetDatabaseInstanceResponse{}, err
	}
	return result, nil
}

// NewListDatabaseInstancesPager - Gets a list of database instances in the migrate project.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - options - DatabaseInstancesControllerClientListDatabaseInstancesOptions contains the optional parameters for the DatabaseInstancesControllerClient.NewListDatabaseInstancesPager
//     method.
func (client *DatabaseInstancesControllerClient) NewListDatabaseInstancesPager(resourceGroupName string, migrateProjectName string, options *DatabaseInstancesControllerClientListDatabaseInstancesOptions) *runtime.Pager[DatabaseInstancesControllerClientListDatabaseInstancesResponse] {
	return runtime.NewPager(runtime.PagingHandler[DatabaseInstancesControllerClientListDatabaseInstancesResponse]{
		More: func(page DatabaseInstancesControllerClientListDatabaseInstancesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DatabaseInstancesControllerClientListDatabaseInstancesResponse) (DatabaseInstancesControllerClientListDatabaseInstancesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DatabaseInstancesControllerClient.NewListDatabaseInstancesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDatabaseInstancesCreateRequest(ctx, resourceGroupName, migrateProjectName, options)
			}, nil)
			if err != nil {
				return DatabaseInstancesControllerClientListDatabaseInstancesResponse{}, err
			}
			return client.listDatabaseInstancesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listDatabaseInstancesCreateRequest creates the ListDatabaseInstances request.
func (client *DatabaseInstancesControllerClient) listDatabaseInstancesCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, options *DatabaseInstancesControllerClientListDatabaseInstancesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/databaseInstances"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.PageSize != nil {
		reqQP.Set("pageSize", strconv.FormatInt(int64(*options.PageSize), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDatabaseInstancesHandleResponse handles the ListDatabaseInstances response.
func (client *DatabaseInstancesControllerClient) listDatabaseInstancesHandleResponse(resp *http.Response) (DatabaseInstancesControllerClientListDatabaseInstancesResponse, error) {
	result := DatabaseInstancesControllerClientListDatabaseInstancesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DatabaseInstanceCollection); err != nil {
		return DatabaseInstancesControllerClientListDatabaseInstancesResponse{}, err
	}
	return result, nil
}
