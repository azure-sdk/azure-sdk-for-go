//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armchanges

import "time"

// CloudError - An error response from a policy operation.
type CloudError struct {
	// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows
	// the OData error response format.)
	Error *ErrorResponse `json:"error,omitempty"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.)
type ErrorResponse struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorResponse `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// Identity for the resource. Policy assignments support a maximum of one identity. That is either a system assigned identity
// or a single user assigned identity.
type Identity struct {
	// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
	Type *ResourceIdentityType `json:"type,omitempty"`

	// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the
	// form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*UserAssignedIdentitiesValue `json:"userAssignedIdentities,omitempty"`

	// READ-ONLY; The principal ID of the resource identity. This property will only be provided for a system assigned identity
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant ID of the resource identity. This property will only be provided for a system assigned identity
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// NonComplianceMessage - A message that describes why a resource is non-compliant with the policy. This is shown in 'deny'
// error messages and on resource's non-compliant compliance results.
type NonComplianceMessage struct {
	// REQUIRED; A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages
	// and on resource's non-compliant compliance results.
	Message *string `json:"message,omitempty"`

	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable
	// if the policy assignment assigns a policy set definition. If this is not provided
	// the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty"`
}

// ParameterDefinitionsValue - The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValue struct {
	// The allowed values for the parameter.
	AllowedValues []interface{} `json:"allowedValues,omitempty"`

	// The default value for the parameter if no value is provided.
	DefaultValue interface{} `json:"defaultValue,omitempty"`

	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueMetadata `json:"metadata,omitempty"`

	// The data type of the parameter.
	Type *ParameterType `json:"type,omitempty"`
}

// ParameterDefinitionsValueMetadata - General metadata for the parameter.
type ParameterDefinitionsValueMetadata struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]interface{}

	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during
	// policy assignment. This property is useful in case you wish to assign
	// permissions outside the assignment scope.
	AssignPermissions *bool `json:"assignPermissions,omitempty"`

	// The description of the parameter.
	Description *string `json:"description,omitempty"`

	// The display name for the parameter.
	DisplayName *string `json:"displayName,omitempty"`

	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose
	// from.
	StrongType *string `json:"strongType,omitempty"`
}

// ParameterValuesValue - The value of a parameter.
type ParameterValuesValue struct {
	// The value of the parameter.
	Value interface{} `json:"value,omitempty"`
}

// PolicyAssignment - The policy assignment.
type PolicyAssignment struct {
	// The managed identity associated with the policy assignment.
	Identity *Identity `json:"identity,omitempty"`

	// The location of the policy assignment. Only required when utilizing managed identity.
	Location *string `json:"location,omitempty"`

	// Properties for the policy assignment.
	Properties *PolicyAssignmentProperties `json:"properties,omitempty"`

	// READ-ONLY; The ID of the policy assignment.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the policy assignment.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The system metadata relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the policy assignment.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PolicyAssignmentListResult - List of policy assignments.
type PolicyAssignmentListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// An array of policy assignments.
	Value []*PolicyAssignment `json:"value,omitempty"`
}

// PolicyAssignmentProperties - The policy assignment properties.
type PolicyAssignmentProperties struct {
	// This message will be part of response in case of policy violation.
	Description *string `json:"description,omitempty"`

	// The display name of the policy assignment.
	DisplayName *string `json:"displayName,omitempty"`

	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode *EnforcementMode `json:"enforcementMode,omitempty"`

	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `json:"metadata,omitempty"`

	// The messages that describe why a resource is non-compliant with the policy.
	NonComplianceMessages []*NonComplianceMessage `json:"nonComplianceMessages,omitempty"`

	// The policy's excluded scopes.
	NotScopes []*string `json:"notScopes,omitempty"`

	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters map[string]*ParameterValuesValue `json:"parameters,omitempty"`

	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`

	// READ-ONLY; The scope for the policy assignment.
	Scope *string `json:"scope,omitempty" azure:"ro"`
}

type PolicyAssignmentUpdate struct {
	// The managed identity associated with the policy assignment.
	Identity *Identity `json:"identity,omitempty"`

	// The location of the policy assignment. Only required when utilizing managed identity.
	Location *string `json:"location,omitempty"`
}

// PolicyAssignmentsClientCreateByIDOptions contains the optional parameters for the PolicyAssignmentsClient.CreateByID method.
type PolicyAssignmentsClientCreateByIDOptions struct {
	// placeholder for future optional parameters
}

// PolicyAssignmentsClientCreateOptions contains the optional parameters for the PolicyAssignmentsClient.Create method.
type PolicyAssignmentsClientCreateOptions struct {
	// placeholder for future optional parameters
}

// PolicyAssignmentsClientDeleteByIDOptions contains the optional parameters for the PolicyAssignmentsClient.DeleteByID method.
type PolicyAssignmentsClientDeleteByIDOptions struct {
	// placeholder for future optional parameters
}

// PolicyAssignmentsClientDeleteOptions contains the optional parameters for the PolicyAssignmentsClient.Delete method.
type PolicyAssignmentsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PolicyAssignmentsClientGetByIDOptions contains the optional parameters for the PolicyAssignmentsClient.GetByID method.
type PolicyAssignmentsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// PolicyAssignmentsClientGetOptions contains the optional parameters for the PolicyAssignmentsClient.Get method.
type PolicyAssignmentsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PolicyAssignmentsClientListForManagementGroupOptions contains the optional parameters for the PolicyAssignmentsClient.ListForManagementGroup
// method.
type PolicyAssignmentsClientListForManagementGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicyAssignmentsClientListForResourceGroupOptions contains the optional parameters for the PolicyAssignmentsClient.ListForResourceGroup
// method.
type PolicyAssignmentsClientListForResourceGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicyAssignmentsClientListForResourceOptions contains the optional parameters for the PolicyAssignmentsClient.ListForResource
// method.
type PolicyAssignmentsClientListForResourceOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicyAssignmentsClientListOptions contains the optional parameters for the PolicyAssignmentsClient.List method.
type PolicyAssignmentsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicyAssignmentsClientUpdateByIDOptions contains the optional parameters for the PolicyAssignmentsClient.UpdateByID method.
type PolicyAssignmentsClientUpdateByIDOptions struct {
	// placeholder for future optional parameters
}

// PolicyAssignmentsClientUpdateOptions contains the optional parameters for the PolicyAssignmentsClient.Update method.
type PolicyAssignmentsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// PolicyDefinition - The policy definition.
type PolicyDefinition struct {
	// The policy definition properties.
	Properties *PolicyDefinitionProperties `json:"properties,omitempty"`

	// READ-ONLY; The ID of the policy definition.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the policy definition.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The system metadata relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource (Microsoft.Authorization/policyDefinitions).
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PolicyDefinitionGroup - The policy definition group.
type PolicyDefinitionGroup struct {
	// REQUIRED; The name of the group.
	Name *string `json:"name,omitempty"`

	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataID *string `json:"additionalMetadataId,omitempty"`

	// The group's category.
	Category *string `json:"category,omitempty"`

	// The group's description.
	Description *string `json:"description,omitempty"`

	// The group's display name.
	DisplayName *string `json:"displayName,omitempty"`
}

// PolicyDefinitionListResult - List of policy definitions.
type PolicyDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// An array of policy definitions.
	Value []*PolicyDefinition `json:"value,omitempty"`
}

// PolicyDefinitionProperties - The policy definition properties.
type PolicyDefinitionProperties struct {
	// The policy definition description.
	Description *string `json:"description,omitempty"`

	// The display name of the policy definition.
	DisplayName *string `json:"displayName,omitempty"`

	// The policy definition metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `json:"metadata,omitempty"`

	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string `json:"mode,omitempty"`

	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters map[string]*ParameterDefinitionsValue `json:"parameters,omitempty"`

	// The policy rule.
	PolicyRule interface{} `json:"policyRule,omitempty"`

	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *PolicyType `json:"policyType,omitempty"`
}

// PolicyDefinitionReference - The policy definition reference.
type PolicyDefinitionReference struct {
	// REQUIRED; The ID of the policy definition or policy set definition.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`

	// The name of the groups that this policy definition reference belongs to.
	GroupNames []*string `json:"groupNames,omitempty"`

	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]*ParameterValuesValue `json:"parameters,omitempty"`

	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty"`
}

// PolicyDefinitionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the PolicyDefinitionsClient.CreateOrUpdateAtManagementGroup
// method.
type PolicyDefinitionsClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// PolicyDefinitionsClientCreateOrUpdateOptions contains the optional parameters for the PolicyDefinitionsClient.CreateOrUpdate
// method.
type PolicyDefinitionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PolicyDefinitionsClientDeleteAtManagementGroupOptions contains the optional parameters for the PolicyDefinitionsClient.DeleteAtManagementGroup
// method.
type PolicyDefinitionsClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// PolicyDefinitionsClientDeleteOptions contains the optional parameters for the PolicyDefinitionsClient.Delete method.
type PolicyDefinitionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PolicyDefinitionsClientGetAtManagementGroupOptions contains the optional parameters for the PolicyDefinitionsClient.GetAtManagementGroup
// method.
type PolicyDefinitionsClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// PolicyDefinitionsClientGetBuiltInOptions contains the optional parameters for the PolicyDefinitionsClient.GetBuiltIn method.
type PolicyDefinitionsClientGetBuiltInOptions struct {
	// placeholder for future optional parameters
}

// PolicyDefinitionsClientGetOptions contains the optional parameters for the PolicyDefinitionsClient.Get method.
type PolicyDefinitionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PolicyDefinitionsClientListBuiltInOptions contains the optional parameters for the PolicyDefinitionsClient.ListBuiltIn
// method.
type PolicyDefinitionsClientListBuiltInOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicyDefinitionsClientListByManagementGroupOptions contains the optional parameters for the PolicyDefinitionsClient.ListByManagementGroup
// method.
type PolicyDefinitionsClientListByManagementGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicyDefinitionsClientListOptions contains the optional parameters for the PolicyDefinitionsClient.List method.
type PolicyDefinitionsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicySetDefinition - The policy set definition.
type PolicySetDefinition struct {
	// The policy definition properties.
	Properties *PolicySetDefinitionProperties `json:"properties,omitempty"`

	// READ-ONLY; The ID of the policy set definition.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the policy set definition.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The system metadata relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource (Microsoft.Authorization/policySetDefinitions).
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PolicySetDefinitionListResult - List of policy set definitions.
type PolicySetDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// An array of policy set definitions.
	Value []*PolicySetDefinition `json:"value,omitempty"`
}

// PolicySetDefinitionProperties - The policy set definition properties.
type PolicySetDefinitionProperties struct {
	// REQUIRED; An array of policy definition references.
	PolicyDefinitions []*PolicyDefinitionReference `json:"policyDefinitions,omitempty"`

	// The policy set definition description.
	Description *string `json:"description,omitempty"`

	// The display name of the policy set definition.
	DisplayName *string `json:"displayName,omitempty"`

	// The policy set definition metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `json:"metadata,omitempty"`

	// The policy set definition parameters that can be used in policy definition references.
	Parameters map[string]*ParameterDefinitionsValue `json:"parameters,omitempty"`

	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []*PolicyDefinitionGroup `json:"policyDefinitionGroups,omitempty"`

	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *PolicyType `json:"policyType,omitempty"`
}

// PolicySetDefinitionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the PolicySetDefinitionsClient.CreateOrUpdateAtManagementGroup
// method.
type PolicySetDefinitionsClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// PolicySetDefinitionsClientCreateOrUpdateOptions contains the optional parameters for the PolicySetDefinitionsClient.CreateOrUpdate
// method.
type PolicySetDefinitionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PolicySetDefinitionsClientDeleteAtManagementGroupOptions contains the optional parameters for the PolicySetDefinitionsClient.DeleteAtManagementGroup
// method.
type PolicySetDefinitionsClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// PolicySetDefinitionsClientDeleteOptions contains the optional parameters for the PolicySetDefinitionsClient.Delete method.
type PolicySetDefinitionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PolicySetDefinitionsClientGetAtManagementGroupOptions contains the optional parameters for the PolicySetDefinitionsClient.GetAtManagementGroup
// method.
type PolicySetDefinitionsClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// PolicySetDefinitionsClientGetBuiltInOptions contains the optional parameters for the PolicySetDefinitionsClient.GetBuiltIn
// method.
type PolicySetDefinitionsClientGetBuiltInOptions struct {
	// placeholder for future optional parameters
}

// PolicySetDefinitionsClientGetOptions contains the optional parameters for the PolicySetDefinitionsClient.Get method.
type PolicySetDefinitionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PolicySetDefinitionsClientListBuiltInOptions contains the optional parameters for the PolicySetDefinitionsClient.ListBuiltIn
// method.
type PolicySetDefinitionsClientListBuiltInOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicySetDefinitionsClientListByManagementGroupOptions contains the optional parameters for the PolicySetDefinitionsClient.ListByManagementGroup
// method.
type PolicySetDefinitionsClientListByManagementGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// PolicySetDefinitionsClientListOptions contains the optional parameters for the PolicySetDefinitionsClient.List method.
type PolicySetDefinitionsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string
	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

type UserAssignedIdentitiesValue struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}
