// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MachineAssessmentsV2OperationsClient contains the methods for the MachineAssessmentsV2Operations group.
// Don't use this type directly, use NewMachineAssessmentsV2OperationsClient() instead.
type MachineAssessmentsV2OperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewMachineAssessmentsV2OperationsClient creates a new instance of MachineAssessmentsV2OperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewMachineAssessmentsV2OperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MachineAssessmentsV2OperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &MachineAssessmentsV2OperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Create a MachineAssessmentV2
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-03-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - assessmentName - Machine Assessment V2 ARM name
//   - resource - Resource create parameters.
//   - options - MachineAssessmentsV2OperationsClientBeginCreateOptions contains the optional parameters for the MachineAssessmentsV2OperationsClient.BeginCreate
//     method.
func (client *MachineAssessmentsV2OperationsClient) BeginCreate(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, resource MachineAssessmentV2, options *MachineAssessmentsV2OperationsClientBeginCreateOptions) (*runtime.Poller[MachineAssessmentsV2OperationsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, projectName, assessmentName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MachineAssessmentsV2OperationsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MachineAssessmentsV2OperationsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Create a MachineAssessmentV2
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-03-preview
func (client *MachineAssessmentsV2OperationsClient) create(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, resource MachineAssessmentV2, options *MachineAssessmentsV2OperationsClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "MachineAssessmentsV2OperationsClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, projectName, assessmentName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *MachineAssessmentsV2OperationsClient) createCreateRequest(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, resource MachineAssessmentV2, _ *MachineAssessmentsV2OperationsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if assessmentName == "" {
		return nil, errors.New("parameter assessmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentName}", url.PathEscape(assessmentName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// Delete - Delete a MachineAssessmentV2
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-03-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - assessmentName - Machine Assessment V2 ARM name
//   - options - MachineAssessmentsV2OperationsClientDeleteOptions contains the optional parameters for the MachineAssessmentsV2OperationsClient.Delete
//     method.
func (client *MachineAssessmentsV2OperationsClient) Delete(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, options *MachineAssessmentsV2OperationsClientDeleteOptions) (MachineAssessmentsV2OperationsClientDeleteResponse, error) {
	var err error
	const operationName = "MachineAssessmentsV2OperationsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, projectName, assessmentName, options)
	if err != nil {
		return MachineAssessmentsV2OperationsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MachineAssessmentsV2OperationsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return MachineAssessmentsV2OperationsClientDeleteResponse{}, err
	}
	return MachineAssessmentsV2OperationsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *MachineAssessmentsV2OperationsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, _ *MachineAssessmentsV2OperationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if assessmentName == "" {
		return nil, errors.New("parameter assessmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentName}", url.PathEscape(assessmentName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDownloadURL - Get download URL for the assessment report.
//
// Get the URL for downloading the assessment in a report format.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-03-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - assessmentName - Machine Assessment V2 ARM name
//   - body - The content of the action request
//   - options - MachineAssessmentsV2OperationsClientBeginDownloadURLOptions contains the optional parameters for the MachineAssessmentsV2OperationsClient.BeginDownloadURL
//     method.
func (client *MachineAssessmentsV2OperationsClient) BeginDownloadURL(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, body DownloadURLRequest, options *MachineAssessmentsV2OperationsClientBeginDownloadURLOptions) (*runtime.Poller[MachineAssessmentsV2OperationsClientDownloadURLResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.downloadURL(ctx, resourceGroupName, projectName, assessmentName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MachineAssessmentsV2OperationsClientDownloadURLResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MachineAssessmentsV2OperationsClientDownloadURLResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DownloadURL - Get download URL for the assessment report.
//
// Get the URL for downloading the assessment in a report format.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-03-preview
func (client *MachineAssessmentsV2OperationsClient) downloadURL(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, body DownloadURLRequest, options *MachineAssessmentsV2OperationsClientBeginDownloadURLOptions) (*http.Response, error) {
	var err error
	const operationName = "MachineAssessmentsV2OperationsClient.BeginDownloadURL"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.downloadURLCreateRequest(ctx, resourceGroupName, projectName, assessmentName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// downloadURLCreateRequest creates the DownloadURL request.
func (client *MachineAssessmentsV2OperationsClient) downloadURLCreateRequest(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, body DownloadURLRequest, _ *MachineAssessmentsV2OperationsClientBeginDownloadURLOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/downloadUrl"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if assessmentName == "" {
		return nil, errors.New("parameter assessmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentName}", url.PathEscape(assessmentName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Get a MachineAssessmentV2
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-03-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - assessmentName - Machine Assessment V2 ARM name
//   - options - MachineAssessmentsV2OperationsClientGetOptions contains the optional parameters for the MachineAssessmentsV2OperationsClient.Get
//     method.
func (client *MachineAssessmentsV2OperationsClient) Get(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, options *MachineAssessmentsV2OperationsClientGetOptions) (MachineAssessmentsV2OperationsClientGetResponse, error) {
	var err error
	const operationName = "MachineAssessmentsV2OperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, projectName, assessmentName, options)
	if err != nil {
		return MachineAssessmentsV2OperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MachineAssessmentsV2OperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MachineAssessmentsV2OperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *MachineAssessmentsV2OperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, projectName string, assessmentName string, _ *MachineAssessmentsV2OperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if assessmentName == "" {
		return nil, errors.New("parameter assessmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentName}", url.PathEscape(assessmentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MachineAssessmentsV2OperationsClient) getHandleResponse(resp *http.Response) (MachineAssessmentsV2OperationsClientGetResponse, error) {
	result := MachineAssessmentsV2OperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachineAssessmentV2); err != nil {
		return MachineAssessmentsV2OperationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByParentPager - List MachineAssessmentV2 resources by AssessmentProject
//
// Generated from API version 2024-03-03-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - options - MachineAssessmentsV2OperationsClientListByParentOptions contains the optional parameters for the MachineAssessmentsV2OperationsClient.NewListByParentPager
//     method.
func (client *MachineAssessmentsV2OperationsClient) NewListByParentPager(resourceGroupName string, projectName string, options *MachineAssessmentsV2OperationsClientListByParentOptions) *runtime.Pager[MachineAssessmentsV2OperationsClientListByParentResponse] {
	return runtime.NewPager(runtime.PagingHandler[MachineAssessmentsV2OperationsClientListByParentResponse]{
		More: func(page MachineAssessmentsV2OperationsClientListByParentResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MachineAssessmentsV2OperationsClientListByParentResponse) (MachineAssessmentsV2OperationsClientListByParentResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "MachineAssessmentsV2OperationsClient.NewListByParentPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByParentCreateRequest(ctx, resourceGroupName, projectName, options)
			}, nil)
			if err != nil {
				return MachineAssessmentsV2OperationsClientListByParentResponse{}, err
			}
			return client.listByParentHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByParentCreateRequest creates the ListByParent request.
func (client *MachineAssessmentsV2OperationsClient) listByParentCreateRequest(ctx context.Context, resourceGroupName string, projectName string, _ *MachineAssessmentsV2OperationsClientListByParentOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByParentHandleResponse handles the ListByParent response.
func (client *MachineAssessmentsV2OperationsClient) listByParentHandleResponse(resp *http.Response) (MachineAssessmentsV2OperationsClientListByParentResponse, error) {
	result := MachineAssessmentsV2OperationsClientListByParentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachineAssessmentV2ListResult); err != nil {
		return MachineAssessmentsV2OperationsClientListByParentResponse{}, err
	}
	return result, nil
}
