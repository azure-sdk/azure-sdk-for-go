//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armappcontainers

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DaprResiliencyRetryPoliciesClient contains the methods for the DaprResiliencyRetryPolicies group.
// Don't use this type directly, use NewDaprResiliencyRetryPoliciesClient() instead.
type DaprResiliencyRetryPoliciesClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewDaprResiliencyRetryPoliciesClient creates a new instance of DaprResiliencyRetryPoliciesClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewDaprResiliencyRetryPoliciesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DaprResiliencyRetryPoliciesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &DaprResiliencyRetryPoliciesClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a Dapr Resiliency Retry Policy in a Managed Environment.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// environmentName - Name of the Managed Environment.
// policyName - Name of the Dapr Resiliency Retry Policy.
// daprResiliencyRetryPoliciesEnvelope - Configuration details of the Dapr Resiliency Retry Policy.
// options - DaprResiliencyRetryPoliciesClientCreateOrUpdateOptions contains the optional parameters for the DaprResiliencyRetryPoliciesClient.CreateOrUpdate
// method.
func (client *DaprResiliencyRetryPoliciesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, environmentName string, policyName string, daprResiliencyRetryPoliciesEnvelope DaprResiliencyRetryPolicy, options *DaprResiliencyRetryPoliciesClientCreateOrUpdateOptions) (DaprResiliencyRetryPoliciesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, environmentName, policyName, daprResiliencyRetryPoliciesEnvelope, options)
	if err != nil {
		return DaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DaprResiliencyRetryPoliciesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, environmentName string, policyName string, daprResiliencyRetryPoliciesEnvelope DaprResiliencyRetryPolicy, options *DaprResiliencyRetryPoliciesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/daprResiliencyRetryPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if environmentName == "" {
		return nil, errors.New("parameter environmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentName}", url.PathEscape(environmentName))
	if policyName == "" {
		return nil, errors.New("parameter policyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", url.PathEscape(policyName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, daprResiliencyRetryPoliciesEnvelope)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *DaprResiliencyRetryPoliciesClient) createOrUpdateHandleResponse(resp *http.Response) (DaprResiliencyRetryPoliciesClientCreateOrUpdateResponse, error) {
	result := DaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprResiliencyRetryPolicy); err != nil {
		return DaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a Dapr Resiliency Retry Policy from a Managed Environment.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// environmentName - Name of the Managed Environment.
// policyName - Name of the Dapr Resiliency Retry Policy.
// options - DaprResiliencyRetryPoliciesClientDeleteOptions contains the optional parameters for the DaprResiliencyRetryPoliciesClient.Delete
// method.
func (client *DaprResiliencyRetryPoliciesClient) Delete(ctx context.Context, resourceGroupName string, environmentName string, policyName string, options *DaprResiliencyRetryPoliciesClientDeleteOptions) (DaprResiliencyRetryPoliciesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, environmentName, policyName, options)
	if err != nil {
		return DaprResiliencyRetryPoliciesClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DaprResiliencyRetryPoliciesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return DaprResiliencyRetryPoliciesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return DaprResiliencyRetryPoliciesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DaprResiliencyRetryPoliciesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, environmentName string, policyName string, options *DaprResiliencyRetryPoliciesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/daprResiliencyRetryPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if environmentName == "" {
		return nil, errors.New("parameter environmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentName}", url.PathEscape(environmentName))
	if policyName == "" {
		return nil, errors.New("parameter policyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", url.PathEscape(policyName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a Dapr Resiliency Retry Policy.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// environmentName - Name of the Managed Environment.
// policyName - Name of the Dapr Resiliency Retry Policy.
// options - DaprResiliencyRetryPoliciesClientGetOptions contains the optional parameters for the DaprResiliencyRetryPoliciesClient.Get
// method.
func (client *DaprResiliencyRetryPoliciesClient) Get(ctx context.Context, resourceGroupName string, environmentName string, policyName string, options *DaprResiliencyRetryPoliciesClientGetOptions) (DaprResiliencyRetryPoliciesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, environmentName, policyName, options)
	if err != nil {
		return DaprResiliencyRetryPoliciesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DaprResiliencyRetryPoliciesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DaprResiliencyRetryPoliciesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DaprResiliencyRetryPoliciesClient) getCreateRequest(ctx context.Context, resourceGroupName string, environmentName string, policyName string, options *DaprResiliencyRetryPoliciesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/daprResiliencyRetryPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if environmentName == "" {
		return nil, errors.New("parameter environmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentName}", url.PathEscape(environmentName))
	if policyName == "" {
		return nil, errors.New("parameter policyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", url.PathEscape(policyName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DaprResiliencyRetryPoliciesClient) getHandleResponse(resp *http.Response) (DaprResiliencyRetryPoliciesClientGetResponse, error) {
	result := DaprResiliencyRetryPoliciesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprResiliencyRetryPolicy); err != nil {
		return DaprResiliencyRetryPoliciesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get the Dapr Resiliency Retry Policies for a managed environment.
// Generated from API version 2022-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// environmentName - Name of the Managed Environment.
// options - DaprResiliencyRetryPoliciesClientListOptions contains the optional parameters for the DaprResiliencyRetryPoliciesClient.List
// method.
func (client *DaprResiliencyRetryPoliciesClient) NewListPager(resourceGroupName string, environmentName string, options *DaprResiliencyRetryPoliciesClientListOptions) *runtime.Pager[DaprResiliencyRetryPoliciesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[DaprResiliencyRetryPoliciesClientListResponse]{
		More: func(page DaprResiliencyRetryPoliciesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DaprResiliencyRetryPoliciesClientListResponse) (DaprResiliencyRetryPoliciesClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceGroupName, environmentName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DaprResiliencyRetryPoliciesClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return DaprResiliencyRetryPoliciesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DaprResiliencyRetryPoliciesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *DaprResiliencyRetryPoliciesClient) listCreateRequest(ctx context.Context, resourceGroupName string, environmentName string, options *DaprResiliencyRetryPoliciesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/daprResiliencyRetryPolicies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if environmentName == "" {
		return nil, errors.New("parameter environmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentName}", url.PathEscape(environmentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DaprResiliencyRetryPoliciesClient) listHandleResponse(resp *http.Response) (DaprResiliencyRetryPoliciesClientListResponse, error) {
	result := DaprResiliencyRetryPoliciesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprResiliencyRetryPoliciesCollection); err != nil {
		return DaprResiliencyRetryPoliciesClientListResponse{}, err
	}
	return result, nil
}
