//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmessagingconnectors

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/messagingconnectors/armmessagingconnectors"
	moduleVersion = "v0.1.0"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// ConnectorProvisioningState - Provisioning states of Connector ARM Resource
type ConnectorProvisioningState string

const (
	// ConnectorProvisioningStateAccepted - Accepted State
	ConnectorProvisioningStateAccepted ConnectorProvisioningState = "Accepted"
	// ConnectorProvisioningStateCanceled - Resource creation was canceled.
	ConnectorProvisioningStateCanceled ConnectorProvisioningState = "Canceled"
	// ConnectorProvisioningStateCreating - Creating State
	ConnectorProvisioningStateCreating ConnectorProvisioningState = "Creating"
	// ConnectorProvisioningStateFailed - Resource creation failed.
	ConnectorProvisioningStateFailed ConnectorProvisioningState = "Failed"
	// ConnectorProvisioningStateSucceeded - Resource has been created.
	ConnectorProvisioningStateSucceeded ConnectorProvisioningState = "Succeeded"
	// ConnectorProvisioningStateUpdating - Updating State
	ConnectorProvisioningStateUpdating ConnectorProvisioningState = "Updating"
)

// PossibleConnectorProvisioningStateValues returns the possible values for the ConnectorProvisioningState const type.
func PossibleConnectorProvisioningStateValues() []ConnectorProvisioningState {
	return []ConnectorProvisioningState{
		ConnectorProvisioningStateAccepted,
		ConnectorProvisioningStateCanceled,
		ConnectorProvisioningStateCreating,
		ConnectorProvisioningStateFailed,
		ConnectorProvisioningStateSucceeded,
		ConnectorProvisioningStateUpdating,
	}
}

// ConnectorState - Business State of Connector
type ConnectorState string

const (
	// ConnectorStateCreating - Creating State
	ConnectorStateCreating ConnectorState = "Creating"
	// ConnectorStateDegraded - Degraded State
	ConnectorStateDegraded ConnectorState = "Degraded"
	// ConnectorStateDeleting - Deleting State
	ConnectorStateDeleting ConnectorState = "Deleting"
	// ConnectorStateFailed - Failed State
	ConnectorStateFailed ConnectorState = "Failed"
	// ConnectorStateInitializing - Initializing State
	ConnectorStateInitializing ConnectorState = "Initializing"
	// ConnectorStatePaused - Paused State
	ConnectorStatePaused ConnectorState = "Paused"
	// ConnectorStateRunning - Running State
	ConnectorStateRunning ConnectorState = "Running"
	// ConnectorStateStopped - Stopped State
	ConnectorStateStopped ConnectorState = "Stopped"
	// ConnectorStateUnknown - Unknown State
	ConnectorStateUnknown ConnectorState = "Unknown"
	// ConnectorStateUpdating - Updating State
	ConnectorStateUpdating ConnectorState = "Updating"
)

// PossibleConnectorStateValues returns the possible values for the ConnectorState const type.
func PossibleConnectorStateValues() []ConnectorState {
	return []ConnectorState{
		ConnectorStateCreating,
		ConnectorStateDegraded,
		ConnectorStateDeleting,
		ConnectorStateFailed,
		ConnectorStateInitializing,
		ConnectorStatePaused,
		ConnectorStateRunning,
		ConnectorStateStopped,
		ConnectorStateUnknown,
		ConnectorStateUpdating,
	}
}

// ConnectorType - Enum of the type of Connector
type ConnectorType string

const (
	// ConnectorTypeBitCoinSource - BitCoin source connector.
	ConnectorTypeBitCoinSource ConnectorType = "BitCoinSource"
	// ConnectorTypeConfluentSource - confluent source connector.
	ConnectorTypeConfluentSource ConnectorType = "ConfluentSource"
	// ConnectorTypeCosmosDbSource - Cosmos db source connector.
	ConnectorTypeCosmosDbSource ConnectorType = "CosmosDbSource"
	// ConnectorTypeGooglePubSubSource - Google pub sub source connector.
	ConnectorTypeGooglePubSubSource ConnectorType = "GooglePubSubSource"
	// ConnectorTypeKafkaSource - Kafka source connector.
	ConnectorTypeKafkaSource ConnectorType = "KafkaSource"
	// ConnectorTypeKinesisSource - Amazon kinesis source connector.
	ConnectorTypeKinesisSource ConnectorType = "KinesisSource"
	// ConnectorTypePostgreSQLSource - Postgre sql source connector.
	ConnectorTypePostgreSQLSource ConnectorType = "PostgreSqlSource"
	// ConnectorTypeSQLServerSource - Sql server source connector.
	ConnectorTypeSQLServerSource ConnectorType = "SqlServerSource"
	// ConnectorTypeUnknown - Unknown source connector.
	ConnectorTypeUnknown ConnectorType = "Unknown"
)

// PossibleConnectorTypeValues returns the possible values for the ConnectorType const type.
func PossibleConnectorTypeValues() []ConnectorType {
	return []ConnectorType{
		ConnectorTypeBitCoinSource,
		ConnectorTypeConfluentSource,
		ConnectorTypeCosmosDbSource,
		ConnectorTypeGooglePubSubSource,
		ConnectorTypeKafkaSource,
		ConnectorTypeKinesisSource,
		ConnectorTypePostgreSQLSource,
		ConnectorTypeSQLServerSource,
		ConnectorTypeUnknown,
	}
}

// ConverterType - Enum of the type of Converter
type ConverterType string

const (
	// ConverterTypeAvroConverter - This represents a converter for Avro format.
	ConverterTypeAvroConverter ConverterType = "AvroConverter"
	// ConverterTypeByteArrayConverter - This represents a converter for byte arrays format.
	ConverterTypeByteArrayConverter ConverterType = "ByteArrayConverter"
	// ConverterTypeCSVConverter - This represents a converter for csv format.
	ConverterTypeCSVConverter ConverterType = "CsvConverter"
	// ConverterTypeJSONConverter - This represents a converter for json format.
	ConverterTypeJSONConverter ConverterType = "JsonConverter"
	// ConverterTypeStringConverter - This represents a converter for string format.
	ConverterTypeStringConverter ConverterType = "StringConverter"
	// ConverterTypeUnknown - Unknown converter.
	ConverterTypeUnknown ConverterType = "Unknown"
)

// PossibleConverterTypeValues returns the possible values for the ConverterType const type.
func PossibleConverterTypeValues() []ConverterType {
	return []ConverterType{
		ConverterTypeAvroConverter,
		ConverterTypeByteArrayConverter,
		ConverterTypeCSVConverter,
		ConverterTypeJSONConverter,
		ConverterTypeStringConverter,
		ConverterTypeUnknown,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// Direction - Direction of the Source Connector.
type Direction string

const (
	// DirectionSink - Sink Connector
	DirectionSink Direction = "Sink"
	// DirectionSource - Source Connector
	DirectionSource Direction = "Source"
	// DirectionUnknown - Unknown direction
	DirectionUnknown Direction = "Unknown"
)

// PossibleDirectionValues returns the possible values for the Direction const type.
func PossibleDirectionValues() []Direction {
	return []Direction{
		DirectionSink,
		DirectionSource,
		DirectionUnknown,
	}
}

// OffsetPolicyForCosmosDB - Enum of the OffsetPolicy for CosmosDB connector
type OffsetPolicyForCosmosDB string

const (
	// OffsetPolicyForCosmosDBUseEarliestRecordedOffset - use the earliest recorded offset
	OffsetPolicyForCosmosDBUseEarliestRecordedOffset OffsetPolicyForCosmosDB = "UseEarliestRecordedOffset"
	// OffsetPolicyForCosmosDBUseLatestSourceOffset - use the latest (most recent) source offset,
	OffsetPolicyForCosmosDBUseLatestSourceOffset OffsetPolicyForCosmosDB = "UseLatestSourceOffset"
)

// PossibleOffsetPolicyForCosmosDBValues returns the possible values for the OffsetPolicyForCosmosDB const type.
func PossibleOffsetPolicyForCosmosDBValues() []OffsetPolicyForCosmosDB {
	return []OffsetPolicyForCosmosDB{
		OffsetPolicyForCosmosDBUseEarliestRecordedOffset,
		OffsetPolicyForCosmosDBUseLatestSourceOffset,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}
