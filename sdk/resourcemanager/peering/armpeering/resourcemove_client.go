//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpeering

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ResourceMoveClient contains the methods for the ResourceMove group.
// Don't use this type directly, use NewResourceMoveClient() instead.
type ResourceMoveClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewResourceMoveClient creates a new instance of ResourceMoveClient with the specified values.
//   - subscriptionID - The Azure subscription ID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewResourceMoveClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ResourceMoveClient, error) {
	cl, err := arm.NewClient(moduleName+".ResourceMoveClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ResourceMoveClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// MoveResources - MoveResources will be called by ARM when a resource is moved.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01
//   - resourceGroupName - Resource group name.
//   - resourceMoveRequest - Request payload.
//   - options - ResourceMoveClientMoveResourcesOptions contains the optional parameters for the ResourceMoveClient.MoveResources
//     method.
func (client *ResourceMoveClient) MoveResources(ctx context.Context, resourceGroupName string, resourceMoveRequest ResourceMoveRequest, options *ResourceMoveClientMoveResourcesOptions) (ResourceMoveClientMoveResourcesResponse, error) {
	var err error
	req, err := client.moveResourcesCreateRequest(ctx, resourceGroupName, resourceMoveRequest, options)
	if err != nil {
		return ResourceMoveClientMoveResourcesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResourceMoveClientMoveResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ResourceMoveClientMoveResourcesResponse{}, err
	}
	return ResourceMoveClientMoveResourcesResponse{}, nil
}

// moveResourcesCreateRequest creates the MoveResources request.
func (client *ResourceMoveClient) moveResourcesCreateRequest(ctx context.Context, resourceGroupName string, resourceMoveRequest ResourceMoveRequest, options *ResourceMoveClientMoveResourcesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resourceMoveRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// ValidateMoveResources - ValidateMoveResources will be called by ARM when a resource is moved.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01
//   - resourceGroupName - Resource group name.
//   - resourceMoveRequest - Payload.
//   - options - ResourceMoveClientValidateMoveResourcesOptions contains the optional parameters for the ResourceMoveClient.ValidateMoveResources
//     method.
func (client *ResourceMoveClient) ValidateMoveResources(ctx context.Context, resourceGroupName string, resourceMoveRequest ResourceMoveRequest, options *ResourceMoveClientValidateMoveResourcesOptions) (ResourceMoveClientValidateMoveResourcesResponse, error) {
	var err error
	req, err := client.validateMoveResourcesCreateRequest(ctx, resourceGroupName, resourceMoveRequest, options)
	if err != nil {
		return ResourceMoveClientValidateMoveResourcesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResourceMoveClientValidateMoveResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ResourceMoveClientValidateMoveResourcesResponse{}, err
	}
	return ResourceMoveClientValidateMoveResourcesResponse{}, nil
}

// validateMoveResourcesCreateRequest creates the ValidateMoveResources request.
func (client *ResourceMoveClient) validateMoveResourcesCreateRequest(ctx context.Context, resourceGroupName string, resourceMoveRequest ResourceMoveRequest, options *ResourceMoveClientValidateMoveResourcesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resourceMoveRequest); err != nil {
		return nil, err
	}
	return req, nil
}
