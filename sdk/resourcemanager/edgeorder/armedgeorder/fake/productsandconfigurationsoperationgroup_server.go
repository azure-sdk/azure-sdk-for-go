// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorder/armedgeorder/v2"
	"net/http"
	"net/url"
	"regexp"
)

// ProductsAndConfigurationsOperationGroupServer is a fake server for instances of the armedgeorder.ProductsAndConfigurationsOperationGroupClient type.
type ProductsAndConfigurationsOperationGroupServer struct {
	// NewListConfigurationsPager is the fake for method ProductsAndConfigurationsOperationGroupClient.NewListConfigurationsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListConfigurationsPager func(configurationsRequest armedgeorder.ConfigurationsRequest, options *armedgeorder.ProductsAndConfigurationsOperationGroupClientListConfigurationsOptions) (resp azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListConfigurationsResponse])

	// NewListProductFamiliesPager is the fake for method ProductsAndConfigurationsOperationGroupClient.NewListProductFamiliesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListProductFamiliesPager func(productFamiliesRequest armedgeorder.ProductFamiliesRequest, options *armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesOptions) (resp azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesResponse])

	// NewListProductFamiliesMetadataPager is the fake for method ProductsAndConfigurationsOperationGroupClient.NewListProductFamiliesMetadataPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListProductFamiliesMetadataPager func(options *armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesMetadataOptions) (resp azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesMetadataResponse])
}

// NewProductsAndConfigurationsOperationGroupServerTransport creates a new instance of ProductsAndConfigurationsOperationGroupServerTransport with the provided implementation.
// The returned ProductsAndConfigurationsOperationGroupServerTransport instance is connected to an instance of armedgeorder.ProductsAndConfigurationsOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProductsAndConfigurationsOperationGroupServerTransport(srv *ProductsAndConfigurationsOperationGroupServer) *ProductsAndConfigurationsOperationGroupServerTransport {
	return &ProductsAndConfigurationsOperationGroupServerTransport{
		srv:                                 srv,
		newListConfigurationsPager:          newTracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListConfigurationsResponse]](),
		newListProductFamiliesPager:         newTracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesResponse]](),
		newListProductFamiliesMetadataPager: newTracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesMetadataResponse]](),
	}
}

// ProductsAndConfigurationsOperationGroupServerTransport connects instances of armedgeorder.ProductsAndConfigurationsOperationGroupClient to instances of ProductsAndConfigurationsOperationGroupServer.
// Don't use this type directly, use NewProductsAndConfigurationsOperationGroupServerTransport instead.
type ProductsAndConfigurationsOperationGroupServerTransport struct {
	srv                                 *ProductsAndConfigurationsOperationGroupServer
	newListConfigurationsPager          *tracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListConfigurationsResponse]]
	newListProductFamiliesPager         *tracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesResponse]]
	newListProductFamiliesMetadataPager *tracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesMetadataResponse]]
}

// Do implements the policy.Transporter interface for ProductsAndConfigurationsOperationGroupServerTransport.
func (p *ProductsAndConfigurationsOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *ProductsAndConfigurationsOperationGroupServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if productsAndConfigurationsOperationGroupServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = productsAndConfigurationsOperationGroupServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ProductsAndConfigurationsOperationGroupClient.NewListConfigurationsPager":
				res.resp, res.err = p.dispatchNewListConfigurationsPager(req)
			case "ProductsAndConfigurationsOperationGroupClient.NewListProductFamiliesPager":
				res.resp, res.err = p.dispatchNewListProductFamiliesPager(req)
			case "ProductsAndConfigurationsOperationGroupClient.NewListProductFamiliesMetadataPager":
				res.resp, res.err = p.dispatchNewListProductFamiliesMetadataPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *ProductsAndConfigurationsOperationGroupServerTransport) dispatchNewListConfigurationsPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListConfigurationsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListConfigurationsPager not implemented")}
	}
	newListConfigurationsPager := p.newListConfigurationsPager.get(req)
	if newListConfigurationsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.EdgeOrder/listConfigurations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[armedgeorder.ConfigurationsRequest](req)
		if err != nil {
			return nil, err
		}
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armedgeorder.ProductsAndConfigurationsOperationGroupClientListConfigurationsOptions
		if skipTokenParam != nil {
			options = &armedgeorder.ProductsAndConfigurationsOperationGroupClientListConfigurationsOptions{
				SkipToken: skipTokenParam,
			}
		}
		resp := p.srv.NewListConfigurationsPager(body, options)
		newListConfigurationsPager = &resp
		p.newListConfigurationsPager.add(req, newListConfigurationsPager)
		server.PagerResponderInjectNextLinks(newListConfigurationsPager, req, func(page *armedgeorder.ProductsAndConfigurationsOperationGroupClientListConfigurationsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListConfigurationsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListConfigurationsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListConfigurationsPager) {
		p.newListConfigurationsPager.remove(req)
	}
	return resp, nil
}

func (p *ProductsAndConfigurationsOperationGroupServerTransport) dispatchNewListProductFamiliesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListProductFamiliesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListProductFamiliesPager not implemented")}
	}
	newListProductFamiliesPager := p.newListProductFamiliesPager.get(req)
	if newListProductFamiliesPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.EdgeOrder/listProductFamilies`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[armedgeorder.ProductFamiliesRequest](req)
		if err != nil {
			return nil, err
		}
		expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
		if err != nil {
			return nil, err
		}
		expandParam := getOptional(expandUnescaped)
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesOptions
		if expandParam != nil || skipTokenParam != nil {
			options = &armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesOptions{
				Expand:    expandParam,
				SkipToken: skipTokenParam,
			}
		}
		resp := p.srv.NewListProductFamiliesPager(body, options)
		newListProductFamiliesPager = &resp
		p.newListProductFamiliesPager.add(req, newListProductFamiliesPager)
		server.PagerResponderInjectNextLinks(newListProductFamiliesPager, req, func(page *armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListProductFamiliesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListProductFamiliesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListProductFamiliesPager) {
		p.newListProductFamiliesPager.remove(req)
	}
	return resp, nil
}

func (p *ProductsAndConfigurationsOperationGroupServerTransport) dispatchNewListProductFamiliesMetadataPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListProductFamiliesMetadataPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListProductFamiliesMetadataPager not implemented")}
	}
	newListProductFamiliesMetadataPager := p.newListProductFamiliesMetadataPager.get(req)
	if newListProductFamiliesMetadataPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.EdgeOrder/productFamiliesMetadata`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesMetadataOptions
		if skipTokenParam != nil {
			options = &armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesMetadataOptions{
				SkipToken: skipTokenParam,
			}
		}
		resp := p.srv.NewListProductFamiliesMetadataPager(options)
		newListProductFamiliesMetadataPager = &resp
		p.newListProductFamiliesMetadataPager.add(req, newListProductFamiliesMetadataPager)
		server.PagerResponderInjectNextLinks(newListProductFamiliesMetadataPager, req, func(page *armedgeorder.ProductsAndConfigurationsOperationGroupClientListProductFamiliesMetadataResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListProductFamiliesMetadataPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListProductFamiliesMetadataPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListProductFamiliesMetadataPager) {
		p.newListProductFamiliesMetadataPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ProductsAndConfigurationsOperationGroupServerTransport
var productsAndConfigurationsOperationGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
