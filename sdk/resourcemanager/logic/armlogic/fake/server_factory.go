// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armlogic.ClientFactory type.
type ServerFactory struct {
	// APIOperationsServer contains the fakes for client APIOperationsClient
	APIOperationsServer APIOperationsServer

	// AssemblyDefinitionsServer contains the fakes for client AssemblyDefinitionsClient
	AssemblyDefinitionsServer AssemblyDefinitionsServer

	// BatchConfigurationsServer contains the fakes for client BatchConfigurationsClient
	BatchConfigurationsServer BatchConfigurationsServer

	// IntegrationAccountAgreementsServer contains the fakes for client IntegrationAccountAgreementsClient
	IntegrationAccountAgreementsServer IntegrationAccountAgreementsServer

	// IntegrationAccountCertificatesServer contains the fakes for client IntegrationAccountCertificatesClient
	IntegrationAccountCertificatesServer IntegrationAccountCertificatesServer

	// IntegrationAccountMapsServer contains the fakes for client IntegrationAccountMapsClient
	IntegrationAccountMapsServer IntegrationAccountMapsServer

	// IntegrationAccountPartnersServer contains the fakes for client IntegrationAccountPartnersClient
	IntegrationAccountPartnersServer IntegrationAccountPartnersServer

	// IntegrationAccountSchemasServer contains the fakes for client IntegrationAccountSchemasClient
	IntegrationAccountSchemasServer IntegrationAccountSchemasServer

	// IntegrationAccountSessionsServer contains the fakes for client IntegrationAccountSessionsClient
	IntegrationAccountSessionsServer IntegrationAccountSessionsServer

	// IntegrationAccountsServer contains the fakes for client IntegrationAccountsClient
	IntegrationAccountsServer IntegrationAccountsServer

	// IntegrationServiceEnvironmentManagedApisServer contains the fakes for client IntegrationServiceEnvironmentManagedApisClient
	IntegrationServiceEnvironmentManagedApisServer IntegrationServiceEnvironmentManagedApisServer

	// IntegrationServiceEnvironmentsServer contains the fakes for client IntegrationServiceEnvironmentsClient
	IntegrationServiceEnvironmentsServer IntegrationServiceEnvironmentsServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// RequestHistoriesServer contains the fakes for client RequestHistoriesClient
	RequestHistoriesServer RequestHistoriesServer

	// TemplatesServer contains the fakes for client TemplatesClient
	TemplatesServer TemplatesServer

	// WorkflowRunActionRepetitionDefinitionsServer contains the fakes for client WorkflowRunActionRepetitionDefinitionsClient
	WorkflowRunActionRepetitionDefinitionsServer WorkflowRunActionRepetitionDefinitionsServer

	// WorkflowRunActionRequestHistoriesOperationsServer contains the fakes for client WorkflowRunActionRequestHistoriesOperationsClient
	WorkflowRunActionRequestHistoriesOperationsServer WorkflowRunActionRequestHistoriesOperationsServer

	// WorkflowRunActionScopeRepetitionsOperationsServer contains the fakes for client WorkflowRunActionScopeRepetitionsOperationsClient
	WorkflowRunActionScopeRepetitionsOperationsServer WorkflowRunActionScopeRepetitionsOperationsServer

	// WorkflowRunActionsServer contains the fakes for client WorkflowRunActionsClient
	WorkflowRunActionsServer WorkflowRunActionsServer

	// WorkflowRunOperationsOperationsServer contains the fakes for client WorkflowRunOperationsOperationsClient
	WorkflowRunOperationsOperationsServer WorkflowRunOperationsOperationsServer

	// WorkflowRunsServer contains the fakes for client WorkflowRunsClient
	WorkflowRunsServer WorkflowRunsServer

	// WorkflowRunsOperationsServer contains the fakes for client WorkflowRunsOperationsClient
	WorkflowRunsOperationsServer WorkflowRunsOperationsServer

	// WorkflowTriggerHistoriesServer contains the fakes for client WorkflowTriggerHistoriesClient
	WorkflowTriggerHistoriesServer WorkflowTriggerHistoriesServer

	// WorkflowTriggersServer contains the fakes for client WorkflowTriggersClient
	WorkflowTriggersServer WorkflowTriggersServer

	// WorkflowVersionsServer contains the fakes for client WorkflowVersionsClient
	WorkflowVersionsServer WorkflowVersionsServer

	// WorkflowsServer contains the fakes for client WorkflowsClient
	WorkflowsServer WorkflowsServer

	// WorkflowsOperationsServer contains the fakes for client WorkflowsOperationsClient
	WorkflowsOperationsServer WorkflowsOperationsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armlogic.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armlogic.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                                 *ServerFactory
	trMu                                                sync.Mutex
	trAPIOperationsServer                               *APIOperationsServerTransport
	trAssemblyDefinitionsServer                         *AssemblyDefinitionsServerTransport
	trBatchConfigurationsServer                         *BatchConfigurationsServerTransport
	trIntegrationAccountAgreementsServer                *IntegrationAccountAgreementsServerTransport
	trIntegrationAccountCertificatesServer              *IntegrationAccountCertificatesServerTransport
	trIntegrationAccountMapsServer                      *IntegrationAccountMapsServerTransport
	trIntegrationAccountPartnersServer                  *IntegrationAccountPartnersServerTransport
	trIntegrationAccountSchemasServer                   *IntegrationAccountSchemasServerTransport
	trIntegrationAccountSessionsServer                  *IntegrationAccountSessionsServerTransport
	trIntegrationAccountsServer                         *IntegrationAccountsServerTransport
	trIntegrationServiceEnvironmentManagedApisServer    *IntegrationServiceEnvironmentManagedApisServerTransport
	trIntegrationServiceEnvironmentsServer              *IntegrationServiceEnvironmentsServerTransport
	trOperationsServer                                  *OperationsServerTransport
	trRequestHistoriesServer                            *RequestHistoriesServerTransport
	trTemplatesServer                                   *TemplatesServerTransport
	trWorkflowRunActionRepetitionDefinitionsServer      *WorkflowRunActionRepetitionDefinitionsServerTransport
	trWorkflowRunActionRequestHistoriesOperationsServer *WorkflowRunActionRequestHistoriesOperationsServerTransport
	trWorkflowRunActionScopeRepetitionsOperationsServer *WorkflowRunActionScopeRepetitionsOperationsServerTransport
	trWorkflowRunActionsServer                          *WorkflowRunActionsServerTransport
	trWorkflowRunOperationsOperationsServer             *WorkflowRunOperationsOperationsServerTransport
	trWorkflowRunsServer                                *WorkflowRunsServerTransport
	trWorkflowRunsOperationsServer                      *WorkflowRunsOperationsServerTransport
	trWorkflowTriggerHistoriesServer                    *WorkflowTriggerHistoriesServerTransport
	trWorkflowTriggersServer                            *WorkflowTriggersServerTransport
	trWorkflowVersionsServer                            *WorkflowVersionsServerTransport
	trWorkflowsServer                                   *WorkflowsServerTransport
	trWorkflowsOperationsServer                         *WorkflowsOperationsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "APIOperationsClient":
		initServer(s, &s.trAPIOperationsServer, func() *APIOperationsServerTransport {
			return NewAPIOperationsServerTransport(&s.srv.APIOperationsServer)
		})
		resp, err = s.trAPIOperationsServer.Do(req)
	case "AssemblyDefinitionsClient":
		initServer(s, &s.trAssemblyDefinitionsServer, func() *AssemblyDefinitionsServerTransport {
			return NewAssemblyDefinitionsServerTransport(&s.srv.AssemblyDefinitionsServer)
		})
		resp, err = s.trAssemblyDefinitionsServer.Do(req)
	case "BatchConfigurationsClient":
		initServer(s, &s.trBatchConfigurationsServer, func() *BatchConfigurationsServerTransport {
			return NewBatchConfigurationsServerTransport(&s.srv.BatchConfigurationsServer)
		})
		resp, err = s.trBatchConfigurationsServer.Do(req)
	case "IntegrationAccountAgreementsClient":
		initServer(s, &s.trIntegrationAccountAgreementsServer, func() *IntegrationAccountAgreementsServerTransport {
			return NewIntegrationAccountAgreementsServerTransport(&s.srv.IntegrationAccountAgreementsServer)
		})
		resp, err = s.trIntegrationAccountAgreementsServer.Do(req)
	case "IntegrationAccountCertificatesClient":
		initServer(s, &s.trIntegrationAccountCertificatesServer, func() *IntegrationAccountCertificatesServerTransport {
			return NewIntegrationAccountCertificatesServerTransport(&s.srv.IntegrationAccountCertificatesServer)
		})
		resp, err = s.trIntegrationAccountCertificatesServer.Do(req)
	case "IntegrationAccountMapsClient":
		initServer(s, &s.trIntegrationAccountMapsServer, func() *IntegrationAccountMapsServerTransport {
			return NewIntegrationAccountMapsServerTransport(&s.srv.IntegrationAccountMapsServer)
		})
		resp, err = s.trIntegrationAccountMapsServer.Do(req)
	case "IntegrationAccountPartnersClient":
		initServer(s, &s.trIntegrationAccountPartnersServer, func() *IntegrationAccountPartnersServerTransport {
			return NewIntegrationAccountPartnersServerTransport(&s.srv.IntegrationAccountPartnersServer)
		})
		resp, err = s.trIntegrationAccountPartnersServer.Do(req)
	case "IntegrationAccountSchemasClient":
		initServer(s, &s.trIntegrationAccountSchemasServer, func() *IntegrationAccountSchemasServerTransport {
			return NewIntegrationAccountSchemasServerTransport(&s.srv.IntegrationAccountSchemasServer)
		})
		resp, err = s.trIntegrationAccountSchemasServer.Do(req)
	case "IntegrationAccountSessionsClient":
		initServer(s, &s.trIntegrationAccountSessionsServer, func() *IntegrationAccountSessionsServerTransport {
			return NewIntegrationAccountSessionsServerTransport(&s.srv.IntegrationAccountSessionsServer)
		})
		resp, err = s.trIntegrationAccountSessionsServer.Do(req)
	case "IntegrationAccountsClient":
		initServer(s, &s.trIntegrationAccountsServer, func() *IntegrationAccountsServerTransport {
			return NewIntegrationAccountsServerTransport(&s.srv.IntegrationAccountsServer)
		})
		resp, err = s.trIntegrationAccountsServer.Do(req)
	case "IntegrationServiceEnvironmentManagedApisClient":
		initServer(s, &s.trIntegrationServiceEnvironmentManagedApisServer, func() *IntegrationServiceEnvironmentManagedApisServerTransport {
			return NewIntegrationServiceEnvironmentManagedApisServerTransport(&s.srv.IntegrationServiceEnvironmentManagedApisServer)
		})
		resp, err = s.trIntegrationServiceEnvironmentManagedApisServer.Do(req)
	case "IntegrationServiceEnvironmentsClient":
		initServer(s, &s.trIntegrationServiceEnvironmentsServer, func() *IntegrationServiceEnvironmentsServerTransport {
			return NewIntegrationServiceEnvironmentsServerTransport(&s.srv.IntegrationServiceEnvironmentsServer)
		})
		resp, err = s.trIntegrationServiceEnvironmentsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "RequestHistoriesClient":
		initServer(s, &s.trRequestHistoriesServer, func() *RequestHistoriesServerTransport {
			return NewRequestHistoriesServerTransport(&s.srv.RequestHistoriesServer)
		})
		resp, err = s.trRequestHistoriesServer.Do(req)
	case "TemplatesClient":
		initServer(s, &s.trTemplatesServer, func() *TemplatesServerTransport { return NewTemplatesServerTransport(&s.srv.TemplatesServer) })
		resp, err = s.trTemplatesServer.Do(req)
	case "WorkflowRunActionRepetitionDefinitionsClient":
		initServer(s, &s.trWorkflowRunActionRepetitionDefinitionsServer, func() *WorkflowRunActionRepetitionDefinitionsServerTransport {
			return NewWorkflowRunActionRepetitionDefinitionsServerTransport(&s.srv.WorkflowRunActionRepetitionDefinitionsServer)
		})
		resp, err = s.trWorkflowRunActionRepetitionDefinitionsServer.Do(req)
	case "WorkflowRunActionRequestHistoriesOperationsClient":
		initServer(s, &s.trWorkflowRunActionRequestHistoriesOperationsServer, func() *WorkflowRunActionRequestHistoriesOperationsServerTransport {
			return NewWorkflowRunActionRequestHistoriesOperationsServerTransport(&s.srv.WorkflowRunActionRequestHistoriesOperationsServer)
		})
		resp, err = s.trWorkflowRunActionRequestHistoriesOperationsServer.Do(req)
	case "WorkflowRunActionScopeRepetitionsOperationsClient":
		initServer(s, &s.trWorkflowRunActionScopeRepetitionsOperationsServer, func() *WorkflowRunActionScopeRepetitionsOperationsServerTransport {
			return NewWorkflowRunActionScopeRepetitionsOperationsServerTransport(&s.srv.WorkflowRunActionScopeRepetitionsOperationsServer)
		})
		resp, err = s.trWorkflowRunActionScopeRepetitionsOperationsServer.Do(req)
	case "WorkflowRunActionsClient":
		initServer(s, &s.trWorkflowRunActionsServer, func() *WorkflowRunActionsServerTransport {
			return NewWorkflowRunActionsServerTransport(&s.srv.WorkflowRunActionsServer)
		})
		resp, err = s.trWorkflowRunActionsServer.Do(req)
	case "WorkflowRunOperationsOperationsClient":
		initServer(s, &s.trWorkflowRunOperationsOperationsServer, func() *WorkflowRunOperationsOperationsServerTransport {
			return NewWorkflowRunOperationsOperationsServerTransport(&s.srv.WorkflowRunOperationsOperationsServer)
		})
		resp, err = s.trWorkflowRunOperationsOperationsServer.Do(req)
	case "WorkflowRunsClient":
		initServer(s, &s.trWorkflowRunsServer, func() *WorkflowRunsServerTransport { return NewWorkflowRunsServerTransport(&s.srv.WorkflowRunsServer) })
		resp, err = s.trWorkflowRunsServer.Do(req)
	case "WorkflowRunsOperationsClient":
		initServer(s, &s.trWorkflowRunsOperationsServer, func() *WorkflowRunsOperationsServerTransport {
			return NewWorkflowRunsOperationsServerTransport(&s.srv.WorkflowRunsOperationsServer)
		})
		resp, err = s.trWorkflowRunsOperationsServer.Do(req)
	case "WorkflowTriggerHistoriesClient":
		initServer(s, &s.trWorkflowTriggerHistoriesServer, func() *WorkflowTriggerHistoriesServerTransport {
			return NewWorkflowTriggerHistoriesServerTransport(&s.srv.WorkflowTriggerHistoriesServer)
		})
		resp, err = s.trWorkflowTriggerHistoriesServer.Do(req)
	case "WorkflowTriggersClient":
		initServer(s, &s.trWorkflowTriggersServer, func() *WorkflowTriggersServerTransport {
			return NewWorkflowTriggersServerTransport(&s.srv.WorkflowTriggersServer)
		})
		resp, err = s.trWorkflowTriggersServer.Do(req)
	case "WorkflowVersionsClient":
		initServer(s, &s.trWorkflowVersionsServer, func() *WorkflowVersionsServerTransport {
			return NewWorkflowVersionsServerTransport(&s.srv.WorkflowVersionsServer)
		})
		resp, err = s.trWorkflowVersionsServer.Do(req)
	case "WorkflowsClient":
		initServer(s, &s.trWorkflowsServer, func() *WorkflowsServerTransport { return NewWorkflowsServerTransport(&s.srv.WorkflowsServer) })
		resp, err = s.trWorkflowsServer.Do(req)
	case "WorkflowsOperationsClient":
		initServer(s, &s.trWorkflowsOperationsServer, func() *WorkflowsOperationsServerTransport {
			return NewWorkflowsOperationsServerTransport(&s.srv.WorkflowsOperationsServer)
		})
		resp, err = s.trWorkflowsOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
