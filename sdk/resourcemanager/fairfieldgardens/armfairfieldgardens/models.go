//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfairfieldgardens

import "time"

// AllocatedEndpoint - Representation of a previously allocated endpoint
type AllocatedEndpoint struct {
	// REQUIRED; Type of the endpoint.
	EndpointType *EndpointType

	// REQUIRED; Hostname of the endpoint.
	HostName *string

	// REQUIRED; Name of the endpoint.
	Name *string
}

// AllocationEndpoint - Allocation endpoint.
type AllocationEndpoint struct {
	// REQUIRED; host name of the endpoint.
	HostName *string

	// REQUIRED; Resource id of the endpoint.
	ResourceID *string
}

// AllocationRule - The allocation rule.
type AllocationRule struct {
	// REQUIRED; Type of endpoint.
	EndpointType *EndpointType

	// REQUIRED; Name of the allocation rule.
	Name *string

	// REQUIRED; Type of the allocation rule.
	Type *AllocationType
}

// GetAllocationRule implements the AllocationRuleClassification interface for type AllocationRule.
func (a *AllocationRule) GetAllocationRule() *AllocationRule { return a }

// BootstrapAuthenticationRule - The authentication rule for bootstrap.
type BootstrapAuthenticationRule struct {
	// REQUIRED; The type of authentication rule.
	Type *BootstrapAuthenticationType
}

// GetBootstrapAuthenticationRule implements the BootstrapAuthenticationRuleClassification interface for type BootstrapAuthenticationRule.
func (b *BootstrapAuthenticationRule) GetBootstrapAuthenticationRule() *BootstrapAuthenticationRule {
	return b
}

// CaConfig - The configuration for setting up a CA.
type CaConfig struct {
	// REQUIRED; Certificate properties.
	Properties *CertificateProperties

	// READ-ONLY; System-generated value for referencing the CA.
	Name *string
}

// CertPolicyConfig - The configuration for setting up a policy.
type CertPolicyConfig struct {
	// REQUIRED; The validity period in days.
	ValidityPeriodInDays *int32
}

// CertificateIssuanceRule - Certificate issuance configurations.
type CertificateIssuanceRule struct {
	// REQUIRED; The configuration to set up an ICA.
	CertificateAuthorityConfiguration *CaConfig

	// REQUIRED; The type of authority for cert issuance.
	IssuingAuthority *SupportedIssuingAuthority

	// REQUIRED; The leaf certificate configuration.
	LeafCertificateConfiguration *CertPolicyConfig

	// REQUIRED; Cert renewal interval.
	RenewalInterval *int32
}

// CertificateProperties - Certificate properties.
type CertificateProperties struct {
	// REQUIRED; Crypto type: RSA or EC.
	KeyType *SupportedKeyType

	// READ-ONLY; Certificate subject.
	Subject *string

	// READ-ONLY; Certificate is valid not after this date. Format ISO8601. Generated based on validity period.
	ValidityNotAfter *time.Time

	// READ-ONLY; Certificate is valid not before this date. Format ISO8601. Generated based on on validity period.
	ValidityNotBefore *time.Time

	// READ-ONLY; System-assigned validity period.
	ValidityPeriodInDays *int32
}

// DeviceEndpoint - The device endpoint.
type DeviceEndpoint struct {
	// READ-ONLY; Hostname of the Endpoint.
	HostName *string
}

// DeviceEndpoints - Device endpoints.
type DeviceEndpoints struct {
	// READ-ONLY; The default endpoint.
	Default *DeviceEndpoint
}

// DeviceProvisioningState - The provisioning state of a device.
type DeviceProvisioningState struct {
	// The resource-specific properties for this resource.
	Properties *DeviceProvisioningStateProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DeviceProvisioningStateListResult - The response of a DeviceProvisioningState list operation.
type DeviceProvisioningStateListResult struct {
	// REQUIRED; The DeviceProvisioningState items on this page
	Value []*DeviceProvisioningState

	// The link to the next page of items
	NextLink *string
}

// DeviceProvisioningStateProperties - Details of the DeviceProvisioningState
type DeviceProvisioningStateProperties struct {
	// REQUIRED; Onboarding status of the resource this DeviceProvisioningState extends
	OnboardingStatus *OnboardingStatus

	// REQUIRED; The provisioning policy resource id
	ProvisioningPolicyResourceID *string

	// REQUIRED; Unique identifier for the device. Allow alphanumeric and '-', '.', '_', ':' only. Last character can only be
	// alphanumeric and '-'
	RegistrationID *string

	// Array of previously allocated endpoints
	AllocatedEndpoints []*AllocatedEndpoint

	// Indicates if the device is enabled for discovery
	DiscoveryEnabled *bool

	// READ-ONLY; The status of the last operation.
	ProvisioningState *ProvisioningState
}

// DeviceProvisioningStateUpdate - The type used for update operations of the DeviceProvisioningState.
type DeviceProvisioningStateUpdate struct {
	// The updatable properties of the DeviceProvisioningState.
	Properties *DeviceProvisioningStateUpdateProperties
}

// DeviceProvisioningStateUpdateProperties - The updatable properties of the DeviceProvisioningState.
type DeviceProvisioningStateUpdateProperties struct {
	// Array of previously allocated endpoints
	AllocatedEndpoints []*AllocatedEndpoint

	// Indicates if the device is enabled for discovery
	DiscoveryEnabled *bool

	// Onboarding status of the resource this DeviceProvisioningState extends
	OnboardingStatus *OnboardingStatus

	// The provisioning policy resource id
	ProvisioningPolicyResourceID *string
}

// DeviceRegistryProvisioningPolicyResourceDetails - Details of the ProvisioningService Device Registry ProvisioningPolicy.
type DeviceRegistryProvisioningPolicyResourceDetails struct {
	// REQUIRED; Type of the resource being provisioned.
	Type *ProvisioningResourceType

	// Identity information.
	OperationalIdentityInfo *IdentityInfo

	// Resource metadata.
	ResourceMetadata *ResourceMetadata
}

// GetProvisioningPolicyResourceDetails implements the ProvisioningPolicyResourceDetailsClassification interface for type
// DeviceRegistryProvisioningPolicyResourceDetails.
func (d *DeviceRegistryProvisioningPolicyResourceDetails) GetProvisioningPolicyResourceDetails() *ProvisioningPolicyResourceDetails {
	return &ProvisioningPolicyResourceDetails{
		Type: d.Type,
	}
}

// DiscoveryBootstrapAuthenticationRule - The Discovery-based authentication rule for bootstrapping.
type DiscoveryBootstrapAuthenticationRule struct {
	// REQUIRED; The type of authentication rule.
	Type *BootstrapAuthenticationType
}

// GetBootstrapAuthenticationRule implements the BootstrapAuthenticationRuleClassification interface for type DiscoveryBootstrapAuthenticationRule.
func (d *DiscoveryBootstrapAuthenticationRule) GetBootstrapAuthenticationRule() *BootstrapAuthenticationRule {
	return &BootstrapAuthenticationRule{
		Type: d.Type,
	}
}

// DiscoveryProvisioningPolicyResourceDetails - Details of the ProvisioningService Discovery ProvisioningPolicy.
type DiscoveryProvisioningPolicyResourceDetails struct {
	// REQUIRED; Type of the resource being provisioned.
	Type *ProvisioningResourceType
}

// GetProvisioningPolicyResourceDetails implements the ProvisioningPolicyResourceDetailsClassification interface for type
// DiscoveryProvisioningPolicyResourceDetails.
func (d *DiscoveryProvisioningPolicyResourceDetails) GetProvisioningPolicyResourceDetails() *ProvisioningPolicyResourceDetails {
	return &ProvisioningPolicyResourceDetails{
		Type: d.Type,
	}
}

// EvenlyDistributedAllocationRule - The allocation rule for evenly distributed allocation type.
type EvenlyDistributedAllocationRule struct {
	// REQUIRED; Type of endpoint.
	EndpointType *EndpointType

	// REQUIRED; List of endpoints for evenly distributed allocation type.
	Endpoints []*AllocationEndpoint

	// REQUIRED; Name of the allocation rule.
	Name *string

	// REQUIRED; Type of the allocation rule.
	Type *AllocationType
}

// GetAllocationRule implements the AllocationRuleClassification interface for type EvenlyDistributedAllocationRule.
func (e *EvenlyDistributedAllocationRule) GetAllocationRule() *AllocationRule {
	return &AllocationRule{
		EndpointType: e.EndpointType,
		Name:         e.Name,
		Type:         e.Type,
	}
}

// IdentityInfo - The information related to device identity.
type IdentityInfo struct {
	// REQUIRED; Guid of the device template.
	DeviceTemplateID *string

	// REQUIRED; Guid for static AAD group.
	StaticGroupID *string

	// Certificate issuance settings.
	CertificateIssuance *CertificateIssuanceRule
}

// JitRule - The rule for Just-in-time connection.
type JitRule struct {
	// REQUIRED; The priority of the policy. Should be greater than 0.
	Priority *int32

	// REQUIRED; The case insensitive name of the target resource group.
	ResourceGroupName *string

	// REQUIRED; The ID of the target subscription.
	SubscriptionID *string
}

// JitRuleUpdate - The rule for Just-in-time connection.
type JitRuleUpdate struct {
	// The priority of the policy. Should be greater than 0.
	Priority *int32

	// The case insensitive name of the target resource group.
	ResourceGroupName *string

	// The ID of the target subscription.
	SubscriptionID *string
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// ProvisioningPolicy - A provisioning policy resource.
type ProvisioningPolicy struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *ProvisioningPolicyProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ProvisioningPolicyListResult - The response of a ProvisioningPolicy list operation.
type ProvisioningPolicyListResult struct {
	// REQUIRED; The ProvisioningPolicy items on this page
	Value []*ProvisioningPolicy

	// The link to the next page of items
	NextLink *string
}

// ProvisioningPolicyProperties - Details of the ProvisioningService ProvisioningPolicy.
type ProvisioningPolicyProperties struct {
	// REQUIRED; The bootstrap authentication rule.
	BootstrapAuthentication BootstrapAuthenticationRuleClassification

	// REQUIRED; Further details about the policy resource
	ResourceDetails ProvisioningPolicyResourceDetailsClassification

	// REQUIRED; The policy status
	Status *bool

	// Allocation rules.
	Allocations []AllocationRuleClassification

	// Description of the policy
	Description *string

	// Just-in-time rule to create the device resource.
	Jit *JitRule

	// READ-ONLY; The status of the last operation.
	ProvisioningState *ProvisioningState
}

// ProvisioningPolicyResourceDetails - Common further details about the policy resource
type ProvisioningPolicyResourceDetails struct {
	// REQUIRED; Type of the resource being provisioned.
	Type *ProvisioningResourceType
}

// GetProvisioningPolicyResourceDetails implements the ProvisioningPolicyResourceDetailsClassification interface for type
// ProvisioningPolicyResourceDetails.
func (p *ProvisioningPolicyResourceDetails) GetProvisioningPolicyResourceDetails() *ProvisioningPolicyResourceDetails {
	return p
}

// ProvisioningPolicyUpdate - The type used for update operations of the ProvisioningPolicy.
type ProvisioningPolicyUpdate struct {
	// The updatable properties of the ProvisioningPolicy.
	Properties *ProvisioningPolicyUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// ProvisioningPolicyUpdateProperties - The updatable properties of the ProvisioningPolicy.
type ProvisioningPolicyUpdateProperties struct {
	// Allocation rules.
	Allocations []AllocationRuleClassification

	// The bootstrap authentication rule.
	BootstrapAuthentication BootstrapAuthenticationRuleClassification

	// Description of the policy
	Description *string

	// Just-in-time rule to create the device resource.
	Jit *JitRuleUpdate

	// Further details about the policy resource
	ResourceDetails ProvisioningPolicyResourceDetailsClassification

	// The policy status
	Status *bool
}

// ProvisioningResource - A provisioning resource.
type ProvisioningResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *ProvisioningResourceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ProvisioningResourceListResult - The response of a ProvisioningResource list operation.
type ProvisioningResourceListResult struct {
	// REQUIRED; The ProvisioningResource items on this page
	Value []*ProvisioningResource

	// The link to the next page of items
	NextLink *string
}

// ProvisioningResourceProperties - Details of the EdgeProvisioning ProvisioningResource.
type ProvisioningResourceProperties struct {
	// REQUIRED; Selecting 'yes' will enable a Microsoft managed PKI to issue certificates. Setting up of the CA and policies
	// for certificate management will be while defining the bumblebee provisioning policy.
	EnableOperationalCertificates *bool

	// READ-ONLY; The provisioning service endpoints.
	DeviceEndpoints *DeviceEndpoints

	// READ-ONLY; The status of the last operation.
	ProvisioningState *ProvisioningState
}

// ProvisioningResourceUpdate - The type used for update operations of the ProvisioningResource.
type ProvisioningResourceUpdate struct {
	// Resource tags.
	Tags map[string]*string
}

// ResourceMetadata - Resource metadata
type ResourceMetadata struct {
	// Custom attributes
	CustomAttributes map[string]any
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// X509BootstrapAuthenticationRule - The x509-based authentication rule for bootstrapping.
type X509BootstrapAuthenticationRule struct {
	// REQUIRED; The primary certificate. B64 x509 cert
	PrimaryCertificate *X509Certificate

	// REQUIRED; The type of authentication rule.
	Type *BootstrapAuthenticationType

	// The secondary certificate.
	SecondaryCertificate *X509Certificate
}

// GetBootstrapAuthenticationRule implements the BootstrapAuthenticationRuleClassification interface for type X509BootstrapAuthenticationRule.
func (x *X509BootstrapAuthenticationRule) GetBootstrapAuthenticationRule() *BootstrapAuthenticationRule {
	return &BootstrapAuthenticationRule{
		Type: x.Type,
	}
}

// X509Certificate - X509 Certificate.
type X509Certificate struct {
	// REQUIRED; The certificate.
	Certificate *string

	// READ-ONLY; Expiry date for the certificate.
	ExpiryDate *time.Time

	// READ-ONLY; Thumbprint extracted from the certificate.
	Thumbprint *string
}
