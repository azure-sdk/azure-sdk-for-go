//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/fairfieldgardens/armfairfieldgardens"
	"net/http"
	"net/url"
	"regexp"
)

// ProvisioningPoliciesServer is a fake server for instances of the armfairfieldgardens.ProvisioningPoliciesClient type.
type ProvisioningPoliciesServer struct {
	// BeginCreateOrUpdate is the fake for method ProvisioningPoliciesClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, resource armfairfieldgardens.ProvisioningPolicy, options *armfairfieldgardens.ProvisioningPoliciesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armfairfieldgardens.ProvisioningPoliciesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method ProvisioningPoliciesClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, options *armfairfieldgardens.ProvisioningPoliciesClientDeleteOptions) (resp azfake.Responder[armfairfieldgardens.ProvisioningPoliciesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ProvisioningPoliciesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, options *armfairfieldgardens.ProvisioningPoliciesClientGetOptions) (resp azfake.Responder[armfairfieldgardens.ProvisioningPoliciesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByProvisioningResourcePager is the fake for method ProvisioningPoliciesClient.NewListByProvisioningResourcePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByProvisioningResourcePager func(resourceGroupName string, provisioningResourceName string, options *armfairfieldgardens.ProvisioningPoliciesClientListByProvisioningResourceOptions) (resp azfake.PagerResponder[armfairfieldgardens.ProvisioningPoliciesClientListByProvisioningResourceResponse])

	// BeginUpdate is the fake for method ProvisioningPoliciesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, provisioningResourceName string, provisioningPolicyName string, properties armfairfieldgardens.ProvisioningPolicyUpdate, options *armfairfieldgardens.ProvisioningPoliciesClientBeginUpdateOptions) (resp azfake.PollerResponder[armfairfieldgardens.ProvisioningPoliciesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewProvisioningPoliciesServerTransport creates a new instance of ProvisioningPoliciesServerTransport with the provided implementation.
// The returned ProvisioningPoliciesServerTransport instance is connected to an instance of armfairfieldgardens.ProvisioningPoliciesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProvisioningPoliciesServerTransport(srv *ProvisioningPoliciesServer) *ProvisioningPoliciesServerTransport {
	return &ProvisioningPoliciesServerTransport{
		srv:                                srv,
		beginCreateOrUpdate:                newTracker[azfake.PollerResponder[armfairfieldgardens.ProvisioningPoliciesClientCreateOrUpdateResponse]](),
		newListByProvisioningResourcePager: newTracker[azfake.PagerResponder[armfairfieldgardens.ProvisioningPoliciesClientListByProvisioningResourceResponse]](),
		beginUpdate:                        newTracker[azfake.PollerResponder[armfairfieldgardens.ProvisioningPoliciesClientUpdateResponse]](),
	}
}

// ProvisioningPoliciesServerTransport connects instances of armfairfieldgardens.ProvisioningPoliciesClient to instances of ProvisioningPoliciesServer.
// Don't use this type directly, use NewProvisioningPoliciesServerTransport instead.
type ProvisioningPoliciesServerTransport struct {
	srv                                *ProvisioningPoliciesServer
	beginCreateOrUpdate                *tracker[azfake.PollerResponder[armfairfieldgardens.ProvisioningPoliciesClientCreateOrUpdateResponse]]
	newListByProvisioningResourcePager *tracker[azfake.PagerResponder[armfairfieldgardens.ProvisioningPoliciesClientListByProvisioningResourceResponse]]
	beginUpdate                        *tracker[azfake.PollerResponder[armfairfieldgardens.ProvisioningPoliciesClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for ProvisioningPoliciesServerTransport.
func (p *ProvisioningPoliciesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ProvisioningPoliciesClient.BeginCreateOrUpdate":
		resp, err = p.dispatchBeginCreateOrUpdate(req)
	case "ProvisioningPoliciesClient.Delete":
		resp, err = p.dispatchDelete(req)
	case "ProvisioningPoliciesClient.Get":
		resp, err = p.dispatchGet(req)
	case "ProvisioningPoliciesClient.NewListByProvisioningResourcePager":
		resp, err = p.dispatchNewListByProvisioningResourcePager(req)
	case "ProvisioningPoliciesClient.BeginUpdate":
		resp, err = p.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *ProvisioningPoliciesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if p.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := p.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FairfieldGardens/provisioningResources/(?P<provisioningResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/provisioningPolicies/(?P<provisioningPolicyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armfairfieldgardens.ProvisioningPolicy](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		provisioningResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningResourceName")])
		if err != nil {
			return nil, err
		}
		provisioningPolicyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningPolicyName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, provisioningResourceNameParam, provisioningPolicyNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		p.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		p.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		p.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (p *ProvisioningPoliciesServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if p.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FairfieldGardens/provisioningResources/(?P<provisioningResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/provisioningPolicies/(?P<provisioningPolicyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	provisioningResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningResourceName")])
	if err != nil {
		return nil, err
	}
	provisioningPolicyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningPolicyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Delete(req.Context(), resourceGroupNameParam, provisioningResourceNameParam, provisioningPolicyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProvisioningPoliciesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FairfieldGardens/provisioningResources/(?P<provisioningResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/provisioningPolicies/(?P<provisioningPolicyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	provisioningResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningResourceName")])
	if err != nil {
		return nil, err
	}
	provisioningPolicyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningPolicyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), resourceGroupNameParam, provisioningResourceNameParam, provisioningPolicyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProvisioningPolicy, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProvisioningPoliciesServerTransport) dispatchNewListByProvisioningResourcePager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListByProvisioningResourcePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByProvisioningResourcePager not implemented")}
	}
	newListByProvisioningResourcePager := p.newListByProvisioningResourcePager.get(req)
	if newListByProvisioningResourcePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FairfieldGardens/provisioningResources/(?P<provisioningResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/provisioningPolicies`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		provisioningResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningResourceName")])
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewListByProvisioningResourcePager(resourceGroupNameParam, provisioningResourceNameParam, nil)
		newListByProvisioningResourcePager = &resp
		p.newListByProvisioningResourcePager.add(req, newListByProvisioningResourcePager)
		server.PagerResponderInjectNextLinks(newListByProvisioningResourcePager, req, func(page *armfairfieldgardens.ProvisioningPoliciesClientListByProvisioningResourceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByProvisioningResourcePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListByProvisioningResourcePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByProvisioningResourcePager) {
		p.newListByProvisioningResourcePager.remove(req)
	}
	return resp, nil
}

func (p *ProvisioningPoliciesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if p.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := p.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.FairfieldGardens/provisioningResources/(?P<provisioningResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/provisioningPolicies/(?P<provisioningPolicyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armfairfieldgardens.ProvisioningPolicyUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		provisioningResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningResourceName")])
		if err != nil {
			return nil, err
		}
		provisioningPolicyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningPolicyName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginUpdate(req.Context(), resourceGroupNameParam, provisioningResourceNameParam, provisioningPolicyNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		p.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		p.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		p.beginUpdate.remove(req)
	}

	return resp, nil
}
