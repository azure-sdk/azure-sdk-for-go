//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappcontainers

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AppSpacesClient contains the methods for the AppSpaces group.
// Don't use this type directly, use NewAppSpacesClient() instead.
type AppSpacesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAppSpacesClient creates a new instance of AppSpacesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAppSpacesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AppSpacesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AppSpacesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update an App Space in a particular subscription and resource group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - appSpaceEnvelope - Properties used to create an app space
//   - options - AppSpacesClientCreateOrUpdateOptions contains the optional parameters for the AppSpacesClient.CreateOrUpdate
//     method.
func (client *AppSpacesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, appSpaceName string, appSpaceEnvelope AppSpace, options *AppSpacesClientCreateOrUpdateOptions) (AppSpacesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "AppSpacesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, appSpaceName, appSpaceEnvelope, options)
	if err != nil {
		return AppSpacesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AppSpacesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return AppSpacesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AppSpacesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, appSpaceEnvelope AppSpace, options *AppSpacesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, appSpaceEnvelope); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *AppSpacesClient) createOrUpdateHandleResponse(resp *http.Response) (AppSpacesClientCreateOrUpdateResponse, error) {
	result := AppSpacesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpace); err != nil {
		return AppSpacesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete an App Space. Also deletes all of the App Space Resources within the App Space.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - options - AppSpacesClientDeleteOptions contains the optional parameters for the AppSpacesClient.Delete method.
func (client *AppSpacesClient) Delete(ctx context.Context, resourceGroupName string, appSpaceName string, options *AppSpacesClientDeleteOptions) (AppSpacesClientDeleteResponse, error) {
	var err error
	const operationName = "AppSpacesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, appSpaceName, options)
	if err != nil {
		return AppSpacesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AppSpacesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return AppSpacesClientDeleteResponse{}, err
	}
	return AppSpacesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AppSpacesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, options *AppSpacesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get an App Space.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - options - AppSpacesClientGetOptions contains the optional parameters for the AppSpacesClient.Get method.
func (client *AppSpacesClient) Get(ctx context.Context, resourceGroupName string, appSpaceName string, options *AppSpacesClientGetOptions) (AppSpacesClientGetResponse, error) {
	var err error
	const operationName = "AppSpacesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, appSpaceName, options)
	if err != nil {
		return AppSpacesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AppSpacesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AppSpacesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AppSpacesClient) getCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, options *AppSpacesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AppSpacesClient) getHandleResponse(resp *http.Response) (AppSpacesClientGetResponse, error) {
	result := AppSpacesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpace); err != nil {
		return AppSpacesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Get the App Spaces in a given resource group.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - AppSpacesClientListByResourceGroupOptions contains the optional parameters for the AppSpacesClient.NewListByResourceGroupPager
//     method.
func (client *AppSpacesClient) NewListByResourceGroupPager(resourceGroupName string, options *AppSpacesClientListByResourceGroupOptions) *runtime.Pager[AppSpacesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[AppSpacesClientListByResourceGroupResponse]{
		More: func(page AppSpacesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AppSpacesClientListByResourceGroupResponse) (AppSpacesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AppSpacesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return AppSpacesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AppSpacesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *AppSpacesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AppSpacesClient) listByResourceGroupHandleResponse(resp *http.Response) (AppSpacesClientListByResourceGroupResponse, error) {
	result := AppSpacesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpacesCollection); err != nil {
		return AppSpacesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get the App Spaces in a given subscription.
//
// Generated from API version 2023-11-02-preview
//   - options - AppSpacesClientListBySubscriptionOptions contains the optional parameters for the AppSpacesClient.NewListBySubscriptionPager
//     method.
func (client *AppSpacesClient) NewListBySubscriptionPager(options *AppSpacesClientListBySubscriptionOptions) *runtime.Pager[AppSpacesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[AppSpacesClientListBySubscriptionResponse]{
		More: func(page AppSpacesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AppSpacesClientListBySubscriptionResponse) (AppSpacesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AppSpacesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return AppSpacesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AppSpacesClient) listBySubscriptionCreateRequest(ctx context.Context, options *AppSpacesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.App/spaces"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AppSpacesClient) listBySubscriptionHandleResponse(resp *http.Response) (AppSpacesClientListBySubscriptionResponse, error) {
	result := AppSpacesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpacesCollection); err != nil {
		return AppSpacesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Patches an App Space using JSON Merge Patch
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - appSpaceName - Name of the App Space.
//   - appSpaceEnvelope - Properties of an App Space that need to be updated
//   - options - AppSpacesClientUpdateOptions contains the optional parameters for the AppSpacesClient.Update method.
func (client *AppSpacesClient) Update(ctx context.Context, resourceGroupName string, appSpaceName string, appSpaceEnvelope AppSpacePatch, options *AppSpacesClientUpdateOptions) (AppSpacesClientUpdateResponse, error) {
	var err error
	const operationName = "AppSpacesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, appSpaceName, appSpaceEnvelope, options)
	if err != nil {
		return AppSpacesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AppSpacesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AppSpacesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *AppSpacesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, appSpaceName string, appSpaceEnvelope AppSpacePatch, options *AppSpacesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if appSpaceName == "" {
		return nil, errors.New("parameter appSpaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{appSpaceName}", url.PathEscape(appSpaceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, appSpaceEnvelope); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *AppSpacesClient) updateHandleResponse(resp *http.Response) (AppSpacesClientUpdateResponse, error) {
	result := AppSpacesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AppSpace); err != nil {
		return AppSpacesClientUpdateResponse{}, err
	}
	return result, nil
}
