//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmachinelearning

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureMachineLearningServicesClient contains the methods for the AzureMachineLearningServices group.
// Don't use this type directly, use NewAzureMachineLearningServicesClient() instead.
type AzureMachineLearningServicesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAzureMachineLearningServicesClient creates a new instance of AzureMachineLearningServicesClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureMachineLearningServicesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureMachineLearningServicesClient, error) {
	cl, err := arm.NewClient(moduleName+".AzureMachineLearningServicesClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureMachineLearningServicesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// OutboundNetworkDependenciesEndpoints - Called by Client (Portal, CLI, etc) to get a list of all external outbound dependencies
// (FQDNs) programmatically.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - Azure Machine Learning Workspace Name
//   - options - AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsOptions contains the optional parameters
//     for the AzureMachineLearningServicesClient.OutboundNetworkDependenciesEndpoints method.
func (client *AzureMachineLearningServicesClient) OutboundNetworkDependenciesEndpoints(ctx context.Context, resourceGroupName string, workspaceName string, options *AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsOptions) (AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsResponse, error) {
	req, err := client.outboundNetworkDependenciesEndpointsCreateRequest(ctx, resourceGroupName, workspaceName, options)
	if err != nil {
		return AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsResponse{}, runtime.NewResponseError(resp)
	}
	return client.outboundNetworkDependenciesEndpointsHandleResponse(resp)
}

// outboundNetworkDependenciesEndpointsCreateRequest creates the OutboundNetworkDependenciesEndpoints request.
func (client *AzureMachineLearningServicesClient) outboundNetworkDependenciesEndpointsCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, options *AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/outboundNetworkDependenciesEndpoints"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// outboundNetworkDependenciesEndpointsHandleResponse handles the OutboundNetworkDependenciesEndpoints response.
func (client *AzureMachineLearningServicesClient) outboundNetworkDependenciesEndpointsHandleResponse(resp *http.Response) (AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsResponse, error) {
	result := AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExternalFQDNResponse); err != nil {
		return AzureMachineLearningServicesClientOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	return result, nil
}
