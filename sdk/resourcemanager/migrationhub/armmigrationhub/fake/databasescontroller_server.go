// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// DatabasesControllerServer is a fake server for instances of the armmigrationhub.DatabasesControllerClient type.
type DatabasesControllerServer struct {
	// GetDatabase is the fake for method DatabasesControllerClient.GetDatabase
	// HTTP status codes to indicate success: http.StatusOK
	GetDatabase func(ctx context.Context, resourceGroupName string, migrateProjectName string, databaseName string, options *armmigrationhub.DatabasesControllerClientGetDatabaseOptions) (resp azfake.Responder[armmigrationhub.DatabasesControllerClientGetDatabaseResponse], errResp azfake.ErrorResponder)

	// NewListDatabasesPager is the fake for method DatabasesControllerClient.NewListDatabasesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListDatabasesPager func(resourceGroupName string, migrateProjectName string, options *armmigrationhub.DatabasesControllerClientListDatabasesOptions) (resp azfake.PagerResponder[armmigrationhub.DatabasesControllerClientListDatabasesResponse])
}

// NewDatabasesControllerServerTransport creates a new instance of DatabasesControllerServerTransport with the provided implementation.
// The returned DatabasesControllerServerTransport instance is connected to an instance of armmigrationhub.DatabasesControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDatabasesControllerServerTransport(srv *DatabasesControllerServer) *DatabasesControllerServerTransport {
	return &DatabasesControllerServerTransport{
		srv:                   srv,
		newListDatabasesPager: newTracker[azfake.PagerResponder[armmigrationhub.DatabasesControllerClientListDatabasesResponse]](),
	}
}

// DatabasesControllerServerTransport connects instances of armmigrationhub.DatabasesControllerClient to instances of DatabasesControllerServer.
// Don't use this type directly, use NewDatabasesControllerServerTransport instead.
type DatabasesControllerServerTransport struct {
	srv                   *DatabasesControllerServer
	newListDatabasesPager *tracker[azfake.PagerResponder[armmigrationhub.DatabasesControllerClientListDatabasesResponse]]
}

// Do implements the policy.Transporter interface for DatabasesControllerServerTransport.
func (d *DatabasesControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DatabasesControllerServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if databasesControllerServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = databasesControllerServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DatabasesControllerClient.GetDatabase":
				res.resp, res.err = d.dispatchGetDatabase(req)
			case "DatabasesControllerClient.NewListDatabasesPager":
				res.resp, res.err = d.dispatchNewListDatabasesPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DatabasesControllerServerTransport) dispatchGetDatabase(req *http.Request) (*http.Response, error) {
	if d.srv.GetDatabase == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDatabase not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/databases/(?P<databaseName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	databaseNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("databaseName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.GetDatabase(req.Context(), resourceGroupNameParam, migrateProjectNameParam, databaseNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Database, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DatabasesControllerServerTransport) dispatchNewListDatabasesPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListDatabasesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListDatabasesPager not implemented")}
	}
	newListDatabasesPager := d.newListDatabasesPager.get(req)
	if newListDatabasesPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/databases`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		pageSizeUnescaped, err := url.QueryUnescape(qp.Get("pageSize"))
		if err != nil {
			return nil, err
		}
		pageSizeParam, err := parseOptional(pageSizeUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armmigrationhub.DatabasesControllerClientListDatabasesOptions
		if continuationTokenParam != nil || pageSizeParam != nil {
			options = &armmigrationhub.DatabasesControllerClientListDatabasesOptions{
				ContinuationToken: continuationTokenParam,
				PageSize:          pageSizeParam,
			}
		}
		resp := d.srv.NewListDatabasesPager(resourceGroupNameParam, migrateProjectNameParam, options)
		newListDatabasesPager = &resp
		d.newListDatabasesPager.add(req, newListDatabasesPager)
		server.PagerResponderInjectNextLinks(newListDatabasesPager, req, func(page *armmigrationhub.DatabasesControllerClientListDatabasesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListDatabasesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListDatabasesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListDatabasesPager) {
		d.newListDatabasesPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to DatabasesControllerServerTransport
var databasesControllerServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
