//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquota

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GroupQuotaSubscriptionQuotaAllocationClient contains the methods for the GroupQuotaSubscriptionQuotaAllocation group.
// Don't use this type directly, use NewGroupQuotaSubscriptionQuotaAllocationClient() instead.
type GroupQuotaSubscriptionQuotaAllocationClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewGroupQuotaSubscriptionQuotaAllocationClient creates a new instance of GroupQuotaSubscriptionQuotaAllocationClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGroupQuotaSubscriptionQuotaAllocationClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GroupQuotaSubscriptionQuotaAllocationClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GroupQuotaSubscriptionQuotaAllocationClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions
// can also reduce the quota allocated to subscription to give back the group back to MG. The
// quota assignment back to MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum
// unused quota allocated back to MG group quota will be the group quota allocated
// to the subscriptions. So, this API can used to assign Quota to subscriptions and assign back unused quota, which was previously
// allocated from MG group quota to subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - allocateQuotaRequest - Quota requests payload.
//   - options - GroupQuotaSubscriptionQuotaAllocationClientBeginCreateOrUpdateOptions contains the optional parameters for the
//     GroupQuotaSubscriptionQuotaAllocationClient.BeginCreateOrUpdate method.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) BeginCreateOrUpdate(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginCreateOrUpdateOptions) (*runtime.Poller[GroupQuotaSubscriptionQuotaAllocationClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, managementGroupID, groupQuotaName, resourceName, allocateQuotaRequest, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GroupQuotaSubscriptionQuotaAllocationClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GroupQuotaSubscriptionQuotaAllocationClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions
// can also reduce the quota allocated to subscription to give back the group back to MG. The
// quota assignment back to MG group quota is limited by the GroupQuota allocated to subscription, which means the maximum
// unused quota allocated back to MG group quota will be the group quota allocated
// to the subscriptions. So, this API can used to assign Quota to subscriptions and assign back unused quota, which was previously
// allocated from MG group quota to subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
func (client *GroupQuotaSubscriptionQuotaAllocationClient) createOrUpdate(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "GroupQuotaSubscriptionQuotaAllocationClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, managementGroupID, groupQuotaName, resourceName, allocateQuotaRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) createOrUpdateCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, allocateQuotaRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will include
// the GroupQuota and total quota allocated to the subscription. Only the Group quota
// allocated to the subscription can be allocated back to the MG Group Quota.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - filter - FIELD SUPPORTED OPERATORS
//     provider eq {resourceProvider} and location eq {location}
//     Example: $filter= provider eq Microsoft.Compute and location eq eastus
//   - options - GroupQuotaSubscriptionQuotaAllocationClientGetOptions contains the optional parameters for the GroupQuotaSubscriptionQuotaAllocationClient.Get
//     method.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) Get(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, filter string, options *GroupQuotaSubscriptionQuotaAllocationClientGetOptions) (GroupQuotaSubscriptionQuotaAllocationClientGetResponse, error) {
	var err error
	const operationName = "GroupQuotaSubscriptionQuotaAllocationClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, managementGroupID, groupQuotaName, resourceName, filter, options)
	if err != nil {
		return GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) getCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, filter string, options *GroupQuotaSubscriptionQuotaAllocationClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	reqQP.Set("$filter", filter)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) getHandleResponse(resp *http.Response) (GroupQuotaSubscriptionQuotaAllocationClientGetResponse, error) {
	result := GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionQuotaAllocations); err != nil {
		return GroupQuotaSubscriptionQuotaAllocationClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
// the GroupQuota and total quota allocated to the subscription. Only the Group quota
// allocated to the subscription can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the
// specific resource based on the ResourceProvider/Location. $filter is a required
// parameter.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - filter - FIELD SUPPORTED OPERATORS
//     provider eq {resourceProvider} and location eq {location}
//     Example: $filter= provider eq Microsoft.Compute and location eq eastus
//   - options - GroupQuotaSubscriptionQuotaAllocationClientListOptions contains the optional parameters for the GroupQuotaSubscriptionQuotaAllocationClient.NewListPager
//     method.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) NewListPager(managementGroupID string, groupQuotaName string, filter string, options *GroupQuotaSubscriptionQuotaAllocationClientListOptions) *runtime.Pager[GroupQuotaSubscriptionQuotaAllocationClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[GroupQuotaSubscriptionQuotaAllocationClientListResponse]{
		More: func(page GroupQuotaSubscriptionQuotaAllocationClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GroupQuotaSubscriptionQuotaAllocationClientListResponse) (GroupQuotaSubscriptionQuotaAllocationClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "GroupQuotaSubscriptionQuotaAllocationClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, managementGroupID, groupQuotaName, filter, options)
			}, nil)
			if err != nil {
				return GroupQuotaSubscriptionQuotaAllocationClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) listCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, filter string, options *GroupQuotaSubscriptionQuotaAllocationClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	reqQP.Set("$filter", filter)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) listHandleResponse(resp *http.Response) (GroupQuotaSubscriptionQuotaAllocationClientListResponse, error) {
	result := GroupQuotaSubscriptionQuotaAllocationClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionQuotaAllocationsList); err != nil {
		return GroupQuotaSubscriptionQuotaAllocationClientListResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota
// allocated to subscription to give back the group back to MG. The quota assignment back to MG
// group quota is limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota
// to subscriptions and assign back unused quota, which was previously allocated
// from MG group quota to subscription(s).
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - managementGroupID - Management Group Id.
//   - groupQuotaName - The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
//   - resourceName - Resource name.
//   - allocateQuotaRequest - Quota requests payload.
//   - options - GroupQuotaSubscriptionQuotaAllocationClientBeginUpdateOptions contains the optional parameters for the GroupQuotaSubscriptionQuotaAllocationClient.BeginUpdate
//     method.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) BeginUpdate(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginUpdateOptions) (*runtime.Poller[GroupQuotaSubscriptionQuotaAllocationClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, managementGroupID, groupQuotaName, resourceName, allocateQuotaRequest, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GroupQuotaSubscriptionQuotaAllocationClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GroupQuotaSubscriptionQuotaAllocationClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota allocated
// to subscription to give back the group back to MG. The quota assignment back to MG
// group quota is limited by the GroupQuota allocated to subscription, using this API. So, this API can used to assign Quota
// to subscriptions and assign back unused quota, which was previously allocated
// from MG group quota to subscription(s).
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
func (client *GroupQuotaSubscriptionQuotaAllocationClient) update(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "GroupQuotaSubscriptionQuotaAllocationClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, managementGroupID, groupQuotaName, resourceName, allocateQuotaRequest, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *GroupQuotaSubscriptionQuotaAllocationClient) updateCreateRequest(ctx context.Context, managementGroupID string, groupQuotaName string, resourceName string, allocateQuotaRequest SubscriptionQuotaAllocations, options *GroupQuotaSubscriptionQuotaAllocationClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if groupQuotaName == "" {
		return nil, errors.New("parameter groupQuotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupQuotaName}", url.PathEscape(groupQuotaName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, allocateQuotaRequest); err != nil {
		return nil, err
	}
	return req, nil
}
