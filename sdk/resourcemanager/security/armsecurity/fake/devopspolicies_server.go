//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/security/armsecurity"
	"net/http"
	"net/url"
	"regexp"
)

// DevOpsPoliciesServer is a fake server for instances of the armsecurity.DevOpsPoliciesClient type.
type DevOpsPoliciesServer struct {
	// Get is the fake for method DevOpsPoliciesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, securityConnectorName string, policyName string, options *armsecurity.DevOpsPoliciesClientGetOptions) (resp azfake.Responder[armsecurity.DevOpsPoliciesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method DevOpsPoliciesClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, securityConnectorName string, options *armsecurity.DevOpsPoliciesClientListOptions) (resp azfake.PagerResponder[armsecurity.DevOpsPoliciesClientListResponse])
}

// NewDevOpsPoliciesServerTransport creates a new instance of DevOpsPoliciesServerTransport with the provided implementation.
// The returned DevOpsPoliciesServerTransport instance is connected to an instance of armsecurity.DevOpsPoliciesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDevOpsPoliciesServerTransport(srv *DevOpsPoliciesServer) *DevOpsPoliciesServerTransport {
	return &DevOpsPoliciesServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armsecurity.DevOpsPoliciesClientListResponse]](),
	}
}

// DevOpsPoliciesServerTransport connects instances of armsecurity.DevOpsPoliciesClient to instances of DevOpsPoliciesServer.
// Don't use this type directly, use NewDevOpsPoliciesServerTransport instead.
type DevOpsPoliciesServerTransport struct {
	srv          *DevOpsPoliciesServer
	newListPager *tracker[azfake.PagerResponder[armsecurity.DevOpsPoliciesClientListResponse]]
}

// Do implements the policy.Transporter interface for DevOpsPoliciesServerTransport.
func (d *DevOpsPoliciesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DevOpsPoliciesClient.Get":
		resp, err = d.dispatchGet(req)
	case "DevOpsPoliciesClient.NewListPager":
		resp, err = d.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DevOpsPoliciesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Security/securityConnectors/(?P<securityConnectorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/devops/default/policies/(?P<policyName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	securityConnectorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("securityConnectorName")])
	if err != nil {
		return nil, err
	}
	policyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("policyName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Get(req.Context(), resourceGroupNameParam, securityConnectorNameParam, policyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DevOpsPolicy, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DevOpsPoliciesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := d.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Security/securityConnectors/(?P<securityConnectorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/devops/default/policies`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		securityConnectorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("securityConnectorName")])
		if err != nil {
			return nil, err
		}
		devOpsPolicyTypeUnescaped, err := url.QueryUnescape(qp.Get("devOpsPolicyType"))
		if err != nil {
			return nil, err
		}
		devOpsPolicyTypeParam := getOptional(devOpsPolicyTypeUnescaped)
		var options *armsecurity.DevOpsPoliciesClientListOptions
		if devOpsPolicyTypeParam != nil {
			options = &armsecurity.DevOpsPoliciesClientListOptions{
				DevOpsPolicyType: devOpsPolicyTypeParam,
			}
		}
		resp := d.srv.NewListPager(resourceGroupNameParam, securityConnectorNameParam, options)
		newListPager = &resp
		d.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armsecurity.DevOpsPoliciesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		d.newListPager.remove(req)
	}
	return resp, nil
}
