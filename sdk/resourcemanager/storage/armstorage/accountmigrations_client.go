//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armstorage

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AccountMigrationsClient contains the methods for the AccountMigrations group.
// Don't use this type directly, use NewAccountMigrationsClient() instead.
type AccountMigrationsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewAccountMigrationsClient creates a new instance of AccountMigrationsClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewAccountMigrationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AccountMigrationsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &AccountMigrationsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// Get - Gets the status of the ongoing migration for the specified storage account.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01
// resourceGroupName - The name of the resource group within the user's subscription. The name is case insensitive.
// accountName - The name of the storage account within the specified resource group. Storage account names must be between
// 3 and 24 characters in length and use numbers and lower-case letters only.
// accountMigrationName - storage account migration name. It should always be 'default'
// options - AccountMigrationsClientGetOptions contains the optional parameters for the AccountMigrationsClient.Get method.
func (client *AccountMigrationsClient) Get(ctx context.Context, resourceGroupName string, accountName string, accountMigrationName AccountMigrationName, options *AccountMigrationsClientGetOptions) (AccountMigrationsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, accountMigrationName, options)
	if err != nil {
		return AccountMigrationsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AccountMigrationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AccountMigrationsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AccountMigrationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, accountMigrationName AccountMigrationName, options *AccountMigrationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/accountMigrations/{accountMigrationName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if accountMigrationName == "" {
		return nil, errors.New("parameter accountMigrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountMigrationName}", url.PathEscape(string(accountMigrationName)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AccountMigrationsClient) getHandleResponse(resp *http.Response) (AccountMigrationsClientGetResponse, error) {
	result := AccountMigrationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccountMigration); err != nil {
		return AccountMigrationsClientGetResponse{}, err
	}
	return result, nil
}

// BeginPut - Account Migration request can be triggered for a storage account to change its redundancy level. The migration
// updates the non-zonal redundant storage account to a zonal redundant account or
// vice-versa in order to have better reliability and availability. Zone-redundant storage (ZRS) replicates your storage account
// synchronously across three Azure availability zones in the primary region.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01
// resourceGroupName - The name of the resource group within the user's subscription. The name is case insensitive.
// accountName - The name of the storage account within the specified resource group. Storage account names must be between
// 3 and 24 characters in length and use numbers and lower-case letters only.
// accountMigrationName - storage account migration name. It should always be 'default'
// properties - The request parameters required to perform storage account migration.
// options - AccountMigrationsClientBeginPutOptions contains the optional parameters for the AccountMigrationsClient.BeginPut
// method.
func (client *AccountMigrationsClient) BeginPut(ctx context.Context, resourceGroupName string, accountName string, accountMigrationName AccountMigrationName, properties AccountMigration, options *AccountMigrationsClientBeginPutOptions) (*runtime.Poller[AccountMigrationsClientPutResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.put(ctx, resourceGroupName, accountName, accountMigrationName, properties, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[AccountMigrationsClientPutResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[AccountMigrationsClientPutResponse](options.ResumeToken, client.pl, nil)
	}
}

// Put - Account Migration request can be triggered for a storage account to change its redundancy level. The migration updates
// the non-zonal redundant storage account to a zonal redundant account or
// vice-versa in order to have better reliability and availability. Zone-redundant storage (ZRS) replicates your storage account
// synchronously across three Azure availability zones in the primary region.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01
func (client *AccountMigrationsClient) put(ctx context.Context, resourceGroupName string, accountName string, accountMigrationName AccountMigrationName, properties AccountMigration, options *AccountMigrationsClientBeginPutOptions) (*http.Response, error) {
	req, err := client.putCreateRequest(ctx, resourceGroupName, accountName, accountMigrationName, properties, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// putCreateRequest creates the Put request.
func (client *AccountMigrationsClient) putCreateRequest(ctx context.Context, resourceGroupName string, accountName string, accountMigrationName AccountMigrationName, properties AccountMigration, options *AccountMigrationsClientBeginPutOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/accountMigrations/{accountMigrationName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if accountMigrationName == "" {
		return nil, errors.New("parameter accountMigrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountMigrationName}", url.PathEscape(string(accountMigrationName)))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, properties)
}
