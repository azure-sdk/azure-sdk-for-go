//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorder/armedgeorder/v2"
	"net/http"
	"net/url"
	"regexp"
)

// ProductsAndConfigurationsServer is a fake server for instances of the armedgeorder.ProductsAndConfigurationsClient type.
type ProductsAndConfigurationsServer struct {
	// NewListConfigurationsPager is the fake for method ProductsAndConfigurationsClient.NewListConfigurationsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListConfigurationsPager func(configurationsRequest armedgeorder.ConfigurationsRequest, options *armedgeorder.ProductsAndConfigurationsClientListConfigurationsOptions) (resp azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListConfigurationsResponse])

	// NewListProductFamiliesPager is the fake for method ProductsAndConfigurationsClient.NewListProductFamiliesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListProductFamiliesPager func(productFamiliesRequest armedgeorder.ProductFamiliesRequest, options *armedgeorder.ProductsAndConfigurationsClientListProductFamiliesOptions) (resp azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListProductFamiliesResponse])

	// NewListProductFamiliesMetadataPager is the fake for method ProductsAndConfigurationsClient.NewListProductFamiliesMetadataPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListProductFamiliesMetadataPager func(options *armedgeorder.ProductsAndConfigurationsClientListProductFamiliesMetadataOptions) (resp azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListProductFamiliesMetadataResponse])
}

// NewProductsAndConfigurationsServerTransport creates a new instance of ProductsAndConfigurationsServerTransport with the provided implementation.
// The returned ProductsAndConfigurationsServerTransport instance is connected to an instance of armedgeorder.ProductsAndConfigurationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProductsAndConfigurationsServerTransport(srv *ProductsAndConfigurationsServer) *ProductsAndConfigurationsServerTransport {
	return &ProductsAndConfigurationsServerTransport{
		srv:                                 srv,
		newListConfigurationsPager:          newTracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListConfigurationsResponse]](),
		newListProductFamiliesPager:         newTracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListProductFamiliesResponse]](),
		newListProductFamiliesMetadataPager: newTracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListProductFamiliesMetadataResponse]](),
	}
}

// ProductsAndConfigurationsServerTransport connects instances of armedgeorder.ProductsAndConfigurationsClient to instances of ProductsAndConfigurationsServer.
// Don't use this type directly, use NewProductsAndConfigurationsServerTransport instead.
type ProductsAndConfigurationsServerTransport struct {
	srv                                 *ProductsAndConfigurationsServer
	newListConfigurationsPager          *tracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListConfigurationsResponse]]
	newListProductFamiliesPager         *tracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListProductFamiliesResponse]]
	newListProductFamiliesMetadataPager *tracker[azfake.PagerResponder[armedgeorder.ProductsAndConfigurationsClientListProductFamiliesMetadataResponse]]
}

// Do implements the policy.Transporter interface for ProductsAndConfigurationsServerTransport.
func (p *ProductsAndConfigurationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ProductsAndConfigurationsClient.NewListConfigurationsPager":
		resp, err = p.dispatchNewListConfigurationsPager(req)
	case "ProductsAndConfigurationsClient.NewListProductFamiliesPager":
		resp, err = p.dispatchNewListProductFamiliesPager(req)
	case "ProductsAndConfigurationsClient.NewListProductFamiliesMetadataPager":
		resp, err = p.dispatchNewListProductFamiliesMetadataPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *ProductsAndConfigurationsServerTransport) dispatchNewListConfigurationsPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListConfigurationsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListConfigurationsPager not implemented")}
	}
	newListConfigurationsPager := p.newListConfigurationsPager.get(req)
	if newListConfigurationsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.EdgeOrder/listConfigurations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[armedgeorder.ConfigurationsRequest](req)
		if err != nil {
			return nil, err
		}
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armedgeorder.ProductsAndConfigurationsClientListConfigurationsOptions
		if skipTokenParam != nil {
			options = &armedgeorder.ProductsAndConfigurationsClientListConfigurationsOptions{
				SkipToken: skipTokenParam,
			}
		}
		resp := p.srv.NewListConfigurationsPager(body, options)
		newListConfigurationsPager = &resp
		p.newListConfigurationsPager.add(req, newListConfigurationsPager)
		server.PagerResponderInjectNextLinks(newListConfigurationsPager, req, func(page *armedgeorder.ProductsAndConfigurationsClientListConfigurationsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListConfigurationsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListConfigurationsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListConfigurationsPager) {
		p.newListConfigurationsPager.remove(req)
	}
	return resp, nil
}

func (p *ProductsAndConfigurationsServerTransport) dispatchNewListProductFamiliesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListProductFamiliesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListProductFamiliesPager not implemented")}
	}
	newListProductFamiliesPager := p.newListProductFamiliesPager.get(req)
	if newListProductFamiliesPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.EdgeOrder/listProductFamilies`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[armedgeorder.ProductFamiliesRequest](req)
		if err != nil {
			return nil, err
		}
		expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
		if err != nil {
			return nil, err
		}
		expandParam := getOptional(expandUnescaped)
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armedgeorder.ProductsAndConfigurationsClientListProductFamiliesOptions
		if expandParam != nil || skipTokenParam != nil {
			options = &armedgeorder.ProductsAndConfigurationsClientListProductFamiliesOptions{
				Expand:    expandParam,
				SkipToken: skipTokenParam,
			}
		}
		resp := p.srv.NewListProductFamiliesPager(body, options)
		newListProductFamiliesPager = &resp
		p.newListProductFamiliesPager.add(req, newListProductFamiliesPager)
		server.PagerResponderInjectNextLinks(newListProductFamiliesPager, req, func(page *armedgeorder.ProductsAndConfigurationsClientListProductFamiliesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListProductFamiliesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListProductFamiliesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListProductFamiliesPager) {
		p.newListProductFamiliesPager.remove(req)
	}
	return resp, nil
}

func (p *ProductsAndConfigurationsServerTransport) dispatchNewListProductFamiliesMetadataPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListProductFamiliesMetadataPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListProductFamiliesMetadataPager not implemented")}
	}
	newListProductFamiliesMetadataPager := p.newListProductFamiliesMetadataPager.get(req)
	if newListProductFamiliesMetadataPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.EdgeOrder/productFamiliesMetadata`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armedgeorder.ProductsAndConfigurationsClientListProductFamiliesMetadataOptions
		if skipTokenParam != nil {
			options = &armedgeorder.ProductsAndConfigurationsClientListProductFamiliesMetadataOptions{
				SkipToken: skipTokenParam,
			}
		}
		resp := p.srv.NewListProductFamiliesMetadataPager(options)
		newListProductFamiliesMetadataPager = &resp
		p.newListProductFamiliesMetadataPager.add(req, newListProductFamiliesMetadataPager)
		server.PagerResponderInjectNextLinks(newListProductFamiliesMetadataPager, req, func(page *armedgeorder.ProductsAndConfigurationsClientListProductFamiliesMetadataResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListProductFamiliesMetadataPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListProductFamiliesMetadataPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListProductFamiliesMetadataPager) {
		p.newListProductFamiliesMetadataPager.remove(req)
	}
	return resp, nil
}
