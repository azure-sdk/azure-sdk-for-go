// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armadvisor

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/advisor/armadvisor"
	moduleVersion = "v1.3.0-beta.1"
)

// Aggregated - The aggregation level of the score.
type Aggregated string

const (
	AggregatedDay   Aggregated = "day"
	AggregatedMonth Aggregated = "month"
	AggregatedWeek  Aggregated = "week"
)

// PossibleAggregatedValues returns the possible values for the Aggregated const type.
func PossibleAggregatedValues() []Aggregated {
	return []Aggregated{
		AggregatedDay,
		AggregatedMonth,
		AggregatedWeek,
	}
}

// CPUThreshold - Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid
// values: 5 (default), 10, 15 or 20.
type CPUThreshold string

const (
	CPUThresholdFifteen CPUThreshold = "15"
	CPUThresholdFive    CPUThreshold = "5"
	CPUThresholdTen     CPUThreshold = "10"
	CPUThresholdTwenty  CPUThreshold = "20"
)

// PossibleCPUThresholdValues returns the possible values for the CPUThreshold const type.
func PossibleCPUThresholdValues() []CPUThreshold {
	return []CPUThreshold{
		CPUThresholdFifteen,
		CPUThresholdFive,
		CPUThresholdTen,
		CPUThresholdTwenty,
	}
}

type Category string

const (
	CategoryCost                  Category = "Cost"
	CategoryHighAvailability      Category = "HighAvailability"
	CategoryOperationalExcellence Category = "OperationalExcellence"
	CategoryPerformance           Category = "Performance"
	CategorySecurity              Category = "Security"
)

// PossibleCategoryValues returns the possible values for the Category const type.
func PossibleCategoryValues() []Category {
	return []Category{
		CategoryCost,
		CategoryHighAvailability,
		CategoryOperationalExcellence,
		CategoryPerformance,
		CategorySecurity,
	}
}

type ConfigurationName string

const (
	ConfigurationNameDefault ConfigurationName = "default"
)

// PossibleConfigurationNameValues returns the possible values for the ConfigurationName const type.
func PossibleConfigurationNameValues() []ConfigurationName {
	return []ConfigurationName{
		ConfigurationNameDefault,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DigestConfigState - State of digest configuration.
type DigestConfigState string

const (
	DigestConfigStateActive   DigestConfigState = "Active"
	DigestConfigStateDisabled DigestConfigState = "Disabled"
)

// PossibleDigestConfigStateValues returns the possible values for the DigestConfigState const type.
func PossibleDigestConfigStateValues() []DigestConfigState {
	return []DigestConfigState{
		DigestConfigStateActive,
		DigestConfigStateDisabled,
	}
}

// Duration - Minimum duration for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 7 (default),
// 14, 21, 30, 60 or 90.
type Duration string

const (
	DurationFourteen  Duration = "14"
	DurationNinety    Duration = "90"
	DurationSeven     Duration = "7"
	DurationSixty     Duration = "60"
	DurationThirty    Duration = "30"
	DurationTwentyOne Duration = "21"
)

// PossibleDurationValues returns the possible values for the Duration const type.
func PossibleDurationValues() []Duration {
	return []Duration{
		DurationFourteen,
		DurationNinety,
		DurationSeven,
		DurationSixty,
		DurationThirty,
		DurationTwentyOne,
	}
}

// Impact - The business impact of the recommendation.
type Impact string

const (
	ImpactHigh   Impact = "High"
	ImpactLow    Impact = "Low"
	ImpactMedium Impact = "Medium"
)

// PossibleImpactValues returns the possible values for the Impact const type.
func PossibleImpactValues() []Impact {
	return []Impact{
		ImpactHigh,
		ImpactLow,
		ImpactMedium,
	}
}

// PredictionType - Type of the prediction.
type PredictionType string

const (
	PredictionTypePredictiveRightsizing PredictionType = "PredictiveRightsizing"
)

// PossiblePredictionTypeValues returns the possible values for the PredictionType const type.
func PossiblePredictionTypeValues() []PredictionType {
	return []PredictionType{
		PredictionTypePredictiveRightsizing,
	}
}

// Priority - The Priority of the Recommendation.
type Priority string

const (
	PriorityCritical      Priority = "Critical"
	PriorityHigh          Priority = "High"
	PriorityInformational Priority = "Informational"
	PriorityLow           Priority = "Low"
	PriorityMedium        Priority = "Medium"
)

// PossiblePriorityValues returns the possible values for the Priority const type.
func PossiblePriorityValues() []Priority {
	return []Priority{
		PriorityCritical,
		PriorityHigh,
		PriorityInformational,
		PriorityLow,
		PriorityMedium,
	}
}

// PriorityName - Recommendation priority name enum.
type PriorityName string

const (
	// PriorityNameHigh - High
	PriorityNameHigh PriorityName = "High"
	// PriorityNameLow - Low
	PriorityNameLow PriorityName = "Low"
	// PriorityNameMedium - Medium
	PriorityNameMedium PriorityName = "Medium"
)

// PossiblePriorityNameValues returns the possible values for the PriorityName const type.
func PossiblePriorityNameValues() []PriorityName {
	return []PriorityName{
		PriorityNameHigh,
		PriorityNameLow,
		PriorityNameMedium,
	}
}

// Reason - The reason the state of the Recommendation was changed.
type Reason string

const (
	ReasonAlternativeSolution Reason = "AlternativeSolution"
	ReasonExcessiveInvestment Reason = "ExcessiveInvestment"
	ReasonIncompatible        Reason = "Incompatible"
	ReasonRiskAccepted        Reason = "RiskAccepted"
	ReasonTooComplex          Reason = "TooComplex"
	ReasonUnclear             Reason = "Unclear"
)

// PossibleReasonValues returns the possible values for the Reason const type.
func PossibleReasonValues() []Reason {
	return []Reason{
		ReasonAlternativeSolution,
		ReasonExcessiveInvestment,
		ReasonIncompatible,
		ReasonRiskAccepted,
		ReasonTooComplex,
		ReasonUnclear,
	}
}

// ReasonForRejectionName - Reason for rejecting recommendation name enum.
type ReasonForRejectionName string

const (
	// ReasonForRejectionNameNotARisk - Not A Risk
	ReasonForRejectionNameNotARisk ReasonForRejectionName = "NotARisk"
	// ReasonForRejectionNameRiskAccepted - Risk Accepted
	ReasonForRejectionNameRiskAccepted ReasonForRejectionName = "RiskAccepted"
)

// PossibleReasonForRejectionNameValues returns the possible values for the ReasonForRejectionName const type.
func PossibleReasonForRejectionNameValues() []ReasonForRejectionName {
	return []ReasonForRejectionName{
		ReasonForRejectionNameNotARisk,
		ReasonForRejectionNameRiskAccepted,
	}
}

// RecommendationStatusName - Recommendation status name enum.
type RecommendationStatusName string

const (
	// RecommendationStatusNameApproved - Approved
	RecommendationStatusNameApproved RecommendationStatusName = "Approved"
	// RecommendationStatusNamePending - Pending
	RecommendationStatusNamePending RecommendationStatusName = "Pending"
	// RecommendationStatusNameRejected - Rejected
	RecommendationStatusNameRejected RecommendationStatusName = "Rejected"
)

// PossibleRecommendationStatusNameValues returns the possible values for the RecommendationStatusName const type.
func PossibleRecommendationStatusNameValues() []RecommendationStatusName {
	return []RecommendationStatusName{
		RecommendationStatusNameApproved,
		RecommendationStatusNamePending,
		RecommendationStatusNameRejected,
	}
}

// ReviewStatus - Review status string, returns the Reviews by the given status (e.g. 'New', 'Triaged', 'Completed').
type ReviewStatus string

const (
	// ReviewStatusCompleted - Completed
	ReviewStatusCompleted ReviewStatus = "Completed"
	// ReviewStatusInProgress - In Progress
	ReviewStatusInProgress ReviewStatus = "InProgress"
	// ReviewStatusNew - New
	ReviewStatusNew ReviewStatus = "New"
	// ReviewStatusTriaged - Triaged
	ReviewStatusTriaged ReviewStatus = "Triaged"
)

// PossibleReviewStatusValues returns the possible values for the ReviewStatus const type.
func PossibleReviewStatusValues() []ReviewStatus {
	return []ReviewStatus{
		ReviewStatusCompleted,
		ReviewStatusInProgress,
		ReviewStatusNew,
		ReviewStatusTriaged,
	}
}

// Risk - The potential risk of not implementing the recommendation.
type Risk string

const (
	RiskError   Risk = "Error"
	RiskNone    Risk = "None"
	RiskWarning Risk = "Warning"
)

// PossibleRiskValues returns the possible values for the Risk const type.
func PossibleRiskValues() []Risk {
	return []Risk{
		RiskError,
		RiskNone,
		RiskWarning,
	}
}

type Scenario string

const (
	ScenarioAlerts Scenario = "Alerts"
)

// PossibleScenarioValues returns the possible values for the Scenario const type.
func PossibleScenarioValues() []Scenario {
	return []Scenario{
		ScenarioAlerts,
	}
}

// State - The state of the Recommendation
type State string

const (
	StateApproved   State = "Approved"
	StateCompleted  State = "Completed"
	StateDismissed  State = "Dismissed"
	StateInProgress State = "InProgress"
	StatePending    State = "Pending"
	StatePostponed  State = "Postponed"
	StateRejected   State = "Rejected"
)

// PossibleStateValues returns the possible values for the State const type.
func PossibleStateValues() []State {
	return []State{
		StateApproved,
		StateCompleted,
		StateDismissed,
		StateInProgress,
		StatePending,
		StatePostponed,
		StateRejected,
	}
}
