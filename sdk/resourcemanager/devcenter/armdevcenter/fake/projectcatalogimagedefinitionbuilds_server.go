// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devcenter/armdevcenter/v2"
	"net/http"
	"net/url"
	"regexp"
)

// ProjectCatalogImageDefinitionBuildsServer is a fake server for instances of the armdevcenter.ProjectCatalogImageDefinitionBuildsClient type.
type ProjectCatalogImageDefinitionBuildsServer struct {
	// NewListByImageDefinitionPager is the fake for method ProjectCatalogImageDefinitionBuildsClient.NewListByImageDefinitionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByImageDefinitionPager func(resourceGroupName string, projectName string, catalogName string, imageDefinitionName string, options *armdevcenter.ProjectCatalogImageDefinitionBuildsClientListByImageDefinitionOptions) (resp azfake.PagerResponder[armdevcenter.ProjectCatalogImageDefinitionBuildsClientListByImageDefinitionResponse])
}

// NewProjectCatalogImageDefinitionBuildsServerTransport creates a new instance of ProjectCatalogImageDefinitionBuildsServerTransport with the provided implementation.
// The returned ProjectCatalogImageDefinitionBuildsServerTransport instance is connected to an instance of armdevcenter.ProjectCatalogImageDefinitionBuildsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProjectCatalogImageDefinitionBuildsServerTransport(srv *ProjectCatalogImageDefinitionBuildsServer) *ProjectCatalogImageDefinitionBuildsServerTransport {
	return &ProjectCatalogImageDefinitionBuildsServerTransport{
		srv:                           srv,
		newListByImageDefinitionPager: newTracker[azfake.PagerResponder[armdevcenter.ProjectCatalogImageDefinitionBuildsClientListByImageDefinitionResponse]](),
	}
}

// ProjectCatalogImageDefinitionBuildsServerTransport connects instances of armdevcenter.ProjectCatalogImageDefinitionBuildsClient to instances of ProjectCatalogImageDefinitionBuildsServer.
// Don't use this type directly, use NewProjectCatalogImageDefinitionBuildsServerTransport instead.
type ProjectCatalogImageDefinitionBuildsServerTransport struct {
	srv                           *ProjectCatalogImageDefinitionBuildsServer
	newListByImageDefinitionPager *tracker[azfake.PagerResponder[armdevcenter.ProjectCatalogImageDefinitionBuildsClientListByImageDefinitionResponse]]
}

// Do implements the policy.Transporter interface for ProjectCatalogImageDefinitionBuildsServerTransport.
func (p *ProjectCatalogImageDefinitionBuildsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *ProjectCatalogImageDefinitionBuildsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if projectCatalogImageDefinitionBuildsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = projectCatalogImageDefinitionBuildsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ProjectCatalogImageDefinitionBuildsClient.NewListByImageDefinitionPager":
				res.resp, res.err = p.dispatchNewListByImageDefinitionPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *ProjectCatalogImageDefinitionBuildsServerTransport) dispatchNewListByImageDefinitionPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListByImageDefinitionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByImageDefinitionPager not implemented")}
	}
	newListByImageDefinitionPager := p.newListByImageDefinitionPager.get(req)
	if newListByImageDefinitionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/projects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions/(?P<imageDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/builds`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
		if err != nil {
			return nil, err
		}
		catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
		if err != nil {
			return nil, err
		}
		imageDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageDefinitionName")])
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewListByImageDefinitionPager(resourceGroupNameParam, projectNameParam, catalogNameParam, imageDefinitionNameParam, nil)
		newListByImageDefinitionPager = &resp
		p.newListByImageDefinitionPager.add(req, newListByImageDefinitionPager)
		server.PagerResponderInjectNextLinks(newListByImageDefinitionPager, req, func(page *armdevcenter.ProjectCatalogImageDefinitionBuildsClientListByImageDefinitionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByImageDefinitionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListByImageDefinitionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByImageDefinitionPager) {
		p.newListByImageDefinitionPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ProjectCatalogImageDefinitionBuildsServerTransport
var projectCatalogImageDefinitionBuildsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
