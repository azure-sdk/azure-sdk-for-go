//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazuresiterecovery

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DraOperationStatusClient contains the methods for the DraOperationStatus group.
// Don't use this type directly, use NewDraOperationStatusClient() instead.
type DraOperationStatusClient struct {
	internal *arm.Client
}

// NewDraOperationStatusClient creates a new instance of DraOperationStatusClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDraOperationStatusClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*DraOperationStatusClient, error) {
	cl, err := arm.NewClient(moduleName+".DraOperationStatusClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DraOperationStatusClient{
		internal: cl,
	}
	return client, nil
}

// Get - Tracks the results of an asynchronous operation on the fabric agent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-02-16-preview
//   - subscriptionID - The subscription Id.
//   - resourceGroupName - Resource group name.
//   - fabricName - Fabric name.
//   - draName - Dra name.
//   - operationID - Operation Id.
//   - options - DraOperationStatusClientGetOptions contains the optional parameters for the DraOperationStatusClient.Get method.
func (client *DraOperationStatusClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, fabricName string, draName string, operationID string, options *DraOperationStatusClientGetOptions) (DraOperationStatusClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, fabricName, draName, operationID, options)
	if err != nil {
		return DraOperationStatusClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DraOperationStatusClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DraOperationStatusClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DraOperationStatusClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, fabricName string, draName string, operationID string, options *DraOperationStatusClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}/operations/{operationId}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if fabricName == "" {
		return nil, errors.New("parameter fabricName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fabricName}", url.PathEscape(fabricName))
	if draName == "" {
		return nil, errors.New("parameter draName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{draName}", url.PathEscape(draName))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DraOperationStatusClient) getHandleResponse(resp *http.Response) (DraOperationStatusClientGetResponse, error) {
	result := DraOperationStatusClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationStatus); err != nil {
		return DraOperationStatusClientGetResponse{}, err
	}
	return result, nil
}
