// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armsecretsstoreextension

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SecretSyncsClient contains the methods for the SecretSyncs group.
// Don't use this type directly, use NewSecretSyncsClient() instead.
type SecretSyncsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSecretSyncsClient creates a new instance of SecretSyncsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSecretSyncsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SecretSyncsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SecretSyncsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates new or updates a SecretSync instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - secretSyncName - The name of the SecretSync
//   - resource - Resource create parameters.
//   - options - SecretSyncsClientBeginCreateOrUpdateOptions contains the optional parameters for the SecretSyncsClient.BeginCreateOrUpdate
//     method.
func (client *SecretSyncsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, secretSyncName string, resource SecretSync, options *SecretSyncsClientBeginCreateOrUpdateOptions) (*runtime.Poller[SecretSyncsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, secretSyncName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SecretSyncsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SecretSyncsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates new or updates a SecretSync instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
func (client *SecretSyncsClient) createOrUpdate(ctx context.Context, resourceGroupName string, secretSyncName string, resource SecretSync, options *SecretSyncsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "SecretSyncsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, secretSyncName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SecretSyncsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, secretSyncName string, resource SecretSync, _ *SecretSyncsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/secretSyncs/{secretSyncName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if secretSyncName == "" {
		return nil, errors.New("parameter secretSyncName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{secretSyncName}", url.PathEscape(secretSyncName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes a SecretSync instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - secretSyncName - The name of the SecretSync
//   - options - SecretSyncsClientBeginDeleteOptions contains the optional parameters for the SecretSyncsClient.BeginDelete method.
func (client *SecretSyncsClient) BeginDelete(ctx context.Context, resourceGroupName string, secretSyncName string, options *SecretSyncsClientBeginDeleteOptions) (*runtime.Poller[SecretSyncsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, secretSyncName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SecretSyncsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SecretSyncsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes a SecretSync instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
func (client *SecretSyncsClient) deleteOperation(ctx context.Context, resourceGroupName string, secretSyncName string, options *SecretSyncsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "SecretSyncsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, secretSyncName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SecretSyncsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, secretSyncName string, _ *SecretSyncsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/secretSyncs/{secretSyncName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if secretSyncName == "" {
		return nil, errors.New("parameter secretSyncName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{secretSyncName}", url.PathEscape(secretSyncName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the properties of a SecretSync instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - secretSyncName - The name of the SecretSync
//   - options - SecretSyncsClientGetOptions contains the optional parameters for the SecretSyncsClient.Get method.
func (client *SecretSyncsClient) Get(ctx context.Context, resourceGroupName string, secretSyncName string, options *SecretSyncsClientGetOptions) (SecretSyncsClientGetResponse, error) {
	var err error
	const operationName = "SecretSyncsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, secretSyncName, options)
	if err != nil {
		return SecretSyncsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SecretSyncsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SecretSyncsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SecretSyncsClient) getCreateRequest(ctx context.Context, resourceGroupName string, secretSyncName string, _ *SecretSyncsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/secretSyncs/{secretSyncName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if secretSyncName == "" {
		return nil, errors.New("parameter secretSyncName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{secretSyncName}", url.PathEscape(secretSyncName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SecretSyncsClient) getHandleResponse(resp *http.Response) (SecretSyncsClientGetResponse, error) {
	result := SecretSyncsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SecretSync); err != nil {
		return SecretSyncsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Lists the SecretSync instances within a resource group.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SecretSyncsClientListByResourceGroupOptions contains the optional parameters for the SecretSyncsClient.NewListByResourceGroupPager
//     method.
func (client *SecretSyncsClient) NewListByResourceGroupPager(resourceGroupName string, options *SecretSyncsClientListByResourceGroupOptions) *runtime.Pager[SecretSyncsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[SecretSyncsClientListByResourceGroupResponse]{
		More: func(page SecretSyncsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SecretSyncsClientListByResourceGroupResponse) (SecretSyncsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SecretSyncsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return SecretSyncsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *SecretSyncsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *SecretSyncsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/secretSyncs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *SecretSyncsClient) listByResourceGroupHandleResponse(resp *http.Response) (SecretSyncsClientListByResourceGroupResponse, error) {
	result := SecretSyncsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SecretSyncListResult); err != nil {
		return SecretSyncsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Lists the SecretSync instances within an Azure subscription.
//
// Generated from API version 2024-08-21-preview
//   - options - SecretSyncsClientListBySubscriptionOptions contains the optional parameters for the SecretSyncsClient.NewListBySubscriptionPager
//     method.
func (client *SecretSyncsClient) NewListBySubscriptionPager(options *SecretSyncsClientListBySubscriptionOptions) *runtime.Pager[SecretSyncsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[SecretSyncsClientListBySubscriptionResponse]{
		More: func(page SecretSyncsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SecretSyncsClientListBySubscriptionResponse) (SecretSyncsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SecretSyncsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return SecretSyncsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *SecretSyncsClient) listBySubscriptionCreateRequest(ctx context.Context, _ *SecretSyncsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.SecretSyncController/secretSyncs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *SecretSyncsClient) listBySubscriptionHandleResponse(resp *http.Response) (SecretSyncsClientListBySubscriptionResponse, error) {
	result := SecretSyncsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SecretSyncListResult); err != nil {
		return SecretSyncsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Updates a SecretSync instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - secretSyncName - The name of the SecretSync
//   - properties - The resource properties to be updated.
//   - options - SecretSyncsClientBeginUpdateOptions contains the optional parameters for the SecretSyncsClient.BeginUpdate method.
func (client *SecretSyncsClient) BeginUpdate(ctx context.Context, resourceGroupName string, secretSyncName string, properties SecretSyncUpdate, options *SecretSyncsClientBeginUpdateOptions) (*runtime.Poller[SecretSyncsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, secretSyncName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SecretSyncsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SecretSyncsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Updates a SecretSync instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-08-21-preview
func (client *SecretSyncsClient) update(ctx context.Context, resourceGroupName string, secretSyncName string, properties SecretSyncUpdate, options *SecretSyncsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "SecretSyncsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, secretSyncName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *SecretSyncsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, secretSyncName string, properties SecretSyncUpdate, _ *SecretSyncsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecretSyncController/secretSyncs/{secretSyncName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if secretSyncName == "" {
		return nil, errors.New("parameter secretSyncName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{secretSyncName}", url.PathEscape(secretSyncName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-08-21-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
