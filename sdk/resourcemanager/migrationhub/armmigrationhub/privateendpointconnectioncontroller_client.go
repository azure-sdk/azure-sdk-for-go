// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationhub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PrivateEndpointConnectionControllerClient contains the methods for the PrivateEndpointConnectionController group.
// Don't use this type directly, use NewPrivateEndpointConnectionControllerClient() instead.
type PrivateEndpointConnectionControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPrivateEndpointConnectionControllerClient creates a new instance of PrivateEndpointConnectionControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPrivateEndpointConnectionControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PrivateEndpointConnectionControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PrivateEndpointConnectionControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// DeletePrivateEndpointConnection - Delete the private endpoint. Deleting non-existent private endpoint is a no-operation.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - peConnectionName - Private endpoint connection name.
//   - options - PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionOptions contains the optional parameters
//     for the PrivateEndpointConnectionControllerClient.DeletePrivateEndpointConnection method.
func (client *PrivateEndpointConnectionControllerClient) DeletePrivateEndpointConnection(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, options *PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionOptions) (PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionResponse, error) {
	var err error
	const operationName = "PrivateEndpointConnectionControllerClient.DeletePrivateEndpointConnection"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deletePrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, migrateProjectName, peConnectionName, options)
	if err != nil {
		return PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionResponse{}, err
	}
	resp, err := client.deletePrivateEndpointConnectionHandleResponse(httpResp)
	return resp, err
}

// deletePrivateEndpointConnectionCreateRequest creates the DeletePrivateEndpointConnection request.
func (client *PrivateEndpointConnectionControllerClient) deletePrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, _ *PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnections/{peConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if peConnectionName == "" {
		return nil, errors.New("parameter peConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{peConnectionName}", url.PathEscape(peConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// deletePrivateEndpointConnectionHandleResponse handles the DeletePrivateEndpointConnection response.
func (client *PrivateEndpointConnectionControllerClient) deletePrivateEndpointConnectionHandleResponse(resp *http.Response) (PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionResponse, error) {
	result := PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionResponse{}, err
	}
	return result, nil
}

// GetPrivateEndpointConnection - Get the private endpoint with the specified name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - peConnectionName - Private endpoint connection name.
//   - options - PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionOptions contains the optional parameters
//     for the PrivateEndpointConnectionControllerClient.GetPrivateEndpointConnection method.
func (client *PrivateEndpointConnectionControllerClient) GetPrivateEndpointConnection(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, options *PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionOptions) (PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionResponse, error) {
	var err error
	const operationName = "PrivateEndpointConnectionControllerClient.GetPrivateEndpointConnection"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, migrateProjectName, peConnectionName, options)
	if err != nil {
		return PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionResponse{}, err
	}
	resp, err := client.getPrivateEndpointConnectionHandleResponse(httpResp)
	return resp, err
}

// getPrivateEndpointConnectionCreateRequest creates the GetPrivateEndpointConnection request.
func (client *PrivateEndpointConnectionControllerClient) getPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, _ *PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnections/{peConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if peConnectionName == "" {
		return nil, errors.New("parameter peConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{peConnectionName}", url.PathEscape(peConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPrivateEndpointConnectionHandleResponse handles the GetPrivateEndpointConnection response.
func (client *PrivateEndpointConnectionControllerClient) getPrivateEndpointConnectionHandleResponse(resp *http.Response) (PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionResponse, error) {
	result := PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnection); err != nil {
		return PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionResponse{}, err
	}
	return result, nil
}

// PutPrivateEndpointConnection - Create or update a private endpoint with specified name. If a private endpoint already exists,
// update it.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - peConnectionName - Private endpoint connection name.
//   - body - Private endpoint connection body.
//   - options - PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionOptions contains the optional parameters
//     for the PrivateEndpointConnectionControllerClient.PutPrivateEndpointConnection method.
func (client *PrivateEndpointConnectionControllerClient) PutPrivateEndpointConnection(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, body PrivateEndpointConnection, options *PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionOptions) (PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse, error) {
	var err error
	const operationName = "PrivateEndpointConnectionControllerClient.PutPrivateEndpointConnection"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putPrivateEndpointConnectionCreateRequest(ctx, resourceGroupName, migrateProjectName, peConnectionName, body, options)
	if err != nil {
		return PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse{}, err
	}
	resp, err := client.putPrivateEndpointConnectionHandleResponse(httpResp)
	return resp, err
}

// putPrivateEndpointConnectionCreateRequest creates the PutPrivateEndpointConnection request.
func (client *PrivateEndpointConnectionControllerClient) putPrivateEndpointConnectionCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, body PrivateEndpointConnection, _ *PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnections/{peConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	if peConnectionName == "" {
		return nil, errors.New("parameter peConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{peConnectionName}", url.PathEscape(peConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// putPrivateEndpointConnectionHandleResponse handles the PutPrivateEndpointConnection response.
func (client *PrivateEndpointConnectionControllerClient) putPrivateEndpointConnectionHandleResponse(resp *http.Response) (PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse, error) {
	result := PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateEndpointConnection); err != nil {
		return PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse{}, err
	}
	return result, nil
}
