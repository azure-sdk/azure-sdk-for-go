// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azspeechtotexttranscription

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SpeechToTextBatchTranscriptionClient contains the methods for the SpeechToTextBatchTranscription group.
// Don't use this type directly, use [SpeechToTextClient.NewSpeechToTextBatchTranscriptionClient] instead.
type SpeechToTextBatchTranscriptionClient struct {
	internal *azcore.Client
	endpoint string
}

// DeleteTranscription - Deletes the specified transcription task.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-15
//   - id - The id of this entity.
//   - options - SpeechToTextBatchTranscriptionClientDeleteTranscriptionOptions contains the optional parameters for the SpeechToTextBatchTranscriptionClient.DeleteTranscription
//     method.
func (client *SpeechToTextBatchTranscriptionClient) DeleteTranscription(ctx context.Context, id string, options *SpeechToTextBatchTranscriptionClientDeleteTranscriptionOptions) (SpeechToTextBatchTranscriptionClientDeleteTranscriptionResponse, error) {
	var err error
	const operationName = "SpeechToTextBatchTranscriptionClient.DeleteTranscription"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteTranscriptionCreateRequest(ctx, id, options)
	if err != nil {
		return SpeechToTextBatchTranscriptionClientDeleteTranscriptionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpeechToTextBatchTranscriptionClientDeleteTranscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpeechToTextBatchTranscriptionClientDeleteTranscriptionResponse{}, err
	}
	return SpeechToTextBatchTranscriptionClientDeleteTranscriptionResponse{}, nil
}

// deleteTranscriptionCreateRequest creates the DeleteTranscription request.
func (client *SpeechToTextBatchTranscriptionClient) deleteTranscriptionCreateRequest(ctx context.Context, id string, _ *SpeechToTextBatchTranscriptionClientDeleteTranscriptionOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/transcriptions/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetTranscription - Gets the transcription identified by the given ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-15
//   - id - The id of this entity.
//   - options - SpeechToTextBatchTranscriptionClientGetTranscriptionOptions contains the optional parameters for the SpeechToTextBatchTranscriptionClient.GetTranscription
//     method.
func (client *SpeechToTextBatchTranscriptionClient) GetTranscription(ctx context.Context, id string, options *SpeechToTextBatchTranscriptionClientGetTranscriptionOptions) (SpeechToTextBatchTranscriptionClientGetTranscriptionResponse, error) {
	var err error
	const operationName = "SpeechToTextBatchTranscriptionClient.GetTranscription"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getTranscriptionCreateRequest(ctx, id, options)
	if err != nil {
		return SpeechToTextBatchTranscriptionClientGetTranscriptionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpeechToTextBatchTranscriptionClientGetTranscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SpeechToTextBatchTranscriptionClientGetTranscriptionResponse{}, err
	}
	resp, err := client.getTranscriptionHandleResponse(httpResp)
	return resp, err
}

// getTranscriptionCreateRequest creates the GetTranscription request.
func (client *SpeechToTextBatchTranscriptionClient) getTranscriptionCreateRequest(ctx context.Context, id string, _ *SpeechToTextBatchTranscriptionClientGetTranscriptionOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/transcriptions/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getTranscriptionHandleResponse handles the GetTranscription response.
func (client *SpeechToTextBatchTranscriptionClient) getTranscriptionHandleResponse(resp *http.Response) (SpeechToTextBatchTranscriptionClientGetTranscriptionResponse, error) {
	result := SpeechToTextBatchTranscriptionClientGetTranscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TranscriptionJob); err != nil {
		return SpeechToTextBatchTranscriptionClientGetTranscriptionResponse{}, err
	}
	return result, nil
}

// NewListTranscriptionFilesPager - Gets the files of the transcription identified by the given ID
//
// Generated from API version 2024-11-15
//   - id - The id of this entity.
//   - options - SpeechToTextBatchTranscriptionClientListTranscriptionFilesOptions contains the optional parameters for the SpeechToTextBatchTranscriptionClient.NewListTranscriptionFilesPager
//     method.
func (client *SpeechToTextBatchTranscriptionClient) NewListTranscriptionFilesPager(id string, options *SpeechToTextBatchTranscriptionClientListTranscriptionFilesOptions) *runtime.Pager[SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse] {
	return runtime.NewPager(runtime.PagingHandler[SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse]{
		More: func(page SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse) (SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SpeechToTextBatchTranscriptionClient.NewListTranscriptionFilesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listTranscriptionFilesCreateRequest(ctx, id, options)
			}, nil)
			if err != nil {
				return SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse{}, err
			}
			return client.listTranscriptionFilesHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listTranscriptionFilesCreateRequest creates the ListTranscriptionFiles request.
func (client *SpeechToTextBatchTranscriptionClient) listTranscriptionFilesCreateRequest(ctx context.Context, id string, options *SpeechToTextBatchTranscriptionClientListTranscriptionFilesOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/transcriptions/{id}/files"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-15")
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listTranscriptionFilesHandleResponse handles the ListTranscriptionFiles response.
func (client *SpeechToTextBatchTranscriptionClient) listTranscriptionFilesHandleResponse(resp *http.Response) (SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse, error) {
	result := SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SpeechToTextCustomPageTranscriptionFile); err != nil {
		return SpeechToTextBatchTranscriptionClientListTranscriptionFilesResponse{}, err
	}
	return result, nil
}

// NewListTranscriptionsPager - Gets a list of transcriptions for the authenticated subscription.
//
// Generated from API version 2024-11-15
//   - options - SpeechToTextBatchTranscriptionClientListTranscriptionsOptions contains the optional parameters for the SpeechToTextBatchTranscriptionClient.NewListTranscriptionsPager
//     method.
func (client *SpeechToTextBatchTranscriptionClient) NewListTranscriptionsPager(options *SpeechToTextBatchTranscriptionClientListTranscriptionsOptions) *runtime.Pager[SpeechToTextBatchTranscriptionClientListTranscriptionsResponse] {
	return runtime.NewPager(runtime.PagingHandler[SpeechToTextBatchTranscriptionClientListTranscriptionsResponse]{
		More: func(page SpeechToTextBatchTranscriptionClientListTranscriptionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SpeechToTextBatchTranscriptionClientListTranscriptionsResponse) (SpeechToTextBatchTranscriptionClientListTranscriptionsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SpeechToTextBatchTranscriptionClient.NewListTranscriptionsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listTranscriptionsCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return SpeechToTextBatchTranscriptionClientListTranscriptionsResponse{}, err
			}
			return client.listTranscriptionsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listTranscriptionsCreateRequest creates the ListTranscriptions request.
func (client *SpeechToTextBatchTranscriptionClient) listTranscriptionsCreateRequest(ctx context.Context, options *SpeechToTextBatchTranscriptionClientListTranscriptionsOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/transcriptions"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-15")
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listTranscriptionsHandleResponse handles the ListTranscriptions response.
func (client *SpeechToTextBatchTranscriptionClient) listTranscriptionsHandleResponse(resp *http.Response) (SpeechToTextBatchTranscriptionClientListTranscriptionsResponse, error) {
	result := SpeechToTextBatchTranscriptionClientListTranscriptionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SpeechToTextCustomPageTranscriptionJob); err != nil {
		return SpeechToTextBatchTranscriptionClientListTranscriptionsResponse{}, err
	}
	return result, nil
}

// PatchTranscription - Updates the mutable details of the transcription identified by its ID.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-15
//   - id - The id of this entity.
//   - resource - The resource instance.
//   - options - SpeechToTextBatchTranscriptionClientPatchTranscriptionOptions contains the optional parameters for the SpeechToTextBatchTranscriptionClient.PatchTranscription
//     method.
func (client *SpeechToTextBatchTranscriptionClient) PatchTranscription(ctx context.Context, id string, resource TranscriptionJob, options *SpeechToTextBatchTranscriptionClientPatchTranscriptionOptions) (SpeechToTextBatchTranscriptionClientPatchTranscriptionResponse, error) {
	var err error
	const operationName = "SpeechToTextBatchTranscriptionClient.PatchTranscription"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchTranscriptionCreateRequest(ctx, id, resource, options)
	if err != nil {
		return SpeechToTextBatchTranscriptionClientPatchTranscriptionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpeechToTextBatchTranscriptionClientPatchTranscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SpeechToTextBatchTranscriptionClientPatchTranscriptionResponse{}, err
	}
	resp, err := client.patchTranscriptionHandleResponse(httpResp)
	return resp, err
}

// patchTranscriptionCreateRequest creates the PatchTranscription request.
func (client *SpeechToTextBatchTranscriptionClient) patchTranscriptionCreateRequest(ctx context.Context, id string, resource TranscriptionJob, _ *SpeechToTextBatchTranscriptionClientPatchTranscriptionOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/transcriptions/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// patchTranscriptionHandleResponse handles the PatchTranscription response.
func (client *SpeechToTextBatchTranscriptionClient) patchTranscriptionHandleResponse(resp *http.Response) (SpeechToTextBatchTranscriptionClientPatchTranscriptionResponse, error) {
	result := SpeechToTextBatchTranscriptionClientPatchTranscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TranscriptionJob); err != nil {
		return SpeechToTextBatchTranscriptionClientPatchTranscriptionResponse{}, err
	}
	return result, nil
}

// SubmitTranscription - Submits a new transcription job.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-15
//   - resource - The resource instance.
//   - options - SpeechToTextBatchTranscriptionClientSubmitTranscriptionOptions contains the optional parameters for the SpeechToTextBatchTranscriptionClient.SubmitTranscription
//     method.
func (client *SpeechToTextBatchTranscriptionClient) SubmitTranscription(ctx context.Context, resource TranscriptionJob, options *SpeechToTextBatchTranscriptionClientSubmitTranscriptionOptions) (SpeechToTextBatchTranscriptionClientSubmitTranscriptionResponse, error) {
	var err error
	const operationName = "SpeechToTextBatchTranscriptionClient.SubmitTranscription"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.submitTranscriptionCreateRequest(ctx, resource, options)
	if err != nil {
		return SpeechToTextBatchTranscriptionClientSubmitTranscriptionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpeechToTextBatchTranscriptionClientSubmitTranscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SpeechToTextBatchTranscriptionClientSubmitTranscriptionResponse{}, err
	}
	resp, err := client.submitTranscriptionHandleResponse(httpResp)
	return resp, err
}

// submitTranscriptionCreateRequest creates the SubmitTranscription request.
func (client *SpeechToTextBatchTranscriptionClient) submitTranscriptionCreateRequest(ctx context.Context, resource TranscriptionJob, _ *SpeechToTextBatchTranscriptionClientSubmitTranscriptionOptions) (*policy.Request, error) {
	host := "{endpoint}/speechtotext"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/transcriptions:submit"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// submitTranscriptionHandleResponse handles the SubmitTranscription response.
func (client *SpeechToTextBatchTranscriptionClient) submitTranscriptionHandleResponse(resp *http.Response) (SpeechToTextBatchTranscriptionClientSubmitTranscriptionResponse, error) {
	result := SpeechToTextBatchTranscriptionClientSubmitTranscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TranscriptionJob); err != nil {
		return SpeechToTextBatchTranscriptionClientSubmitTranscriptionResponse{}, err
	}
	return result, nil
}
