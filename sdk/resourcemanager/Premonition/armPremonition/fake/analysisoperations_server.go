//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/Premonition/armPremonition"
	"net/http"
	"net/url"
	"regexp"
)

// AnalysisOperationsServer is a fake server for instances of the armPremonition.AnalysisOperationsClient type.
type AnalysisOperationsServer struct {
	// BeginCreate is the fake for method AnalysisOperationsClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, libraryName string, analysisName string, resource armPremonition.Analysis, options *armPremonition.AnalysisOperationsClientBeginCreateOptions) (resp azfake.PollerResponder[armPremonition.AnalysisOperationsClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method AnalysisOperationsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, libraryName string, analysisName string, options *armPremonition.AnalysisOperationsClientBeginDeleteOptions) (resp azfake.PollerResponder[armPremonition.AnalysisOperationsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AnalysisOperationsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, libraryName string, analysisName string, options *armPremonition.AnalysisOperationsClientGetOptions) (resp azfake.Responder[armPremonition.AnalysisOperationsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByParentPager is the fake for method AnalysisOperationsClient.NewListByParentPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByParentPager func(resourceGroupName string, libraryName string, options *armPremonition.AnalysisOperationsClientListByParentOptions) (resp azfake.PagerResponder[armPremonition.AnalysisOperationsClientListByParentResponse])

	// Update is the fake for method AnalysisOperationsClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, libraryName string, analysisName string, properties armPremonition.AnalysisUpdate, options *armPremonition.AnalysisOperationsClientUpdateOptions) (resp azfake.Responder[armPremonition.AnalysisOperationsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewAnalysisOperationsServerTransport creates a new instance of AnalysisOperationsServerTransport with the provided implementation.
// The returned AnalysisOperationsServerTransport instance is connected to an instance of armPremonition.AnalysisOperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAnalysisOperationsServerTransport(srv *AnalysisOperationsServer) *AnalysisOperationsServerTransport {
	return &AnalysisOperationsServerTransport{
		srv:                  srv,
		beginCreate:          newTracker[azfake.PollerResponder[armPremonition.AnalysisOperationsClientCreateResponse]](),
		beginDelete:          newTracker[azfake.PollerResponder[armPremonition.AnalysisOperationsClientDeleteResponse]](),
		newListByParentPager: newTracker[azfake.PagerResponder[armPremonition.AnalysisOperationsClientListByParentResponse]](),
	}
}

// AnalysisOperationsServerTransport connects instances of armPremonition.AnalysisOperationsClient to instances of AnalysisOperationsServer.
// Don't use this type directly, use NewAnalysisOperationsServerTransport instead.
type AnalysisOperationsServerTransport struct {
	srv                  *AnalysisOperationsServer
	beginCreate          *tracker[azfake.PollerResponder[armPremonition.AnalysisOperationsClientCreateResponse]]
	beginDelete          *tracker[azfake.PollerResponder[armPremonition.AnalysisOperationsClientDeleteResponse]]
	newListByParentPager *tracker[azfake.PagerResponder[armPremonition.AnalysisOperationsClientListByParentResponse]]
}

// Do implements the policy.Transporter interface for AnalysisOperationsServerTransport.
func (a *AnalysisOperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "AnalysisOperationsClient.BeginCreate":
		resp, err = a.dispatchBeginCreate(req)
	case "AnalysisOperationsClient.BeginDelete":
		resp, err = a.dispatchBeginDelete(req)
	case "AnalysisOperationsClient.Get":
		resp, err = a.dispatchGet(req)
	case "AnalysisOperationsClient.NewListByParentPager":
		resp, err = a.dispatchNewListByParentPager(req)
	case "AnalysisOperationsClient.Update":
		resp, err = a.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *AnalysisOperationsServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := a.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/analyses/(?P<analysisName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armPremonition.Analysis](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
		if err != nil {
			return nil, err
		}
		analysisNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("analysisName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginCreate(req.Context(), resourceGroupNameParam, libraryNameParam, analysisNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		a.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		a.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		a.beginCreate.remove(req)
	}

	return resp, nil
}

func (a *AnalysisOperationsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/analyses/(?P<analysisName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
		if err != nil {
			return nil, err
		}
		analysisNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("analysisName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceGroupNameParam, libraryNameParam, analysisNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *AnalysisOperationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/analyses/(?P<analysisName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
	if err != nil {
		return nil, err
	}
	analysisNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("analysisName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, libraryNameParam, analysisNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Analysis, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AnalysisOperationsServerTransport) dispatchNewListByParentPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByParentPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByParentPager not implemented")}
	}
	newListByParentPager := a.newListByParentPager.get(req)
	if newListByParentPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/analyses`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByParentPager(resourceGroupNameParam, libraryNameParam, nil)
		newListByParentPager = &resp
		a.newListByParentPager.add(req, newListByParentPager)
		server.PagerResponderInjectNextLinks(newListByParentPager, req, func(page *armPremonition.AnalysisOperationsClientListByParentResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByParentPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByParentPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByParentPager) {
		a.newListByParentPager.remove(req)
	}
	return resp, nil
}

func (a *AnalysisOperationsServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/analyses/(?P<analysisName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armPremonition.AnalysisUpdate](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
	if err != nil {
		return nil, err
	}
	analysisNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("analysisName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Update(req.Context(), resourceGroupNameParam, libraryNameParam, analysisNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Analysis, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
