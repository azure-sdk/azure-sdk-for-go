// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/ai/azspeechbatchtranscription/azspeechbatchtranscription"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// BatchTranscriptionServer is a fake server for instances of the azspeechbatchtranscription.BatchTranscriptionClient type.
type BatchTranscriptionServer struct {
	// DeleteTranscription is the fake for method BatchTranscriptionClient.DeleteTranscription
	// HTTP status codes to indicate success: http.StatusNoContent
	DeleteTranscription func(ctx context.Context, id string, options *azspeechbatchtranscription.BatchTranscriptionClientDeleteTranscriptionOptions) (resp azfake.Responder[azspeechbatchtranscription.BatchTranscriptionClientDeleteTranscriptionResponse], errResp azfake.ErrorResponder)

	// GetTranscription is the fake for method BatchTranscriptionClient.GetTranscription
	// HTTP status codes to indicate success: http.StatusOK
	GetTranscription func(ctx context.Context, id string, options *azspeechbatchtranscription.BatchTranscriptionClientGetTranscriptionOptions) (resp azfake.Responder[azspeechbatchtranscription.BatchTranscriptionClientGetTranscriptionResponse], errResp azfake.ErrorResponder)

	// NewListTranscriptionFilesPager is the fake for method BatchTranscriptionClient.NewListTranscriptionFilesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListTranscriptionFilesPager func(id string, options *azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionFilesOptions) (resp azfake.PagerResponder[azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionFilesResponse])

	// NewListTranscriptionsPager is the fake for method BatchTranscriptionClient.NewListTranscriptionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListTranscriptionsPager func(options *azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionsOptions) (resp azfake.PagerResponder[azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionsResponse])

	// StartTranscription is the fake for method BatchTranscriptionClient.StartTranscription
	// HTTP status codes to indicate success: http.StatusCreated
	StartTranscription func(ctx context.Context, resource azspeechbatchtranscription.TranscriptionJob, options *azspeechbatchtranscription.BatchTranscriptionClientStartTranscriptionOptions) (resp azfake.Responder[azspeechbatchtranscription.BatchTranscriptionClientStartTranscriptionResponse], errResp azfake.ErrorResponder)
}

// NewBatchTranscriptionServerTransport creates a new instance of BatchTranscriptionServerTransport with the provided implementation.
// The returned BatchTranscriptionServerTransport instance is connected to an instance of azspeechbatchtranscription.BatchTranscriptionClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBatchTranscriptionServerTransport(srv *BatchTranscriptionServer) *BatchTranscriptionServerTransport {
	return &BatchTranscriptionServerTransport{
		srv:                            srv,
		newListTranscriptionFilesPager: newTracker[azfake.PagerResponder[azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionFilesResponse]](),
		newListTranscriptionsPager:     newTracker[azfake.PagerResponder[azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionsResponse]](),
	}
}

// BatchTranscriptionServerTransport connects instances of azspeechbatchtranscription.BatchTranscriptionClient to instances of BatchTranscriptionServer.
// Don't use this type directly, use NewBatchTranscriptionServerTransport instead.
type BatchTranscriptionServerTransport struct {
	srv                            *BatchTranscriptionServer
	newListTranscriptionFilesPager *tracker[azfake.PagerResponder[azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionFilesResponse]]
	newListTranscriptionsPager     *tracker[azfake.PagerResponder[azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionsResponse]]
}

// Do implements the policy.Transporter interface for BatchTranscriptionServerTransport.
func (b *BatchTranscriptionServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToMethodFake(req, method)
}

func (b *BatchTranscriptionServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if batchTranscriptionServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = batchTranscriptionServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "BatchTranscriptionClient.DeleteTranscription":
				res.resp, res.err = b.dispatchDeleteTranscription(req)
			case "BatchTranscriptionClient.GetTranscription":
				res.resp, res.err = b.dispatchGetTranscription(req)
			case "BatchTranscriptionClient.NewListTranscriptionFilesPager":
				res.resp, res.err = b.dispatchNewListTranscriptionFilesPager(req)
			case "BatchTranscriptionClient.NewListTranscriptionsPager":
				res.resp, res.err = b.dispatchNewListTranscriptionsPager(req)
			case "BatchTranscriptionClient.StartTranscription":
				res.resp, res.err = b.dispatchStartTranscription(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (b *BatchTranscriptionServerTransport) dispatchDeleteTranscription(req *http.Request) (*http.Response, error) {
	if b.srv.DeleteTranscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteTranscription not implemented")}
	}
	const regexStr = `/transcriptions/(?P<id>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	idParam, err := url.PathUnescape(matches[regex.SubexpIndex("id")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.DeleteTranscription(req.Context(), idParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BatchTranscriptionServerTransport) dispatchGetTranscription(req *http.Request) (*http.Response, error) {
	if b.srv.GetTranscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetTranscription not implemented")}
	}
	const regexStr = `/transcriptions/(?P<id>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	idParam, err := url.PathUnescape(matches[regex.SubexpIndex("id")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.GetTranscription(req.Context(), idParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TranscriptionJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BatchTranscriptionServerTransport) dispatchNewListTranscriptionFilesPager(req *http.Request) (*http.Response, error) {
	if b.srv.NewListTranscriptionFilesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListTranscriptionFilesPager not implemented")}
	}
	newListTranscriptionFilesPager := b.newListTranscriptionFilesPager.get(req)
	if newListTranscriptionFilesPager == nil {
		const regexStr = `/transcriptions/(?P<id>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/files`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		idParam, err := url.PathUnescape(matches[regex.SubexpIndex("id")])
		if err != nil {
			return nil, err
		}
		topUnescaped, err := url.QueryUnescape(qp.Get("top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		skipUnescaped, err := url.QueryUnescape(qp.Get("skip"))
		if err != nil {
			return nil, err
		}
		skipParam, err := parseOptional(skipUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		var options *azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionFilesOptions
		if topParam != nil || skipParam != nil || filterParam != nil {
			options = &azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionFilesOptions{
				Top:    topParam,
				Skip:   skipParam,
				Filter: filterParam,
			}
		}
		resp := b.srv.NewListTranscriptionFilesPager(idParam, options)
		newListTranscriptionFilesPager = &resp
		b.newListTranscriptionFilesPager.add(req, newListTranscriptionFilesPager)
		server.PagerResponderInjectNextLinks(newListTranscriptionFilesPager, req, func(page *azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionFilesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListTranscriptionFilesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		b.newListTranscriptionFilesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListTranscriptionFilesPager) {
		b.newListTranscriptionFilesPager.remove(req)
	}
	return resp, nil
}

func (b *BatchTranscriptionServerTransport) dispatchNewListTranscriptionsPager(req *http.Request) (*http.Response, error) {
	if b.srv.NewListTranscriptionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListTranscriptionsPager not implemented")}
	}
	newListTranscriptionsPager := b.newListTranscriptionsPager.get(req)
	if newListTranscriptionsPager == nil {
		qp := req.URL.Query()
		topUnescaped, err := url.QueryUnescape(qp.Get("top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		skipUnescaped, err := url.QueryUnescape(qp.Get("skip"))
		if err != nil {
			return nil, err
		}
		skipParam, err := parseOptional(skipUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		var options *azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionsOptions
		if topParam != nil || skipParam != nil || filterParam != nil {
			options = &azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionsOptions{
				Top:    topParam,
				Skip:   skipParam,
				Filter: filterParam,
			}
		}
		resp := b.srv.NewListTranscriptionsPager(options)
		newListTranscriptionsPager = &resp
		b.newListTranscriptionsPager.add(req, newListTranscriptionsPager)
		server.PagerResponderInjectNextLinks(newListTranscriptionsPager, req, func(page *azspeechbatchtranscription.BatchTranscriptionClientListTranscriptionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListTranscriptionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		b.newListTranscriptionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListTranscriptionsPager) {
		b.newListTranscriptionsPager.remove(req)
	}
	return resp, nil
}

func (b *BatchTranscriptionServerTransport) dispatchStartTranscription(req *http.Request) (*http.Response, error) {
	if b.srv.StartTranscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method StartTranscription not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azspeechbatchtranscription.TranscriptionJob](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.StartTranscription(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TranscriptionJob, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to BatchTranscriptionServerTransport
var batchTranscriptionServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
