//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SQLServerAvailabilityGroupsClient contains the methods for the SQLServerAvailabilityGroups group.
// Don't use this type directly, use NewSQLServerAvailabilityGroupsClient() instead.
type SQLServerAvailabilityGroupsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSQLServerAvailabilityGroupsClient creates a new instance of SQLServerAvailabilityGroupsClient with the specified values.
//   - subscriptionID - The ID of the Azure subscription
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSQLServerAvailabilityGroupsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SQLServerAvailabilityGroupsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SQLServerAvailabilityGroupsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Create - Creates or replaces an Arc Sql Server Availability Group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - availabilityGroupName - Name of SQL Availability Group
//   - sqlServerAvailabilityGroupResource - The request body for availability group resource.
//   - options - SQLServerAvailabilityGroupsClientCreateOptions contains the optional parameters for the SQLServerAvailabilityGroupsClient.Create
//     method.
func (client *SQLServerAvailabilityGroupsClient) Create(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, sqlServerAvailabilityGroupResource SQLServerAvailabilityGroupResource, options *SQLServerAvailabilityGroupsClientCreateOptions) (SQLServerAvailabilityGroupsClientCreateResponse, error) {
	var err error
	const operationName = "SQLServerAvailabilityGroupsClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, availabilityGroupName, sqlServerAvailabilityGroupResource, options)
	if err != nil {
		return SQLServerAvailabilityGroupsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerAvailabilityGroupsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerAvailabilityGroupsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *SQLServerAvailabilityGroupsClient) createCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, sqlServerAvailabilityGroupResource SQLServerAvailabilityGroupResource, options *SQLServerAvailabilityGroupsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if availabilityGroupName == "" {
		return nil, errors.New("parameter availabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{availabilityGroupName}", url.PathEscape(availabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, sqlServerAvailabilityGroupResource); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *SQLServerAvailabilityGroupsClient) createHandleResponse(resp *http.Response) (SQLServerAvailabilityGroupsClientCreateResponse, error) {
	result := SQLServerAvailabilityGroupsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerAvailabilityGroupResource); err != nil {
		return SQLServerAvailabilityGroupsClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes an Arc Sql Server availability group resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - availabilityGroupName - Name of SQL Availability Group
//   - options - SQLServerAvailabilityGroupsClientDeleteOptions contains the optional parameters for the SQLServerAvailabilityGroupsClient.Delete
//     method.
func (client *SQLServerAvailabilityGroupsClient) Delete(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientDeleteOptions) (SQLServerAvailabilityGroupsClientDeleteResponse, error) {
	var err error
	const operationName = "SQLServerAvailabilityGroupsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, availabilityGroupName, options)
	if err != nil {
		return SQLServerAvailabilityGroupsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerAvailabilityGroupsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerAvailabilityGroupsClientDeleteResponse{}, err
	}
	return SQLServerAvailabilityGroupsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SQLServerAvailabilityGroupsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if availabilityGroupName == "" {
		return nil, errors.New("parameter availabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{availabilityGroupName}", url.PathEscape(availabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DetailView - Retrieves detailed properties of the Availability Group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - availabilityGroupName - Name of SQL Availability Group
//   - options - SQLServerAvailabilityGroupsClientDetailViewOptions contains the optional parameters for the SQLServerAvailabilityGroupsClient.DetailView
//     method.
func (client *SQLServerAvailabilityGroupsClient) DetailView(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientDetailViewOptions) (SQLServerAvailabilityGroupsClientDetailViewResponse, error) {
	var err error
	const operationName = "SQLServerAvailabilityGroupsClient.DetailView"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.detailViewCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, availabilityGroupName, options)
	if err != nil {
		return SQLServerAvailabilityGroupsClientDetailViewResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerAvailabilityGroupsClientDetailViewResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerAvailabilityGroupsClientDetailViewResponse{}, err
	}
	resp, err := client.detailViewHandleResponse(httpResp)
	return resp, err
}

// detailViewCreateRequest creates the DetailView request.
func (client *SQLServerAvailabilityGroupsClient) detailViewCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientDetailViewOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/getDetailView"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if availabilityGroupName == "" {
		return nil, errors.New("parameter availabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{availabilityGroupName}", url.PathEscape(availabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// detailViewHandleResponse handles the DetailView response.
func (client *SQLServerAvailabilityGroupsClient) detailViewHandleResponse(resp *http.Response) (SQLServerAvailabilityGroupsClientDetailViewResponse, error) {
	result := SQLServerAvailabilityGroupsClientDetailViewResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerAvailabilityGroupResource); err != nil {
		return SQLServerAvailabilityGroupsClientDetailViewResponse{}, err
	}
	return result, nil
}

// Failover - Request manual failover of the availability group to this server.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - availabilityGroupName - Name of SQL Availability Group
//   - options - SQLServerAvailabilityGroupsClientFailoverOptions contains the optional parameters for the SQLServerAvailabilityGroupsClient.Failover
//     method.
func (client *SQLServerAvailabilityGroupsClient) Failover(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientFailoverOptions) (SQLServerAvailabilityGroupsClientFailoverResponse, error) {
	var err error
	const operationName = "SQLServerAvailabilityGroupsClient.Failover"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.failoverCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, availabilityGroupName, options)
	if err != nil {
		return SQLServerAvailabilityGroupsClientFailoverResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerAvailabilityGroupsClientFailoverResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerAvailabilityGroupsClientFailoverResponse{}, err
	}
	resp, err := client.failoverHandleResponse(httpResp)
	return resp, err
}

// failoverCreateRequest creates the Failover request.
func (client *SQLServerAvailabilityGroupsClient) failoverCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientFailoverOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failover"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if availabilityGroupName == "" {
		return nil, errors.New("parameter availabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{availabilityGroupName}", url.PathEscape(availabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// failoverHandleResponse handles the Failover response.
func (client *SQLServerAvailabilityGroupsClient) failoverHandleResponse(resp *http.Response) (SQLServerAvailabilityGroupsClientFailoverResponse, error) {
	result := SQLServerAvailabilityGroupsClientFailoverResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerAvailabilityGroupResource); err != nil {
		return SQLServerAvailabilityGroupsClientFailoverResponse{}, err
	}
	return result, nil
}

// ForceFailoverAllowDataLoss - Request forced failover of the availability group to this server.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - availabilityGroupName - Name of SQL Availability Group
//   - options - SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossOptions contains the optional parameters for the SQLServerAvailabilityGroupsClient.ForceFailoverAllowDataLoss
//     method.
func (client *SQLServerAvailabilityGroupsClient) ForceFailoverAllowDataLoss(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossOptions) (SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossResponse, error) {
	var err error
	const operationName = "SQLServerAvailabilityGroupsClient.ForceFailoverAllowDataLoss"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.forceFailoverAllowDataLossCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, availabilityGroupName, options)
	if err != nil {
		return SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossResponse{}, err
	}
	resp, err := client.forceFailoverAllowDataLossHandleResponse(httpResp)
	return resp, err
}

// forceFailoverAllowDataLossCreateRequest creates the ForceFailoverAllowDataLoss request.
func (client *SQLServerAvailabilityGroupsClient) forceFailoverAllowDataLossCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/forceFailoverAllowDataLoss"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if availabilityGroupName == "" {
		return nil, errors.New("parameter availabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{availabilityGroupName}", url.PathEscape(availabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// forceFailoverAllowDataLossHandleResponse handles the ForceFailoverAllowDataLoss response.
func (client *SQLServerAvailabilityGroupsClient) forceFailoverAllowDataLossHandleResponse(resp *http.Response) (SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossResponse, error) {
	result := SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerAvailabilityGroupResource); err != nil {
		return SQLServerAvailabilityGroupsClientForceFailoverAllowDataLossResponse{}, err
	}
	return result, nil
}

// Get - Retrieves an Arc Sql Server availability group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - availabilityGroupName - Name of SQL Availability Group
//   - options - SQLServerAvailabilityGroupsClientGetOptions contains the optional parameters for the SQLServerAvailabilityGroupsClient.Get
//     method.
func (client *SQLServerAvailabilityGroupsClient) Get(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientGetOptions) (SQLServerAvailabilityGroupsClientGetResponse, error) {
	var err error
	const operationName = "SQLServerAvailabilityGroupsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, availabilityGroupName, options)
	if err != nil {
		return SQLServerAvailabilityGroupsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerAvailabilityGroupsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerAvailabilityGroupsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SQLServerAvailabilityGroupsClient) getCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, options *SQLServerAvailabilityGroupsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if availabilityGroupName == "" {
		return nil, errors.New("parameter availabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{availabilityGroupName}", url.PathEscape(availabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SQLServerAvailabilityGroupsClient) getHandleResponse(resp *http.Response) (SQLServerAvailabilityGroupsClientGetResponse, error) {
	result := SQLServerAvailabilityGroupsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerAvailabilityGroupResource); err != nil {
		return SQLServerAvailabilityGroupsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List the availability group associated with the given Arc Sql Server.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - options - SQLServerAvailabilityGroupsClientListOptions contains the optional parameters for the SQLServerAvailabilityGroupsClient.NewListPager
//     method.
func (client *SQLServerAvailabilityGroupsClient) NewListPager(resourceGroupName string, sqlServerInstanceName string, options *SQLServerAvailabilityGroupsClientListOptions) *runtime.Pager[SQLServerAvailabilityGroupsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SQLServerAvailabilityGroupsClientListResponse]{
		More: func(page SQLServerAvailabilityGroupsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SQLServerAvailabilityGroupsClientListResponse) (SQLServerAvailabilityGroupsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SQLServerAvailabilityGroupsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, options)
			}, nil)
			if err != nil {
				return SQLServerAvailabilityGroupsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *SQLServerAvailabilityGroupsClient) listCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, options *SQLServerAvailabilityGroupsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SQLServerAvailabilityGroupsClient) listHandleResponse(resp *http.Response) (SQLServerAvailabilityGroupsClientListResponse, error) {
	result := SQLServerAvailabilityGroupsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ArcSQLServerAvailabilityGroupListResult); err != nil {
		return SQLServerAvailabilityGroupsClientListResponse{}, err
	}
	return result, nil
}

// Update - Updates an existing Availability Group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlServerInstanceName - Name of SQL Server Instance
//   - availabilityGroupName - Name of SQL Availability Group
//   - sqlServerAvailabilityGroupUpdate - The requested server availability group resource state.
//   - options - SQLServerAvailabilityGroupsClientUpdateOptions contains the optional parameters for the SQLServerAvailabilityGroupsClient.Update
//     method.
func (client *SQLServerAvailabilityGroupsClient) Update(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, sqlServerAvailabilityGroupUpdate SQLServerAvailabilityGroupUpdate, options *SQLServerAvailabilityGroupsClientUpdateOptions) (SQLServerAvailabilityGroupsClientUpdateResponse, error) {
	var err error
	const operationName = "SQLServerAvailabilityGroupsClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, sqlServerInstanceName, availabilityGroupName, sqlServerAvailabilityGroupUpdate, options)
	if err != nil {
		return SQLServerAvailabilityGroupsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SQLServerAvailabilityGroupsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SQLServerAvailabilityGroupsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *SQLServerAvailabilityGroupsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, sqlServerInstanceName string, availabilityGroupName string, sqlServerAvailabilityGroupUpdate SQLServerAvailabilityGroupUpdate, options *SQLServerAvailabilityGroupsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlServerInstanceName == "" {
		return nil, errors.New("parameter sqlServerInstanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlServerInstanceName}", url.PathEscape(sqlServerInstanceName))
	if availabilityGroupName == "" {
		return nil, errors.New("parameter availabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{availabilityGroupName}", url.PathEscape(availabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, sqlServerAvailabilityGroupUpdate); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *SQLServerAvailabilityGroupsClient) updateHandleResponse(resp *http.Response) (SQLServerAvailabilityGroupsClientUpdateResponse, error) {
	result := SQLServerAvailabilityGroupsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLServerAvailabilityGroupResource); err != nil {
		return SQLServerAvailabilityGroupsClientUpdateResponse{}, err
	}
	return result, nil
}
