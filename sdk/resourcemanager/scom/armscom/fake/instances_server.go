// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/scom/armscom"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// InstancesServer is a fake server for instances of the armscom.InstancesClient type.
type InstancesServer struct {
	// BeginCreateOrUpdate is the fake for method InstancesClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, instanceName string, managedInstance armscom.ManagedInstance, options *armscom.InstancesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armscom.InstancesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method InstancesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, instanceName string, options *armscom.InstancesClientBeginDeleteOptions) (resp azfake.PollerResponder[armscom.InstancesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method InstancesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, instanceName string, options *armscom.InstancesClientGetOptions) (resp azfake.Responder[armscom.InstancesClientGetResponse], errResp azfake.ErrorResponder)

	// BeginLinkLogAnalytics is the fake for method InstancesClient.BeginLinkLogAnalytics
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginLinkLogAnalytics func(ctx context.Context, resourceGroupName string, instanceName string, body armscom.LogAnalyticsConfiguration, options *armscom.InstancesClientBeginLinkLogAnalyticsOptions) (resp azfake.PollerResponder[armscom.InstancesClientLinkLogAnalyticsResponse], errResp azfake.ErrorResponder)

	// NewListByResourceGroupPager is the fake for method InstancesClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armscom.InstancesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armscom.InstancesClientListByResourceGroupResponse])

	// NewListBySubscriptionPager is the fake for method InstancesClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armscom.InstancesClientListBySubscriptionOptions) (resp azfake.PagerResponder[armscom.InstancesClientListBySubscriptionResponse])

	// BeginPatchServers is the fake for method InstancesClient.BeginPatchServers
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginPatchServers func(ctx context.Context, resourceGroupName string, instanceName string, options *armscom.InstancesClientBeginPatchServersOptions) (resp azfake.PollerResponder[armscom.InstancesClientPatchServersResponse], errResp azfake.ErrorResponder)

	// BeginScale is the fake for method InstancesClient.BeginScale
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginScale func(ctx context.Context, resourceGroupName string, instanceName string, body armscom.ScalingProperties, options *armscom.InstancesClientBeginScaleOptions) (resp azfake.PollerResponder[armscom.InstancesClientScaleResponse], errResp azfake.ErrorResponder)

	// BeginUnlinkLogAnalytics is the fake for method InstancesClient.BeginUnlinkLogAnalytics
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUnlinkLogAnalytics func(ctx context.Context, resourceGroupName string, instanceName string, options *armscom.InstancesClientBeginUnlinkLogAnalyticsOptions) (resp azfake.PollerResponder[armscom.InstancesClientUnlinkLogAnalyticsResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method InstancesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, instanceName string, managedInstance armscom.MonitoringInstancePatch, options *armscom.InstancesClientBeginUpdateOptions) (resp azfake.PollerResponder[armscom.InstancesClientUpdateResponse], errResp azfake.ErrorResponder)

	// BeginUpdateLogAnalytics is the fake for method InstancesClient.BeginUpdateLogAnalytics
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdateLogAnalytics func(ctx context.Context, resourceGroupName string, instanceName string, body armscom.LogAnalyticsUpdateConfiguration, options *armscom.InstancesClientBeginUpdateLogAnalyticsOptions) (resp azfake.PollerResponder[armscom.InstancesClientUpdateLogAnalyticsResponse], errResp azfake.ErrorResponder)
}

// NewInstancesServerTransport creates a new instance of InstancesServerTransport with the provided implementation.
// The returned InstancesServerTransport instance is connected to an instance of armscom.InstancesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewInstancesServerTransport(srv *InstancesServer) *InstancesServerTransport {
	return &InstancesServerTransport{
		srv:                         srv,
		beginCreateOrUpdate:         newTracker[azfake.PollerResponder[armscom.InstancesClientCreateOrUpdateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armscom.InstancesClientDeleteResponse]](),
		beginLinkLogAnalytics:       newTracker[azfake.PollerResponder[armscom.InstancesClientLinkLogAnalyticsResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armscom.InstancesClientListByResourceGroupResponse]](),
		newListBySubscriptionPager:  newTracker[azfake.PagerResponder[armscom.InstancesClientListBySubscriptionResponse]](),
		beginPatchServers:           newTracker[azfake.PollerResponder[armscom.InstancesClientPatchServersResponse]](),
		beginScale:                  newTracker[azfake.PollerResponder[armscom.InstancesClientScaleResponse]](),
		beginUnlinkLogAnalytics:     newTracker[azfake.PollerResponder[armscom.InstancesClientUnlinkLogAnalyticsResponse]](),
		beginUpdate:                 newTracker[azfake.PollerResponder[armscom.InstancesClientUpdateResponse]](),
		beginUpdateLogAnalytics:     newTracker[azfake.PollerResponder[armscom.InstancesClientUpdateLogAnalyticsResponse]](),
	}
}

// InstancesServerTransport connects instances of armscom.InstancesClient to instances of InstancesServer.
// Don't use this type directly, use NewInstancesServerTransport instead.
type InstancesServerTransport struct {
	srv                         *InstancesServer
	beginCreateOrUpdate         *tracker[azfake.PollerResponder[armscom.InstancesClientCreateOrUpdateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armscom.InstancesClientDeleteResponse]]
	beginLinkLogAnalytics       *tracker[azfake.PollerResponder[armscom.InstancesClientLinkLogAnalyticsResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armscom.InstancesClientListByResourceGroupResponse]]
	newListBySubscriptionPager  *tracker[azfake.PagerResponder[armscom.InstancesClientListBySubscriptionResponse]]
	beginPatchServers           *tracker[azfake.PollerResponder[armscom.InstancesClientPatchServersResponse]]
	beginScale                  *tracker[azfake.PollerResponder[armscom.InstancesClientScaleResponse]]
	beginUnlinkLogAnalytics     *tracker[azfake.PollerResponder[armscom.InstancesClientUnlinkLogAnalyticsResponse]]
	beginUpdate                 *tracker[azfake.PollerResponder[armscom.InstancesClientUpdateResponse]]
	beginUpdateLogAnalytics     *tracker[azfake.PollerResponder[armscom.InstancesClientUpdateLogAnalyticsResponse]]
}

// Do implements the policy.Transporter interface for InstancesServerTransport.
func (i *InstancesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return i.dispatchToMethodFake(req, method)
}

func (i *InstancesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if instancesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = instancesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "InstancesClient.BeginCreateOrUpdate":
				res.resp, res.err = i.dispatchBeginCreateOrUpdate(req)
			case "InstancesClient.BeginDelete":
				res.resp, res.err = i.dispatchBeginDelete(req)
			case "InstancesClient.Get":
				res.resp, res.err = i.dispatchGet(req)
			case "InstancesClient.BeginLinkLogAnalytics":
				res.resp, res.err = i.dispatchBeginLinkLogAnalytics(req)
			case "InstancesClient.NewListByResourceGroupPager":
				res.resp, res.err = i.dispatchNewListByResourceGroupPager(req)
			case "InstancesClient.NewListBySubscriptionPager":
				res.resp, res.err = i.dispatchNewListBySubscriptionPager(req)
			case "InstancesClient.BeginPatchServers":
				res.resp, res.err = i.dispatchBeginPatchServers(req)
			case "InstancesClient.BeginScale":
				res.resp, res.err = i.dispatchBeginScale(req)
			case "InstancesClient.BeginUnlinkLogAnalytics":
				res.resp, res.err = i.dispatchBeginUnlinkLogAnalytics(req)
			case "InstancesClient.BeginUpdate":
				res.resp, res.err = i.dispatchBeginUpdate(req)
			case "InstancesClient.BeginUpdateLogAnalytics":
				res.resp, res.err = i.dispatchBeginUpdateLogAnalytics(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *InstancesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := i.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := server.UnmarshalRequestAsJSON[armscom.ManagedInstance](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		validationModeUnescaped, err := url.QueryUnescape(qp.Get("validationMode"))
		if err != nil {
			return nil, err
		}
		validationModeParam, err := parseOptional(validationModeUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *armscom.InstancesClientBeginCreateOrUpdateOptions
		if validationModeParam != nil {
			options = &armscom.InstancesClientBeginCreateOrUpdateOptions{
				ValidationMode: validationModeParam,
			}
		}
		respr, errRespr := i.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, instanceNameParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		i.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		i.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (i *InstancesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if i.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := i.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginDelete(req.Context(), resourceGroupNameParam, instanceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		i.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		i.beginDelete.remove(req)
	}

	return resp, nil
}

func (i *InstancesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if i.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Get(req.Context(), resourceGroupNameParam, instanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ManagedInstance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *InstancesServerTransport) dispatchBeginLinkLogAnalytics(req *http.Request) (*http.Response, error) {
	if i.srv.BeginLinkLogAnalytics == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginLinkLogAnalytics not implemented")}
	}
	beginLinkLogAnalytics := i.beginLinkLogAnalytics.get(req)
	if beginLinkLogAnalytics == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/linkLogAnalytics`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armscom.LogAnalyticsConfiguration](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginLinkLogAnalytics(req.Context(), resourceGroupNameParam, instanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginLinkLogAnalytics = &respr
		i.beginLinkLogAnalytics.add(req, beginLinkLogAnalytics)
	}

	resp, err := server.PollerResponderNext(beginLinkLogAnalytics, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginLinkLogAnalytics.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginLinkLogAnalytics) {
		i.beginLinkLogAnalytics.remove(req)
	}

	return resp, nil
}

func (i *InstancesServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := i.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		i.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armscom.InstancesClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		i.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (i *InstancesServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := i.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := i.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		i.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armscom.InstancesClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		i.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (i *InstancesServerTransport) dispatchBeginPatchServers(req *http.Request) (*http.Response, error) {
	if i.srv.BeginPatchServers == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginPatchServers not implemented")}
	}
	beginPatchServers := i.beginPatchServers.get(req)
	if beginPatchServers == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/patchServers`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginPatchServers(req.Context(), resourceGroupNameParam, instanceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginPatchServers = &respr
		i.beginPatchServers.add(req, beginPatchServers)
	}

	resp, err := server.PollerResponderNext(beginPatchServers, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginPatchServers.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginPatchServers) {
		i.beginPatchServers.remove(req)
	}

	return resp, nil
}

func (i *InstancesServerTransport) dispatchBeginScale(req *http.Request) (*http.Response, error) {
	if i.srv.BeginScale == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginScale not implemented")}
	}
	beginScale := i.beginScale.get(req)
	if beginScale == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/setServerCount`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armscom.ScalingProperties](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginScale(req.Context(), resourceGroupNameParam, instanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginScale = &respr
		i.beginScale.add(req, beginScale)
	}

	resp, err := server.PollerResponderNext(beginScale, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginScale.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginScale) {
		i.beginScale.remove(req)
	}

	return resp, nil
}

func (i *InstancesServerTransport) dispatchBeginUnlinkLogAnalytics(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUnlinkLogAnalytics == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUnlinkLogAnalytics not implemented")}
	}
	beginUnlinkLogAnalytics := i.beginUnlinkLogAnalytics.get(req)
	if beginUnlinkLogAnalytics == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/unlinkLogAnalytics`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginUnlinkLogAnalytics(req.Context(), resourceGroupNameParam, instanceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUnlinkLogAnalytics = &respr
		i.beginUnlinkLogAnalytics.add(req, beginUnlinkLogAnalytics)
	}

	resp, err := server.PollerResponderNext(beginUnlinkLogAnalytics, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginUnlinkLogAnalytics.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUnlinkLogAnalytics) {
		i.beginUnlinkLogAnalytics.remove(req)
	}

	return resp, nil
}

func (i *InstancesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := i.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armscom.MonitoringInstancePatch](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginUpdate(req.Context(), resourceGroupNameParam, instanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		i.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusAccepted}, resp.StatusCode) {
		i.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		i.beginUpdate.remove(req)
	}

	return resp, nil
}

func (i *InstancesServerTransport) dispatchBeginUpdateLogAnalytics(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdateLogAnalytics == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateLogAnalytics not implemented")}
	}
	beginUpdateLogAnalytics := i.beginUpdateLogAnalytics.get(req)
	if beginUpdateLogAnalytics == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateLogAnalytics`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armscom.LogAnalyticsUpdateConfiguration](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := i.srv.BeginUpdateLogAnalytics(req.Context(), resourceGroupNameParam, instanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateLogAnalytics = &respr
		i.beginUpdateLogAnalytics.add(req, beginUpdateLogAnalytics)
	}

	resp, err := server.PollerResponderNext(beginUpdateLogAnalytics, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginUpdateLogAnalytics.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateLogAnalytics) {
		i.beginUpdateLogAnalytics.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to InstancesServerTransport
var instancesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
