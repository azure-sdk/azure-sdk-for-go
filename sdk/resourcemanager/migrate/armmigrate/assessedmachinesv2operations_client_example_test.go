// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armmigrate_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate/v2"
	"log"
)

// Generated from example definition: 2024-03-03-preview/AssessedMachinesV2Operations_Get_MaximumSet_Gen.json
func ExampleAssessedMachinesV2OperationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armmigrate.NewClientFactory("AEDD0824-BBE9-4E7C-8909-F46C68EA6BB9", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewAssessedMachinesV2OperationsClient().Get(ctx, "rgmachineAssessments", "contosoProject", "assessmentName", "machine1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armmigrate.AssessedMachinesV2OperationsClientGetResponse{
	// 	AssessedMachineV2: &armmigrate.AssessedMachineV2{
	// 		Properties: &armmigrate.AssessedMachineV2Properties{
	// 			WorkloadType: to.Ptr(armmigrate.WorkloadTypeUnknown),
	// 			Linkages: []*armmigrate.Linkages{
	// 				{
	// 					WorkloadName: to.Ptr("ffpmzzx"),
	// 					LinkageType: to.Ptr(armmigrate.LinkageTypeParent),
	// 					Kind: to.Ptr(armmigrate.LinkageKindUnknown),
	// 					ArmID: to.Ptr("nedxrqwdpcjvzclmruofufiyfp"),
	// 				},
	// 			},
	// 			Recommendations: []*armmigrate.MachineAssessmentRecommendation{
	// 				{
	// 					Configuration: &armmigrate.Configuration{
	// 						AzureTarget: to.Ptr(armmigrate.AzureTargetUnknown),
	// 						SizingCriterion: to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
	// 					},
	// 					RecommendedFor: &armmigrate.RecommendedFor{
	// 						Strategies: []*armmigrate.StrategyType{
	// 							to.Ptr(armmigrate.StrategyTypePaaSPreferred),
	// 						},
	// 					},
	// 					ConfidenceScore: to.Ptr[float32](13),
	// 					MigrationSuitability: &armmigrate.MigrationSuitability{
	// 						Readiness: to.Ptr(armmigrate.CloudSuitabilityCommonUnknown),
	// 					},
	// 					SecuritySuitability: &armmigrate.SecuritySuitability{
	// 						Readiness: to.Ptr(armmigrate.CloudSuitabilityCommonUnknown),
	// 					},
	// 					TotalCost: []*armmigrate.CostDetailsCommon{
	// 						{
	// 							CostDetail: []*armmigrate.NameValuePairCostType{
	// 								{
	// 									Name: to.Ptr(armmigrate.CostTypeMonthlyStorageCost),
	// 									Value: to.Ptr[float32](16),
	// 								},
	// 							},
	// 							SavingOptions: to.Ptr(armmigrate.SavingsOptionsNone),
	// 						},
	// 					},
	// 					TotalSavings: []*armmigrate.SavingsDetailsCommon{
	// 						{
	// 							SavingsDetail: []*armmigrate.NameValuePairSavingsType{
	// 								{
	// 									Name: to.Ptr(armmigrate.SavingsTypeMonthlyAzureHybridCostSavings),
	// 									Value: to.Ptr[float32](5),
	// 								},
	// 							},
	// 							SavingOptions: to.Ptr(armmigrate.SavingsOptionsNone),
	// 						},
	// 					},
	// 					MigrationIssues: []*armmigrate.MigrationIssues{
	// 						{
	// 							IssueCode: to.Ptr("broifuie"),
	// 							IssueCategory: to.Ptr(armmigrate.MigrationIssuesCategoryIssue),
	// 							IssueDescription: to.Ptr("krwqxftdw"),
	// 							PossibleCause: to.Ptr("bxkjmkliilsa"),
	// 							RecommendedActions: []*string{
	// 								to.Ptr("poomtsyvmfncnbv"),
	// 							},
	// 							MoreInformation: []*armmigrate.MoreInformation{
	// 								{
	// 									Title: to.Ptr("hqimzvxlatvzytoqfilyu"),
	// 									URL: to.Ptr("bxsoybdfpd"),
	// 								},
	// 							},
	// 						},
	// 					},
	// 					SKUs: []*armmigrate.SKUsMigrationSuitability{
	// 						{
	// 							Kind: to.Ptr(armmigrate.SKUKindEndpoint),
	// 							ResourceURI: to.Ptr("syg"),
	// 							DisplayName: to.Ptr("jcxoygywmnqppfernysmzjwdnbnqkm"),
	// 							ID: to.Ptr("bgwisesdkecmvyiadobszno"),
	// 							Type: to.Ptr(armmigrate.SKUTypeUnknown),
	// 							Sources: []*armmigrate.SourceRecommendationMigrationSuitability{
	// 								{
	// 									Name: to.Ptr("cmenmvpoltkiewdrjzu"),
	// 									MigrationSuitability: &armmigrate.MigrationSuitability{
	// 										Readiness: to.Ptr(armmigrate.CloudSuitabilityCommonUnknown),
	// 									},
	// 								},
	// 							},
	// 							Details: &armmigrate.SKUDetails{
	// 								SKUType: to.Ptr(armmigrate.SKUTypeUnknown),
	// 								SKUName: to.Ptr("fgplpqgdbosxyumpzoc"),
	// 								Capabilities: []*armmigrate.NameValuePair{
	// 									{
	// 										Name: to.Ptr("szlqwwhiebj"),
	// 										Value: to.Ptr("pkrocddmpnkryngyrzomhjzeai"),
	// 									},
	// 								},
	// 								TotalCost: []*armmigrate.CostDetailsCommon{
	// 									{
	// 										CostDetail: []*armmigrate.NameValuePairCostType{
	// 											{
	// 												Name: to.Ptr(armmigrate.CostTypeMonthlyStorageCost),
	// 												Value: to.Ptr[float32](16),
	// 											},
	// 										},
	// 										SavingOptions: to.Ptr(armmigrate.SavingsOptionsNone),
	// 									},
	// 								},
	// 								TotalSavings: []*armmigrate.SavingsDetailsCommon{
	// 									{
	// 										SavingsDetail: []*armmigrate.NameValuePairSavingsType{
	// 											{
	// 												Name: to.Ptr(armmigrate.SavingsTypeMonthlyAzureHybridCostSavings),
	// 												Value: to.Ptr[float32](5),
	// 											},
	// 										},
	// 										SavingOptions: to.Ptr(armmigrate.SavingsOptionsNone),
	// 									},
	// 								},
	// 							},
	// 						},
	// 					},
	// 					MigrationPlatform: to.Ptr(armmigrate.MigrationPlatformUnknown),
	// 				},
	// 			},
	// 			ExtendedDetails: &armmigrate.AssessedMachineExtendedDetails{
	// 				DisplayName: to.Ptr("lflnrvlib"),
	// 				ProductSupportStatus: &armmigrate.ProductSupportStatus{
	// 					CurrentVersion: to.Ptr("cgxjdbuabosuxrpjgfrjtzqkgndlsx"),
	// 					ServicePackStatus: to.Ptr("rnznmjoibdxhqonnyiwf"),
	// 					EsuStatus: to.Ptr("flrcxpamltntuyrc"),
	// 					SupportStatus: to.Ptr("tujcyrwmckqqwmtapmbzhs"),
	// 					Eta: to.Ptr[int32](17),
	// 					CurrentEsuYear: to.Ptr("jtzzisk"),
	// 					MainstreamEndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
	// 					ExtendedSupportEndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
	// 					ExtendedSecurityUpdateYear1EndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
	// 					ExtendedSecurityUpdateYear2EndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
	// 					ExtendedSecurityUpdateYear3EndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
	// 				},
	// 				Disks: []*armmigrate.AssessedDiskDataV3{
	// 					{
	// 						Name: to.Ptr("wxpcpldoajzgkftxghuqmjhqnzz"),
	// 						DisplayName: to.Ptr("ulzxrtcaivlvb"),
	// 						GigabytesProvisioned: to.Ptr[float32](12),
	// 						MegabytesPerSecondOfRead: to.Ptr[float32](13),
	// 						MegabytesPerSecondOfWrite: to.Ptr[float32](29),
	// 						NumberOfReadOperationsPerSecond: to.Ptr[float32](2),
	// 						NumberOfWriteOperationsPerSecond: to.Ptr[float32](22),
	// 					},
	// 				},
	// 				HostProcessor: &armmigrate.ProcessorInfo{
	// 					Name: to.Ptr("szonbnup"),
	// 					NumberOfSockets: to.Ptr[int32](8),
	// 					NumberOfCoresPerSocket: to.Ptr[int32](20),
	// 				},
	// 				NetworkAdapters: []*armmigrate.AssessedMachineNetworkAdaptersV3{
	// 					{
	// 						Name: to.Ptr("uzelretpmbgehrecamebizdxshmgb"),
	// 						NetGigabytesTransmittedPerMonth: to.Ptr[float32](10),
	// 						MacAddress: to.Ptr("tguabzgtp"),
	// 						IPAddresses: []*string{
	// 							to.Ptr("tdet"),
	// 						},
	// 						MegabytesPerSecondRecieved: to.Ptr[float32](23),
	// 						MegabytesPerSecondTransmitted: to.Ptr[float32](19),
	// 						DisplayName: to.Ptr("syncmqcuhja"),
	// 					},
	// 				},
	// 				BootType: to.Ptr(armmigrate.MachineBootTypeUnknown),
	// 				OperatingSystemType: to.Ptr("hbassxigsetxwryywvdrvw"),
	// 				OperatingSystemName: to.Ptr("twkefugwwwnedbnqde"),
	// 				OperatingSystemVersion: to.Ptr("bqonvxtarsrjxx"),
	// 				OperatingSystemArchitecture: to.Ptr(armmigrate.GuestOperatingSystemArchitectureUnknown),
	// 				MegabytesOfMemory: to.Ptr[float32](19),
	// 				NumberOfCores: to.Ptr[int32](3),
	// 				PercentageCoresUtilization: to.Ptr[float32](9),
	// 				PercentageMemoryUtilization: to.Ptr[float32](1),
	// 				Errors: []*armmigrate.Error{
	// 					{
	// 						ID: to.Ptr[int32](19),
	// 						Code: to.Ptr("gwivqwge"),
	// 						RunAsAccountID: to.Ptr("ympfiooryijkqbzzpyshimecwvgmj"),
	// 						ApplianceName: to.Ptr("fdzovbudmavlezh"),
	// 						Message: to.Ptr("dwqahjjqlripog"),
	// 						SummaryMessage: to.Ptr("eiesjxrezalapqmxkxbxwrq"),
	// 						AgentScenario: to.Ptr("cqhxfgqgejxlkjaydnwyqybhv"),
	// 						PossibleCauses: to.Ptr("sppnxiswpon"),
	// 						RecommendedAction: to.Ptr("sftmftcprumeayb"),
	// 						Severity: to.Ptr("xlwmctkywvvefmgvqpi"),
	// 						MessageParameters: []*armmigrate.NameValuePair{
	// 							{
	// 								Name: to.Ptr("myslpcygyeruupywlrfnknjizkq"),
	// 								Value: to.Ptr("wpmieiabnzdbxkumafwhylqjrfmvr"),
	// 							},
	// 						},
	// 						UpdatedTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
	// 						ImpactedAssessmentType: to.Ptr("wtb"),
	// 					},
	// 				},
	// 				AssessedMachineType: to.Ptr(armmigrate.AssessedMachineTypeUnknown),
	// 				Description: to.Ptr("rfjoclwlv"),
	// 			},
	// 			CreatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
	// 			UpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
	// 		},
	// 		ID: to.Ptr("/subscriptions/AEDD0824-BBE9-4E7C-8909-F46C68EA6BB9/resourceGroups/rgmachineAssessments/providers/Microsoft.Migrate/assessmentProjects/contosoProject/assessments/assessmentName/assessedMachines/machine1"),
	// 		Name: to.Ptr("machine1"),
	// 		Type: to.Ptr("Microsoft.Migrate/assessmentProjects/assessments/assessedMachines"),
	// 		SystemData: &armmigrate.SystemData{
	// 			CreatedBy: to.Ptr("drvgxn"),
	// 			CreatedByType: to.Ptr(armmigrate.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:25.000Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("qfyznkjasypfwyfmmkc"),
	// 			LastModifiedByType: to.Ptr(armmigrate.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:25.000Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2024-03-03-preview/AssessedMachinesV2Operations_ListByParent_MaximumSet_Gen.json
func ExampleAssessedMachinesV2OperationsClient_NewListByParentPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armmigrate.NewClientFactory("AEDD0824-BBE9-4E7C-8909-F46C68EA6BB9", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewAssessedMachinesV2OperationsClient().NewListByParentPager("rgmachineAssessments", "contosoProject", "assessmentName", &AssessedMachinesV2OperationsClientListByParentOptions{
		Filter:            to.Ptr("eabpcsewhenpdfcsjck"),
		pageSize:          to.Ptr[int32](13),
		continuationToken: to.Ptr("lsuhpxtnundds"),
		totalRecordCount:  to.Ptr[int32](28)})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armmigrate.AssessedMachinesV2OperationsClientListByParentResponse{
		// 	AssessedMachineV2ListResult: armmigrate.AssessedMachineV2ListResult{
		// 		Value: []*armmigrate.AssessedMachineV2{
		// 			{
		// 				Properties: &armmigrate.AssessedMachineV2Properties{
		// 					WorkloadType: to.Ptr(armmigrate.WorkloadTypeUnknown),
		// 					Linkages: []*armmigrate.Linkages{
		// 						{
		// 							WorkloadName: to.Ptr("ffpmzzx"),
		// 							LinkageType: to.Ptr(armmigrate.LinkageTypeParent),
		// 							Kind: to.Ptr(armmigrate.LinkageKindUnknown),
		// 							ArmID: to.Ptr("nedxrqwdpcjvzclmruofufiyfp"),
		// 						},
		// 					},
		// 					Recommendations: []*armmigrate.MachineAssessmentRecommendation{
		// 						{
		// 							Configuration: &armmigrate.Configuration{
		// 								AzureTarget: to.Ptr(armmigrate.AzureTargetUnknown),
		// 								SizingCriterion: to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
		// 							},
		// 							RecommendedFor: &armmigrate.RecommendedFor{
		// 								Strategies: []*armmigrate.StrategyType{
		// 									to.Ptr(armmigrate.StrategyTypePaaSPreferred),
		// 								},
		// 							},
		// 							ConfidenceScore: to.Ptr[float32](13),
		// 							MigrationSuitability: &armmigrate.MigrationSuitability{
		// 								Readiness: to.Ptr(armmigrate.CloudSuitabilityCommonUnknown),
		// 							},
		// 							SecuritySuitability: &armmigrate.SecuritySuitability{
		// 								Readiness: to.Ptr(armmigrate.CloudSuitabilityCommonUnknown),
		// 							},
		// 							TotalCost: []*armmigrate.CostDetailsCommon{
		// 								{
		// 									CostDetail: []*armmigrate.NameValuePairCostType{
		// 										{
		// 											Name: to.Ptr(armmigrate.CostTypeMonthlyStorageCost),
		// 											Value: to.Ptr[float32](16),
		// 										},
		// 									},
		// 									SavingOptions: to.Ptr(armmigrate.SavingsOptionsNone),
		// 								},
		// 							},
		// 							TotalSavings: []*armmigrate.SavingsDetailsCommon{
		// 								{
		// 									SavingsDetail: []*armmigrate.NameValuePairSavingsType{
		// 										{
		// 											Name: to.Ptr(armmigrate.SavingsTypeMonthlyAzureHybridCostSavings),
		// 											Value: to.Ptr[float32](5),
		// 										},
		// 									},
		// 									SavingOptions: to.Ptr(armmigrate.SavingsOptionsNone),
		// 								},
		// 							},
		// 							MigrationIssues: []*armmigrate.MigrationIssues{
		// 								{
		// 									IssueCode: to.Ptr("broifuie"),
		// 									IssueCategory: to.Ptr(armmigrate.MigrationIssuesCategoryIssue),
		// 									IssueDescription: to.Ptr("krwqxftdw"),
		// 									PossibleCause: to.Ptr("bxkjmkliilsa"),
		// 									RecommendedActions: []*string{
		// 										to.Ptr("poomtsyvmfncnbv"),
		// 									},
		// 									MoreInformation: []*armmigrate.MoreInformation{
		// 										{
		// 											Title: to.Ptr("hqimzvxlatvzytoqfilyu"),
		// 											URL: to.Ptr("bxsoybdfpd"),
		// 										},
		// 									},
		// 								},
		// 							},
		// 							SKUs: []*armmigrate.SKUsMigrationSuitability{
		// 								{
		// 									Kind: to.Ptr(armmigrate.SKUKindEndpoint),
		// 									ResourceURI: to.Ptr("syg"),
		// 									DisplayName: to.Ptr("jcxoygywmnqppfernysmzjwdnbnqkm"),
		// 									ID: to.Ptr("bgwisesdkecmvyiadobszno"),
		// 									Type: to.Ptr(armmigrate.SKUTypeUnknown),
		// 									Sources: []*armmigrate.SourceRecommendationMigrationSuitability{
		// 										{
		// 											Name: to.Ptr("cmenmvpoltkiewdrjzu"),
		// 											MigrationSuitability: &armmigrate.MigrationSuitability{
		// 												Readiness: to.Ptr(armmigrate.CloudSuitabilityCommonUnknown),
		// 											},
		// 										},
		// 									},
		// 									Details: &armmigrate.SKUDetails{
		// 										SKUType: to.Ptr(armmigrate.SKUTypeUnknown),
		// 										SKUName: to.Ptr("fgplpqgdbosxyumpzoc"),
		// 										Capabilities: []*armmigrate.NameValuePair{
		// 											{
		// 												Name: to.Ptr("szlqwwhiebj"),
		// 												Value: to.Ptr("pkrocddmpnkryngyrzomhjzeai"),
		// 											},
		// 										},
		// 										TotalCost: []*armmigrate.CostDetailsCommon{
		// 											{
		// 												CostDetail: []*armmigrate.NameValuePairCostType{
		// 													{
		// 														Name: to.Ptr(armmigrate.CostTypeMonthlyStorageCost),
		// 														Value: to.Ptr[float32](16),
		// 													},
		// 												},
		// 												SavingOptions: to.Ptr(armmigrate.SavingsOptionsNone),
		// 											},
		// 										},
		// 										TotalSavings: []*armmigrate.SavingsDetailsCommon{
		// 											{
		// 												SavingsDetail: []*armmigrate.NameValuePairSavingsType{
		// 													{
		// 														Name: to.Ptr(armmigrate.SavingsTypeMonthlyAzureHybridCostSavings),
		// 														Value: to.Ptr[float32](5),
		// 													},
		// 												},
		// 												SavingOptions: to.Ptr(armmigrate.SavingsOptionsNone),
		// 											},
		// 										},
		// 									},
		// 								},
		// 							},
		// 							MigrationPlatform: to.Ptr(armmigrate.MigrationPlatformUnknown),
		// 						},
		// 					},
		// 					ExtendedDetails: &armmigrate.AssessedMachineExtendedDetails{
		// 						DisplayName: to.Ptr("lflnrvlib"),
		// 						ProductSupportStatus: &armmigrate.ProductSupportStatus{
		// 							CurrentVersion: to.Ptr("cgxjdbuabosuxrpjgfrjtzqkgndlsx"),
		// 							ServicePackStatus: to.Ptr("rnznmjoibdxhqonnyiwf"),
		// 							EsuStatus: to.Ptr("flrcxpamltntuyrc"),
		// 							SupportStatus: to.Ptr("tujcyrwmckqqwmtapmbzhs"),
		// 							Eta: to.Ptr[int32](17),
		// 							CurrentEsuYear: to.Ptr("jtzzisk"),
		// 							MainstreamEndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
		// 							ExtendedSupportEndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
		// 							ExtendedSecurityUpdateYear1EndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
		// 							ExtendedSecurityUpdateYear2EndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
		// 							ExtendedSecurityUpdateYear3EndDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
		// 						},
		// 						Disks: []*armmigrate.AssessedDiskDataV3{
		// 							{
		// 								Name: to.Ptr("wxpcpldoajzgkftxghuqmjhqnzz"),
		// 								DisplayName: to.Ptr("ulzxrtcaivlvb"),
		// 								GigabytesProvisioned: to.Ptr[float32](12),
		// 								MegabytesPerSecondOfRead: to.Ptr[float32](13),
		// 								MegabytesPerSecondOfWrite: to.Ptr[float32](29),
		// 								NumberOfReadOperationsPerSecond: to.Ptr[float32](2),
		// 								NumberOfWriteOperationsPerSecond: to.Ptr[float32](22),
		// 							},
		// 						},
		// 						HostProcessor: &armmigrate.ProcessorInfo{
		// 							Name: to.Ptr("szonbnup"),
		// 							NumberOfSockets: to.Ptr[int32](8),
		// 							NumberOfCoresPerSocket: to.Ptr[int32](20),
		// 						},
		// 						NetworkAdapters: []*armmigrate.AssessedMachineNetworkAdaptersV3{
		// 							{
		// 								Name: to.Ptr("uzelretpmbgehrecamebizdxshmgb"),
		// 								NetGigabytesTransmittedPerMonth: to.Ptr[float32](10),
		// 								MacAddress: to.Ptr("tguabzgtp"),
		// 								IPAddresses: []*string{
		// 									to.Ptr("tdet"),
		// 								},
		// 								MegabytesPerSecondRecieved: to.Ptr[float32](23),
		// 								MegabytesPerSecondTransmitted: to.Ptr[float32](19),
		// 								DisplayName: to.Ptr("syncmqcuhja"),
		// 							},
		// 						},
		// 						BootType: to.Ptr(armmigrate.MachineBootTypeUnknown),
		// 						OperatingSystemType: to.Ptr("hbassxigsetxwryywvdrvw"),
		// 						OperatingSystemName: to.Ptr("twkefugwwwnedbnqde"),
		// 						OperatingSystemVersion: to.Ptr("bqonvxtarsrjxx"),
		// 						OperatingSystemArchitecture: to.Ptr(armmigrate.GuestOperatingSystemArchitectureUnknown),
		// 						MegabytesOfMemory: to.Ptr[float32](19),
		// 						NumberOfCores: to.Ptr[int32](3),
		// 						PercentageCoresUtilization: to.Ptr[float32](9),
		// 						PercentageMemoryUtilization: to.Ptr[float32](1),
		// 						Errors: []*armmigrate.Error{
		// 							{
		// 								ID: to.Ptr[int32](19),
		// 								Code: to.Ptr("gwivqwge"),
		// 								RunAsAccountID: to.Ptr("ympfiooryijkqbzzpyshimecwvgmj"),
		// 								ApplianceName: to.Ptr("fdzovbudmavlezh"),
		// 								Message: to.Ptr("dwqahjjqlripog"),
		// 								SummaryMessage: to.Ptr("eiesjxrezalapqmxkxbxwrq"),
		// 								AgentScenario: to.Ptr("cqhxfgqgejxlkjaydnwyqybhv"),
		// 								PossibleCauses: to.Ptr("sppnxiswpon"),
		// 								RecommendedAction: to.Ptr("sftmftcprumeayb"),
		// 								Severity: to.Ptr("xlwmctkywvvefmgvqpi"),
		// 								MessageParameters: []*armmigrate.NameValuePair{
		// 									{
		// 										Name: to.Ptr("myslpcygyeruupywlrfnknjizkq"),
		// 										Value: to.Ptr("wpmieiabnzdbxkumafwhylqjrfmvr"),
		// 									},
		// 								},
		// 								UpdatedTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
		// 								ImpactedAssessmentType: to.Ptr("wtb"),
		// 							},
		// 						},
		// 						AssessedMachineType: to.Ptr(armmigrate.AssessedMachineTypeUnknown),
		// 						Description: to.Ptr("rfjoclwlv"),
		// 					},
		// 					CreatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
		// 					UpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:26.183Z"); return t}()),
		// 				},
		// 				ID: to.Ptr("/subscriptions/AEDD0824-BBE9-4E7C-8909-F46C68EA6BB9/resourceGroups/rgmachineAssessments/providers/Microsoft.Migrate/assessmentProjects/contosoProject/assessments/assessmentName/assessedMachines/machine1"),
		// 				Name: to.Ptr("machine1"),
		// 				Type: to.Ptr("Microsoft.Migrate/assessmentProjects/assessments/assessedMachines"),
		// 				SystemData: &armmigrate.SystemData{
		// 					CreatedBy: to.Ptr("drvgxn"),
		// 					CreatedByType: to.Ptr(armmigrate.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:25.000Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("qfyznkjasypfwyfmmkc"),
		// 					LastModifiedByType: to.Ptr(armmigrate.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-11-14T10:38:25.000Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}
