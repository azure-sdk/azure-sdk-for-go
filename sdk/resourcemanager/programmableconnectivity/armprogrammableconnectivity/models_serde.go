// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armprogrammableconnectivity

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type ApplicationOwnerProperties.
func (a ApplicationOwnerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "contactEmailAddress", a.ContactEmailAddress)
	populate(objectMap, "dataProtectionOfficer", a.DataProtectionOfficer)
	populate(objectMap, "legalName", a.LegalName)
	populate(objectMap, "legalRepresentative", a.LegalRepresentative)
	populate(objectMap, "localRepresentatives", a.LocalRepresentatives)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "organizationDescription", a.OrganizationDescription)
	populate(objectMap, "organizationIdentificationId", a.OrganizationIdentificationID)
	populate(objectMap, "organizationIdentificationIssuer", a.OrganizationIdentificationIssuer)
	populate(objectMap, "organizationIdentificationType", a.OrganizationIdentificationType)
	populate(objectMap, "organizationType", a.OrganizationType)
	populate(objectMap, "privacyManager", a.PrivacyManager)
	populate(objectMap, "privacyPolicyUrl", a.PrivacyPolicyURL)
	populate(objectMap, "registeredGeographicAddress", a.RegisteredGeographicAddress)
	populate(objectMap, "taxNumber", a.TaxNumber)
	populate(objectMap, "tradingName", a.TradingName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApplicationOwnerProperties.
func (a *ApplicationOwnerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "contactEmailAddress":
			err = unpopulate(val, "ContactEmailAddress", &a.ContactEmailAddress)
			delete(rawMsg, key)
		case "dataProtectionOfficer":
			err = unpopulate(val, "DataProtectionOfficer", &a.DataProtectionOfficer)
			delete(rawMsg, key)
		case "legalName":
			err = unpopulate(val, "LegalName", &a.LegalName)
			delete(rawMsg, key)
		case "legalRepresentative":
			err = unpopulate(val, "LegalRepresentative", &a.LegalRepresentative)
			delete(rawMsg, key)
		case "localRepresentatives":
			err = unpopulate(val, "LocalRepresentatives", &a.LocalRepresentatives)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &a.Name)
			delete(rawMsg, key)
		case "organizationDescription":
			err = unpopulate(val, "OrganizationDescription", &a.OrganizationDescription)
			delete(rawMsg, key)
		case "organizationIdentificationId":
			err = unpopulate(val, "OrganizationIdentificationID", &a.OrganizationIdentificationID)
			delete(rawMsg, key)
		case "organizationIdentificationIssuer":
			err = unpopulate(val, "OrganizationIdentificationIssuer", &a.OrganizationIdentificationIssuer)
			delete(rawMsg, key)
		case "organizationIdentificationType":
			err = unpopulate(val, "OrganizationIdentificationType", &a.OrganizationIdentificationType)
			delete(rawMsg, key)
		case "organizationType":
			err = unpopulate(val, "OrganizationType", &a.OrganizationType)
			delete(rawMsg, key)
		case "privacyManager":
			err = unpopulate(val, "PrivacyManager", &a.PrivacyManager)
			delete(rawMsg, key)
		case "privacyPolicyUrl":
			err = unpopulate(val, "PrivacyPolicyURL", &a.PrivacyPolicyURL)
			delete(rawMsg, key)
		case "registeredGeographicAddress":
			err = unpopulate(val, "RegisteredGeographicAddress", &a.RegisteredGeographicAddress)
			delete(rawMsg, key)
		case "taxNumber":
			err = unpopulate(val, "TaxNumber", &a.TaxNumber)
			delete(rawMsg, key)
		case "tradingName":
			err = unpopulate(val, "TradingName", &a.TradingName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationProperties.
func (a ApplicationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "applicationDescription", a.ApplicationDescription)
	populate(objectMap, "category", a.Category)
	populate(objectMap, "commercialName", a.CommercialName)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "privacyPolicyUrl", a.PrivacyPolicyURL)
	populate(objectMap, "privacyRightsRequestEmailAddress", a.PrivacyRightsRequestEmailAddress)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApplicationProperties.
func (a *ApplicationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "applicationDescription":
			err = unpopulate(val, "ApplicationDescription", &a.ApplicationDescription)
			delete(rawMsg, key)
		case "category":
			err = unpopulate(val, "Category", &a.Category)
			delete(rawMsg, key)
		case "commercialName":
			err = unpopulate(val, "CommercialName", &a.CommercialName)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &a.Name)
			delete(rawMsg, key)
		case "privacyPolicyUrl":
			err = unpopulate(val, "PrivacyPolicyURL", &a.PrivacyPolicyURL)
			delete(rawMsg, key)
		case "privacyRightsRequestEmailAddress":
			err = unpopulate(val, "PrivacyRightsRequestEmailAddress", &a.PrivacyRightsRequestEmailAddress)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DataProcessing.
func (d DataProcessing) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "contexts", d.Contexts)
	populate(objectMap, "duration", d.Duration)
	populate(objectMap, "frequency", d.Frequency)
	populate(objectMap, "processingOperation", d.ProcessingOperation)
	populate(objectMap, "storageRegions", d.StorageRegions)
	populate(objectMap, "transitRegions", d.TransitRegions)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataProcessing.
func (d *DataProcessing) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "contexts":
			err = unpopulate(val, "Contexts", &d.Contexts)
			delete(rawMsg, key)
		case "duration":
			err = unpopulate(val, "Duration", &d.Duration)
			delete(rawMsg, key)
		case "frequency":
			err = unpopulate(val, "Frequency", &d.Frequency)
			delete(rawMsg, key)
		case "processingOperation":
			err = unpopulate(val, "ProcessingOperation", &d.ProcessingOperation)
			delete(rawMsg, key)
		case "storageRegions":
			err = unpopulate(val, "StorageRegions", &d.StorageRegions)
			delete(rawMsg, key)
		case "transitRegions":
			err = unpopulate(val, "TransitRegions", &d.TransitRegions)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DataRegions.
func (d DataRegions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "commercialActivity", d.CommercialActivity)
	populate(objectMap, "commercialOrganization", d.CommercialOrganization)
	populate(objectMap, "countryCode", d.CountryCode)
	populate(objectMap, "dataPrivacyFrameworkUrl", d.DataPrivacyFrameworkURL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataRegions.
func (d *DataRegions) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "commercialActivity":
			err = unpopulate(val, "CommercialActivity", &d.CommercialActivity)
			delete(rawMsg, key)
		case "commercialOrganization":
			err = unpopulate(val, "CommercialOrganization", &d.CommercialOrganization)
			delete(rawMsg, key)
		case "countryCode":
			err = unpopulate(val, "CountryCode", &d.CountryCode)
			delete(rawMsg, key)
		case "dataPrivacyFrameworkUrl":
			err = unpopulate(val, "DataPrivacyFrameworkURL", &d.DataPrivacyFrameworkURL)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Gateway.
func (g Gateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", g.ID)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "systemData", g.SystemData)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gateway.
func (g *Gateway) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &g.ID)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, "Location", &g.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &g.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &g.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &g.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &g.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &g.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GatewayListResult.
func (g GatewayListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", g.NextLink)
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GatewayListResult.
func (g *GatewayListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &g.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &g.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GatewayProperties.
func (g GatewayProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "configuredApplication", g.ConfiguredApplication)
	populate(objectMap, "configuredApplicationOwner", g.ConfiguredApplicationOwner)
	populate(objectMap, "gatewayBaseUrl", g.GatewayBaseURL)
	populate(objectMap, "operatorApiConnections", g.OperatorAPIConnections)
	populate(objectMap, "provisioningState", g.ProvisioningState)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GatewayProperties.
func (g *GatewayProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "configuredApplication":
			err = unpopulate(val, "ConfiguredApplication", &g.ConfiguredApplication)
			delete(rawMsg, key)
		case "configuredApplicationOwner":
			err = unpopulate(val, "ConfiguredApplicationOwner", &g.ConfiguredApplicationOwner)
			delete(rawMsg, key)
		case "gatewayBaseUrl":
			err = unpopulate(val, "GatewayBaseURL", &g.GatewayBaseURL)
			delete(rawMsg, key)
		case "operatorApiConnections":
			err = unpopulate(val, "OperatorAPIConnections", &g.OperatorAPIConnections)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &g.ProvisioningState)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GatewayTagsUpdate.
func (g GatewayTagsUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "tags", g.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GatewayTagsUpdate.
func (g *GatewayTagsUpdate) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "tags":
			err = unpopulate(val, "Tags", &g.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GeographicAddress.
func (g GeographicAddress) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "city", g.City)
	populate(objectMap, "countryCode", g.CountryCode)
	populate(objectMap, "locality", g.Locality)
	populate(objectMap, "postalCode", g.PostalCode)
	populate(objectMap, "stateOrProvince", g.StateOrProvince)
	populate(objectMap, "streetName", g.StreetName)
	populate(objectMap, "streetNumber", g.StreetNumber)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GeographicAddress.
func (g *GeographicAddress) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "city":
			err = unpopulate(val, "City", &g.City)
			delete(rawMsg, key)
		case "countryCode":
			err = unpopulate(val, "CountryCode", &g.CountryCode)
			delete(rawMsg, key)
		case "locality":
			err = unpopulate(val, "Locality", &g.Locality)
			delete(rawMsg, key)
		case "postalCode":
			err = unpopulate(val, "PostalCode", &g.PostalCode)
			delete(rawMsg, key)
		case "stateOrProvince":
			err = unpopulate(val, "StateOrProvince", &g.StateOrProvince)
			delete(rawMsg, key)
		case "streetName":
			err = unpopulate(val, "StreetName", &g.StreetName)
			delete(rawMsg, key)
		case "streetNumber":
			err = unpopulate(val, "StreetNumber", &g.StreetNumber)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LocalRepresentative.
func (l LocalRepresentative) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "countryCode", l.CountryCode)
	populate(objectMap, "representative", l.Representative)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LocalRepresentative.
func (l *LocalRepresentative) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "countryCode":
			err = unpopulate(val, "CountryCode", &l.CountryCode)
			delete(rawMsg, key)
		case "representative":
			err = unpopulate(val, "Representative", &l.Representative)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MarketplaceProperties.
func (m MarketplaceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "offerId", m.OfferID)
	populate(objectMap, "planId", m.PlanID)
	populate(objectMap, "planTermsAndConditionsLinks", m.PlanTermsAndConditionsLinks)
	populate(objectMap, "publisherId", m.PublisherID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MarketplaceProperties.
func (m *MarketplaceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "offerId":
			err = unpopulate(val, "OfferID", &m.OfferID)
			delete(rawMsg, key)
		case "planId":
			err = unpopulate(val, "PlanID", &m.PlanID)
			delete(rawMsg, key)
		case "planTermsAndConditionsLinks":
			err = unpopulate(val, "PlanTermsAndConditionsLinks", &m.PlanTermsAndConditionsLinks)
			delete(rawMsg, key)
		case "publisherId":
			err = unpopulate(val, "PublisherID", &m.PublisherID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "actionType", o.ActionType)
	populate(objectMap, "display", o.Display)
	populate(objectMap, "isDataAction", o.IsDataAction)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "origin", o.Origin)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Operation.
func (o *Operation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionType":
			err = unpopulate(val, "ActionType", &o.ActionType)
			delete(rawMsg, key)
		case "display":
			err = unpopulate(val, "Display", &o.Display)
			delete(rawMsg, key)
		case "isDataAction":
			err = unpopulate(val, "IsDataAction", &o.IsDataAction)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &o.Name)
			delete(rawMsg, key)
		case "origin":
			err = unpopulate(val, "Origin", &o.Origin)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationDisplay.
func (o OperationDisplay) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "description", o.Description)
	populate(objectMap, "operation", o.Operation)
	populate(objectMap, "provider", o.Provider)
	populate(objectMap, "resource", o.Resource)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationDisplay.
func (o *OperationDisplay) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, "Description", &o.Description)
			delete(rawMsg, key)
		case "operation":
			err = unpopulate(val, "Operation", &o.Operation)
			delete(rawMsg, key)
		case "provider":
			err = unpopulate(val, "Provider", &o.Provider)
			delete(rawMsg, key)
		case "resource":
			err = unpopulate(val, "Resource", &o.Resource)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationListResult.
func (o *OperationListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &o.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &o.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatorAPIConnection.
func (o OperatorAPIConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "location", o.Location)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "properties", o.Properties)
	populate(objectMap, "systemData", o.SystemData)
	populate(objectMap, "tags", o.Tags)
	populate(objectMap, "type", o.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatorAPIConnection.
func (o *OperatorAPIConnection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &o.ID)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, "Location", &o.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &o.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &o.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &o.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &o.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &o.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatorAPIConnectionListResult.
func (o OperatorAPIConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatorAPIConnectionListResult.
func (o *OperatorAPIConnectionListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &o.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &o.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatorAPIConnectionProperties.
func (o OperatorAPIConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "camaraApiName", o.CamaraAPIName)
	populate(objectMap, "dataProcessingList", o.DataProcessingList)
	populate(objectMap, "gatewayId", o.GatewayID)
	populate(objectMap, "operatorApiPlanId", o.OperatorAPIPlanID)
	populate(objectMap, "operatorName", o.OperatorName)
	populate(objectMap, "planTermsAndConditionsAccepted", o.PlanTermsAndConditionsAccepted)
	populate(objectMap, "planTermsAndConditionsLinks", o.PlanTermsAndConditionsLinks)
	populate(objectMap, "provisioningState", o.ProvisioningState)
	populate(objectMap, "purposeReason", o.PurposeReason)
	populate(objectMap, "purposes", o.Purposes)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatorAPIConnectionProperties.
func (o *OperatorAPIConnectionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "camaraApiName":
			err = unpopulate(val, "CamaraAPIName", &o.CamaraAPIName)
			delete(rawMsg, key)
		case "dataProcessingList":
			err = unpopulate(val, "DataProcessingList", &o.DataProcessingList)
			delete(rawMsg, key)
		case "gatewayId":
			err = unpopulate(val, "GatewayID", &o.GatewayID)
			delete(rawMsg, key)
		case "operatorApiPlanId":
			err = unpopulate(val, "OperatorAPIPlanID", &o.OperatorAPIPlanID)
			delete(rawMsg, key)
		case "operatorName":
			err = unpopulate(val, "OperatorName", &o.OperatorName)
			delete(rawMsg, key)
		case "planTermsAndConditionsAccepted":
			err = unpopulate(val, "PlanTermsAndConditionsAccepted", &o.PlanTermsAndConditionsAccepted)
			delete(rawMsg, key)
		case "planTermsAndConditionsLinks":
			err = unpopulate(val, "PlanTermsAndConditionsLinks", &o.PlanTermsAndConditionsLinks)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &o.ProvisioningState)
			delete(rawMsg, key)
		case "purposeReason":
			err = unpopulate(val, "PurposeReason", &o.PurposeReason)
			delete(rawMsg, key)
		case "purposes":
			err = unpopulate(val, "Purposes", &o.Purposes)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatorAPIConnectionUpdate.
func (o OperatorAPIConnectionUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "properties", o.Properties)
	populate(objectMap, "tags", o.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatorAPIConnectionUpdate.
func (o *OperatorAPIConnectionUpdate) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, "Properties", &o.Properties)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &o.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatorAPIConnectionUpdateProperties.
func (o OperatorAPIConnectionUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "dataProcessingList", o.DataProcessingList)
	populate(objectMap, "operatorApiPlanId", o.OperatorAPIPlanID)
	populate(objectMap, "planTermsAndConditionsAccepted", o.PlanTermsAndConditionsAccepted)
	populate(objectMap, "purposeReason", o.PurposeReason)
	populate(objectMap, "purposes", o.Purposes)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatorAPIConnectionUpdateProperties.
func (o *OperatorAPIConnectionUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataProcessingList":
			err = unpopulate(val, "DataProcessingList", &o.DataProcessingList)
			delete(rawMsg, key)
		case "operatorApiPlanId":
			err = unpopulate(val, "OperatorAPIPlanID", &o.OperatorAPIPlanID)
			delete(rawMsg, key)
		case "planTermsAndConditionsAccepted":
			err = unpopulate(val, "PlanTermsAndConditionsAccepted", &o.PlanTermsAndConditionsAccepted)
			delete(rawMsg, key)
		case "purposeReason":
			err = unpopulate(val, "PurposeReason", &o.PurposeReason)
			delete(rawMsg, key)
		case "purposes":
			err = unpopulate(val, "Purposes", &o.Purposes)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatorAPIPlan.
func (o OperatorAPIPlan) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "properties", o.Properties)
	populate(objectMap, "systemData", o.SystemData)
	populate(objectMap, "type", o.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatorAPIPlan.
func (o *OperatorAPIPlan) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &o.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &o.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &o.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &o.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &o.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatorAPIPlanListResult.
func (o OperatorAPIPlanListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatorAPIPlanListResult.
func (o *OperatorAPIPlanListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &o.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &o.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperatorAPIPlanProperties.
func (o OperatorAPIPlanProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "camaraApiName", o.CamaraAPIName)
	populate(objectMap, "limits", o.Limits)
	populate(objectMap, "marketplaceProperties", o.MarketplaceProperties)
	populate(objectMap, "markets", o.Markets)
	populate(objectMap, "operatorName", o.OperatorName)
	populate(objectMap, "operatorRegions", o.OperatorRegions)
	populate(objectMap, "provisioningState", o.ProvisioningState)
	populate(objectMap, "supportedLocations", o.SupportedLocations)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperatorAPIPlanProperties.
func (o *OperatorAPIPlanProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "camaraApiName":
			err = unpopulate(val, "CamaraAPIName", &o.CamaraAPIName)
			delete(rawMsg, key)
		case "limits":
			err = unpopulate(val, "Limits", &o.Limits)
			delete(rawMsg, key)
		case "marketplaceProperties":
			err = unpopulate(val, "MarketplaceProperties", &o.MarketplaceProperties)
			delete(rawMsg, key)
		case "markets":
			err = unpopulate(val, "Markets", &o.Markets)
			delete(rawMsg, key)
		case "operatorName":
			err = unpopulate(val, "OperatorName", &o.OperatorName)
			delete(rawMsg, key)
		case "operatorRegions":
			err = unpopulate(val, "OperatorRegions", &o.OperatorRegions)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &o.ProvisioningState)
			delete(rawMsg, key)
		case "supportedLocations":
			err = unpopulate(val, "SupportedLocations", &o.SupportedLocations)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Person.
func (p Person) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "emailAddress", p.EmailAddress)
	populate(objectMap, "familyName", p.FamilyName)
	populate(objectMap, "givenName", p.GivenName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Person.
func (p *Person) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "emailAddress":
			err = unpopulate(val, "EmailAddress", &p.EmailAddress)
			delete(rawMsg, key)
		case "familyName":
			err = unpopulate(val, "FamilyName", &p.FamilyName)
			delete(rawMsg, key)
		case "givenName":
			err = unpopulate(val, "GivenName", &p.GivenName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Status.
func (s Status) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "reason", s.Reason)
	populate(objectMap, "state", s.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Status.
func (s *Status) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "reason":
			err = unpopulate(val, "Reason", &s.Reason)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, "State", &s.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
