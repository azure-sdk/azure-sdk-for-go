//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armappcontainers

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient contains the methods for the ConnectedEnvironmentsDaprResiliencyRetryPolicies group.
// Don't use this type directly, use NewConnectedEnvironmentsDaprResiliencyRetryPoliciesClient() instead.
type ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewConnectedEnvironmentsDaprResiliencyRetryPoliciesClient creates a new instance of ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewConnectedEnvironmentsDaprResiliencyRetryPoliciesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a Dapr Resiliency Retry Policy in a Connected Environment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectedEnvironmentName - Name of the Connected Environment.
//   - policyName - Name of the Dapr Resiliency Retry Policy.
//   - daprResiliencyRetryPoliciesEnvelope - Configuration details of the Dapr Resiliency Retry Policy.
//   - options - ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateOptions contains the optional parameters
//     for the ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient.CreateOrUpdate method.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, connectedEnvironmentName string, policyName string, daprResiliencyRetryPoliciesEnvelope DaprResiliencyRetryPolicy, options *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateOptions) (ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, connectedEnvironmentName, policyName, daprResiliencyRetryPoliciesEnvelope, options)
	if err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, connectedEnvironmentName string, policyName string, daprResiliencyRetryPoliciesEnvelope DaprResiliencyRetryPolicy, options *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/connectedEnvironments/{connectedEnvironmentName}/daprResiliencyRetryPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectedEnvironmentName == "" {
		return nil, errors.New("parameter connectedEnvironmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectedEnvironmentName}", url.PathEscape(connectedEnvironmentName))
	if policyName == "" {
		return nil, errors.New("parameter policyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", url.PathEscape(policyName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, daprResiliencyRetryPoliciesEnvelope)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) createOrUpdateHandleResponse(resp *http.Response) (ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateResponse, error) {
	result := ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprResiliencyRetryPolicy); err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a Dapr Resiliency Retry Policy from a Connected Environment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectedEnvironmentName - Name of the Connected Environment.
//   - policyName - Name of the Dapr Resiliency Retry Policy.
//   - options - ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientDeleteOptions contains the optional parameters for the
//     ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient.Delete method.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) Delete(ctx context.Context, resourceGroupName string, connectedEnvironmentName string, policyName string, options *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientDeleteOptions) (ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, connectedEnvironmentName, policyName, options)
	if err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, connectedEnvironmentName string, policyName string, options *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/connectedEnvironments/{connectedEnvironmentName}/daprResiliencyRetryPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectedEnvironmentName == "" {
		return nil, errors.New("parameter connectedEnvironmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectedEnvironmentName}", url.PathEscape(connectedEnvironmentName))
	if policyName == "" {
		return nil, errors.New("parameter policyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", url.PathEscape(policyName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a Dapr Resiliency Retry Policy.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectedEnvironmentName - Name of the Connected Environment.
//   - policyName - Name of the Dapr Resiliency Retry Policy.
//   - options - ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetOptions contains the optional parameters for the ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient.Get
//     method.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) Get(ctx context.Context, resourceGroupName string, connectedEnvironmentName string, policyName string, options *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetOptions) (ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, connectedEnvironmentName, policyName, options)
	if err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) getCreateRequest(ctx context.Context, resourceGroupName string, connectedEnvironmentName string, policyName string, options *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/connectedEnvironments/{connectedEnvironmentName}/daprResiliencyRetryPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectedEnvironmentName == "" {
		return nil, errors.New("parameter connectedEnvironmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectedEnvironmentName}", url.PathEscape(connectedEnvironmentName))
	if policyName == "" {
		return nil, errors.New("parameter policyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", url.PathEscape(policyName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) getHandleResponse(resp *http.Response) (ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetResponse, error) {
	result := ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprResiliencyRetryPolicy); err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get the Dapr Resiliency Retry Policies for a connected environment.
//
// Generated from API version 2022-11-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectedEnvironmentName - Name of the Connected Environment.
//   - options - ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListOptions contains the optional parameters for the ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient.NewListPager
//     method.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) NewListPager(resourceGroupName string, connectedEnvironmentName string, options *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListOptions) *runtime.Pager[ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse]{
		More: func(page ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse) (ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceGroupName, connectedEnvironmentName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) listCreateRequest(ctx context.Context, resourceGroupName string, connectedEnvironmentName string, options *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/connectedEnvironments/{connectedEnvironmentName}/daprResiliencyRetryPolicies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectedEnvironmentName == "" {
		return nil, errors.New("parameter connectedEnvironmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectedEnvironmentName}", url.PathEscape(connectedEnvironmentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ConnectedEnvironmentsDaprResiliencyRetryPoliciesClient) listHandleResponse(resp *http.Response) (ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse, error) {
	result := ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprResiliencyRetryPoliciesCollection); err != nil {
		return ConnectedEnvironmentsDaprResiliencyRetryPoliciesClientListResponse{}, err
	}
	return result, nil
}
