// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotoperations/armiotoperations"
	"net/http"
	"net/url"
	"regexp"
)

// DataflowGraphServer is a fake server for instances of the armiotoperations.DataflowGraphClient type.
type DataflowGraphServer struct {
	// BeginCreateOrUpdate is the fake for method DataflowGraphClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, resource armiotoperations.DataflowGraphResource, options *armiotoperations.DataflowGraphClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armiotoperations.DataflowGraphClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method DataflowGraphClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, options *armiotoperations.DataflowGraphClientBeginDeleteOptions) (resp azfake.PollerResponder[armiotoperations.DataflowGraphClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method DataflowGraphClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, instanceName string, dataflowProfileName string, dataflowGraphName string, options *armiotoperations.DataflowGraphClientGetOptions) (resp azfake.Responder[armiotoperations.DataflowGraphClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByDataflowProfilePager is the fake for method DataflowGraphClient.NewListByDataflowProfilePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByDataflowProfilePager func(resourceGroupName string, instanceName string, dataflowProfileName string, options *armiotoperations.DataflowGraphClientListByDataflowProfileOptions) (resp azfake.PagerResponder[armiotoperations.DataflowGraphClientListByDataflowProfileResponse])
}

// NewDataflowGraphServerTransport creates a new instance of DataflowGraphServerTransport with the provided implementation.
// The returned DataflowGraphServerTransport instance is connected to an instance of armiotoperations.DataflowGraphClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDataflowGraphServerTransport(srv *DataflowGraphServer) *DataflowGraphServerTransport {
	return &DataflowGraphServerTransport{
		srv:                           srv,
		beginCreateOrUpdate:           newTracker[azfake.PollerResponder[armiotoperations.DataflowGraphClientCreateOrUpdateResponse]](),
		beginDelete:                   newTracker[azfake.PollerResponder[armiotoperations.DataflowGraphClientDeleteResponse]](),
		newListByDataflowProfilePager: newTracker[azfake.PagerResponder[armiotoperations.DataflowGraphClientListByDataflowProfileResponse]](),
	}
}

// DataflowGraphServerTransport connects instances of armiotoperations.DataflowGraphClient to instances of DataflowGraphServer.
// Don't use this type directly, use NewDataflowGraphServerTransport instead.
type DataflowGraphServerTransport struct {
	srv                           *DataflowGraphServer
	beginCreateOrUpdate           *tracker[azfake.PollerResponder[armiotoperations.DataflowGraphClientCreateOrUpdateResponse]]
	beginDelete                   *tracker[azfake.PollerResponder[armiotoperations.DataflowGraphClientDeleteResponse]]
	newListByDataflowProfilePager *tracker[azfake.PagerResponder[armiotoperations.DataflowGraphClientListByDataflowProfileResponse]]
}

// Do implements the policy.Transporter interface for DataflowGraphServerTransport.
func (d *DataflowGraphServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DataflowGraphServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if dataflowGraphServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = dataflowGraphServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DataflowGraphClient.BeginCreateOrUpdate":
				res.resp, res.err = d.dispatchBeginCreateOrUpdate(req)
			case "DataflowGraphClient.BeginDelete":
				res.resp, res.err = d.dispatchBeginDelete(req)
			case "DataflowGraphClient.Get":
				res.resp, res.err = d.dispatchGet(req)
			case "DataflowGraphClient.NewListByDataflowProfilePager":
				res.resp, res.err = d.dispatchNewListByDataflowProfilePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DataflowGraphServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := d.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflowProfiles/(?P<dataflowProfileName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflowGraphs/(?P<dataflowGraphName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armiotoperations.DataflowGraphResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		dataflowProfileNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowProfileName")])
		if err != nil {
			return nil, err
		}
		dataflowGraphNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowGraphName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, instanceNameParam, dataflowProfileNameParam, dataflowGraphNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		d.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		d.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		d.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (d *DataflowGraphServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := d.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflowProfiles/(?P<dataflowProfileName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflowGraphs/(?P<dataflowGraphName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		dataflowProfileNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowProfileName")])
		if err != nil {
			return nil, err
		}
		dataflowGraphNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowGraphName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginDelete(req.Context(), resourceGroupNameParam, instanceNameParam, dataflowProfileNameParam, dataflowGraphNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		d.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		d.beginDelete.remove(req)
	}

	return resp, nil
}

func (d *DataflowGraphServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflowProfiles/(?P<dataflowProfileName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflowGraphs/(?P<dataflowGraphName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
	if err != nil {
		return nil, err
	}
	dataflowProfileNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowProfileName")])
	if err != nil {
		return nil, err
	}
	dataflowGraphNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowGraphName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Get(req.Context(), resourceGroupNameParam, instanceNameParam, dataflowProfileNameParam, dataflowGraphNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DataflowGraphResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DataflowGraphServerTransport) dispatchNewListByDataflowProfilePager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByDataflowProfilePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByDataflowProfilePager not implemented")}
	}
	newListByDataflowProfilePager := d.newListByDataflowProfilePager.get(req)
	if newListByDataflowProfilePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflowProfiles/(?P<dataflowProfileName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataflowGraphs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		dataflowProfileNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataflowProfileName")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListByDataflowProfilePager(resourceGroupNameParam, instanceNameParam, dataflowProfileNameParam, nil)
		newListByDataflowProfilePager = &resp
		d.newListByDataflowProfilePager.add(req, newListByDataflowProfilePager)
		server.PagerResponderInjectNextLinks(newListByDataflowProfilePager, req, func(page *armiotoperations.DataflowGraphClientListByDataflowProfileResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByDataflowProfilePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListByDataflowProfilePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByDataflowProfilePager) {
		d.newListByDataflowProfilePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to DataflowGraphServerTransport
var dataflowGraphServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
