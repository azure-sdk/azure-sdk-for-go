//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armedgemarketplace

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// OffersClient contains the methods for the Offers group.
// Don't use this type directly, use NewOffersClient() instead.
type OffersClient struct {
	internal *arm.Client
}

// NewOffersClient creates a new instance of OffersClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewOffersClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*OffersClient, error) {
	cl, err := arm.NewClient(moduleName+".OffersClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &OffersClient{
		internal: cl,
	}
	return client, nil
}

// Get - Get a Offer
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - offerID - Id of the offer
//   - options - OffersClientGetOptions contains the optional parameters for the OffersClient.Get method.
func (client *OffersClient) Get(ctx context.Context, resourceURI string, offerID string, options *OffersClientGetOptions) (OffersClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceURI, offerID, options)
	if err != nil {
		return OffersClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OffersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return OffersClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *OffersClient) getCreateRequest(ctx context.Context, resourceURI string, offerID string, options *OffersClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.EdgeMarketPlace/offers/{offerId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if offerID == "" {
		return nil, errors.New("parameter offerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerId}", url.PathEscape(offerID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *OffersClient) getHandleResponse(resp *http.Response) (OffersClientGetResponse, error) {
	result := OffersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Offer); err != nil {
		return OffersClientGetResponse{}, err
	}
	return result, nil
}

// BeginGetAccessToken - A long-running resource action.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - offerID - Id of the offer
//   - body - The content of the action request
//   - options - OffersClientBeginGetAccessTokenOptions contains the optional parameters for the OffersClient.BeginGetAccessToken
//     method.
func (client *OffersClient) BeginGetAccessToken(ctx context.Context, resourceURI string, offerID string, body AccessTokenRequest, options *OffersClientBeginGetAccessTokenOptions) (*runtime.Poller[OffersClientGetAccessTokenResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getAccessToken(ctx, resourceURI, offerID, body, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OffersClientGetAccessTokenResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[OffersClientGetAccessTokenResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// GetAccessToken - A long-running resource action.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-04-01-preview
func (client *OffersClient) getAccessToken(ctx context.Context, resourceURI string, offerID string, body AccessTokenRequest, options *OffersClientBeginGetAccessTokenOptions) (*http.Response, error) {
	req, err := client.getAccessTokenCreateRequest(ctx, resourceURI, offerID, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// getAccessTokenCreateRequest creates the GetAccessToken request.
func (client *OffersClient) getAccessTokenCreateRequest(ctx context.Context, resourceURI string, offerID string, body AccessTokenRequest, options *OffersClientBeginGetAccessTokenOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.EdgeMarketPlace/offers/{offerId}/getAccessToken"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if offerID == "" {
		return nil, errors.New("parameter offerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerId}", url.PathEscape(offerID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// NewListPager - List Offer resources by parent
//
// Generated from API version 2023-04-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - options - OffersClientListOptions contains the optional parameters for the OffersClient.NewListPager method.
func (client *OffersClient) NewListPager(resourceURI string, options *OffersClientListOptions) *runtime.Pager[OffersClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[OffersClientListResponse]{
		More: func(page OffersClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OffersClientListResponse) (OffersClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceURI, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return OffersClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return OffersClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return OffersClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *OffersClient) listCreateRequest(ctx context.Context, resourceURI string, options *OffersClientListOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.EdgeMarketPlace/offers"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *OffersClient) listHandleResponse(resp *http.Response) (OffersClientListResponse, error) {
	result := OffersClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OfferListResult); err != nil {
		return OffersClientListResponse{}, err
	}
	return result, nil
}

// NewSearchPager - A synchronous resource action.
//
// Generated from API version 2023-04-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - options - OffersClientSearchOptions contains the optional parameters for the OffersClient.NewSearchPager method.
func (client *OffersClient) NewSearchPager(resourceURI string, options *OffersClientSearchOptions) *runtime.Pager[OffersClientSearchResponse] {
	return runtime.NewPager(runtime.PagingHandler[OffersClientSearchResponse]{
		More: func(page OffersClientSearchResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OffersClientSearchResponse) (OffersClientSearchResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.searchCreateRequest(ctx, resourceURI, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return OffersClientSearchResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return OffersClientSearchResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return OffersClientSearchResponse{}, runtime.NewResponseError(resp)
			}
			return client.searchHandleResponse(resp)
		},
	})
}

// searchCreateRequest creates the Search request.
func (client *OffersClient) searchCreateRequest(ctx context.Context, resourceURI string, options *OffersClientSearchOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.EdgeMarketPlace/offers/search"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// searchHandleResponse handles the Search response.
func (client *OffersClient) searchHandleResponse(resp *http.Response) (OffersClientSearchResponse, error) {
	result := OffersClientSearchResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OfferListResult); err != nil {
		return OffersClientSearchResponse{}, err
	}
	return result, nil
}
