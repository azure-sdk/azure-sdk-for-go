//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmaintenance

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EventGridFiltersClient contains the methods for the EventGridFilters group.
// Don't use this type directly, use NewEventGridFiltersClient() instead.
type EventGridFiltersClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewEventGridFiltersClient creates a new instance of EventGridFiltersClient with the specified values.
//   - subscriptionID - Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewEventGridFiltersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*EventGridFiltersClient, error) {
	cl, err := arm.NewClient(moduleName+".EventGridFiltersClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &EventGridFiltersClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Gets the properties of the specified event grid filter.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - resourceGroupName - Resource Group Name
//   - resourceName - Maintenance Configuration Name
//   - eventGridFilterName - The name of the event grid filter to retrieve.
//   - options - EventGridFiltersClientGetOptions contains the optional parameters for the EventGridFiltersClient.Get method.
func (client *EventGridFiltersClient) Get(ctx context.Context, resourceGroupName string, resourceName string, eventGridFilterName string, options *EventGridFiltersClientGetOptions) (EventGridFiltersClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, eventGridFilterName, options)
	if err != nil {
		return EventGridFiltersClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridFiltersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EventGridFiltersClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *EventGridFiltersClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, eventGridFilterName string, options *EventGridFiltersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}/eventGridFilters/{eventGridFilterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if eventGridFilterName == "" {
		return nil, errors.New("parameter eventGridFilterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventGridFilterName}", url.PathEscape(eventGridFilterName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EventGridFiltersClient) getHandleResponse(resp *http.Response) (EventGridFiltersClientGetResponse, error) {
	result := EventGridFiltersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EventGridFilter); err != nil {
		return EventGridFiltersClientGetResponse{}, err
	}
	return result, nil
}

// ListByMaintenanceConfiguration - Lists the event grid filters for a given maintenance configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - resourceGroupName - Resource Group Name
//   - resourceName - Maintenance Configuration Name
//   - options - EventGridFiltersClientListByMaintenanceConfigurationOptions contains the optional parameters for the EventGridFiltersClient.ListByMaintenanceConfiguration
//     method.
func (client *EventGridFiltersClient) ListByMaintenanceConfiguration(ctx context.Context, resourceGroupName string, resourceName string, options *EventGridFiltersClientListByMaintenanceConfigurationOptions) (EventGridFiltersClientListByMaintenanceConfigurationResponse, error) {
	req, err := client.listByMaintenanceConfigurationCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return EventGridFiltersClientListByMaintenanceConfigurationResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridFiltersClientListByMaintenanceConfigurationResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EventGridFiltersClientListByMaintenanceConfigurationResponse{}, runtime.NewResponseError(resp)
	}
	return client.listByMaintenanceConfigurationHandleResponse(resp)
}

// listByMaintenanceConfigurationCreateRequest creates the ListByMaintenanceConfiguration request.
func (client *EventGridFiltersClient) listByMaintenanceConfigurationCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *EventGridFiltersClientListByMaintenanceConfigurationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}/eventGridFilters"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByMaintenanceConfigurationHandleResponse handles the ListByMaintenanceConfiguration response.
func (client *EventGridFiltersClient) listByMaintenanceConfigurationHandleResponse(resp *http.Response) (EventGridFiltersClientListByMaintenanceConfigurationResponse, error) {
	result := EventGridFiltersClientListByMaintenanceConfigurationResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EventGridFilterListResult); err != nil {
		return EventGridFiltersClientListByMaintenanceConfigurationResponse{}, err
	}
	return result, nil
}
