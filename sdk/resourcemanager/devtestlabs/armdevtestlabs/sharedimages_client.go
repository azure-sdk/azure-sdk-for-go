//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armdevtestlabs

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SharedImagesClient contains the methods for the SharedImages group.
// Don't use this type directly, use NewSharedImagesClient() instead.
type SharedImagesClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewSharedImagesClient creates a new instance of SharedImagesClient with the specified values.
// subscriptionID - The subscription ID.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewSharedImagesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SharedImagesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &SharedImagesClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// CreateOrUpdate - Create or replace an existing Shared Image.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-09-01
// resourceGroupName - The name of the resource group.
// labName - The name of the lab.
// sharedGalleryName - The name of the shared gallery.
// name - The name of the shared image.
// sharedImage - Properties of a shared image
// options - SharedImagesClientCreateOrUpdateOptions contains the optional parameters for the SharedImagesClient.CreateOrUpdate
// method.
func (client *SharedImagesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, name string, sharedImage SharedImage, options *SharedImagesClientCreateOrUpdateOptions) (SharedImagesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, labName, sharedGalleryName, name, sharedImage, options)
	if err != nil {
		return SharedImagesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SharedImagesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return SharedImagesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SharedImagesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, name string, sharedImage SharedImage, options *SharedImagesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/sharedgalleries/{sharedGalleryName}/sharedimages/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if labName == "" {
		return nil, errors.New("parameter labName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{labName}", url.PathEscape(labName))
	if sharedGalleryName == "" {
		return nil, errors.New("parameter sharedGalleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sharedGalleryName}", url.PathEscape(sharedGalleryName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sharedImage)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SharedImagesClient) createOrUpdateHandleResponse(resp *http.Response) (SharedImagesClientCreateOrUpdateResponse, error) {
	result := SharedImagesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SharedImage); err != nil {
		return SharedImagesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete shared image.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-09-01
// resourceGroupName - The name of the resource group.
// labName - The name of the lab.
// sharedGalleryName - The name of the shared gallery.
// name - The name of the shared image.
// options - SharedImagesClientDeleteOptions contains the optional parameters for the SharedImagesClient.Delete method.
func (client *SharedImagesClient) Delete(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, name string, options *SharedImagesClientDeleteOptions) (SharedImagesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, labName, sharedGalleryName, name, options)
	if err != nil {
		return SharedImagesClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SharedImagesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SharedImagesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return SharedImagesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SharedImagesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, name string, options *SharedImagesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/sharedgalleries/{sharedGalleryName}/sharedimages/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if labName == "" {
		return nil, errors.New("parameter labName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{labName}", url.PathEscape(labName))
	if sharedGalleryName == "" {
		return nil, errors.New("parameter sharedGalleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sharedGalleryName}", url.PathEscape(sharedGalleryName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get shared image.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-09-01
// resourceGroupName - The name of the resource group.
// labName - The name of the lab.
// sharedGalleryName - The name of the shared gallery.
// name - The name of the shared image.
// options - SharedImagesClientGetOptions contains the optional parameters for the SharedImagesClient.Get method.
func (client *SharedImagesClient) Get(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, name string, options *SharedImagesClientGetOptions) (SharedImagesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, labName, sharedGalleryName, name, options)
	if err != nil {
		return SharedImagesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SharedImagesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SharedImagesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SharedImagesClient) getCreateRequest(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, name string, options *SharedImagesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/sharedgalleries/{sharedGalleryName}/sharedimages/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if labName == "" {
		return nil, errors.New("parameter labName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{labName}", url.PathEscape(labName))
	if sharedGalleryName == "" {
		return nil, errors.New("parameter sharedGalleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sharedGalleryName}", url.PathEscape(sharedGalleryName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	reqQP.Set("api-version", "2021-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SharedImagesClient) getHandleResponse(resp *http.Response) (SharedImagesClientGetResponse, error) {
	result := SharedImagesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SharedImage); err != nil {
		return SharedImagesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List shared images in a given shared gallery.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-09-01
// resourceGroupName - The name of the resource group.
// labName - The name of the lab.
// sharedGalleryName - The name of the shared gallery.
// options - SharedImagesClientListOptions contains the optional parameters for the SharedImagesClient.List method.
func (client *SharedImagesClient) NewListPager(resourceGroupName string, labName string, sharedGalleryName string, options *SharedImagesClientListOptions) *runtime.Pager[SharedImagesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SharedImagesClientListResponse]{
		More: func(page SharedImagesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SharedImagesClientListResponse) (SharedImagesClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceGroupName, labName, sharedGalleryName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SharedImagesClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return SharedImagesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SharedImagesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *SharedImagesClient) listCreateRequest(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, options *SharedImagesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/sharedgalleries/{sharedGalleryName}/sharedimages"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if labName == "" {
		return nil, errors.New("parameter labName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{labName}", url.PathEscape(labName))
	if sharedGalleryName == "" {
		return nil, errors.New("parameter sharedGalleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sharedGalleryName}", url.PathEscape(sharedGalleryName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Orderby != nil {
		reqQP.Set("$orderby", *options.Orderby)
	}
	reqQP.Set("api-version", "2021-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SharedImagesClient) listHandleResponse(resp *http.Response) (SharedImagesClientListResponse, error) {
	result := SharedImagesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SharedImageList); err != nil {
		return SharedImagesClientListResponse{}, err
	}
	return result, nil
}

// Update - Allows modifying tags of shared images. All other properties will be ignored.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-09-01
// resourceGroupName - The name of the resource group.
// labName - The name of the lab.
// sharedGalleryName - The name of the shared gallery.
// name - The name of the shared image.
// sharedImage - Allows modifying tags of shared images. All other properties will be ignored.
// options - SharedImagesClientUpdateOptions contains the optional parameters for the SharedImagesClient.Update method.
func (client *SharedImagesClient) Update(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, name string, sharedImage SharedImageFragment, options *SharedImagesClientUpdateOptions) (SharedImagesClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, labName, sharedGalleryName, name, sharedImage, options)
	if err != nil {
		return SharedImagesClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SharedImagesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SharedImagesClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *SharedImagesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, labName string, sharedGalleryName string, name string, sharedImage SharedImageFragment, options *SharedImagesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/sharedgalleries/{sharedGalleryName}/sharedimages/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if labName == "" {
		return nil, errors.New("parameter labName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{labName}", url.PathEscape(labName))
	if sharedGalleryName == "" {
		return nil, errors.New("parameter sharedGalleryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sharedGalleryName}", url.PathEscape(sharedGalleryName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sharedImage)
}

// updateHandleResponse handles the Update response.
func (client *SharedImagesClient) updateHandleResponse(resp *http.Response) (SharedImagesClientUpdateResponse, error) {
	result := SharedImagesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SharedImage); err != nil {
		return SharedImagesClientUpdateResponse{}, err
	}
	return result, nil
}
