//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armprogrammableconnectivity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// OpenAPIGatewayOfferingsClient contains the methods for the OpenAPIGatewayOfferings group.
// Don't use this type directly, use NewOpenAPIGatewayOfferingsClient() instead.
type OpenAPIGatewayOfferingsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewOpenAPIGatewayOfferingsClient creates a new instance of OpenAPIGatewayOfferingsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewOpenAPIGatewayOfferingsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*OpenAPIGatewayOfferingsClient, error) {
	cl, err := arm.NewClient(moduleName+".OpenAPIGatewayOfferingsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &OpenAPIGatewayOfferingsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get a OpenApiGatewayOffering
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-11-01-preview
//   - name - APC Gateway Offering Name
//   - options - OpenAPIGatewayOfferingsClientGetOptions contains the optional parameters for the OpenAPIGatewayOfferingsClient.Get
//     method.
func (client *OpenAPIGatewayOfferingsClient) Get(ctx context.Context, name string, options *OpenAPIGatewayOfferingsClientGetOptions) (OpenAPIGatewayOfferingsClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, name, options)
	if err != nil {
		return OpenAPIGatewayOfferingsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OpenAPIGatewayOfferingsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OpenAPIGatewayOfferingsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *OpenAPIGatewayOfferingsClient) getCreateRequest(ctx context.Context, name string, options *OpenAPIGatewayOfferingsClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ProgrammableConnectivity/openApiGatewayOfferings/{name}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *OpenAPIGatewayOfferingsClient) getHandleResponse(resp *http.Response) (OpenAPIGatewayOfferingsClientGetResponse, error) {
	result := OpenAPIGatewayOfferingsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OpenAPIGatewayOffering); err != nil {
		return OpenAPIGatewayOfferingsClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List OpenApiGatewayOffering resources by subscription ID
//
// Generated from API version 2023-11-01-preview
//   - options - OpenAPIGatewayOfferingsClientListBySubscriptionOptions contains the optional parameters for the OpenAPIGatewayOfferingsClient.NewListBySubscriptionPager
//     method.
func (client *OpenAPIGatewayOfferingsClient) NewListBySubscriptionPager(options *OpenAPIGatewayOfferingsClientListBySubscriptionOptions) *runtime.Pager[OpenAPIGatewayOfferingsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[OpenAPIGatewayOfferingsClientListBySubscriptionResponse]{
		More: func(page OpenAPIGatewayOfferingsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OpenAPIGatewayOfferingsClientListBySubscriptionResponse) (OpenAPIGatewayOfferingsClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return OpenAPIGatewayOfferingsClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return OpenAPIGatewayOfferingsClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return OpenAPIGatewayOfferingsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *OpenAPIGatewayOfferingsClient) listBySubscriptionCreateRequest(ctx context.Context, options *OpenAPIGatewayOfferingsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/openApiGatewayOfferings"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *OpenAPIGatewayOfferingsClient) listBySubscriptionHandleResponse(resp *http.Response) (OpenAPIGatewayOfferingsClientListBySubscriptionResponse, error) {
	result := OpenAPIGatewayOfferingsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OpenAPIGatewayOfferingListResult); err != nil {
		return OpenAPIGatewayOfferingsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// NewListByTenantPager - List OpenApiGatewayOffering resources by tenant
//
// Generated from API version 2023-11-01-preview
//   - options - OpenAPIGatewayOfferingsClientListByTenantOptions contains the optional parameters for the OpenAPIGatewayOfferingsClient.NewListByTenantPager
//     method.
func (client *OpenAPIGatewayOfferingsClient) NewListByTenantPager(options *OpenAPIGatewayOfferingsClientListByTenantOptions) *runtime.Pager[OpenAPIGatewayOfferingsClientListByTenantResponse] {
	return runtime.NewPager(runtime.PagingHandler[OpenAPIGatewayOfferingsClientListByTenantResponse]{
		More: func(page OpenAPIGatewayOfferingsClientListByTenantResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OpenAPIGatewayOfferingsClientListByTenantResponse) (OpenAPIGatewayOfferingsClientListByTenantResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByTenantCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return OpenAPIGatewayOfferingsClientListByTenantResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return OpenAPIGatewayOfferingsClientListByTenantResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return OpenAPIGatewayOfferingsClientListByTenantResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByTenantHandleResponse(resp)
		},
	})
}

// listByTenantCreateRequest creates the ListByTenant request.
func (client *OpenAPIGatewayOfferingsClient) listByTenantCreateRequest(ctx context.Context, options *OpenAPIGatewayOfferingsClientListByTenantOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ProgrammableConnectivity/openApiGatewayOfferings"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByTenantHandleResponse handles the ListByTenant response.
func (client *OpenAPIGatewayOfferingsClient) listByTenantHandleResponse(resp *http.Response) (OpenAPIGatewayOfferingsClientListByTenantResponse, error) {
	result := OpenAPIGatewayOfferingsClientListByTenantResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OpenAPIGatewayOfferingListResult); err != nil {
		return OpenAPIGatewayOfferingsClientListByTenantResponse{}, err
	}
	return result, nil
}
