// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridnetwork/armhybridnetwork/v2"
	"net/http"
	"net/url"
	"regexp"
)

// ArtifactStoresServer is a fake server for instances of the armhybridnetwork.ArtifactStoresClient type.
type ArtifactStoresServer struct {
	// BeginAddNetworkFabricControllerEndPoints is the fake for method ArtifactStoresClient.BeginAddNetworkFabricControllerEndPoints
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginAddNetworkFabricControllerEndPoints func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, parameters armhybridnetwork.ArtifactStoreNetworkFabricControllerEndPoints, options *armhybridnetwork.ArtifactStoresClientBeginAddNetworkFabricControllerEndPointsOptions) (resp azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientAddNetworkFabricControllerEndPointsResponse], errResp azfake.ErrorResponder)

	// BeginApprovePrivateEndPoints is the fake for method ArtifactStoresClient.BeginApprovePrivateEndPoints
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginApprovePrivateEndPoints func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, parameters armhybridnetwork.ArtifactStorePrivateEndPointsFormat, options *armhybridnetwork.ArtifactStoresClientBeginApprovePrivateEndPointsOptions) (resp azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientApprovePrivateEndPointsResponse], errResp azfake.ErrorResponder)

	// BeginCreateOrUpdate is the fake for method ArtifactStoresClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, parameters armhybridnetwork.ArtifactStore, options *armhybridnetwork.ArtifactStoresClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method ArtifactStoresClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, options *armhybridnetwork.ArtifactStoresClientBeginDeleteOptions) (resp azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginDeleteNetworkFabricControllerEndPoints is the fake for method ArtifactStoresClient.BeginDeleteNetworkFabricControllerEndPoints
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteNetworkFabricControllerEndPoints func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, parameters armhybridnetwork.ArtifactStoreNetworkFabricControllerEndPoints, options *armhybridnetwork.ArtifactStoresClientBeginDeleteNetworkFabricControllerEndPointsOptions) (resp azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientDeleteNetworkFabricControllerEndPointsResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ArtifactStoresClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, options *armhybridnetwork.ArtifactStoresClientGetOptions) (resp azfake.Responder[armhybridnetwork.ArtifactStoresClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByPublisherPager is the fake for method ArtifactStoresClient.NewListByPublisherPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByPublisherPager func(resourceGroupName string, publisherName string, options *armhybridnetwork.ArtifactStoresClientListByPublisherOptions) (resp azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListByPublisherResponse])

	// BeginListNetworkFabricControllerPrivateEndPoints is the fake for method ArtifactStoresClient.BeginListNetworkFabricControllerPrivateEndPoints
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginListNetworkFabricControllerPrivateEndPoints func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, options *armhybridnetwork.ArtifactStoresClientBeginListNetworkFabricControllerPrivateEndPointsOptions) (resp azfake.PollerResponder[azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListNetworkFabricControllerPrivateEndPointsResponse]], errResp azfake.ErrorResponder)

	// BeginListPrivateEndPoints is the fake for method ArtifactStoresClient.BeginListPrivateEndPoints
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginListPrivateEndPoints func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, options *armhybridnetwork.ArtifactStoresClientBeginListPrivateEndPointsOptions) (resp azfake.PollerResponder[azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListPrivateEndPointsResponse]], errResp azfake.ErrorResponder)

	// BeginRemovePrivateEndPoints is the fake for method ArtifactStoresClient.BeginRemovePrivateEndPoints
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginRemovePrivateEndPoints func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, parameters armhybridnetwork.ArtifactStorePrivateEndPointsFormat, options *armhybridnetwork.ArtifactStoresClientBeginRemovePrivateEndPointsOptions) (resp azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientRemovePrivateEndPointsResponse], errResp azfake.ErrorResponder)

	// Update is the fake for method ArtifactStoresClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, publisherName string, artifactStoreName string, parameters armhybridnetwork.TagsObject, options *armhybridnetwork.ArtifactStoresClientUpdateOptions) (resp azfake.Responder[armhybridnetwork.ArtifactStoresClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewArtifactStoresServerTransport creates a new instance of ArtifactStoresServerTransport with the provided implementation.
// The returned ArtifactStoresServerTransport instance is connected to an instance of armhybridnetwork.ArtifactStoresClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewArtifactStoresServerTransport(srv *ArtifactStoresServer) *ArtifactStoresServerTransport {
	return &ArtifactStoresServerTransport{
		srv:                                      srv,
		beginAddNetworkFabricControllerEndPoints: newTracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientAddNetworkFabricControllerEndPointsResponse]](),
		beginApprovePrivateEndPoints:             newTracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientApprovePrivateEndPointsResponse]](),
		beginCreateOrUpdate:                      newTracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientCreateOrUpdateResponse]](),
		beginDelete:                              newTracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientDeleteResponse]](),
		beginDeleteNetworkFabricControllerEndPoints:      newTracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientDeleteNetworkFabricControllerEndPointsResponse]](),
		newListByPublisherPager:                          newTracker[azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListByPublisherResponse]](),
		beginListNetworkFabricControllerPrivateEndPoints: newTracker[azfake.PollerResponder[azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListNetworkFabricControllerPrivateEndPointsResponse]]](),
		beginListPrivateEndPoints:                        newTracker[azfake.PollerResponder[azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListPrivateEndPointsResponse]]](),
		beginRemovePrivateEndPoints:                      newTracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientRemovePrivateEndPointsResponse]](),
	}
}

// ArtifactStoresServerTransport connects instances of armhybridnetwork.ArtifactStoresClient to instances of ArtifactStoresServer.
// Don't use this type directly, use NewArtifactStoresServerTransport instead.
type ArtifactStoresServerTransport struct {
	srv                                              *ArtifactStoresServer
	beginAddNetworkFabricControllerEndPoints         *tracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientAddNetworkFabricControllerEndPointsResponse]]
	beginApprovePrivateEndPoints                     *tracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientApprovePrivateEndPointsResponse]]
	beginCreateOrUpdate                              *tracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientCreateOrUpdateResponse]]
	beginDelete                                      *tracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientDeleteResponse]]
	beginDeleteNetworkFabricControllerEndPoints      *tracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientDeleteNetworkFabricControllerEndPointsResponse]]
	newListByPublisherPager                          *tracker[azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListByPublisherResponse]]
	beginListNetworkFabricControllerPrivateEndPoints *tracker[azfake.PollerResponder[azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListNetworkFabricControllerPrivateEndPointsResponse]]]
	beginListPrivateEndPoints                        *tracker[azfake.PollerResponder[azfake.PagerResponder[armhybridnetwork.ArtifactStoresClientListPrivateEndPointsResponse]]]
	beginRemovePrivateEndPoints                      *tracker[azfake.PollerResponder[armhybridnetwork.ArtifactStoresClientRemovePrivateEndPointsResponse]]
}

// Do implements the policy.Transporter interface for ArtifactStoresServerTransport.
func (a *ArtifactStoresServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *ArtifactStoresServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if artifactStoresServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = artifactStoresServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ArtifactStoresClient.BeginAddNetworkFabricControllerEndPoints":
				res.resp, res.err = a.dispatchBeginAddNetworkFabricControllerEndPoints(req)
			case "ArtifactStoresClient.BeginApprovePrivateEndPoints":
				res.resp, res.err = a.dispatchBeginApprovePrivateEndPoints(req)
			case "ArtifactStoresClient.BeginCreateOrUpdate":
				res.resp, res.err = a.dispatchBeginCreateOrUpdate(req)
			case "ArtifactStoresClient.BeginDelete":
				res.resp, res.err = a.dispatchBeginDelete(req)
			case "ArtifactStoresClient.BeginDeleteNetworkFabricControllerEndPoints":
				res.resp, res.err = a.dispatchBeginDeleteNetworkFabricControllerEndPoints(req)
			case "ArtifactStoresClient.Get":
				res.resp, res.err = a.dispatchGet(req)
			case "ArtifactStoresClient.NewListByPublisherPager":
				res.resp, res.err = a.dispatchNewListByPublisherPager(req)
			case "ArtifactStoresClient.BeginListNetworkFabricControllerPrivateEndPoints":
				res.resp, res.err = a.dispatchBeginListNetworkFabricControllerPrivateEndPoints(req)
			case "ArtifactStoresClient.BeginListPrivateEndPoints":
				res.resp, res.err = a.dispatchBeginListPrivateEndPoints(req)
			case "ArtifactStoresClient.BeginRemovePrivateEndPoints":
				res.resp, res.err = a.dispatchBeginRemovePrivateEndPoints(req)
			case "ArtifactStoresClient.Update":
				res.resp, res.err = a.dispatchUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *ArtifactStoresServerTransport) dispatchBeginAddNetworkFabricControllerEndPoints(req *http.Request) (*http.Response, error) {
	if a.srv.BeginAddNetworkFabricControllerEndPoints == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginAddNetworkFabricControllerEndPoints not implemented")}
	}
	beginAddNetworkFabricControllerEndPoints := a.beginAddNetworkFabricControllerEndPoints.get(req)
	if beginAddNetworkFabricControllerEndPoints == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/addNetworkFabricControllerEndPoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhybridnetwork.ArtifactStoreNetworkFabricControllerEndPoints](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginAddNetworkFabricControllerEndPoints(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginAddNetworkFabricControllerEndPoints = &respr
		a.beginAddNetworkFabricControllerEndPoints.add(req, beginAddNetworkFabricControllerEndPoints)
	}

	resp, err := server.PollerResponderNext(beginAddNetworkFabricControllerEndPoints, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginAddNetworkFabricControllerEndPoints.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginAddNetworkFabricControllerEndPoints) {
		a.beginAddNetworkFabricControllerEndPoints.remove(req)
	}

	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchBeginApprovePrivateEndPoints(req *http.Request) (*http.Response, error) {
	if a.srv.BeginApprovePrivateEndPoints == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginApprovePrivateEndPoints not implemented")}
	}
	beginApprovePrivateEndPoints := a.beginApprovePrivateEndPoints.get(req)
	if beginApprovePrivateEndPoints == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/approvePrivateEndPoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhybridnetwork.ArtifactStorePrivateEndPointsFormat](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginApprovePrivateEndPoints(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginApprovePrivateEndPoints = &respr
		a.beginApprovePrivateEndPoints.add(req, beginApprovePrivateEndPoints)
	}

	resp, err := server.PollerResponderNext(beginApprovePrivateEndPoints, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginApprovePrivateEndPoints.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginApprovePrivateEndPoints) {
		a.beginApprovePrivateEndPoints.remove(req)
	}

	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := a.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhybridnetwork.ArtifactStore](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		a.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		a.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		a.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchBeginDeleteNetworkFabricControllerEndPoints(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDeleteNetworkFabricControllerEndPoints == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteNetworkFabricControllerEndPoints not implemented")}
	}
	beginDeleteNetworkFabricControllerEndPoints := a.beginDeleteNetworkFabricControllerEndPoints.get(req)
	if beginDeleteNetworkFabricControllerEndPoints == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deleteNetworkFabricControllerEndPoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhybridnetwork.ArtifactStoreNetworkFabricControllerEndPoints](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDeleteNetworkFabricControllerEndPoints(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteNetworkFabricControllerEndPoints = &respr
		a.beginDeleteNetworkFabricControllerEndPoints.add(req, beginDeleteNetworkFabricControllerEndPoints)
	}

	resp, err := server.PollerResponderNext(beginDeleteNetworkFabricControllerEndPoints, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDeleteNetworkFabricControllerEndPoints.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteNetworkFabricControllerEndPoints) {
		a.beginDeleteNetworkFabricControllerEndPoints.remove(req)
	}

	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
	if err != nil {
		return nil, err
	}
	artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ArtifactStore, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchNewListByPublisherPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByPublisherPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByPublisherPager not implemented")}
	}
	newListByPublisherPager := a.newListByPublisherPager.get(req)
	if newListByPublisherPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByPublisherPager(resourceGroupNameParam, publisherNameParam, nil)
		newListByPublisherPager = &resp
		a.newListByPublisherPager.add(req, newListByPublisherPager)
		server.PagerResponderInjectNextLinks(newListByPublisherPager, req, func(page *armhybridnetwork.ArtifactStoresClientListByPublisherResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByPublisherPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByPublisherPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByPublisherPager) {
		a.newListByPublisherPager.remove(req)
	}
	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchBeginListNetworkFabricControllerPrivateEndPoints(req *http.Request) (*http.Response, error) {
	if a.srv.BeginListNetworkFabricControllerPrivateEndPoints == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginListNetworkFabricControllerPrivateEndPoints not implemented")}
	}
	beginListNetworkFabricControllerPrivateEndPoints := a.beginListNetworkFabricControllerPrivateEndPoints.get(req)
	if beginListNetworkFabricControllerPrivateEndPoints == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listNetworkFabricControllerPrivateEndPoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginListNetworkFabricControllerPrivateEndPoints(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginListNetworkFabricControllerPrivateEndPoints = &respr
		a.beginListNetworkFabricControllerPrivateEndPoints.add(req, beginListNetworkFabricControllerPrivateEndPoints)
	}

	resp, err := server.PollerResponderNext(beginListNetworkFabricControllerPrivateEndPoints, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginListNetworkFabricControllerPrivateEndPoints.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginListNetworkFabricControllerPrivateEndPoints) {
		a.beginListNetworkFabricControllerPrivateEndPoints.remove(req)
	}

	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchBeginListPrivateEndPoints(req *http.Request) (*http.Response, error) {
	if a.srv.BeginListPrivateEndPoints == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginListPrivateEndPoints not implemented")}
	}
	beginListPrivateEndPoints := a.beginListPrivateEndPoints.get(req)
	if beginListPrivateEndPoints == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listPrivateEndPoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginListPrivateEndPoints(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginListPrivateEndPoints = &respr
		a.beginListPrivateEndPoints.add(req, beginListPrivateEndPoints)
	}

	resp, err := server.PollerResponderNext(beginListPrivateEndPoints, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginListPrivateEndPoints.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginListPrivateEndPoints) {
		a.beginListPrivateEndPoints.remove(req)
	}

	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchBeginRemovePrivateEndPoints(req *http.Request) (*http.Response, error) {
	if a.srv.BeginRemovePrivateEndPoints == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRemovePrivateEndPoints not implemented")}
	}
	beginRemovePrivateEndPoints := a.beginRemovePrivateEndPoints.get(req)
	if beginRemovePrivateEndPoints == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/removePrivateEndPoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhybridnetwork.ArtifactStorePrivateEndPointsFormat](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
		if err != nil {
			return nil, err
		}
		artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginRemovePrivateEndPoints(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRemovePrivateEndPoints = &respr
		a.beginRemovePrivateEndPoints.add(req, beginRemovePrivateEndPoints)
	}

	resp, err := server.PollerResponderNext(beginRemovePrivateEndPoints, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginRemovePrivateEndPoints.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRemovePrivateEndPoints) {
		a.beginRemovePrivateEndPoints.remove(req)
	}

	return resp, nil
}

func (a *ArtifactStoresServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridNetwork/publishers/(?P<publisherName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/artifactStores/(?P<artifactStoreName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armhybridnetwork.TagsObject](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	publisherNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("publisherName")])
	if err != nil {
		return nil, err
	}
	artifactStoreNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("artifactStoreName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Update(req.Context(), resourceGroupNameParam, publisherNameParam, artifactStoreNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ArtifactStore, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ArtifactStoresServerTransport
var artifactStoresServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
