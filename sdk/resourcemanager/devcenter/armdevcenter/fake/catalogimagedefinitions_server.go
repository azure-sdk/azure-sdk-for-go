// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devcenter/armdevcenter/v2"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// CatalogImageDefinitionsServer is a fake server for instances of the armdevcenter.CatalogImageDefinitionsClient type.
type CatalogImageDefinitionsServer struct {
	// BeginBuildImage is the fake for method CatalogImageDefinitionsClient.BeginBuildImage
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginBuildImage func(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, options *armdevcenter.CatalogImageDefinitionsClientBeginBuildImageOptions) (resp azfake.PollerResponder[armdevcenter.CatalogImageDefinitionsClientBuildImageResponse], errResp azfake.ErrorResponder)

	// GetByDevCenterCatalog is the fake for method CatalogImageDefinitionsClient.GetByDevCenterCatalog
	// HTTP status codes to indicate success: http.StatusOK
	GetByDevCenterCatalog func(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, options *armdevcenter.CatalogImageDefinitionsClientGetByDevCenterCatalogOptions) (resp azfake.Responder[armdevcenter.CatalogImageDefinitionsClientGetByDevCenterCatalogResponse], errResp azfake.ErrorResponder)

	// GetErrorDetails is the fake for method CatalogImageDefinitionsClient.GetErrorDetails
	// HTTP status codes to indicate success: http.StatusOK
	GetErrorDetails func(ctx context.Context, resourceGroupName string, devCenterName string, catalogName string, imageDefinitionName string, options *armdevcenter.CatalogImageDefinitionsClientGetErrorDetailsOptions) (resp azfake.Responder[armdevcenter.CatalogImageDefinitionsClientGetErrorDetailsResponse], errResp azfake.ErrorResponder)

	// NewListByDevCenterCatalogPager is the fake for method CatalogImageDefinitionsClient.NewListByDevCenterCatalogPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByDevCenterCatalogPager func(resourceGroupName string, devCenterName string, catalogName string, options *armdevcenter.CatalogImageDefinitionsClientListByDevCenterCatalogOptions) (resp azfake.PagerResponder[armdevcenter.CatalogImageDefinitionsClientListByDevCenterCatalogResponse])
}

// NewCatalogImageDefinitionsServerTransport creates a new instance of CatalogImageDefinitionsServerTransport with the provided implementation.
// The returned CatalogImageDefinitionsServerTransport instance is connected to an instance of armdevcenter.CatalogImageDefinitionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCatalogImageDefinitionsServerTransport(srv *CatalogImageDefinitionsServer) *CatalogImageDefinitionsServerTransport {
	return &CatalogImageDefinitionsServerTransport{
		srv:                            srv,
		beginBuildImage:                newTracker[azfake.PollerResponder[armdevcenter.CatalogImageDefinitionsClientBuildImageResponse]](),
		newListByDevCenterCatalogPager: newTracker[azfake.PagerResponder[armdevcenter.CatalogImageDefinitionsClientListByDevCenterCatalogResponse]](),
	}
}

// CatalogImageDefinitionsServerTransport connects instances of armdevcenter.CatalogImageDefinitionsClient to instances of CatalogImageDefinitionsServer.
// Don't use this type directly, use NewCatalogImageDefinitionsServerTransport instead.
type CatalogImageDefinitionsServerTransport struct {
	srv                            *CatalogImageDefinitionsServer
	beginBuildImage                *tracker[azfake.PollerResponder[armdevcenter.CatalogImageDefinitionsClientBuildImageResponse]]
	newListByDevCenterCatalogPager *tracker[azfake.PagerResponder[armdevcenter.CatalogImageDefinitionsClientListByDevCenterCatalogResponse]]
}

// Do implements the policy.Transporter interface for CatalogImageDefinitionsServerTransport.
func (c *CatalogImageDefinitionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *CatalogImageDefinitionsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if catalogImageDefinitionsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = catalogImageDefinitionsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "CatalogImageDefinitionsClient.BeginBuildImage":
				res.resp, res.err = c.dispatchBeginBuildImage(req)
			case "CatalogImageDefinitionsClient.GetByDevCenterCatalog":
				res.resp, res.err = c.dispatchGetByDevCenterCatalog(req)
			case "CatalogImageDefinitionsClient.GetErrorDetails":
				res.resp, res.err = c.dispatchGetErrorDetails(req)
			case "CatalogImageDefinitionsClient.NewListByDevCenterCatalogPager":
				res.resp, res.err = c.dispatchNewListByDevCenterCatalogPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *CatalogImageDefinitionsServerTransport) dispatchBeginBuildImage(req *http.Request) (*http.Response, error) {
	if c.srv.BeginBuildImage == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginBuildImage not implemented")}
	}
	beginBuildImage := c.beginBuildImage.get(req)
	if beginBuildImage == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/devcenters/(?P<devCenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions/(?P<imageDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/buildImage`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		devCenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("devCenterName")])
		if err != nil {
			return nil, err
		}
		catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
		if err != nil {
			return nil, err
		}
		imageDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageDefinitionName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginBuildImage(req.Context(), resourceGroupNameParam, devCenterNameParam, catalogNameParam, imageDefinitionNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginBuildImage = &respr
		c.beginBuildImage.add(req, beginBuildImage)
	}

	resp, err := server.PollerResponderNext(beginBuildImage, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		c.beginBuildImage.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginBuildImage) {
		c.beginBuildImage.remove(req)
	}

	return resp, nil
}

func (c *CatalogImageDefinitionsServerTransport) dispatchGetByDevCenterCatalog(req *http.Request) (*http.Response, error) {
	if c.srv.GetByDevCenterCatalog == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetByDevCenterCatalog not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/devcenters/(?P<devCenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions/(?P<imageDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	devCenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("devCenterName")])
	if err != nil {
		return nil, err
	}
	catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
	if err != nil {
		return nil, err
	}
	imageDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.GetByDevCenterCatalog(req.Context(), resourceGroupNameParam, devCenterNameParam, catalogNameParam, imageDefinitionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ImageDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CatalogImageDefinitionsServerTransport) dispatchGetErrorDetails(req *http.Request) (*http.Response, error) {
	if c.srv.GetErrorDetails == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetErrorDetails not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/devcenters/(?P<devCenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions/(?P<imageDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getErrorDetails`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	devCenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("devCenterName")])
	if err != nil {
		return nil, err
	}
	catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
	if err != nil {
		return nil, err
	}
	imageDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.GetErrorDetails(req.Context(), resourceGroupNameParam, devCenterNameParam, catalogNameParam, imageDefinitionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CatalogResourceValidationErrorDetails, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CatalogImageDefinitionsServerTransport) dispatchNewListByDevCenterCatalogPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListByDevCenterCatalogPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByDevCenterCatalogPager not implemented")}
	}
	newListByDevCenterCatalogPager := c.newListByDevCenterCatalogPager.get(req)
	if newListByDevCenterCatalogPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/devcenters/(?P<devCenterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		devCenterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("devCenterName")])
		if err != nil {
			return nil, err
		}
		catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
		if err != nil {
			return nil, err
		}
		topUnescaped, err := url.QueryUnescape(qp.Get("$top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armdevcenter.CatalogImageDefinitionsClientListByDevCenterCatalogOptions
		if topParam != nil {
			options = &armdevcenter.CatalogImageDefinitionsClientListByDevCenterCatalogOptions{
				Top: topParam,
			}
		}
		resp := c.srv.NewListByDevCenterCatalogPager(resourceGroupNameParam, devCenterNameParam, catalogNameParam, options)
		newListByDevCenterCatalogPager = &resp
		c.newListByDevCenterCatalogPager.add(req, newListByDevCenterCatalogPager)
		server.PagerResponderInjectNextLinks(newListByDevCenterCatalogPager, req, func(page *armdevcenter.CatalogImageDefinitionsClientListByDevCenterCatalogResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByDevCenterCatalogPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListByDevCenterCatalogPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByDevCenterCatalogPager) {
		c.newListByDevCenterCatalogPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to CatalogImageDefinitionsServerTransport
var catalogImageDefinitionsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
