//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armsecurity.ClientFactory type.
type ServerFactory struct {
	AzureDevOpsOrgsServer        AzureDevOpsOrgsServer
	AzureDevOpsProjectsServer    AzureDevOpsProjectsServer
	AzureDevOpsReposServer       AzureDevOpsReposServer
	DevOpsConfigurationsServer   DevOpsConfigurationsServer
	DevOpsOperationResultsServer DevOpsOperationResultsServer
	GitHubOwnersServer           GitHubOwnersServer
	GitHubReposServer            GitHubReposServer
	GitLabGroupsServer           GitLabGroupsServer
	GitLabProjectsServer         GitLabProjectsServer
	GitLabSubgroupsServer        GitLabSubgroupsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armsecurity.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armsecurity.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                            *ServerFactory
	trMu                           sync.Mutex
	trAzureDevOpsOrgsServer        *AzureDevOpsOrgsServerTransport
	trAzureDevOpsProjectsServer    *AzureDevOpsProjectsServerTransport
	trAzureDevOpsReposServer       *AzureDevOpsReposServerTransport
	trDevOpsConfigurationsServer   *DevOpsConfigurationsServerTransport
	trDevOpsOperationResultsServer *DevOpsOperationResultsServerTransport
	trGitHubOwnersServer           *GitHubOwnersServerTransport
	trGitHubReposServer            *GitHubReposServerTransport
	trGitLabGroupsServer           *GitLabGroupsServerTransport
	trGitLabProjectsServer         *GitLabProjectsServerTransport
	trGitLabSubgroupsServer        *GitLabSubgroupsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AzureDevOpsOrgsClient":
		initServer(s, &s.trAzureDevOpsOrgsServer, func() *AzureDevOpsOrgsServerTransport {
			return NewAzureDevOpsOrgsServerTransport(&s.srv.AzureDevOpsOrgsServer)
		})
		resp, err = s.trAzureDevOpsOrgsServer.Do(req)
	case "AzureDevOpsProjectsClient":
		initServer(s, &s.trAzureDevOpsProjectsServer, func() *AzureDevOpsProjectsServerTransport {
			return NewAzureDevOpsProjectsServerTransport(&s.srv.AzureDevOpsProjectsServer)
		})
		resp, err = s.trAzureDevOpsProjectsServer.Do(req)
	case "AzureDevOpsReposClient":
		initServer(s, &s.trAzureDevOpsReposServer, func() *AzureDevOpsReposServerTransport {
			return NewAzureDevOpsReposServerTransport(&s.srv.AzureDevOpsReposServer)
		})
		resp, err = s.trAzureDevOpsReposServer.Do(req)
	case "DevOpsConfigurationsClient":
		initServer(s, &s.trDevOpsConfigurationsServer, func() *DevOpsConfigurationsServerTransport {
			return NewDevOpsConfigurationsServerTransport(&s.srv.DevOpsConfigurationsServer)
		})
		resp, err = s.trDevOpsConfigurationsServer.Do(req)
	case "DevOpsOperationResultsClient":
		initServer(s, &s.trDevOpsOperationResultsServer, func() *DevOpsOperationResultsServerTransport {
			return NewDevOpsOperationResultsServerTransport(&s.srv.DevOpsOperationResultsServer)
		})
		resp, err = s.trDevOpsOperationResultsServer.Do(req)
	case "GitHubOwnersClient":
		initServer(s, &s.trGitHubOwnersServer, func() *GitHubOwnersServerTransport { return NewGitHubOwnersServerTransport(&s.srv.GitHubOwnersServer) })
		resp, err = s.trGitHubOwnersServer.Do(req)
	case "GitHubReposClient":
		initServer(s, &s.trGitHubReposServer, func() *GitHubReposServerTransport { return NewGitHubReposServerTransport(&s.srv.GitHubReposServer) })
		resp, err = s.trGitHubReposServer.Do(req)
	case "GitLabGroupsClient":
		initServer(s, &s.trGitLabGroupsServer, func() *GitLabGroupsServerTransport { return NewGitLabGroupsServerTransport(&s.srv.GitLabGroupsServer) })
		resp, err = s.trGitLabGroupsServer.Do(req)
	case "GitLabProjectsClient":
		initServer(s, &s.trGitLabProjectsServer, func() *GitLabProjectsServerTransport {
			return NewGitLabProjectsServerTransport(&s.srv.GitLabProjectsServer)
		})
		resp, err = s.trGitLabProjectsServer.Do(req)
	case "GitLabSubgroupsClient":
		initServer(s, &s.trGitLabSubgroupsServer, func() *GitLabSubgroupsServerTransport {
			return NewGitLabSubgroupsServerTransport(&s.srv.GitLabSubgroupsServer)
		})
		resp, err = s.trGitLabSubgroupsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
