//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/operationalinsights/armoperationalinsights/v2"
	"net/http"
	"net/url"
	"regexp"
)

// WorkspacesServer is a fake server for instances of the armoperationalinsights.WorkspacesClient type.
type WorkspacesServer struct {
	// GetNSP is the fake for method WorkspacesClient.GetNSP
	// HTTP status codes to indicate success: http.StatusOK
	GetNSP func(ctx context.Context, resourceGroupName string, workspaceName string, configurationName string, options *armoperationalinsights.WorkspacesClientGetNSPOptions) (resp azfake.Responder[armoperationalinsights.WorkspacesClientGetNSPResponse], errResp azfake.ErrorResponder)

	// NewListNSPPager is the fake for method WorkspacesClient.NewListNSPPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListNSPPager func(resourceGroupName string, workspaceName string, options *armoperationalinsights.WorkspacesClientListNSPOptions) (resp azfake.PagerResponder[armoperationalinsights.WorkspacesClientListNSPResponse])

	// BeginReconcileNSP is the fake for method WorkspacesClient.BeginReconcileNSP
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginReconcileNSP func(ctx context.Context, resourceGroupName string, workspaceName string, configurationName string, options *armoperationalinsights.WorkspacesClientBeginReconcileNSPOptions) (resp azfake.PollerResponder[armoperationalinsights.WorkspacesClientReconcileNSPResponse], errResp azfake.ErrorResponder)
}

// NewWorkspacesServerTransport creates a new instance of WorkspacesServerTransport with the provided implementation.
// The returned WorkspacesServerTransport instance is connected to an instance of armoperationalinsights.WorkspacesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWorkspacesServerTransport(srv *WorkspacesServer) *WorkspacesServerTransport {
	return &WorkspacesServerTransport{
		srv:               srv,
		newListNSPPager:   newTracker[azfake.PagerResponder[armoperationalinsights.WorkspacesClientListNSPResponse]](),
		beginReconcileNSP: newTracker[azfake.PollerResponder[armoperationalinsights.WorkspacesClientReconcileNSPResponse]](),
	}
}

// WorkspacesServerTransport connects instances of armoperationalinsights.WorkspacesClient to instances of WorkspacesServer.
// Don't use this type directly, use NewWorkspacesServerTransport instead.
type WorkspacesServerTransport struct {
	srv               *WorkspacesServer
	newListNSPPager   *tracker[azfake.PagerResponder[armoperationalinsights.WorkspacesClientListNSPResponse]]
	beginReconcileNSP *tracker[azfake.PollerResponder[armoperationalinsights.WorkspacesClientReconcileNSPResponse]]
}

// Do implements the policy.Transporter interface for WorkspacesServerTransport.
func (w *WorkspacesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "WorkspacesClient.GetNSP":
		resp, err = w.dispatchGetNSP(req)
	case "WorkspacesClient.NewListNSPPager":
		resp, err = w.dispatchNewListNSPPager(req)
	case "WorkspacesClient.BeginReconcileNSP":
		resp, err = w.dispatchBeginReconcileNSP(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchGetNSP(req *http.Request) (*http.Response, error) {
	if w.srv.GetNSP == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNSP not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourcegroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networkSecurityPerimeterConfigurations/(?P<configurationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	configurationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configurationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.GetNSP(req.Context(), resourceGroupNameParam, workspaceNameParam, configurationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).NetworkSecurityPerimeterConfiguration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchNewListNSPPager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListNSPPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListNSPPager not implemented")}
	}
	newListNSPPager := w.newListNSPPager.get(req)
	if newListNSPPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourcegroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networkSecurityPerimeterConfigurations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		resp := w.srv.NewListNSPPager(resourceGroupNameParam, workspaceNameParam, nil)
		newListNSPPager = &resp
		w.newListNSPPager.add(req, newListNSPPager)
		server.PagerResponderInjectNextLinks(newListNSPPager, req, func(page *armoperationalinsights.WorkspacesClientListNSPResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListNSPPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListNSPPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListNSPPager) {
		w.newListNSPPager.remove(req)
	}
	return resp, nil
}

func (w *WorkspacesServerTransport) dispatchBeginReconcileNSP(req *http.Request) (*http.Response, error) {
	if w.srv.BeginReconcileNSP == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginReconcileNSP not implemented")}
	}
	beginReconcileNSP := w.beginReconcileNSP.get(req)
	if beginReconcileNSP == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourcegroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networkSecurityPerimeterConfigurations/(?P<configurationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reconcile`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		configurationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configurationName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginReconcileNSP(req.Context(), resourceGroupNameParam, workspaceNameParam, configurationNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginReconcileNSP = &respr
		w.beginReconcileNSP.add(req, beginReconcileNSP)
	}

	resp, err := server.PollerResponderNext(beginReconcileNSP, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		w.beginReconcileNSP.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginReconcileNSP) {
		w.beginReconcileNSP.remove(req)
	}

	return resp, nil
}
