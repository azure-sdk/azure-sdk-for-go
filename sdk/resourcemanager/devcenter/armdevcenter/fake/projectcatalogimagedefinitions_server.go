//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devcenter/armdevcenter/v2"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// ProjectCatalogImageDefinitionsServer is a fake server for instances of the armdevcenter.ProjectCatalogImageDefinitionsClient type.
type ProjectCatalogImageDefinitionsServer struct {
	// GetByProjectCatalog is the fake for method ProjectCatalogImageDefinitionsClient.GetByProjectCatalog
	// HTTP status codes to indicate success: http.StatusOK
	GetByProjectCatalog func(ctx context.Context, resourceGroupName string, projectName string, catalogName string, imageDefinitionName string, options *armdevcenter.ProjectCatalogImageDefinitionsClientGetByProjectCatalogOptions) (resp azfake.Responder[armdevcenter.ProjectCatalogImageDefinitionsClientGetByProjectCatalogResponse], errResp azfake.ErrorResponder)

	// NewListByProjectCatalogPager is the fake for method ProjectCatalogImageDefinitionsClient.NewListByProjectCatalogPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByProjectCatalogPager func(resourceGroupName string, projectName string, catalogName string, options *armdevcenter.ProjectCatalogImageDefinitionsClientListByProjectCatalogOptions) (resp azfake.PagerResponder[armdevcenter.ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse])
}

// NewProjectCatalogImageDefinitionsServerTransport creates a new instance of ProjectCatalogImageDefinitionsServerTransport with the provided implementation.
// The returned ProjectCatalogImageDefinitionsServerTransport instance is connected to an instance of armdevcenter.ProjectCatalogImageDefinitionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProjectCatalogImageDefinitionsServerTransport(srv *ProjectCatalogImageDefinitionsServer) *ProjectCatalogImageDefinitionsServerTransport {
	return &ProjectCatalogImageDefinitionsServerTransport{
		srv:                          srv,
		newListByProjectCatalogPager: newTracker[azfake.PagerResponder[armdevcenter.ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse]](),
	}
}

// ProjectCatalogImageDefinitionsServerTransport connects instances of armdevcenter.ProjectCatalogImageDefinitionsClient to instances of ProjectCatalogImageDefinitionsServer.
// Don't use this type directly, use NewProjectCatalogImageDefinitionsServerTransport instead.
type ProjectCatalogImageDefinitionsServerTransport struct {
	srv                          *ProjectCatalogImageDefinitionsServer
	newListByProjectCatalogPager *tracker[azfake.PagerResponder[armdevcenter.ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse]]
}

// Do implements the policy.Transporter interface for ProjectCatalogImageDefinitionsServerTransport.
func (p *ProjectCatalogImageDefinitionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ProjectCatalogImageDefinitionsClient.GetByProjectCatalog":
		resp, err = p.dispatchGetByProjectCatalog(req)
	case "ProjectCatalogImageDefinitionsClient.NewListByProjectCatalogPager":
		resp, err = p.dispatchNewListByProjectCatalogPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *ProjectCatalogImageDefinitionsServerTransport) dispatchGetByProjectCatalog(req *http.Request) (*http.Response, error) {
	if p.srv.GetByProjectCatalog == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetByProjectCatalog not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/projects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions/(?P<imageDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
	if err != nil {
		return nil, err
	}
	catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
	if err != nil {
		return nil, err
	}
	imageDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.GetByProjectCatalog(req.Context(), resourceGroupNameParam, projectNameParam, catalogNameParam, imageDefinitionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ImageDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProjectCatalogImageDefinitionsServerTransport) dispatchNewListByProjectCatalogPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListByProjectCatalogPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByProjectCatalogPager not implemented")}
	}
	newListByProjectCatalogPager := p.newListByProjectCatalogPager.get(req)
	if newListByProjectCatalogPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DevCenter/projects/(?P<projectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/imageDefinitions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		projectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("projectName")])
		if err != nil {
			return nil, err
		}
		catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
		if err != nil {
			return nil, err
		}
		topUnescaped, err := url.QueryUnescape(qp.Get("$top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armdevcenter.ProjectCatalogImageDefinitionsClientListByProjectCatalogOptions
		if topParam != nil {
			options = &armdevcenter.ProjectCatalogImageDefinitionsClientListByProjectCatalogOptions{
				Top: topParam,
			}
		}
		resp := p.srv.NewListByProjectCatalogPager(resourceGroupNameParam, projectNameParam, catalogNameParam, options)
		newListByProjectCatalogPager = &resp
		p.newListByProjectCatalogPager.add(req, newListByProjectCatalogPager)
		server.PagerResponderInjectNextLinks(newListByProjectCatalogPager, req, func(page *armdevcenter.ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByProjectCatalogPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListByProjectCatalogPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByProjectCatalogPager) {
		p.newListByProjectCatalogPager.remove(req)
	}
	return resp, nil
}
