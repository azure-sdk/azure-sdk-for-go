// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotoperations/armiotoperations"
	"net/http"
	"net/url"
	"regexp"
)

// AkriConnectorTemplateServer is a fake server for instances of the armiotoperations.AkriConnectorTemplateClient type.
type AkriConnectorTemplateServer struct {
	// BeginCreateOrUpdate is the fake for method AkriConnectorTemplateClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, instanceName string, akriConnectorTemplateName string, resource armiotoperations.AkriConnectorTemplateResource, options *armiotoperations.AkriConnectorTemplateClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armiotoperations.AkriConnectorTemplateClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method AkriConnectorTemplateClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, instanceName string, akriConnectorTemplateName string, options *armiotoperations.AkriConnectorTemplateClientBeginDeleteOptions) (resp azfake.PollerResponder[armiotoperations.AkriConnectorTemplateClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AkriConnectorTemplateClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, instanceName string, akriConnectorTemplateName string, options *armiotoperations.AkriConnectorTemplateClientGetOptions) (resp azfake.Responder[armiotoperations.AkriConnectorTemplateClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByInstanceResourcePager is the fake for method AkriConnectorTemplateClient.NewListByInstanceResourcePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByInstanceResourcePager func(resourceGroupName string, instanceName string, options *armiotoperations.AkriConnectorTemplateClientListByInstanceResourceOptions) (resp azfake.PagerResponder[armiotoperations.AkriConnectorTemplateClientListByInstanceResourceResponse])
}

// NewAkriConnectorTemplateServerTransport creates a new instance of AkriConnectorTemplateServerTransport with the provided implementation.
// The returned AkriConnectorTemplateServerTransport instance is connected to an instance of armiotoperations.AkriConnectorTemplateClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAkriConnectorTemplateServerTransport(srv *AkriConnectorTemplateServer) *AkriConnectorTemplateServerTransport {
	return &AkriConnectorTemplateServerTransport{
		srv:                            srv,
		beginCreateOrUpdate:            newTracker[azfake.PollerResponder[armiotoperations.AkriConnectorTemplateClientCreateOrUpdateResponse]](),
		beginDelete:                    newTracker[azfake.PollerResponder[armiotoperations.AkriConnectorTemplateClientDeleteResponse]](),
		newListByInstanceResourcePager: newTracker[azfake.PagerResponder[armiotoperations.AkriConnectorTemplateClientListByInstanceResourceResponse]](),
	}
}

// AkriConnectorTemplateServerTransport connects instances of armiotoperations.AkriConnectorTemplateClient to instances of AkriConnectorTemplateServer.
// Don't use this type directly, use NewAkriConnectorTemplateServerTransport instead.
type AkriConnectorTemplateServerTransport struct {
	srv                            *AkriConnectorTemplateServer
	beginCreateOrUpdate            *tracker[azfake.PollerResponder[armiotoperations.AkriConnectorTemplateClientCreateOrUpdateResponse]]
	beginDelete                    *tracker[azfake.PollerResponder[armiotoperations.AkriConnectorTemplateClientDeleteResponse]]
	newListByInstanceResourcePager *tracker[azfake.PagerResponder[armiotoperations.AkriConnectorTemplateClientListByInstanceResourceResponse]]
}

// Do implements the policy.Transporter interface for AkriConnectorTemplateServerTransport.
func (a *AkriConnectorTemplateServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *AkriConnectorTemplateServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if akriConnectorTemplateServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = akriConnectorTemplateServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "AkriConnectorTemplateClient.BeginCreateOrUpdate":
				res.resp, res.err = a.dispatchBeginCreateOrUpdate(req)
			case "AkriConnectorTemplateClient.BeginDelete":
				res.resp, res.err = a.dispatchBeginDelete(req)
			case "AkriConnectorTemplateClient.Get":
				res.resp, res.err = a.dispatchGet(req)
			case "AkriConnectorTemplateClient.NewListByInstanceResourcePager":
				res.resp, res.err = a.dispatchNewListByInstanceResourcePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *AkriConnectorTemplateServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := a.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectorTemplates/(?P<akriConnectorTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armiotoperations.AkriConnectorTemplateResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		akriConnectorTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorTemplateName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, instanceNameParam, akriConnectorTemplateNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		a.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		a.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		a.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (a *AkriConnectorTemplateServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectorTemplates/(?P<akriConnectorTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		akriConnectorTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorTemplateName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceGroupNameParam, instanceNameParam, akriConnectorTemplateNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *AkriConnectorTemplateServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectorTemplates/(?P<akriConnectorTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
	if err != nil {
		return nil, err
	}
	akriConnectorTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("akriConnectorTemplateName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, instanceNameParam, akriConnectorTemplateNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AkriConnectorTemplateResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AkriConnectorTemplateServerTransport) dispatchNewListByInstanceResourcePager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByInstanceResourcePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByInstanceResourcePager not implemented")}
	}
	newListByInstanceResourcePager := a.newListByInstanceResourcePager.get(req)
	if newListByInstanceResourcePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.IoTOperations/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/akriConnectorTemplates`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByInstanceResourcePager(resourceGroupNameParam, instanceNameParam, nil)
		newListByInstanceResourcePager = &resp
		a.newListByInstanceResourcePager.add(req, newListByInstanceResourcePager)
		server.PagerResponderInjectNextLinks(newListByInstanceResourcePager, req, func(page *armiotoperations.AkriConnectorTemplateClientListByInstanceResourceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByInstanceResourcePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByInstanceResourcePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByInstanceResourcePager) {
		a.newListByInstanceResourcePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to AkriConnectorTemplateServerTransport
var akriConnectorTemplateServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
