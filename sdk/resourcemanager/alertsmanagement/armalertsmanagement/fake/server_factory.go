// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armalertsmanagement.ClientFactory type.
type ServerFactory struct {
	// AlertProcessingRulesServer contains the fakes for client AlertProcessingRulesClient
	AlertProcessingRulesServer AlertProcessingRulesServer

	// AlertRuleRecommendationsServer contains the fakes for client AlertRuleRecommendationsClient
	AlertRuleRecommendationsServer AlertRuleRecommendationsServer

	// AlertsServer contains the fakes for client AlertsClient
	AlertsServer AlertsServer

	// Server contains the fakes for client Client
	Server Server

	// IssueServer contains the fakes for client IssueClient
	IssueServer IssueServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// PrometheusRuleGroupsServer contains the fakes for client PrometheusRuleGroupsClient
	PrometheusRuleGroupsServer PrometheusRuleGroupsServer

	// SmartGroupsServer contains the fakes for client SmartGroupsClient
	SmartGroupsServer SmartGroupsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armalertsmanagement.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armalertsmanagement.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                              *ServerFactory
	trMu                             sync.Mutex
	trAlertProcessingRulesServer     *AlertProcessingRulesServerTransport
	trAlertRuleRecommendationsServer *AlertRuleRecommendationsServerTransport
	trAlertsServer                   *AlertsServerTransport
	trServer                         *ServerTransport
	trIssueServer                    *IssueServerTransport
	trOperationsServer               *OperationsServerTransport
	trPrometheusRuleGroupsServer     *PrometheusRuleGroupsServerTransport
	trSmartGroupsServer              *SmartGroupsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AlertProcessingRulesClient":
		initServer(s, &s.trAlertProcessingRulesServer, func() *AlertProcessingRulesServerTransport {
			return NewAlertProcessingRulesServerTransport(&s.srv.AlertProcessingRulesServer)
		})
		resp, err = s.trAlertProcessingRulesServer.Do(req)
	case "AlertRuleRecommendationsClient":
		initServer(s, &s.trAlertRuleRecommendationsServer, func() *AlertRuleRecommendationsServerTransport {
			return NewAlertRuleRecommendationsServerTransport(&s.srv.AlertRuleRecommendationsServer)
		})
		resp, err = s.trAlertRuleRecommendationsServer.Do(req)
	case "AlertsClient":
		initServer(s, &s.trAlertsServer, func() *AlertsServerTransport { return NewAlertsServerTransport(&s.srv.AlertsServer) })
		resp, err = s.trAlertsServer.Do(req)
	case "Client":
		initServer(s, &s.trServer, func() *ServerTransport { return NewServerTransport(&s.srv.Server) })
		resp, err = s.trServer.Do(req)
	case "IssueClient":
		initServer(s, &s.trIssueServer, func() *IssueServerTransport { return NewIssueServerTransport(&s.srv.IssueServer) })
		resp, err = s.trIssueServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrometheusRuleGroupsClient":
		initServer(s, &s.trPrometheusRuleGroupsServer, func() *PrometheusRuleGroupsServerTransport {
			return NewPrometheusRuleGroupsServerTransport(&s.srv.PrometheusRuleGroupsServer)
		})
		resp, err = s.trPrometheusRuleGroupsServer.Do(req)
	case "SmartGroupsClient":
		initServer(s, &s.trSmartGroupsServer, func() *SmartGroupsServerTransport { return NewSmartGroupsServerTransport(&s.srv.SmartGroupsServer) })
		resp, err = s.trSmartGroupsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
