//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicesbackup

import "time"

type AADProperties struct {
	Audience                 *string
	Authority                *string
	ServicePrincipalClientID *string
	ServicePrincipalObjectID *string
	TenantID                 *string
}

type AADPropertiesResource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// AADPropertiesResource properties
	Properties *AADProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

// AzureFileShareRecoveryPoint - Azure File Share workload specific backup copy.
type AzureFileShareRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Denotes whether the Recovery point can be restored to secondary region
	CrossRegionRestoreState *string

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// READ-ONLY; Contains Url to the snapshot of fileshare, if applicable
	FileShareSnapshotURI *string

	// READ-ONLY; Contains recovery point size
	RecoveryPointSizeInGB *int32

	// READ-ONLY; Time at which this backup copy was created.
	RecoveryPointTime *time.Time

	// READ-ONLY; Type of the backup copy. Specifies whether it is a crash consistent backup or app consistent.
	RecoveryPointType *string
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type AzureFileShareRecoveryPoint.
func (a *AzureFileShareRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: a.ObjectType,
	}
}

// AzureFileShareRestoreRequest - AzureFileShare Restore Request
type AzureFileShareRestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Options to resolve copy conflicts.
	CopyOptions *CopyOptions

	// Type of this recovery.
	RecoveryType *RecoveryType

	// List of Source Files/Folders(which need to recover) and TargetFolderPath details
	RestoreFileSpecs []*RestoreFileSpecs

	// Restore Type (FullShareRestore or ItemLevelRestore)
	RestoreRequestType *RestoreRequestType

	// Source storage account ARM Id
	SourceResourceID *string

	// Target File Share Details
	TargetDetails *TargetAFSRestoreInfo
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type AzureFileShareRestoreRequest.
func (a *AzureFileShareRestoreRequest) GetRestoreRequest() *RestoreRequest {
	return &RestoreRequest{
		ObjectType: a.ObjectType,
	}
}

// AzureFileshareProtectedItem - Azure File Share workload-specific backup item.
type AzureFileshareProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information with this backup item.
	ExtendedInfo *AzureFileshareProtectedItemExtendedInfo

	// Friendly name of the fileshare represented by this backup item.
	FriendlyName *string

	// backups running status for this backup item.
	HealthStatus *HealthStatus

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Health details of different KPIs
	KpisHealths map[string]*KPIResourceHealthDetails

	// Last backup operation status. Possible values: Healthy, Unhealthy.
	LastBackupStatus *string

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// Backup status of this backup item.
	ProtectionStatus *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureFileshareProtectedItem.
func (a *AzureFileshareProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureFileshareProtectedItemExtendedInfo - Additional information about Azure File Share backup item.
type AzureFileshareProtectedItemExtendedInfo struct {
	// The oldest backup copy available for this item in the service.
	OldestRecoveryPoint *time.Time

	// Indicates consistency of policy object and policy applied to this backup item.
	PolicyState *string

	// Number of available backup copies associated with this backup item.
	RecoveryPointCount *int32

	// READ-ONLY; Indicates the state of this resource. Possible values are from enum ResourceState {Invalid, Active, SoftDeleted,
	// Deleted}
	ResourceState *string

	// READ-ONLY; The resource state sync time for this backup item.
	ResourceStateSyncTime *time.Time
}

// AzureIaaSClassicComputeVMProtectedItem - IaaS VM workload-specific backup item representing the Classic Compute VM.
type AzureIaaSClassicComputeVMProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information for this backup item.
	ExtendedInfo *AzureIaaSVMProtectedItemExtendedInfo

	// Extended Properties for Azure IaasVM Backup.
	ExtendedProperties *ExtendedProperties

	// Friendly name of the VM represented by this backup item.
	FriendlyName *string

	// Health details on this backup item.
	HealthDetails []*AzureIaaSVMHealthDetails

	// Health status of protected item.
	HealthStatus *HealthStatus

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Health details of different KPIs
	KpisHealths map[string]*KPIResourceHealthDetails

	// Last backup operation status.
	LastBackupStatus *string

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Data ID of the protected item.
	ProtectedItemDataID *string

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// Backup status of this backup item.
	ProtectionStatus *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Fully qualified ARM ID of the virtual machine represented by this item.
	VirtualMachineID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetAzureIaaSVMProtectedItem implements the AzureIaaSVMProtectedItemClassification interface for type AzureIaaSClassicComputeVMProtectedItem.
func (a *AzureIaaSClassicComputeVMProtectedItem) GetAzureIaaSVMProtectedItem() *AzureIaaSVMProtectedItem {
	return &AzureIaaSVMProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		ExtendedInfo:                     a.ExtendedInfo,
		ExtendedProperties:               a.ExtendedProperties,
		FriendlyName:                     a.FriendlyName,
		HealthDetails:                    a.HealthDetails,
		HealthStatus:                     a.HealthStatus,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		KpisHealths:                      a.KpisHealths,
		LastBackupStatus:                 a.LastBackupStatus,
		LastBackupTime:                   a.LastBackupTime,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemDataID:              a.ProtectedItemDataID,
		ProtectedItemType:                a.ProtectedItemType,
		ProtectionState:                  a.ProtectionState,
		ProtectionStatus:                 a.ProtectionStatus,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		VirtualMachineID:                 a.VirtualMachineID,
		WorkloadType:                     a.WorkloadType,
	}
}

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureIaaSClassicComputeVMProtectedItem.
func (a *AzureIaaSClassicComputeVMProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureIaaSComputeVMProtectedItem - IaaS VM workload-specific backup item representing the Azure Resource Manager VM.
type AzureIaaSComputeVMProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information for this backup item.
	ExtendedInfo *AzureIaaSVMProtectedItemExtendedInfo

	// Extended Properties for Azure IaasVM Backup.
	ExtendedProperties *ExtendedProperties

	// Friendly name of the VM represented by this backup item.
	FriendlyName *string

	// Health details on this backup item.
	HealthDetails []*AzureIaaSVMHealthDetails

	// Health status of protected item.
	HealthStatus *HealthStatus

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Health details of different KPIs
	KpisHealths map[string]*KPIResourceHealthDetails

	// Last backup operation status.
	LastBackupStatus *string

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Data ID of the protected item.
	ProtectedItemDataID *string

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// Backup status of this backup item.
	ProtectionStatus *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Fully qualified ARM ID of the virtual machine represented by this item.
	VirtualMachineID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetAzureIaaSVMProtectedItem implements the AzureIaaSVMProtectedItemClassification interface for type AzureIaaSComputeVMProtectedItem.
func (a *AzureIaaSComputeVMProtectedItem) GetAzureIaaSVMProtectedItem() *AzureIaaSVMProtectedItem {
	return &AzureIaaSVMProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		ExtendedInfo:                     a.ExtendedInfo,
		ExtendedProperties:               a.ExtendedProperties,
		FriendlyName:                     a.FriendlyName,
		HealthDetails:                    a.HealthDetails,
		HealthStatus:                     a.HealthStatus,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		KpisHealths:                      a.KpisHealths,
		LastBackupStatus:                 a.LastBackupStatus,
		LastBackupTime:                   a.LastBackupTime,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemDataID:              a.ProtectedItemDataID,
		ProtectedItemType:                a.ProtectedItemType,
		ProtectionState:                  a.ProtectionState,
		ProtectionStatus:                 a.ProtectionStatus,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		VirtualMachineID:                 a.VirtualMachineID,
		WorkloadType:                     a.WorkloadType,
	}
}

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureIaaSComputeVMProtectedItem.
func (a *AzureIaaSComputeVMProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureIaaSVMErrorInfo - Azure IaaS VM workload-specific error information.
type AzureIaaSVMErrorInfo struct {
	// READ-ONLY; Error code.
	ErrorCode *int32

	// READ-ONLY; Localized error string.
	ErrorString *string

	// READ-ONLY; Title: Typically, the entity that the error pertains to.
	ErrorTitle *string

	// READ-ONLY; List of localized recommendations for above error code.
	Recommendations []*string
}

// AzureIaaSVMHealthDetails - Azure IaaS VM workload-specific Health Details.
type AzureIaaSVMHealthDetails struct {
	// READ-ONLY; Health Code
	Code *int32

	// READ-ONLY; Health Message
	Message *string

	// READ-ONLY; Health Recommended Actions
	Recommendations []*string

	// READ-ONLY; Health Title
	Title *string
}

// AzureIaaSVMJob - Azure IaaS VM workload-specific job object.
type AzureIaaSVMJob struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	JobType *string

	// Gets or sets the state/actions applicable on this job like cancel/retry.
	ActionsInfo []*JobSupportedAction

	// ActivityId of job.
	ActivityID *string

	// Backup management type to execute the current job.
	BackupManagementType *BackupManagementType

	// Time elapsed during the execution of this job.
	Duration *string

	// The end time.
	EndTime *time.Time

	// Friendly name of the entity on which the current job is executing.
	EntityFriendlyName *string

	// Error details on execution of this job.
	ErrorDetails []*AzureIaaSVMErrorInfo

	// Additional information for this job.
	ExtendedInfo *AzureIaaSVMJobExtendedInfo

	// The operation name.
	Operation *string

	// The start time.
	StartTime *time.Time

	// Job status.
	Status *string

	// Specifies whether the backup item is a Classic or an Azure Resource Manager VM.
	VirtualMachineVersion *string
}

// GetJob implements the JobClassification interface for type AzureIaaSVMJob.
func (a *AzureIaaSVMJob) GetJob() *Job {
	return &Job{
		ActivityID:           a.ActivityID,
		BackupManagementType: a.BackupManagementType,
		EndTime:              a.EndTime,
		EntityFriendlyName:   a.EntityFriendlyName,
		JobType:              a.JobType,
		Operation:            a.Operation,
		StartTime:            a.StartTime,
		Status:               a.Status,
	}
}

// AzureIaaSVMJobExtendedInfo - Azure IaaS VM workload-specific additional information for job.
type AzureIaaSVMJobExtendedInfo struct {
	// Non localized error message on job execution.
	DynamicErrorMessage *string

	// Time remaining for execution of this job.
	EstimatedRemainingDuration *string

	// Job internal properties.
	InternalPropertyBag map[string]*string

	// Indicates progress of the job. Null if it has not started or completed.
	ProgressPercentage *float64

	// Job properties.
	PropertyBag map[string]*string

	// List of tasks associated with this job.
	TasksList []*AzureIaaSVMJobTaskDetails
}

// AzureIaaSVMJobTaskDetails - Azure IaaS VM workload-specific job task details.
type AzureIaaSVMJobTaskDetails struct {
	// Time elapsed for task.
	Duration *string

	// The end time.
	EndTime *time.Time

	// The instanceId.
	InstanceID *string

	// Progress of the task.
	ProgressPercentage *float64

	// The start time.
	StartTime *time.Time

	// The status.
	Status *string

	// Details about execution of the task. eg: number of bytes transferred etc
	TaskExecutionDetails *string

	// The task display name.
	TaskID *string
}

// AzureIaaSVMProtectedItem - IaaS VM workload-specific backup item.
type AzureIaaSVMProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information for this backup item.
	ExtendedInfo *AzureIaaSVMProtectedItemExtendedInfo

	// Extended Properties for Azure IaasVM Backup.
	ExtendedProperties *ExtendedProperties

	// Friendly name of the VM represented by this backup item.
	FriendlyName *string

	// Health details on this backup item.
	HealthDetails []*AzureIaaSVMHealthDetails

	// Health status of protected item.
	HealthStatus *HealthStatus

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Health details of different KPIs
	KpisHealths map[string]*KPIResourceHealthDetails

	// Last backup operation status.
	LastBackupStatus *string

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Data ID of the protected item.
	ProtectedItemDataID *string

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// Backup status of this backup item.
	ProtectionStatus *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Fully qualified ARM ID of the virtual machine represented by this item.
	VirtualMachineID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetAzureIaaSVMProtectedItem implements the AzureIaaSVMProtectedItemClassification interface for type AzureIaaSVMProtectedItem.
func (a *AzureIaaSVMProtectedItem) GetAzureIaaSVMProtectedItem() *AzureIaaSVMProtectedItem { return a }

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureIaaSVMProtectedItem.
func (a *AzureIaaSVMProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureIaaSVMProtectedItemExtendedInfo - Additional information on Azure IaaS VM specific backup item.
type AzureIaaSVMProtectedItemExtendedInfo struct {
	// The oldest backup copy available for this backup item.
	OldestRecoveryPoint *time.Time

	// Specifies if backup policy associated with the backup item is inconsistent.
	PolicyInconsistent *bool

	// Number of backup copies available for this backup item.
	RecoveryPointCount *int32
}

// AzureSQLProtectedItem - Azure SQL workload-specific backup item.
type AzureSQLProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information for this backup item.
	ExtendedInfo *AzureSQLProtectedItemExtendedInfo

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services.
	ProtectedItemDataID *string

	// Backup state of the backed up item.
	ProtectionState *ProtectedItemState

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureSQLProtectedItem.
func (a *AzureSQLProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureSQLProtectedItemExtendedInfo - Additional information on Azure Sql specific protected item.
type AzureSQLProtectedItemExtendedInfo struct {
	// The oldest backup copy available for this item in the service.
	OldestRecoveryPoint *time.Time

	// State of the backup policy associated with this backup item.
	PolicyState *string

	// Number of available backup copies associated with this backup item.
	RecoveryPointCount *int32
}

// AzureStorageErrorInfo - Azure storage specific error information
type AzureStorageErrorInfo struct {
	// Error code.
	ErrorCode *int32

	// Localized error string.
	ErrorString *string

	// List of localized recommendations for above error code.
	Recommendations []*string
}

// AzureStorageJob - Azure storage specific job.
type AzureStorageJob struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	JobType *string

	// Gets or sets the state/actions applicable on this job like cancel/retry.
	ActionsInfo []*JobSupportedAction

	// ActivityId of job.
	ActivityID *string

	// Backup management type to execute the current job.
	BackupManagementType *BackupManagementType

	// Time elapsed during the execution of this job.
	Duration *string

	// The end time.
	EndTime *time.Time

	// Friendly name of the entity on which the current job is executing.
	EntityFriendlyName *string

	// Error details on execution of this job.
	ErrorDetails []*AzureStorageErrorInfo

	// Additional information about the job.
	ExtendedInfo *AzureStorageJobExtendedInfo

	// The operation name.
	Operation *string

	// The start time.
	StartTime *time.Time

	// Job status.
	Status *string

	// Specifies friendly name of the storage account.
	StorageAccountName *string

	// Specifies whether the Storage account is a Classic or an Azure Resource Manager Storage account.
	StorageAccountVersion *string
}

// GetJob implements the JobClassification interface for type AzureStorageJob.
func (a *AzureStorageJob) GetJob() *Job {
	return &Job{
		ActivityID:           a.ActivityID,
		BackupManagementType: a.BackupManagementType,
		EndTime:              a.EndTime,
		EntityFriendlyName:   a.EntityFriendlyName,
		JobType:              a.JobType,
		Operation:            a.Operation,
		StartTime:            a.StartTime,
		Status:               a.Status,
	}
}

// AzureStorageJobExtendedInfo - Azure Storage workload-specific additional information for job.
type AzureStorageJobExtendedInfo struct {
	// Non localized error message on job execution.
	DynamicErrorMessage *string

	// Job properties.
	PropertyBag map[string]*string

	// List of tasks for this job
	TasksList []*AzureStorageJobTaskDetails
}

// AzureStorageJobTaskDetails - Azure storage workload specific job task details.
type AzureStorageJobTaskDetails struct {
	// The status.
	Status *string

	// The task display name.
	TaskID *string
}

// AzureVMWorkloadProtectedItem - Azure VM workload-specific protected item.
type AzureVMWorkloadProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information for this backup item.
	ExtendedInfo *AzureVMWorkloadProtectedItemExtendedInfo

	// Friendly name of the DB represented by this backup item.
	FriendlyName *string

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Health details of different KPIs
	KpisHealths map[string]*KPIResourceHealthDetails

	// Error details in last backup
	LastBackupErrorDetail *ErrorDetail

	// Last backup operation status. Possible values: Healthy, Unhealthy.
	LastBackupStatus *LastBackupStatus

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// Parent name of the DB such as Instance or Availability Group.
	ParentName *string

	// Parent type of protected item, example: for a DB, standalone server or distributed
	ParentType *string

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Data ID of the protected item.
	ProtectedItemDataSourceID *string

	// Health status of the backup item, evaluated based on last heartbeat received
	ProtectedItemHealthStatus *ProtectedItemHealthStatus

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// Backup status of this backup item.
	ProtectionStatus *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// Host/Cluster Name for instance or AG
	ServerName *string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetAzureVMWorkloadProtectedItem implements the AzureVMWorkloadProtectedItemClassification interface for type AzureVMWorkloadProtectedItem.
func (a *AzureVMWorkloadProtectedItem) GetAzureVMWorkloadProtectedItem() *AzureVMWorkloadProtectedItem {
	return a
}

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureVMWorkloadProtectedItem.
func (a *AzureVMWorkloadProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureVMWorkloadProtectedItemExtendedInfo - Additional information on Azure Workload for SQL specific backup item.
type AzureVMWorkloadProtectedItemExtendedInfo struct {
	// The oldest backup copy available for this backup item.
	OldestRecoveryPoint *time.Time

	// Indicates consistency of policy object and policy applied to this backup item.
	PolicyState *string

	// Number of backup copies available for this backup item.
	RecoveryPointCount *int32
}

// AzureVMWorkloadSAPAseDatabaseProtectedItem - Azure VM workload-specific protected item representing SAP ASE Database.
type AzureVMWorkloadSAPAseDatabaseProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information for this backup item.
	ExtendedInfo *AzureVMWorkloadProtectedItemExtendedInfo

	// Friendly name of the DB represented by this backup item.
	FriendlyName *string

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Health details of different KPIs
	KpisHealths map[string]*KPIResourceHealthDetails

	// Error details in last backup
	LastBackupErrorDetail *ErrorDetail

	// Last backup operation status. Possible values: Healthy, Unhealthy.
	LastBackupStatus *LastBackupStatus

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// Parent name of the DB such as Instance or Availability Group.
	ParentName *string

	// Parent type of protected item, example: for a DB, standalone server or distributed
	ParentType *string

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Data ID of the protected item.
	ProtectedItemDataSourceID *string

	// Health status of the backup item, evaluated based on last heartbeat received
	ProtectedItemHealthStatus *ProtectedItemHealthStatus

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// Backup status of this backup item.
	ProtectionStatus *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// Host/Cluster Name for instance or AG
	ServerName *string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetAzureVMWorkloadProtectedItem implements the AzureVMWorkloadProtectedItemClassification interface for type AzureVMWorkloadSAPAseDatabaseProtectedItem.
func (a *AzureVMWorkloadSAPAseDatabaseProtectedItem) GetAzureVMWorkloadProtectedItem() *AzureVMWorkloadProtectedItem {
	return &AzureVMWorkloadProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		ExtendedInfo:                     a.ExtendedInfo,
		FriendlyName:                     a.FriendlyName,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		KpisHealths:                      a.KpisHealths,
		LastBackupErrorDetail:            a.LastBackupErrorDetail,
		LastBackupStatus:                 a.LastBackupStatus,
		LastBackupTime:                   a.LastBackupTime,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		ParentName:                       a.ParentName,
		ParentType:                       a.ParentType,
		PolicyID:                         a.PolicyID,
		ProtectedItemDataSourceID:        a.ProtectedItemDataSourceID,
		ProtectedItemHealthStatus:        a.ProtectedItemHealthStatus,
		ProtectedItemType:                a.ProtectedItemType,
		ProtectionState:                  a.ProtectionState,
		ProtectionStatus:                 a.ProtectionStatus,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		ServerName:                       a.ServerName,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureVMWorkloadSAPAseDatabaseProtectedItem.
func (a *AzureVMWorkloadSAPAseDatabaseProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureVMWorkloadSAPHanaDatabaseProtectedItem - Azure VM workload-specific protected item representing SAP HANA Database.
type AzureVMWorkloadSAPHanaDatabaseProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information for this backup item.
	ExtendedInfo *AzureVMWorkloadProtectedItemExtendedInfo

	// Friendly name of the DB represented by this backup item.
	FriendlyName *string

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Health details of different KPIs
	KpisHealths map[string]*KPIResourceHealthDetails

	// Error details in last backup
	LastBackupErrorDetail *ErrorDetail

	// Last backup operation status. Possible values: Healthy, Unhealthy.
	LastBackupStatus *LastBackupStatus

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// Parent name of the DB such as Instance or Availability Group.
	ParentName *string

	// Parent type of protected item, example: for a DB, standalone server or distributed
	ParentType *string

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Data ID of the protected item.
	ProtectedItemDataSourceID *string

	// Health status of the backup item, evaluated based on last heartbeat received
	ProtectedItemHealthStatus *ProtectedItemHealthStatus

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// Backup status of this backup item.
	ProtectionStatus *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// Host/Cluster Name for instance or AG
	ServerName *string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetAzureVMWorkloadProtectedItem implements the AzureVMWorkloadProtectedItemClassification interface for type AzureVMWorkloadSAPHanaDatabaseProtectedItem.
func (a *AzureVMWorkloadSAPHanaDatabaseProtectedItem) GetAzureVMWorkloadProtectedItem() *AzureVMWorkloadProtectedItem {
	return &AzureVMWorkloadProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		ExtendedInfo:                     a.ExtendedInfo,
		FriendlyName:                     a.FriendlyName,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		KpisHealths:                      a.KpisHealths,
		LastBackupErrorDetail:            a.LastBackupErrorDetail,
		LastBackupStatus:                 a.LastBackupStatus,
		LastBackupTime:                   a.LastBackupTime,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		ParentName:                       a.ParentName,
		ParentType:                       a.ParentType,
		PolicyID:                         a.PolicyID,
		ProtectedItemDataSourceID:        a.ProtectedItemDataSourceID,
		ProtectedItemHealthStatus:        a.ProtectedItemHealthStatus,
		ProtectedItemType:                a.ProtectedItemType,
		ProtectionState:                  a.ProtectionState,
		ProtectionStatus:                 a.ProtectionStatus,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		ServerName:                       a.ServerName,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureVMWorkloadSAPHanaDatabaseProtectedItem.
func (a *AzureVMWorkloadSAPHanaDatabaseProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureVMWorkloadSQLDatabaseProtectedItem - Azure VM workload-specific protected item representing SQL Database.
type AzureVMWorkloadSQLDatabaseProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information for this backup item.
	ExtendedInfo *AzureVMWorkloadProtectedItemExtendedInfo

	// Friendly name of the DB represented by this backup item.
	FriendlyName *string

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Health details of different KPIs
	KpisHealths map[string]*KPIResourceHealthDetails

	// Error details in last backup
	LastBackupErrorDetail *ErrorDetail

	// Last backup operation status. Possible values: Healthy, Unhealthy.
	LastBackupStatus *LastBackupStatus

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// Parent name of the DB such as Instance or Availability Group.
	ParentName *string

	// Parent type of protected item, example: for a DB, standalone server or distributed
	ParentType *string

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Data ID of the protected item.
	ProtectedItemDataSourceID *string

	// Health status of the backup item, evaluated based on last heartbeat received
	ProtectedItemHealthStatus *ProtectedItemHealthStatus

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// Backup status of this backup item.
	ProtectionStatus *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// Host/Cluster Name for instance or AG
	ServerName *string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetAzureVMWorkloadProtectedItem implements the AzureVMWorkloadProtectedItemClassification interface for type AzureVMWorkloadSQLDatabaseProtectedItem.
func (a *AzureVMWorkloadSQLDatabaseProtectedItem) GetAzureVMWorkloadProtectedItem() *AzureVMWorkloadProtectedItem {
	return &AzureVMWorkloadProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		ExtendedInfo:                     a.ExtendedInfo,
		FriendlyName:                     a.FriendlyName,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		KpisHealths:                      a.KpisHealths,
		LastBackupErrorDetail:            a.LastBackupErrorDetail,
		LastBackupStatus:                 a.LastBackupStatus,
		LastBackupTime:                   a.LastBackupTime,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		ParentName:                       a.ParentName,
		ParentType:                       a.ParentType,
		PolicyID:                         a.PolicyID,
		ProtectedItemDataSourceID:        a.ProtectedItemDataSourceID,
		ProtectedItemHealthStatus:        a.ProtectedItemHealthStatus,
		ProtectedItemType:                a.ProtectedItemType,
		ProtectionState:                  a.ProtectionState,
		ProtectionStatus:                 a.ProtectionStatus,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		ServerName:                       a.ServerName,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// GetProtectedItem implements the ProtectedItemClassification interface for type AzureVMWorkloadSQLDatabaseProtectedItem.
func (a *AzureVMWorkloadSQLDatabaseProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             a.BackupManagementType,
		BackupSetName:                    a.BackupSetName,
		ContainerName:                    a.ContainerName,
		CreateMode:                       a.CreateMode,
		DeferredDeleteTimeInUTC:          a.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      a.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: a.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      a.IsRehydrate,
		IsScheduledForDeferredDelete:     a.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                a.LastRecoveryPoint,
		PolicyID:                         a.PolicyID,
		ProtectedItemType:                a.ProtectedItemType,
		ResourceGuardOperationRequests:   a.ResourceGuardOperationRequests,
		SourceResourceID:                 a.SourceResourceID,
		WorkloadType:                     a.WorkloadType,
	}
}

// AzureWorkloadErrorInfo - Azure storage specific error information
type AzureWorkloadErrorInfo struct {
	// Additional details for above error code.
	AdditionalDetails *string

	// Error code.
	ErrorCode *int32

	// Localized error string.
	ErrorString *string

	// Title: Typically, the entity that the error pertains to.
	ErrorTitle *string

	// List of localized recommendations for above error code.
	Recommendations []*string
}

// AzureWorkloadJob - Azure storage specific job.
type AzureWorkloadJob struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	JobType *string

	// Gets or sets the state/actions applicable on this job like cancel/retry.
	ActionsInfo []*JobSupportedAction

	// ActivityId of job.
	ActivityID *string

	// Backup management type to execute the current job.
	BackupManagementType *BackupManagementType

	// Time elapsed during the execution of this job.
	Duration *string

	// The end time.
	EndTime *time.Time

	// Friendly name of the entity on which the current job is executing.
	EntityFriendlyName *string

	// Error details on execution of this job.
	ErrorDetails []*AzureWorkloadErrorInfo

	// Additional information about the job.
	ExtendedInfo *AzureWorkloadJobExtendedInfo

	// The operation name.
	Operation *string

	// The start time.
	StartTime *time.Time

	// Job status.
	Status *string

	// Workload type of the job
	WorkloadType *string
}

// GetJob implements the JobClassification interface for type AzureWorkloadJob.
func (a *AzureWorkloadJob) GetJob() *Job {
	return &Job{
		ActivityID:           a.ActivityID,
		BackupManagementType: a.BackupManagementType,
		EndTime:              a.EndTime,
		EntityFriendlyName:   a.EntityFriendlyName,
		JobType:              a.JobType,
		Operation:            a.Operation,
		StartTime:            a.StartTime,
		Status:               a.Status,
	}
}

// AzureWorkloadJobExtendedInfo - Azure VM workload-specific additional information for job.
type AzureWorkloadJobExtendedInfo struct {
	// Non localized error message on job execution.
	DynamicErrorMessage *string

	// Job properties.
	PropertyBag map[string]*string

	// List of tasks for this job
	TasksList []*AzureWorkloadJobTaskDetails
}

// AzureWorkloadJobTaskDetails - Azure VM workload specific job task details.
type AzureWorkloadJobTaskDetails struct {
	// The status.
	Status *string

	// The task display name.
	TaskID *string
}

// AzureWorkloadPointInTimeRecoveryPoint - Recovery point specific to PointInTime
type AzureWorkloadPointInTimeRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Eligibility of RP to be moved to another tier
	RecoveryPointMoveReadinessInfo map[string]*RecoveryPointMoveReadinessInfo

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// Recovery point tier information.
	RecoveryPointTierDetails []*RecoveryPointTierInformation

	// List of log ranges
	TimeRanges []*PointInTimeRange

	// READ-ONLY; UTC time at which recovery point was created
	RecoveryPointTimeInUTC *time.Time

	// READ-ONLY; Type of restore point
	Type *RestorePointType
}

// GetAzureWorkloadPointInTimeRecoveryPoint implements the AzureWorkloadPointInTimeRecoveryPointClassification interface for
// type AzureWorkloadPointInTimeRecoveryPoint.
func (a *AzureWorkloadPointInTimeRecoveryPoint) GetAzureWorkloadPointInTimeRecoveryPoint() *AzureWorkloadPointInTimeRecoveryPoint {
	return a
}

// GetAzureWorkloadRecoveryPoint implements the AzureWorkloadRecoveryPointClassification interface for type AzureWorkloadPointInTimeRecoveryPoint.
func (a *AzureWorkloadPointInTimeRecoveryPoint) GetAzureWorkloadRecoveryPoint() *AzureWorkloadRecoveryPoint {
	return &AzureWorkloadRecoveryPoint{
		ObjectType:                     a.ObjectType,
		RecoveryPointMoveReadinessInfo: a.RecoveryPointMoveReadinessInfo,
		RecoveryPointProperties:        a.RecoveryPointProperties,
		RecoveryPointTierDetails:       a.RecoveryPointTierDetails,
		RecoveryPointTimeInUTC:         a.RecoveryPointTimeInUTC,
		Type:                           a.Type,
	}
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type AzureWorkloadPointInTimeRecoveryPoint.
func (a *AzureWorkloadPointInTimeRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadPointInTimeRestoreRequest - AzureWorkload SAP Hana -specific restore. Specifically for PointInTime/Log restore
type AzureWorkloadPointInTimeRestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// PointInTime value
	PointInTime *time.Time

	// Workload specific property bag.
	PropertyBag map[string]*string

	// Defines whether the current recovery mode is file restore or database restore
	RecoveryMode *RecoveryMode

	// Type of this recovery.
	RecoveryType *RecoveryType

	// Fully qualified ARM ID of the VM on which workload that was running is being recovered.
	SourceResourceID *string

	// Details of target database
	TargetInfo *TargetRestoreInfo

	// This is the complete ARM Id of the target VM For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
	TargetVirtualMachineID *string
}

// GetAzureWorkloadRestoreRequest implements the AzureWorkloadRestoreRequestClassification interface for type AzureWorkloadPointInTimeRestoreRequest.
func (a *AzureWorkloadPointInTimeRestoreRequest) GetAzureWorkloadRestoreRequest() *AzureWorkloadRestoreRequest {
	return &AzureWorkloadRestoreRequest{
		ObjectType:             a.ObjectType,
		PropertyBag:            a.PropertyBag,
		RecoveryMode:           a.RecoveryMode,
		RecoveryType:           a.RecoveryType,
		SourceResourceID:       a.SourceResourceID,
		TargetInfo:             a.TargetInfo,
		TargetVirtualMachineID: a.TargetVirtualMachineID,
	}
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type AzureWorkloadPointInTimeRestoreRequest.
func (a *AzureWorkloadPointInTimeRestoreRequest) GetRestoreRequest() *RestoreRequest {
	return &RestoreRequest{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadRecoveryPoint - Workload specific recovery point, specifically encapsulates full/diff recovery point
type AzureWorkloadRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Eligibility of RP to be moved to another tier
	RecoveryPointMoveReadinessInfo map[string]*RecoveryPointMoveReadinessInfo

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// Recovery point tier information.
	RecoveryPointTierDetails []*RecoveryPointTierInformation

	// READ-ONLY; UTC time at which recovery point was created
	RecoveryPointTimeInUTC *time.Time

	// READ-ONLY; Type of restore point
	Type *RestorePointType
}

// GetAzureWorkloadRecoveryPoint implements the AzureWorkloadRecoveryPointClassification interface for type AzureWorkloadRecoveryPoint.
func (a *AzureWorkloadRecoveryPoint) GetAzureWorkloadRecoveryPoint() *AzureWorkloadRecoveryPoint {
	return a
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type AzureWorkloadRecoveryPoint.
func (a *AzureWorkloadRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadRestoreRequest - AzureWorkload-specific restore.
type AzureWorkloadRestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Workload specific property bag.
	PropertyBag map[string]*string

	// Defines whether the current recovery mode is file restore or database restore
	RecoveryMode *RecoveryMode

	// Type of this recovery.
	RecoveryType *RecoveryType

	// Fully qualified ARM ID of the VM on which workload that was running is being recovered.
	SourceResourceID *string

	// Details of target database
	TargetInfo *TargetRestoreInfo

	// This is the complete ARM Id of the target VM For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
	TargetVirtualMachineID *string
}

// GetAzureWorkloadRestoreRequest implements the AzureWorkloadRestoreRequestClassification interface for type AzureWorkloadRestoreRequest.
func (a *AzureWorkloadRestoreRequest) GetAzureWorkloadRestoreRequest() *AzureWorkloadRestoreRequest {
	return a
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type AzureWorkloadRestoreRequest.
func (a *AzureWorkloadRestoreRequest) GetRestoreRequest() *RestoreRequest {
	return &RestoreRequest{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadSAPHanaPointInTimeRecoveryPoint - Recovery point specific to PointInTime in SAPHana
type AzureWorkloadSAPHanaPointInTimeRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Eligibility of RP to be moved to another tier
	RecoveryPointMoveReadinessInfo map[string]*RecoveryPointMoveReadinessInfo

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// Recovery point tier information.
	RecoveryPointTierDetails []*RecoveryPointTierInformation

	// List of log ranges
	TimeRanges []*PointInTimeRange

	// READ-ONLY; UTC time at which recovery point was created
	RecoveryPointTimeInUTC *time.Time

	// READ-ONLY; Type of restore point
	Type *RestorePointType
}

// GetAzureWorkloadPointInTimeRecoveryPoint implements the AzureWorkloadPointInTimeRecoveryPointClassification interface for
// type AzureWorkloadSAPHanaPointInTimeRecoveryPoint.
func (a *AzureWorkloadSAPHanaPointInTimeRecoveryPoint) GetAzureWorkloadPointInTimeRecoveryPoint() *AzureWorkloadPointInTimeRecoveryPoint {
	return &AzureWorkloadPointInTimeRecoveryPoint{
		ObjectType:                     a.ObjectType,
		RecoveryPointMoveReadinessInfo: a.RecoveryPointMoveReadinessInfo,
		RecoveryPointProperties:        a.RecoveryPointProperties,
		RecoveryPointTierDetails:       a.RecoveryPointTierDetails,
		RecoveryPointTimeInUTC:         a.RecoveryPointTimeInUTC,
		TimeRanges:                     a.TimeRanges,
		Type:                           a.Type,
	}
}

// GetAzureWorkloadRecoveryPoint implements the AzureWorkloadRecoveryPointClassification interface for type AzureWorkloadSAPHanaPointInTimeRecoveryPoint.
func (a *AzureWorkloadSAPHanaPointInTimeRecoveryPoint) GetAzureWorkloadRecoveryPoint() *AzureWorkloadRecoveryPoint {
	return &AzureWorkloadRecoveryPoint{
		ObjectType:                     a.ObjectType,
		RecoveryPointMoveReadinessInfo: a.RecoveryPointMoveReadinessInfo,
		RecoveryPointProperties:        a.RecoveryPointProperties,
		RecoveryPointTierDetails:       a.RecoveryPointTierDetails,
		RecoveryPointTimeInUTC:         a.RecoveryPointTimeInUTC,
		Type:                           a.Type,
	}
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type AzureWorkloadSAPHanaPointInTimeRecoveryPoint.
func (a *AzureWorkloadSAPHanaPointInTimeRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadSAPHanaPointInTimeRestoreRequest - AzureWorkload SAP Hana -specific restore. Specifically for PointInTime/Log
// restore
type AzureWorkloadSAPHanaPointInTimeRestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// PointInTime value
	PointInTime *time.Time

	// Workload specific property bag.
	PropertyBag map[string]*string

	// Defines whether the current recovery mode is file restore or database restore
	RecoveryMode *RecoveryMode

	// Type of this recovery.
	RecoveryType *RecoveryType

	// Fully qualified ARM ID of the VM on which workload that was running is being recovered.
	SourceResourceID *string

	// Details of target database
	TargetInfo *TargetRestoreInfo

	// This is the complete ARM Id of the target VM For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
	TargetVirtualMachineID *string
}

// GetAzureWorkloadRestoreRequest implements the AzureWorkloadRestoreRequestClassification interface for type AzureWorkloadSAPHanaPointInTimeRestoreRequest.
func (a *AzureWorkloadSAPHanaPointInTimeRestoreRequest) GetAzureWorkloadRestoreRequest() *AzureWorkloadRestoreRequest {
	return &AzureWorkloadRestoreRequest{
		ObjectType:             a.ObjectType,
		PropertyBag:            a.PropertyBag,
		RecoveryMode:           a.RecoveryMode,
		RecoveryType:           a.RecoveryType,
		SourceResourceID:       a.SourceResourceID,
		TargetInfo:             a.TargetInfo,
		TargetVirtualMachineID: a.TargetVirtualMachineID,
	}
}

// GetAzureWorkloadSAPHanaRestoreRequest implements the AzureWorkloadSAPHanaRestoreRequestClassification interface for type
// AzureWorkloadSAPHanaPointInTimeRestoreRequest.
func (a *AzureWorkloadSAPHanaPointInTimeRestoreRequest) GetAzureWorkloadSAPHanaRestoreRequest() *AzureWorkloadSAPHanaRestoreRequest {
	return &AzureWorkloadSAPHanaRestoreRequest{
		ObjectType:             a.ObjectType,
		PropertyBag:            a.PropertyBag,
		RecoveryMode:           a.RecoveryMode,
		RecoveryType:           a.RecoveryType,
		SourceResourceID:       a.SourceResourceID,
		TargetInfo:             a.TargetInfo,
		TargetVirtualMachineID: a.TargetVirtualMachineID,
	}
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type AzureWorkloadSAPHanaPointInTimeRestoreRequest.
func (a *AzureWorkloadSAPHanaPointInTimeRestoreRequest) GetRestoreRequest() *RestoreRequest {
	return &RestoreRequest{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadSAPHanaRecoveryPoint - SAPHana specific recoverypoint, specifically encapsulates full/diff recoverypoints
type AzureWorkloadSAPHanaRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Eligibility of RP to be moved to another tier
	RecoveryPointMoveReadinessInfo map[string]*RecoveryPointMoveReadinessInfo

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// Recovery point tier information.
	RecoveryPointTierDetails []*RecoveryPointTierInformation

	// READ-ONLY; UTC time at which recovery point was created
	RecoveryPointTimeInUTC *time.Time

	// READ-ONLY; Type of restore point
	Type *RestorePointType
}

// GetAzureWorkloadRecoveryPoint implements the AzureWorkloadRecoveryPointClassification interface for type AzureWorkloadSAPHanaRecoveryPoint.
func (a *AzureWorkloadSAPHanaRecoveryPoint) GetAzureWorkloadRecoveryPoint() *AzureWorkloadRecoveryPoint {
	return &AzureWorkloadRecoveryPoint{
		ObjectType:                     a.ObjectType,
		RecoveryPointMoveReadinessInfo: a.RecoveryPointMoveReadinessInfo,
		RecoveryPointProperties:        a.RecoveryPointProperties,
		RecoveryPointTierDetails:       a.RecoveryPointTierDetails,
		RecoveryPointTimeInUTC:         a.RecoveryPointTimeInUTC,
		Type:                           a.Type,
	}
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type AzureWorkloadSAPHanaRecoveryPoint.
func (a *AzureWorkloadSAPHanaRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadSAPHanaRestoreRequest - AzureWorkload SAP Hana-specific restore.
type AzureWorkloadSAPHanaRestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Workload specific property bag.
	PropertyBag map[string]*string

	// Defines whether the current recovery mode is file restore or database restore
	RecoveryMode *RecoveryMode

	// Type of this recovery.
	RecoveryType *RecoveryType

	// Fully qualified ARM ID of the VM on which workload that was running is being recovered.
	SourceResourceID *string

	// Details of target database
	TargetInfo *TargetRestoreInfo

	// This is the complete ARM Id of the target VM For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
	TargetVirtualMachineID *string
}

// GetAzureWorkloadRestoreRequest implements the AzureWorkloadRestoreRequestClassification interface for type AzureWorkloadSAPHanaRestoreRequest.
func (a *AzureWorkloadSAPHanaRestoreRequest) GetAzureWorkloadRestoreRequest() *AzureWorkloadRestoreRequest {
	return &AzureWorkloadRestoreRequest{
		ObjectType:             a.ObjectType,
		PropertyBag:            a.PropertyBag,
		RecoveryMode:           a.RecoveryMode,
		RecoveryType:           a.RecoveryType,
		SourceResourceID:       a.SourceResourceID,
		TargetInfo:             a.TargetInfo,
		TargetVirtualMachineID: a.TargetVirtualMachineID,
	}
}

// GetAzureWorkloadSAPHanaRestoreRequest implements the AzureWorkloadSAPHanaRestoreRequestClassification interface for type
// AzureWorkloadSAPHanaRestoreRequest.
func (a *AzureWorkloadSAPHanaRestoreRequest) GetAzureWorkloadSAPHanaRestoreRequest() *AzureWorkloadSAPHanaRestoreRequest {
	return a
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type AzureWorkloadSAPHanaRestoreRequest.
func (a *AzureWorkloadSAPHanaRestoreRequest) GetRestoreRequest() *RestoreRequest {
	return &RestoreRequest{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadSQLPointInTimeRecoveryPoint - Recovery point specific to PointInTime
type AzureWorkloadSQLPointInTimeRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Extended Info that provides data directory details. Will be populated in two cases: When a specific recovery point is accessed
	// using GetRecoveryPoint Or when ListRecoveryPoints is called for Log RP
	// only with ExtendedInfo query filter
	ExtendedInfo *AzureWorkloadSQLRecoveryPointExtendedInfo

	// Eligibility of RP to be moved to another tier
	RecoveryPointMoveReadinessInfo map[string]*RecoveryPointMoveReadinessInfo

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// Recovery point tier information.
	RecoveryPointTierDetails []*RecoveryPointTierInformation

	// List of log ranges
	TimeRanges []*PointInTimeRange

	// READ-ONLY; UTC time at which recovery point was created
	RecoveryPointTimeInUTC *time.Time

	// READ-ONLY; Type of restore point
	Type *RestorePointType
}

// GetAzureWorkloadRecoveryPoint implements the AzureWorkloadRecoveryPointClassification interface for type AzureWorkloadSQLPointInTimeRecoveryPoint.
func (a *AzureWorkloadSQLPointInTimeRecoveryPoint) GetAzureWorkloadRecoveryPoint() *AzureWorkloadRecoveryPoint {
	return &AzureWorkloadRecoveryPoint{
		ObjectType:                     a.ObjectType,
		RecoveryPointMoveReadinessInfo: a.RecoveryPointMoveReadinessInfo,
		RecoveryPointProperties:        a.RecoveryPointProperties,
		RecoveryPointTierDetails:       a.RecoveryPointTierDetails,
		RecoveryPointTimeInUTC:         a.RecoveryPointTimeInUTC,
		Type:                           a.Type,
	}
}

// GetAzureWorkloadSQLRecoveryPoint implements the AzureWorkloadSQLRecoveryPointClassification interface for type AzureWorkloadSQLPointInTimeRecoveryPoint.
func (a *AzureWorkloadSQLPointInTimeRecoveryPoint) GetAzureWorkloadSQLRecoveryPoint() *AzureWorkloadSQLRecoveryPoint {
	return &AzureWorkloadSQLRecoveryPoint{
		ExtendedInfo:                   a.ExtendedInfo,
		ObjectType:                     a.ObjectType,
		RecoveryPointMoveReadinessInfo: a.RecoveryPointMoveReadinessInfo,
		RecoveryPointProperties:        a.RecoveryPointProperties,
		RecoveryPointTierDetails:       a.RecoveryPointTierDetails,
		RecoveryPointTimeInUTC:         a.RecoveryPointTimeInUTC,
		Type:                           a.Type,
	}
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type AzureWorkloadSQLPointInTimeRecoveryPoint.
func (a *AzureWorkloadSQLPointInTimeRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadSQLPointInTimeRestoreRequest - AzureWorkload SQL -specific restore. Specifically for PointInTime/Log restore
type AzureWorkloadSQLPointInTimeRestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Data directory details
	AlternateDirectoryPaths []*SQLDataDirectoryMapping

	// SQL specific property where user can chose to set no-recovery when restore operation is tried
	IsNonRecoverable *bool

	// PointInTime value
	PointInTime *time.Time

	// Workload specific property bag.
	PropertyBag map[string]*string

	// Defines whether the current recovery mode is file restore or database restore
	RecoveryMode *RecoveryMode

	// Type of this recovery.
	RecoveryType *RecoveryType

	// Default option set to true. If this is set to false, alternate data directory must be provided
	ShouldUseAlternateTargetLocation *bool

	// Fully qualified ARM ID of the VM on which workload that was running is being recovered.
	SourceResourceID *string

	// Details of target database
	TargetInfo *TargetRestoreInfo

	// This is the complete ARM Id of the target VM For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
	TargetVirtualMachineID *string
}

// GetAzureWorkloadRestoreRequest implements the AzureWorkloadRestoreRequestClassification interface for type AzureWorkloadSQLPointInTimeRestoreRequest.
func (a *AzureWorkloadSQLPointInTimeRestoreRequest) GetAzureWorkloadRestoreRequest() *AzureWorkloadRestoreRequest {
	return &AzureWorkloadRestoreRequest{
		ObjectType:             a.ObjectType,
		PropertyBag:            a.PropertyBag,
		RecoveryMode:           a.RecoveryMode,
		RecoveryType:           a.RecoveryType,
		SourceResourceID:       a.SourceResourceID,
		TargetInfo:             a.TargetInfo,
		TargetVirtualMachineID: a.TargetVirtualMachineID,
	}
}

// GetAzureWorkloadSQLRestoreRequest implements the AzureWorkloadSQLRestoreRequestClassification interface for type AzureWorkloadSQLPointInTimeRestoreRequest.
func (a *AzureWorkloadSQLPointInTimeRestoreRequest) GetAzureWorkloadSQLRestoreRequest() *AzureWorkloadSQLRestoreRequest {
	return &AzureWorkloadSQLRestoreRequest{
		AlternateDirectoryPaths:          a.AlternateDirectoryPaths,
		IsNonRecoverable:                 a.IsNonRecoverable,
		ObjectType:                       a.ObjectType,
		PropertyBag:                      a.PropertyBag,
		RecoveryMode:                     a.RecoveryMode,
		RecoveryType:                     a.RecoveryType,
		ShouldUseAlternateTargetLocation: a.ShouldUseAlternateTargetLocation,
		SourceResourceID:                 a.SourceResourceID,
		TargetInfo:                       a.TargetInfo,
		TargetVirtualMachineID:           a.TargetVirtualMachineID,
	}
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type AzureWorkloadSQLPointInTimeRestoreRequest.
func (a *AzureWorkloadSQLPointInTimeRestoreRequest) GetRestoreRequest() *RestoreRequest {
	return &RestoreRequest{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadSQLRecoveryPoint - SQL specific recoverypoint, specifically encapsulates full/diff recoverypoint along with
// extended info
type AzureWorkloadSQLRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Extended Info that provides data directory details. Will be populated in two cases: When a specific recovery point is accessed
	// using GetRecoveryPoint Or when ListRecoveryPoints is called for Log RP
	// only with ExtendedInfo query filter
	ExtendedInfo *AzureWorkloadSQLRecoveryPointExtendedInfo

	// Eligibility of RP to be moved to another tier
	RecoveryPointMoveReadinessInfo map[string]*RecoveryPointMoveReadinessInfo

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// Recovery point tier information.
	RecoveryPointTierDetails []*RecoveryPointTierInformation

	// READ-ONLY; UTC time at which recovery point was created
	RecoveryPointTimeInUTC *time.Time

	// READ-ONLY; Type of restore point
	Type *RestorePointType
}

// GetAzureWorkloadRecoveryPoint implements the AzureWorkloadRecoveryPointClassification interface for type AzureWorkloadSQLRecoveryPoint.
func (a *AzureWorkloadSQLRecoveryPoint) GetAzureWorkloadRecoveryPoint() *AzureWorkloadRecoveryPoint {
	return &AzureWorkloadRecoveryPoint{
		ObjectType:                     a.ObjectType,
		RecoveryPointMoveReadinessInfo: a.RecoveryPointMoveReadinessInfo,
		RecoveryPointProperties:        a.RecoveryPointProperties,
		RecoveryPointTierDetails:       a.RecoveryPointTierDetails,
		RecoveryPointTimeInUTC:         a.RecoveryPointTimeInUTC,
		Type:                           a.Type,
	}
}

// GetAzureWorkloadSQLRecoveryPoint implements the AzureWorkloadSQLRecoveryPointClassification interface for type AzureWorkloadSQLRecoveryPoint.
func (a *AzureWorkloadSQLRecoveryPoint) GetAzureWorkloadSQLRecoveryPoint() *AzureWorkloadSQLRecoveryPoint {
	return a
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type AzureWorkloadSQLRecoveryPoint.
func (a *AzureWorkloadSQLRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: a.ObjectType,
	}
}

// AzureWorkloadSQLRecoveryPointExtendedInfo - Extended info class details
type AzureWorkloadSQLRecoveryPointExtendedInfo struct {
	// READ-ONLY; List of data directory paths during restore operation.
	DataDirectoryPaths []*SQLDataDirectory

	// READ-ONLY; UTC time at which data directory info was captured
	DataDirectoryTimeInUTC *time.Time
}

// AzureWorkloadSQLRestoreRequest - AzureWorkload SQL -specific restore. Specifically for full/diff restore
type AzureWorkloadSQLRestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Data directory details
	AlternateDirectoryPaths []*SQLDataDirectoryMapping

	// SQL specific property where user can chose to set no-recovery when restore operation is tried
	IsNonRecoverable *bool

	// Workload specific property bag.
	PropertyBag map[string]*string

	// Defines whether the current recovery mode is file restore or database restore
	RecoveryMode *RecoveryMode

	// Type of this recovery.
	RecoveryType *RecoveryType

	// Default option set to true. If this is set to false, alternate data directory must be provided
	ShouldUseAlternateTargetLocation *bool

	// Fully qualified ARM ID of the VM on which workload that was running is being recovered.
	SourceResourceID *string

	// Details of target database
	TargetInfo *TargetRestoreInfo

	// This is the complete ARM Id of the target VM For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
	TargetVirtualMachineID *string
}

// GetAzureWorkloadRestoreRequest implements the AzureWorkloadRestoreRequestClassification interface for type AzureWorkloadSQLRestoreRequest.
func (a *AzureWorkloadSQLRestoreRequest) GetAzureWorkloadRestoreRequest() *AzureWorkloadRestoreRequest {
	return &AzureWorkloadRestoreRequest{
		ObjectType:             a.ObjectType,
		PropertyBag:            a.PropertyBag,
		RecoveryMode:           a.RecoveryMode,
		RecoveryType:           a.RecoveryType,
		SourceResourceID:       a.SourceResourceID,
		TargetInfo:             a.TargetInfo,
		TargetVirtualMachineID: a.TargetVirtualMachineID,
	}
}

// GetAzureWorkloadSQLRestoreRequest implements the AzureWorkloadSQLRestoreRequestClassification interface for type AzureWorkloadSQLRestoreRequest.
func (a *AzureWorkloadSQLRestoreRequest) GetAzureWorkloadSQLRestoreRequest() *AzureWorkloadSQLRestoreRequest {
	return a
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type AzureWorkloadSQLRestoreRequest.
func (a *AzureWorkloadSQLRestoreRequest) GetRestoreRequest() *RestoreRequest {
	return &RestoreRequest{
		ObjectType: a.ObjectType,
	}
}

// BEKDetails - BEK is bitlocker encryption key.
type BEKDetails struct {
	// BEK data.
	SecretData *string

	// Secret is BEK.
	SecretURL *string

	// ID of the Key Vault where this Secret is stored.
	SecretVaultID *string
}

// BMSAADPropertiesQueryObject - Filters to list backup items.
type BMSAADPropertiesQueryObject struct {
	// Backup management type for the backed up item.
	BackupManagementType *BackupManagementType
}

// BMSBackupSummariesQueryObject - Query parameters to fetch backup summaries.
type BMSBackupSummariesQueryObject struct {
	// Backup management type for this container.
	Type *Type
}

// BMSRPQueryObject - Filters to list backup copies.
type BMSRPQueryObject struct {
	// Backup copies created before this time.
	EndDate *time.Time

	// In Get Recovery Point, it tells whether extended information about recovery point is asked.
	ExtendedInfo *bool

	// Flag to indicate whether Soft Deleted RPs should be included/excluded from result.
	IncludeSoftDeletedRP *bool

	// Whether the RP can be moved to another tier
	MoveReadyRPOnly *bool

	// RestorePoint type
	RestorePointQueryType *RestorePointQueryType

	// Backup copies created after this time.
	StartDate *time.Time
}

// BackupManagementUsage - Backup management usages of a vault.
type BackupManagementUsage struct {
	// Current value of usage.
	CurrentValue *int64

	// Limit of usage.
	Limit *int64

	// Name of usage.
	Name *NameInfo

	// Next reset time of usage.
	NextResetTime *time.Time

	// Quota period of usage.
	QuotaPeriod *string

	// Unit of the usage.
	Unit *UsagesUnit
}

// BackupManagementUsageList - Backup management usage for vault.
type BackupManagementUsageList struct {
	// The list of backup management usages for the given vault.
	Value []*BackupManagementUsage
}

// BackupResourceConfig - The resource storage details.
type BackupResourceConfig struct {
	// Opt in details of Cross Region Restore feature.
	CrossRegionRestoreFlag *bool

	// Storage type
	StorageModelType *StorageType

	// Storage type.
	StorageType *StorageType

	// Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked.
	StorageTypeState *StorageTypeState
}

// BackupResourceConfigResource - The resource storage details.
type BackupResourceConfigResource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// BackupResourceConfigResource properties
	Properties *BackupResourceConfig

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

// ClientScriptForConnect - Client script details for file / folder restore.
type ClientScriptForConnect struct {
	// OS type - Windows, Linux etc. for which this file / folder restore client script works.
	OSType *string

	// File content of the client script for file / folder restore.
	ScriptContent *string

	// File extension of the client script for file / folder restore - .ps1 , .sh , etc.
	ScriptExtension *string

	// Mandatory suffix that should be added to the name of script that is given for download to user. If its null or empty then
	// , ignore it.
	ScriptNameSuffix *string

	// URL of Executable from where to source the content. If this is not null then ScriptContent should not be used
	URL *string
}

type CrossRegionRestoreRequest struct {
	// Access details for cross region restore
	CrossRegionRestoreAccessDetails CrrAccessTokenClassification

	// Request object for triggering restore
	RestoreRequest RestoreRequestClassification
}

type CrossRegionRestoreRequestResource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// CrossRegionRestoreRequestResource properties
	Properties *CrossRegionRestoreRequest

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

type CrrAccessToken struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string

	// Access token used for authentication
	AccessTokenString *string

	// Active region name of BMS Stamp
	BMSActiveRegion *string

	// Backup Management Type
	BackupManagementType *string

	// Container Unique name
	ContainerName *string

	// Container Type
	ContainerType *string

	// CoordinatorServiceStampId to be used by BCM in restore call
	CoordinatorServiceStampID *string

	// CoordinatorServiceStampUri to be used by BCM in restore call
	CoordinatorServiceStampURI *string

	// Datasource Container Unique Name
	DatasourceContainerName *string

	// Datasource Id
	DatasourceID *string

	// Datasource Friendly Name
	DatasourceName *string

	// Datasource Type
	DatasourceType *string

	// Protected item container id
	ProtectionContainerID *int64

	// ProtectionServiceStampId to be used by BCM in restore call
	ProtectionServiceStampID *string

	// ProtectionServiceStampUri to be used by BCM in restore call
	ProtectionServiceStampURI *string

	// Recovery Point Id
	RecoveryPointID *string

	// Recovery Point Time
	RecoveryPointTime *string

	// Resource Group name of the source vault
	ResourceGroupName *string

	// Resource Id of the source vault
	ResourceID *string

	// Resource Name of the source vault
	ResourceName *string

	// Recovery point information: Managed virtual machine
	RpIsManagedVirtualMachine *bool

	// Recovery point information: Original SA option
	RpOriginalSAOption *bool

	// Recovery point Tier Information
	RpTierInformation map[string]*string

	// Recovery point information: VM size description
	RpVMSizeDescription *string

	// Subscription Id of the source vault
	SubscriptionID *string

	// Extended Information about the token like FileSpec etc.
	TokenExtendedInformation *string
}

// GetCrrAccessToken implements the CrrAccessTokenClassification interface for type CrrAccessToken.
func (c *CrrAccessToken) GetCrrAccessToken() *CrrAccessToken { return c }

type CrrAccessTokenResource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// CrrAccessTokenResource properties
	Properties CrrAccessTokenClassification

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

// CrrJobRequest - Request object for fetching CRR jobs.
type CrrJobRequest struct {
	// Job Name of the job to be fetched
	JobName *string

	// Entire ARM resource id of the resource
	ResourceID *string
}

// CrrJobRequestResource - Request object for fetching CRR jobs.
type CrrJobRequestResource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// CrrJobRequestResource properties
	Properties *CrrJobRequest

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

// DPMProtectedItem - Additional information on Backup engine specific backup item.
type DPMProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Backup Management server protecting this backup item
	BackupEngineName *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Extended info of the backup item.
	ExtendedInfo *DPMProtectedItemExtendedInfo

	// Friendly name of the managed item
	FriendlyName *string

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Protection state of the backup engine
	ProtectionState *ProtectedItemState

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetProtectedItem implements the ProtectedItemClassification interface for type DPMProtectedItem.
func (d *DPMProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             d.BackupManagementType,
		BackupSetName:                    d.BackupSetName,
		ContainerName:                    d.ContainerName,
		CreateMode:                       d.CreateMode,
		DeferredDeleteTimeInUTC:          d.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      d.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: d.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      d.IsRehydrate,
		IsScheduledForDeferredDelete:     d.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                d.LastRecoveryPoint,
		PolicyID:                         d.PolicyID,
		ProtectedItemType:                d.ProtectedItemType,
		ResourceGuardOperationRequests:   d.ResourceGuardOperationRequests,
		SourceResourceID:                 d.SourceResourceID,
		WorkloadType:                     d.WorkloadType,
	}
}

// DPMProtectedItemExtendedInfo - Additional information of DPM Protected item.
type DPMProtectedItemExtendedInfo struct {
	// Used Disk storage in bytes.
	DiskStorageUsedInBytes *string

	// To check if backup item is collocated.
	IsCollocated *bool

	// To check if backup item is cloud protected.
	IsPresentOnCloud *bool

	// Last backup status information on backup item.
	LastBackupStatus *string

	// Last refresh time on backup item.
	LastRefreshedAt *time.Time

	// Oldest cloud recovery point time.
	OldestRecoveryPoint *time.Time

	// latest disk recovery point time.
	OnPremiseLatestRecoveryPoint *time.Time

	// Oldest disk recovery point time.
	OnPremiseOldestRecoveryPoint *time.Time

	// disk recovery point count.
	OnPremiseRecoveryPointCount *int32

	// Attribute to provide information on various DBs.
	ProtectableObjectLoadPath map[string]*string

	// To check if backup item is disk protected.
	Protected *bool

	// Protection group name of the backup item.
	ProtectionGroupName *string

	// cloud recovery point count.
	RecoveryPointCount *int32

	// total Disk storage in bytes.
	TotalDiskStorageSizeInBytes *string
}

type DiskExclusionProperties struct {
	// List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
	DiskLunList []*int32

	// Flag to indicate whether DiskLunList is to be included/ excluded from backup.
	IsInclusionList *bool
}

// DiskInformation - Disk information
type DiskInformation struct {
	Lun  *int32
	Name *string
}

// DpmErrorInfo - DPM workload-specific error information.
type DpmErrorInfo struct {
	// Localized error string.
	ErrorString *string

	// List of localized recommendations for above error code.
	Recommendations []*string
}

// DpmJob - DPM workload-specific job object.
type DpmJob struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	JobType *string

	// The state/actions applicable on this job like cancel/retry.
	ActionsInfo []*JobSupportedAction

	// ActivityId of job.
	ActivityID *string

	// Backup management type to execute the current job.
	BackupManagementType *BackupManagementType

	// Name of cluster/server protecting current backup item, if any.
	ContainerName *string

	// Type of container.
	ContainerType *string

	// DPM server name managing the backup item or backup job.
	DpmServerName *string

	// Time elapsed for job.
	Duration *string

	// The end time.
	EndTime *time.Time

	// Friendly name of the entity on which the current job is executing.
	EntityFriendlyName *string

	// The errors.
	ErrorDetails []*DpmErrorInfo

	// Additional information for this job.
	ExtendedInfo *DpmJobExtendedInfo

	// The operation name.
	Operation *string

	// The start time.
	StartTime *time.Time

	// Job status.
	Status *string

	// Type of backup item.
	WorkloadType *string
}

// GetJob implements the JobClassification interface for type DpmJob.
func (d *DpmJob) GetJob() *Job {
	return &Job{
		ActivityID:           d.ActivityID,
		BackupManagementType: d.BackupManagementType,
		EndTime:              d.EndTime,
		EntityFriendlyName:   d.EntityFriendlyName,
		JobType:              d.JobType,
		Operation:            d.Operation,
		StartTime:            d.StartTime,
		Status:               d.Status,
	}
}

// DpmJobExtendedInfo - Additional information on the DPM workload-specific job.
type DpmJobExtendedInfo struct {
	// Non localized error message on job execution.
	DynamicErrorMessage *string

	// The job properties.
	PropertyBag map[string]*string

	// List of tasks associated with this job.
	TasksList []*DpmJobTaskDetails
}

// DpmJobTaskDetails - DPM workload-specific job task details.
type DpmJobTaskDetails struct {
	// Time elapsed for task.
	Duration *string

	// The end time.
	EndTime *time.Time

	// The start time.
	StartTime *time.Time

	// The status.
	Status *string

	// The task display name.
	TaskID *string
}

// EncryptionDetails - Details needed if the VM was encrypted at the time of backup.
type EncryptionDetails struct {
	// Identifies whether this backup copy represents an encrypted VM at the time of backup.
	EncryptionEnabled *bool

	// Key Url.
	KekURL *string

	// ID of Key Vault where KEK is stored.
	KekVaultID *string

	// Secret Url.
	SecretKeyURL *string

	// ID of Key Vault where Secret is stored.
	SecretKeyVaultID *string
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - Error Detail class which encapsulates Code, Message and Recommendations.
type ErrorDetail struct {
	// READ-ONLY; Error code.
	Code *string

	// READ-ONLY; Error Message related to the Code.
	Message *string

	// READ-ONLY; List of recommendation strings.
	Recommendations []*string
}

// ExtendedProperties - Extended Properties for Azure IaasVM Backup.
type ExtendedProperties struct {
	// Extended Properties for Disk Exclusion.
	DiskExclusionProperties *DiskExclusionProperties
}

// GenericProtectedItem - Base class for backup items.
type GenericProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Name of this backup item's fabric.
	FabricName *string

	// Friendly name of the container.
	FriendlyName *string

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Indicates consistency of policy object and policy applied to this backup item.
	PolicyState *string

	// Data Plane Service ID of the protected item.
	ProtectedItemID *int64

	// Backup state of this backup item.
	ProtectionState *ProtectionState

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// Loosely coupled (type, value) associations (example - parent of a protected item)
	SourceAssociations map[string]*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetProtectedItem implements the ProtectedItemClassification interface for type GenericProtectedItem.
func (g *GenericProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             g.BackupManagementType,
		BackupSetName:                    g.BackupSetName,
		ContainerName:                    g.ContainerName,
		CreateMode:                       g.CreateMode,
		DeferredDeleteTimeInUTC:          g.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      g.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: g.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      g.IsRehydrate,
		IsScheduledForDeferredDelete:     g.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                g.LastRecoveryPoint,
		PolicyID:                         g.PolicyID,
		ProtectedItemType:                g.ProtectedItemType,
		ResourceGuardOperationRequests:   g.ResourceGuardOperationRequests,
		SourceResourceID:                 g.SourceResourceID,
		WorkloadType:                     g.WorkloadType,
	}
}

// GenericRecoveryPoint - Generic backup copy.
type GenericRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Friendly name of the backup copy.
	FriendlyName *string

	// Additional information associated with this backup copy.
	RecoveryPointAdditionalInfo *string

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// Time at which this backup copy was created.
	RecoveryPointTime *time.Time

	// Type of the backup copy.
	RecoveryPointType *string
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type GenericRecoveryPoint.
func (g *GenericRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: g.ObjectType,
	}
}

// IaasVMRecoveryPoint - IaaS VM workload specific backup copy.
type IaasVMRecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Is the session to recover items from this backup copy still active.
	IsInstantIlrSessionActive *bool

	// Whether VM is with Managed Disks
	IsManagedVirtualMachine *bool

	// Required details for recovering an encrypted VM. Applicable only when IsSourceVMEncrypted is true.
	KeyAndSecret *KeyAndSecretDetails

	// OS type
	OSType *string

	// Original Storage Account Option
	OriginalStorageAccountOption *bool

	// Disk configuration
	RecoveryPointDiskConfiguration *RecoveryPointDiskConfiguration

	// Eligibility of RP to be moved to another tier
	RecoveryPointMoveReadinessInfo map[string]*RecoveryPointMoveReadinessInfo

	// Properties of Recovery Point
	RecoveryPointProperties *RecoveryPointProperties

	// Recovery point tier information.
	RecoveryPointTierDetails []*RecoveryPointTierInformation

	// Virtual Machine Size
	VirtualMachineSize *string

	// Identifies the zone of the VM at the time of backup. Applicable only for zone-pinned Vms
	Zones []*string

	// READ-ONLY; Identifies whether the VM was encrypted when the backup copy is created.
	IsSourceVMEncrypted *bool

	// READ-ONLY; Additional information associated with this backup copy.
	RecoveryPointAdditionalInfo *string

	// READ-ONLY; Time at which this backup copy was created.
	RecoveryPointTime *time.Time

	// READ-ONLY; Type of the backup copy.
	RecoveryPointType *string

	// READ-ONLY; Storage type of the VM whose backup copy is created.
	SourceVMStorageType *string
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type IaasVMRecoveryPoint.
func (i *IaasVMRecoveryPoint) GetRecoveryPoint() *RecoveryPoint {
	return &RecoveryPoint{
		ObjectType: i.ObjectType,
	}
}

// IaasVMRestoreRequest - IaaS VM workload-specific restore.
type IaasVMRestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Affinity group associated to VM to be restored. Used only for Classic Compute Virtual Machines.
	AffinityGroup *string

	// Should a new cloud service be created while restoring the VM. If this is false, VM will be restored to the same cloud service
	// as it was at the time of backup.
	CreateNewCloudService *bool

	// DiskEncryptionSet's ID - needed if the VM needs to be encrypted at rest during restore with customer managed key.
	DiskEncryptionSetID *string

	// Details needed if the VM was encrypted at the time of backup.
	EncryptionDetails *EncryptionDetails

	// IaaS VM workload specific restore details for restores using managed identity.
	IdentityBasedRestoreDetails *IdentityBasedRestoreDetails

	// Managed Identity information required to access customer storage account.
	IdentityInfo *IdentityInfo

	// Original Storage Account Option
	OriginalStorageAccountOption *bool

	// ID of the backup copy to be recovered.
	RecoveryPointID *string

	// Type of this recovery.
	RecoveryType *RecoveryType

	// Region in which the virtual machine is restored.
	Region *string

	// List of Disk LUNs for partial restore
	RestoreDiskLunList []*int32

	// Flag to denote of an Unmanaged disk VM should be restored with Managed disks.
	RestoreWithManagedDisks *bool

	// Fully qualified ARM ID of the VM which is being recovered.
	SourceResourceID *string

	// Fully qualified ARM ID of the storage account to which the VM has to be restored.
	StorageAccountID *string

	// Subnet ID, is the subnet ID associated with the to be restored VM. For Classic VMs it would be {VnetID}/Subnet/{SubnetName}
	// and, for the Azure Resource Manager VMs it would be ARM resource ID used to
	// represent the subnet.
	SubnetID *string

	// Fully qualified ARM ID of the domain name to be associated to the VM being restored. This applies only to Classic Virtual
	// Machines.
	TargetDomainNameID *string

	// This is the ARM Id of the resource group that you want to create for this Virtual machine and other artifacts. For e.g.
	// /subscriptions/{subId}/resourcegroups/{rg}
	TargetResourceGroupID *string

	// This is the complete ARM Id of the VM that will be created. For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
	TargetVirtualMachineID *string

	// This is the virtual network Id of the vnet that will be attached to the virtual machine. User will be validated for join
	// action permissions in the linked access.
	VirtualNetworkID *string

	// Target zone where the VM and its disks should be restored.
	Zones []*string
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type IaasVMRestoreRequest.
func (i *IaasVMRestoreRequest) GetRestoreRequest() *RestoreRequest {
	return &RestoreRequest{
		ObjectType: i.ObjectType,
	}
}

// IdentityBasedRestoreDetails - IaaS VM workload specific restore details for restores using managed identity
type IdentityBasedRestoreDetails struct {
	// Gets the class type.
	ObjectType *string

	// Fully qualified ARM ID of the target storage account.
	TargetStorageAccountID *string
}

// IdentityInfo - Encapsulates Managed Identity related information
type IdentityInfo struct {
	// To differentiate if the managed identity is system assigned or user assigned
	IsSystemAssignedIdentity *bool

	// Managed Identity Resource Id Optional: Might not be required in the case of system assigned managed identity
	ManagedIdentityResourceID *string
}

// InstantItemRecoveryTarget - Target details for file / folder restore.
type InstantItemRecoveryTarget struct {
	// List of client scripts.
	ClientScripts []*ClientScriptForConnect
}

// Job - Defines workload agnostic properties for a job.
type Job struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	JobType *string

	// ActivityId of job.
	ActivityID *string

	// Backup management type to execute the current job.
	BackupManagementType *BackupManagementType

	// The end time.
	EndTime *time.Time

	// Friendly name of the entity on which the current job is executing.
	EntityFriendlyName *string

	// The operation name.
	Operation *string

	// The start time.
	StartTime *time.Time

	// Job status.
	Status *string
}

// GetJob implements the JobClassification interface for type Job.
func (j *Job) GetJob() *Job { return j }

// JobQueryObject - Filters to list the jobs.
type JobQueryObject struct {
	// Type of backup management for the job.
	BackupManagementType *BackupManagementType

	// Job has ended at this time. Value is in UTC.
	EndTime *time.Time

	// JobID represents the job uniquely.
	JobID *string

	// Type of operation.
	Operation *JobOperationType

	// Job has started at this time. Value is in UTC.
	StartTime *time.Time

	// Status of the job.
	Status *JobStatus
}

// JobResource - Defines workload agnostic properties for a job.
type JobResource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// JobResource properties
	Properties JobClassification

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

// JobResourceList - List of Job resources
type JobResourceList struct {
	// The uri to fetch the next page of resources. Call ListNext() fetches next page of resources.
	NextLink *string

	// List of resources.
	Value []*JobResource
}

// KEKDetails - KEK is encryption key for BEK.
type KEKDetails struct {
	// KEK data.
	KeyBackupData *string

	// Key is KEK.
	KeyURL *string

	// Key Vault ID where this Key is stored.
	KeyVaultID *string
}

// KPIResourceHealthDetails - KPI Resource Health Details
type KPIResourceHealthDetails struct {
	// Resource Health Status
	ResourceHealthDetails []*ResourceHealthDetails

	// Resource Health Status
	ResourceHealthStatus *ResourceHealthStatus
}

// KeyAndSecretDetails - BEK is bitlocker key. KEK is encryption key for BEK If the VM was encrypted then we will store following
// details :
// 1. Secret(BEK) - Url + Backup Data + vaultId.
// 2. Key(KEK) - Url + Backup Data + vaultId.
// 3. EncryptionMechanism BEK and KEK can potentially have different vault ids.
type KeyAndSecretDetails struct {
	// BEK is bitlocker encryption key.
	BekDetails *BEKDetails

	// Encryption mechanism: None/ SinglePass/ DoublePass
	EncryptionMechanism *string

	// KEK is encryption key for BEK.
	KekDetails *KEKDetails
}

// MabErrorInfo - MAB workload-specific error information.
type MabErrorInfo struct {
	// READ-ONLY; Localized error string.
	ErrorString *string

	// READ-ONLY; List of localized recommendations.
	Recommendations []*string
}

// MabFileFolderProtectedItem - MAB workload-specific backup item.
type MabFileFolderProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Name of the computer associated with this backup item.
	ComputerName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Sync time for deferred deletion in UTC
	DeferredDeleteSyncTimeInUTC *int64

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Additional information with this backup item.
	ExtendedInfo *MabFileFolderProtectedItemExtendedInfo

	// Friendly name of this backup item.
	FriendlyName *string

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Status of last backup operation.
	LastBackupStatus *string

	// Timestamp of the last backup operation on this backup item.
	LastBackupTime *time.Time

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// Protected, ProtectionStopped, IRPending or ProtectionError
	ProtectionState *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetProtectedItem implements the ProtectedItemClassification interface for type MabFileFolderProtectedItem.
func (m *MabFileFolderProtectedItem) GetProtectedItem() *ProtectedItem {
	return &ProtectedItem{
		BackupManagementType:             m.BackupManagementType,
		BackupSetName:                    m.BackupSetName,
		ContainerName:                    m.ContainerName,
		CreateMode:                       m.CreateMode,
		DeferredDeleteTimeInUTC:          m.DeferredDeleteTimeInUTC,
		DeferredDeleteTimeRemaining:      m.DeferredDeleteTimeRemaining,
		IsDeferredDeleteScheduleUpcoming: m.IsDeferredDeleteScheduleUpcoming,
		IsRehydrate:                      m.IsRehydrate,
		IsScheduledForDeferredDelete:     m.IsScheduledForDeferredDelete,
		LastRecoveryPoint:                m.LastRecoveryPoint,
		PolicyID:                         m.PolicyID,
		ProtectedItemType:                m.ProtectedItemType,
		ResourceGuardOperationRequests:   m.ResourceGuardOperationRequests,
		SourceResourceID:                 m.SourceResourceID,
		WorkloadType:                     m.WorkloadType,
	}
}

// MabFileFolderProtectedItemExtendedInfo - Additional information on the backed up item.
type MabFileFolderProtectedItemExtendedInfo struct {
	// Last time when the agent data synced to service.
	LastRefreshedAt *time.Time

	// The oldest backup copy available.
	OldestRecoveryPoint *time.Time

	// Number of backup copies associated with the backup item.
	RecoveryPointCount *int32
}

// MabJob - MAB workload-specific job.
type MabJob struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	JobType *string

	// The state/actions applicable on jobs like cancel/retry.
	ActionsInfo []*JobSupportedAction

	// ActivityId of job.
	ActivityID *string

	// Backup management type to execute the current job.
	BackupManagementType *BackupManagementType

	// Time taken by job to run.
	Duration *string

	// The end time.
	EndTime *time.Time

	// Friendly name of the entity on which the current job is executing.
	EntityFriendlyName *string

	// The errors.
	ErrorDetails []*MabErrorInfo

	// Additional information on the job.
	ExtendedInfo *MabJobExtendedInfo

	// Name of server protecting the DS.
	MabServerName *string

	// Server type of MAB container.
	MabServerType *MabServerType

	// The operation name.
	Operation *string

	// The start time.
	StartTime *time.Time

	// Job status.
	Status *string

	// Workload type of backup item.
	WorkloadType *WorkloadType
}

// GetJob implements the JobClassification interface for type MabJob.
func (m *MabJob) GetJob() *Job {
	return &Job{
		ActivityID:           m.ActivityID,
		BackupManagementType: m.BackupManagementType,
		EndTime:              m.EndTime,
		EntityFriendlyName:   m.EntityFriendlyName,
		JobType:              m.JobType,
		Operation:            m.Operation,
		StartTime:            m.StartTime,
		Status:               m.Status,
	}
}

// MabJobExtendedInfo - Additional information for the MAB workload-specific job.
type MabJobExtendedInfo struct {
	// Non localized error message specific to this job.
	DynamicErrorMessage *string

	// The job properties.
	PropertyBag map[string]*string

	// List of tasks for this job.
	TasksList []*MabJobTaskDetails
}

// MabJobTaskDetails - MAB workload-specific job task details.
type MabJobTaskDetails struct {
	// Time elapsed for task.
	Duration *string

	// The end time.
	EndTime *time.Time

	// The start time.
	StartTime *time.Time

	// The status.
	Status *string

	// The task display name.
	TaskID *string
}

// NameInfo - The name of usage.
type NameInfo struct {
	// Localized value of usage.
	LocalizedValue *string

	// Value of usage.
	Value *string
}

// NewErrorResponse - The resource management error response.
type NewErrorResponse struct {
	// The error object.
	Error *NewErrorResponseError
}

// NewErrorResponseError - The error object.
type NewErrorResponseError struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*NewErrorResponse

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// OperationStatus - Operation status.
type OperationStatus struct {
	// Operation end time. Format: ISO-8601.
	EndTime *time.Time

	// Error information related to this operation.
	Error *OperationStatusError

	// ID of the operation.
	ID *string

	// Name of the operation.
	Name *string

	// Additional information associated with this operation.
	Properties OperationStatusExtendedInfoClassification

	// Operation start time. Format: ISO-8601.
	StartTime *time.Time

	// Operation status.
	Status *OperationStatusValues
}

// OperationStatusError - Error information associated with operation status call.
type OperationStatusError struct {
	// Error code of the operation failure.
	Code *string

	// Error message displayed if the operation failure.
	Message *string
}

// OperationStatusExtendedInfo - Base class for additional information of operation status.
type OperationStatusExtendedInfo struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string
}

// GetOperationStatusExtendedInfo implements the OperationStatusExtendedInfoClassification interface for type OperationStatusExtendedInfo.
func (o *OperationStatusExtendedInfo) GetOperationStatusExtendedInfo() *OperationStatusExtendedInfo {
	return o
}

// OperationStatusJobExtendedInfo - Operation status job extended info.
type OperationStatusJobExtendedInfo struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// ID of the job created for this protected item.
	JobID *string
}

// GetOperationStatusExtendedInfo implements the OperationStatusExtendedInfoClassification interface for type OperationStatusJobExtendedInfo.
func (o *OperationStatusJobExtendedInfo) GetOperationStatusExtendedInfo() *OperationStatusExtendedInfo {
	return &OperationStatusExtendedInfo{
		ObjectType: o.ObjectType,
	}
}

// OperationStatusJobsExtendedInfo - Operation status extended info for list of jobs.
type OperationStatusJobsExtendedInfo struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Stores all the failed jobs along with the corresponding error codes.
	FailedJobsError map[string]*string

	// IDs of the jobs created for the protected item.
	JobIDs []*string
}

// GetOperationStatusExtendedInfo implements the OperationStatusExtendedInfoClassification interface for type OperationStatusJobsExtendedInfo.
func (o *OperationStatusJobsExtendedInfo) GetOperationStatusExtendedInfo() *OperationStatusExtendedInfo {
	return &OperationStatusExtendedInfo{
		ObjectType: o.ObjectType,
	}
}

// OperationStatusProvisionILRExtendedInfo - Operation status extended info for ILR provision action.
type OperationStatusProvisionILRExtendedInfo struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// Target details for file / folder restore.
	RecoveryTarget *InstantItemRecoveryTarget
}

// GetOperationStatusExtendedInfo implements the OperationStatusExtendedInfoClassification interface for type OperationStatusProvisionILRExtendedInfo.
func (o *OperationStatusProvisionILRExtendedInfo) GetOperationStatusExtendedInfo() *OperationStatusExtendedInfo {
	return &OperationStatusExtendedInfo{
		ObjectType: o.ObjectType,
	}
}

// OperationStatusRecoveryPointExtendedInfo - Operation status extended info for Updated Recovery Point.
type OperationStatusRecoveryPointExtendedInfo struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string

	// In case the share is in soft-deleted state, populate this field with deleted backup item
	DeletedBackupItemVersion *string

	// Recovery Point info with updated source snapshot URI
	UpdatedRecoveryPoint RecoveryPointClassification
}

// GetOperationStatusExtendedInfo implements the OperationStatusExtendedInfoClassification interface for type OperationStatusRecoveryPointExtendedInfo.
func (o *OperationStatusRecoveryPointExtendedInfo) GetOperationStatusExtendedInfo() *OperationStatusExtendedInfo {
	return &OperationStatusExtendedInfo{
		ObjectType: o.ObjectType,
	}
}

// PointInTimeRange - Provides details for log ranges
type PointInTimeRange struct {
	// End time of the time range for log recovery.
	EndTime *time.Time

	// Start time of the time range for log recovery.
	StartTime *time.Time
}

// ProtectedItem - Base class for backup items.
type ProtectedItem struct {
	// REQUIRED; backup item type.
	ProtectedItemType *string

	// Type of backup management for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set the backup item belongs to
	BackupSetName *string

	// Unique name of container
	ContainerName *string

	// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
	CreateMode *CreateMode

	// Time for deferred deletion in UTC
	DeferredDeleteTimeInUTC *time.Time

	// Time remaining before the DS marked for deferred delete is permanently deleted
	DeferredDeleteTimeRemaining *string

	// Flag to identify whether the deferred deleted DS is to be purged soon
	IsDeferredDeleteScheduleUpcoming *bool

	// Flag to identify that deferred deleted DS is to be moved into Pause state
	IsRehydrate *bool

	// Flag to identify whether the DS is scheduled for deferred delete
	IsScheduledForDeferredDelete *bool

	// Timestamp when the last (latest) backup copy was created for this backup item.
	LastRecoveryPoint *time.Time

	// ID of the backup policy with which this item is backed up.
	PolicyID *string

	// ResourceGuardOperationRequests on which LAC check will be performed
	ResourceGuardOperationRequests []*string

	// ARM ID of the resource to be backed up.
	SourceResourceID *string

	// Type of workload this item represents.
	WorkloadType *DataSourceType
}

// GetProtectedItem implements the ProtectedItemClassification interface for type ProtectedItem.
func (p *ProtectedItem) GetProtectedItem() *ProtectedItem { return p }

// ProtectedItemQueryObject - Filters to list backup items.
type ProtectedItemQueryObject struct {
	// Backup Engine name
	BackupEngineName *string

	// Backup management type for the backed up item.
	BackupManagementType *BackupManagementType

	// Name of the backup set.
	BackupSetName *string

	// Name of the container.
	ContainerName *string

	// Name of the fabric.
	FabricName *string

	// Friendly name of protected item
	FriendlyName *string

	// Health State for the backed up item.
	HealthState *HealthState

	// Type of workload this item represents.
	ItemType *DataSourceType

	// Backup policy name associated with the backup item.
	PolicyName *string
}

// ProtectedItemResource - Base class for backup items.
type ProtectedItemResource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// ProtectedItemResource properties
	Properties ProtectedItemClassification

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

// ProtectedItemResourceList - List of ProtectedItem resources
type ProtectedItemResourceList struct {
	// The uri to fetch the next page of resources. Call ListNext() fetches next page of resources.
	NextLink *string

	// List of resources.
	Value []*ProtectedItemResource
}

// RecoveryPoint - Base class for backup copies. Workload-specific backup copies are derived from this class.
type RecoveryPoint struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string
}

// GetRecoveryPoint implements the RecoveryPointClassification interface for type RecoveryPoint.
func (r *RecoveryPoint) GetRecoveryPoint() *RecoveryPoint { return r }

// RecoveryPointDiskConfiguration - Disk configuration
type RecoveryPointDiskConfiguration struct {
	// Information of disks excluded from backup
	ExcludedDiskList []*DiskInformation

	// Information of disks included in backup
	IncludedDiskList []*DiskInformation

	// Number of disks attached to the VM
	NumberOfDisksAttachedToVM *int32

	// Number of disks included in backup
	NumberOfDisksIncludedInBackup *int32
}

type RecoveryPointMoveReadinessInfo struct {
	AdditionalInfo *string
	IsReadyForMove *bool
}

// RecoveryPointProperties - Properties of Recovery Point
type RecoveryPointProperties struct {
	// Expiry time of Recovery Point in UTC.
	ExpiryTime *string

	// Bool to indicate whether RP is in soft delete state or not
	IsSoftDeleted *bool

	// Rule name tagged on Recovery Point that governs life cycle
	RuleName *string
}

// RecoveryPointResource - Base class for backup copies. Workload-specific backup copies are derived from this class.
type RecoveryPointResource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// RecoveryPointResource properties
	Properties RecoveryPointClassification

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

// RecoveryPointResourceList - List of RecoveryPoint resources
type RecoveryPointResourceList struct {
	// The uri to fetch the next page of resources. Call ListNext() fetches next page of resources.
	NextLink *string

	// List of resources.
	Value []*RecoveryPointResource
}

// RecoveryPointTierInformation - Recovery point tier information.
type RecoveryPointTierInformation struct {
	// Recovery point tier status.
	ExtendedInfo map[string]*string

	// Recovery point tier status.
	Status *RecoveryPointTierStatus

	// Recovery point tier type.
	Type *RecoveryPointTierType
}

// Resource - ARM Resource.
type Resource struct {
	// Optional ETag.
	ETag *string

	// Resource location.
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string

	// READ-ONLY; Resource name associated with the resource.
	Name *string

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/â€¦
	Type *string
}

// ResourceHealthDetails - Health Details for backup items.
type ResourceHealthDetails struct {
	// READ-ONLY; Health Code
	Code *int32

	// READ-ONLY; Health Message
	Message *string

	// READ-ONLY; Health Recommended Actions
	Recommendations []*string

	// READ-ONLY; Health Title
	Title *string
}

// ResourceList - Base for all lists of resources.
type ResourceList struct {
	// The uri to fetch the next page of resources. Call ListNext() fetches next page of resources.
	NextLink *string
}

// RestoreFileSpecs - Restore file specs like file path, type and target folder path info.
type RestoreFileSpecs struct {
	// Indicates what the Path variable stands for
	FileSpecType *string

	// Source File/Folder path
	Path *string

	// Destination folder path in target FileShare
	TargetFolderPath *string
}

// RestoreRequest - Base class for restore request. Workload-specific restore requests are derived from this class.
type RestoreRequest struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string
}

// GetRestoreRequest implements the RestoreRequestClassification interface for type RestoreRequest.
func (r *RestoreRequest) GetRestoreRequest() *RestoreRequest { return r }

// SQLDataDirectory info
type SQLDataDirectory struct {
	// Logical name of the file
	LogicalName *string

	// File path
	Path *string

	// Type of data directory mapping
	Type *SQLDataDirectoryType
}

// SQLDataDirectoryMapping - Encapsulates information regarding data directory
type SQLDataDirectoryMapping struct {
	// Type of data directory mapping
	MappingType *SQLDataDirectoryType

	// Restore source logical name path
	SourceLogicalName *string

	// Restore source path
	SourcePath *string

	// Target path
	TargetPath *string
}

// TargetAFSRestoreInfo - Target Azure File Share Info.
type TargetAFSRestoreInfo struct {
	// File share name
	Name *string

	// Target file share resource ARM ID
	TargetResourceID *string
}

// TargetRestoreInfo - Details about target workload during restore operation.
type TargetRestoreInfo struct {
	// Resource Id name of the container in which Target DataBase resides
	ContainerID *string

	// Database name InstanceName/DataBaseName for SQL or System/DbName for SAP Hana
	DatabaseName *string

	// Can Overwrite if Target DataBase already exists
	OverwriteOption *OverwriteOptions

	// Target directory location for restore as files.
	TargetDirectoryForFileRestore *string
}

type WorkloadCrrAccessToken struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string

	// Access token used for authentication
	AccessTokenString *string

	// Active region name of BMS Stamp
	BMSActiveRegion *string

	// Backup Management Type
	BackupManagementType *string

	// Container Id
	ContainerID *string

	// Container Unique name
	ContainerName *string

	// Container Type
	ContainerType *string

	// CoordinatorServiceStampId to be used by BCM in restore call
	CoordinatorServiceStampID *string

	// CoordinatorServiceStampUri to be used by BCM in restore call
	CoordinatorServiceStampURI *string

	// Datasource Container Unique Name
	DatasourceContainerName *string

	// Datasource Id
	DatasourceID *string

	// Datasource Friendly Name
	DatasourceName *string

	// Datasource Type
	DatasourceType *string

	// Policy Id
	PolicyID *string

	// Policy Name
	PolicyName                                  *string
	ProtectableObjectContainerHostOsName        *string
	ProtectableObjectFriendlyName               *string
	ProtectableObjectParentLogicalContainerName *string
	ProtectableObjectProtectionState            *string
	ProtectableObjectUniqueName                 *string
	ProtectableObjectWorkloadType               *string

	// Protected item container id
	ProtectionContainerID *int64

	// ProtectionServiceStampId to be used by BCM in restore call
	ProtectionServiceStampID *string

	// ProtectionServiceStampUri to be used by BCM in restore call
	ProtectionServiceStampURI *string

	// Recovery Point Id
	RecoveryPointID *string

	// Recovery Point Time
	RecoveryPointTime *string

	// Resource Group name of the source vault
	ResourceGroupName *string

	// Resource Id of the source vault
	ResourceID *string

	// Resource Name of the source vault
	ResourceName *string

	// Recovery point information: Managed virtual machine
	RpIsManagedVirtualMachine *bool

	// Recovery point information: Original SA option
	RpOriginalSAOption *bool

	// Recovery point Tier Information
	RpTierInformation map[string]*string

	// Recovery point information: VM size description
	RpVMSizeDescription *string

	// Subscription Id of the source vault
	SubscriptionID *string

	// Extended Information about the token like FileSpec etc.
	TokenExtendedInformation *string
}

// GetCrrAccessToken implements the CrrAccessTokenClassification interface for type WorkloadCrrAccessToken.
func (w *WorkloadCrrAccessToken) GetCrrAccessToken() *CrrAccessToken {
	return &CrrAccessToken{
		AccessTokenString:          w.AccessTokenString,
		BMSActiveRegion:            w.BMSActiveRegion,
		BackupManagementType:       w.BackupManagementType,
		ContainerName:              w.ContainerName,
		ContainerType:              w.ContainerType,
		CoordinatorServiceStampID:  w.CoordinatorServiceStampID,
		CoordinatorServiceStampURI: w.CoordinatorServiceStampURI,
		DatasourceContainerName:    w.DatasourceContainerName,
		DatasourceID:               w.DatasourceID,
		DatasourceName:             w.DatasourceName,
		DatasourceType:             w.DatasourceType,
		ObjectType:                 w.ObjectType,
		ProtectionContainerID:      w.ProtectionContainerID,
		ProtectionServiceStampID:   w.ProtectionServiceStampID,
		ProtectionServiceStampURI:  w.ProtectionServiceStampURI,
		RecoveryPointID:            w.RecoveryPointID,
		RecoveryPointTime:          w.RecoveryPointTime,
		ResourceGroupName:          w.ResourceGroupName,
		ResourceID:                 w.ResourceID,
		ResourceName:               w.ResourceName,
		RpIsManagedVirtualMachine:  w.RpIsManagedVirtualMachine,
		RpOriginalSAOption:         w.RpOriginalSAOption,
		RpTierInformation:          w.RpTierInformation,
		RpVMSizeDescription:        w.RpVMSizeDescription,
		SubscriptionID:             w.SubscriptionID,
		TokenExtendedInformation:   w.TokenExtendedInformation,
	}
}
