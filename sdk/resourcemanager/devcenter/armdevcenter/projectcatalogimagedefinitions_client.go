//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevcenter

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ProjectCatalogImageDefinitionsClient contains the methods for the ProjectCatalogImageDefinitions group.
// Don't use this type directly, use NewProjectCatalogImageDefinitionsClient() instead.
type ProjectCatalogImageDefinitionsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewProjectCatalogImageDefinitionsClient creates a new instance of ProjectCatalogImageDefinitionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewProjectCatalogImageDefinitionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ProjectCatalogImageDefinitionsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ProjectCatalogImageDefinitionsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// GetByProjectCatalog - Gets an Image Definition from the catalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - The name of the project.
//   - catalogName - The name of the Catalog.
//   - imageDefinitionName - The name of the Image Definition.
//   - options - ProjectCatalogImageDefinitionsClientGetByProjectCatalogOptions contains the optional parameters for the ProjectCatalogImageDefinitionsClient.GetByProjectCatalog
//     method.
func (client *ProjectCatalogImageDefinitionsClient) GetByProjectCatalog(ctx context.Context, resourceGroupName string, projectName string, catalogName string, imageDefinitionName string, options *ProjectCatalogImageDefinitionsClientGetByProjectCatalogOptions) (ProjectCatalogImageDefinitionsClientGetByProjectCatalogResponse, error) {
	var err error
	const operationName = "ProjectCatalogImageDefinitionsClient.GetByProjectCatalog"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getByProjectCatalogCreateRequest(ctx, resourceGroupName, projectName, catalogName, imageDefinitionName, options)
	if err != nil {
		return ProjectCatalogImageDefinitionsClientGetByProjectCatalogResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProjectCatalogImageDefinitionsClientGetByProjectCatalogResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ProjectCatalogImageDefinitionsClientGetByProjectCatalogResponse{}, err
	}
	resp, err := client.getByProjectCatalogHandleResponse(httpResp)
	return resp, err
}

// getByProjectCatalogCreateRequest creates the GetByProjectCatalog request.
func (client *ProjectCatalogImageDefinitionsClient) getByProjectCatalogCreateRequest(ctx context.Context, resourceGroupName string, projectName string, catalogName string, imageDefinitionName string, options *ProjectCatalogImageDefinitionsClientGetByProjectCatalogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if imageDefinitionName == "" {
		return nil, errors.New("parameter imageDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{imageDefinitionName}", url.PathEscape(imageDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getByProjectCatalogHandleResponse handles the GetByProjectCatalog response.
func (client *ProjectCatalogImageDefinitionsClient) getByProjectCatalogHandleResponse(resp *http.Response) (ProjectCatalogImageDefinitionsClientGetByProjectCatalogResponse, error) {
	result := ProjectCatalogImageDefinitionsClientGetByProjectCatalogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImageDefinition); err != nil {
		return ProjectCatalogImageDefinitionsClientGetByProjectCatalogResponse{}, err
	}
	return result, nil
}

// NewListByProjectCatalogPager - List Image Definitions in the catalog.
//
// Generated from API version 2024-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - The name of the project.
//   - catalogName - The name of the Catalog.
//   - options - ProjectCatalogImageDefinitionsClientListByProjectCatalogOptions contains the optional parameters for the ProjectCatalogImageDefinitionsClient.NewListByProjectCatalogPager
//     method.
func (client *ProjectCatalogImageDefinitionsClient) NewListByProjectCatalogPager(resourceGroupName string, projectName string, catalogName string, options *ProjectCatalogImageDefinitionsClientListByProjectCatalogOptions) *runtime.Pager[ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse] {
	return runtime.NewPager(runtime.PagingHandler[ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse]{
		More: func(page ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse) (ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ProjectCatalogImageDefinitionsClient.NewListByProjectCatalogPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByProjectCatalogCreateRequest(ctx, resourceGroupName, projectName, catalogName, options)
			}, nil)
			if err != nil {
				return ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse{}, err
			}
			return client.listByProjectCatalogHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByProjectCatalogCreateRequest creates the ListByProjectCatalog request.
func (client *ProjectCatalogImageDefinitionsClient) listByProjectCatalogCreateRequest(ctx context.Context, resourceGroupName string, projectName string, catalogName string, options *ProjectCatalogImageDefinitionsClientListByProjectCatalogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByProjectCatalogHandleResponse handles the ListByProjectCatalog response.
func (client *ProjectCatalogImageDefinitionsClient) listByProjectCatalogHandleResponse(resp *http.Response) (ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse, error) {
	result := ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImageDefinitionListResult); err != nil {
		return ProjectCatalogImageDefinitionsClientListByProjectCatalogResponse{}, err
	}
	return result, nil
}
