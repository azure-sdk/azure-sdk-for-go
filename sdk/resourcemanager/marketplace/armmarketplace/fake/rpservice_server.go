//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/marketplace/armmarketplace/v2"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// RPServiceServer is a fake server for instances of the armmarketplace.RPServiceClient type.
type RPServiceServer struct {
	// QueryRules is the fake for method RPServiceClient.QueryRules
	// HTTP status codes to indicate success: http.StatusOK
	QueryRules func(ctx context.Context, privateStoreID string, collectionID string, options *armmarketplace.RPServiceClientQueryRulesOptions) (resp azfake.Responder[armmarketplace.RPServiceClientQueryRulesResponse], errResp azfake.ErrorResponder)

	// QueryUserRules is the fake for method RPServiceClient.QueryUserRules
	// HTTP status codes to indicate success: http.StatusOK
	QueryUserRules func(ctx context.Context, privateStoreID string, options *armmarketplace.RPServiceClientQueryUserRulesOptions) (resp azfake.Responder[armmarketplace.RPServiceClientQueryUserRulesResponse], errResp azfake.ErrorResponder)

	// SetCollectionRules is the fake for method RPServiceClient.SetCollectionRules
	// HTTP status codes to indicate success: http.StatusOK
	SetCollectionRules func(ctx context.Context, privateStoreID string, collectionID string, options *armmarketplace.RPServiceClientSetCollectionRulesOptions) (resp azfake.Responder[armmarketplace.RPServiceClientSetCollectionRulesResponse], errResp azfake.ErrorResponder)
}

// NewRPServiceServerTransport creates a new instance of RPServiceServerTransport with the provided implementation.
// The returned RPServiceServerTransport instance is connected to an instance of armmarketplace.RPServiceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRPServiceServerTransport(srv *RPServiceServer) *RPServiceServerTransport {
	return &RPServiceServerTransport{srv: srv}
}

// RPServiceServerTransport connects instances of armmarketplace.RPServiceClient to instances of RPServiceServer.
// Don't use this type directly, use NewRPServiceServerTransport instead.
type RPServiceServerTransport struct {
	srv *RPServiceServer
}

// Do implements the policy.Transporter interface for RPServiceServerTransport.
func (r *RPServiceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "RPServiceClient.QueryRules":
		resp, err = r.dispatchQueryRules(req)
	case "RPServiceClient.QueryUserRules":
		resp, err = r.dispatchQueryUserRules(req)
	case "RPServiceClient.SetCollectionRules":
		resp, err = r.dispatchSetCollectionRules(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *RPServiceServerTransport) dispatchQueryRules(req *http.Request) (*http.Response, error) {
	if r.srv.QueryRules == nil {
		return nil, &nonRetriableError{errors.New("fake for method QueryRules not implemented")}
	}
	const regexStr = `/providers/Microsoft\.Marketplace/privateStores/(?P<privateStoreId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/collections/(?P<collectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/queryRules`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	privateStoreIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateStoreId")])
	if err != nil {
		return nil, err
	}
	collectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("collectionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.QueryRules(req.Context(), privateStoreIDParam, collectionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RuleListResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RPServiceServerTransport) dispatchQueryUserRules(req *http.Request) (*http.Response, error) {
	if r.srv.QueryUserRules == nil {
		return nil, &nonRetriableError{errors.New("fake for method QueryUserRules not implemented")}
	}
	const regexStr = `/providers/Microsoft\.Marketplace/privateStores/(?P<privateStoreId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/queryUserRules`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmarketplace.QueryUserRulesProperties](req)
	if err != nil {
		return nil, err
	}
	privateStoreIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateStoreId")])
	if err != nil {
		return nil, err
	}
	var options *armmarketplace.RPServiceClientQueryUserRulesOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armmarketplace.RPServiceClientQueryUserRulesOptions{
			Payload: &body,
		}
	}
	respr, errRespr := r.srv.QueryUserRules(req.Context(), privateStoreIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RuleListResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RPServiceServerTransport) dispatchSetCollectionRules(req *http.Request) (*http.Response, error) {
	if r.srv.SetCollectionRules == nil {
		return nil, &nonRetriableError{errors.New("fake for method SetCollectionRules not implemented")}
	}
	const regexStr = `/providers/Microsoft\.Marketplace/privateStores/(?P<privateStoreId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/collections/(?P<collectionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/setRules`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmarketplace.SetRulesRequest](req)
	if err != nil {
		return nil, err
	}
	privateStoreIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateStoreId")])
	if err != nil {
		return nil, err
	}
	collectionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("collectionId")])
	if err != nil {
		return nil, err
	}
	var options *armmarketplace.RPServiceClientSetCollectionRulesOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armmarketplace.RPServiceClientSetCollectionRulesOptions{
			Payload: &body,
		}
	}
	respr, errRespr := r.srv.SetCollectionRules(req.Context(), privateStoreIDParam, collectionIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
