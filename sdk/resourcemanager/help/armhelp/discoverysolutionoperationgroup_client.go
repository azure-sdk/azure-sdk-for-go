// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armhelp

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// DiscoverySolutionOperationGroupClient contains the methods for the DiscoverySolutionOperationGroup group.
// Don't use this type directly, use NewDiscoverySolutionOperationGroupClient() instead.
type DiscoverySolutionOperationGroupClient struct {
	internal *arm.Client
}

// NewDiscoverySolutionOperationGroupClient creates a new instance of DiscoverySolutionOperationGroupClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDiscoverySolutionOperationGroupClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*DiscoverySolutionOperationGroupClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DiscoverySolutionOperationGroupClient{
		internal: cl,
	}
	return client, nil
}

// NewListPager - Lists the relevant Azure Diagnostics, Solutions and Troubleshooters using [problemClassification API](https://learn.microsoft.com/rest/api/support/problem-classifications/list?tabs=HTTP))
// AND resourceUri or resourceType.<br/> Discovery Solutions is the initial entry point within Help API, which identifies
// relevant Azure diagnostics and solutions. <br/><br/> Required Input : problemClassificationId (Use the [problemClassification
// API](https://learn.microsoft.com/rest/api/support/problem-classifications/list?tabs=HTTP)) <br/>Optional input: resourceUri
// OR resource Type <br/><br/> <b>Note: </b> ‘requiredInputs’ from Discovery solutions response must be passed via ‘additionalParameters’
// as an input to Diagnostics and Solutions API.
//
// Generated from API version 2024-03-01-preview
//   - options - DiscoverySolutionOperationGroupClientListOptions contains the optional parameters for the DiscoverySolutionOperationGroupClient.NewListPager
//     method.
func (client *DiscoverySolutionOperationGroupClient) NewListPager(options *DiscoverySolutionOperationGroupClientListOptions) *runtime.Pager[DiscoverySolutionOperationGroupClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[DiscoverySolutionOperationGroupClientListResponse]{
		More: func(page DiscoverySolutionOperationGroupClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DiscoverySolutionOperationGroupClientListResponse) (DiscoverySolutionOperationGroupClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DiscoverySolutionOperationGroupClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return DiscoverySolutionOperationGroupClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *DiscoverySolutionOperationGroupClient) listCreateRequest(ctx context.Context, options *DiscoverySolutionOperationGroupClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Help/discoverySolutions"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Skiptoken != nil {
		reqQP.Set("$skiptoken", *options.Skiptoken)
	}
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DiscoverySolutionOperationGroupClient) listHandleResponse(resp *http.Response) (DiscoverySolutionOperationGroupClientListResponse, error) {
	result := DiscoverySolutionOperationGroupClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveryResponse); err != nil {
		return DiscoverySolutionOperationGroupClientListResponse{}, err
	}
	return result, nil
}
