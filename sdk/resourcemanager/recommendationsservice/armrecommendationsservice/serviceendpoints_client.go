//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecommendationsservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ServiceEndpointsClient contains the methods for the ServiceEndpoints group.
// Don't use this type directly, use NewServiceEndpointsClient() instead.
type ServiceEndpointsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewServiceEndpointsClient creates a new instance of ServiceEndpointsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewServiceEndpointsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ServiceEndpointsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ServiceEndpointsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates ServiceEndpoint resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - The name of the RecommendationsService Account resource.
//   - serviceEndpointName - The name of the ServiceEndpoint resource.
//   - body - ServiceEndpoint resource details.
//   - options - ServiceEndpointsClientBeginCreateOrUpdateOptions contains the optional parameters for the ServiceEndpointsClient.BeginCreateOrUpdate
//     method.
func (client *ServiceEndpointsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointResource, options *ServiceEndpointsClientBeginCreateOrUpdateOptions) (*runtime.Poller[ServiceEndpointsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, accountName, serviceEndpointName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ServiceEndpointsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ServiceEndpointsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates or updates ServiceEndpoint resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-03-01-preview
func (client *ServiceEndpointsClient) createOrUpdate(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointResource, options *ServiceEndpointsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ServiceEndpointsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, accountName, serviceEndpointName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ServiceEndpointsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointResource, options *ServiceEndpointsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints/{serviceEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if serviceEndpointName == "" {
		return nil, errors.New("parameter serviceEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceEndpointName}", url.PathEscape(serviceEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes ServiceEndpoint resources of a given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - The name of the RecommendationsService Account resource.
//   - serviceEndpointName - The name of the ServiceEndpoint resource.
//   - options - ServiceEndpointsClientBeginDeleteOptions contains the optional parameters for the ServiceEndpointsClient.BeginDelete
//     method.
func (client *ServiceEndpointsClient) BeginDelete(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientBeginDeleteOptions) (*runtime.Poller[ServiceEndpointsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, accountName, serviceEndpointName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ServiceEndpointsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ServiceEndpointsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes ServiceEndpoint resources of a given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-03-01-preview
func (client *ServiceEndpointsClient) deleteOperation(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "ServiceEndpointsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, accountName, serviceEndpointName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ServiceEndpointsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints/{serviceEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if serviceEndpointName == "" {
		return nil, errors.New("parameter serviceEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceEndpointName}", url.PathEscape(serviceEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Returns ServiceEndpoint resources for a given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - The name of the RecommendationsService Account resource.
//   - serviceEndpointName - The name of the ServiceEndpoint resource.
//   - options - ServiceEndpointsClientGetOptions contains the optional parameters for the ServiceEndpointsClient.Get method.
func (client *ServiceEndpointsClient) Get(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientGetOptions) (ServiceEndpointsClientGetResponse, error) {
	var err error
	const operationName = "ServiceEndpointsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, serviceEndpointName, options)
	if err != nil {
		return ServiceEndpointsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceEndpointsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ServiceEndpointsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ServiceEndpointsClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints/{serviceEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if serviceEndpointName == "" {
		return nil, errors.New("parameter serviceEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceEndpointName}", url.PathEscape(serviceEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ServiceEndpointsClient) getHandleResponse(resp *http.Response) (ServiceEndpointsClientGetResponse, error) {
	result := ServiceEndpointsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceEndpointResource); err != nil {
		return ServiceEndpointsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByAccountResourcePager - Returns list of ServiceEndpoint resources for a given Account name.
//
// Generated from API version 2022-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - The name of the RecommendationsService Account resource.
//   - options - ServiceEndpointsClientListByAccountResourceOptions contains the optional parameters for the ServiceEndpointsClient.NewListByAccountResourcePager
//     method.
func (client *ServiceEndpointsClient) NewListByAccountResourcePager(resourceGroupName string, accountName string, options *ServiceEndpointsClientListByAccountResourceOptions) *runtime.Pager[ServiceEndpointsClientListByAccountResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[ServiceEndpointsClientListByAccountResourceResponse]{
		More: func(page ServiceEndpointsClientListByAccountResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ServiceEndpointsClientListByAccountResourceResponse) (ServiceEndpointsClientListByAccountResourceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ServiceEndpointsClient.NewListByAccountResourcePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByAccountResourceCreateRequest(ctx, resourceGroupName, accountName, options)
			}, nil)
			if err != nil {
				return ServiceEndpointsClientListByAccountResourceResponse{}, err
			}
			return client.listByAccountResourceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByAccountResourceCreateRequest creates the ListByAccountResource request.
func (client *ServiceEndpointsClient) listByAccountResourceCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *ServiceEndpointsClientListByAccountResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByAccountResourceHandleResponse handles the ListByAccountResource response.
func (client *ServiceEndpointsClient) listByAccountResourceHandleResponse(resp *http.Response) (ServiceEndpointsClientListByAccountResourceResponse, error) {
	result := ServiceEndpointsClientListByAccountResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceEndpointResourceList); err != nil {
		return ServiceEndpointsClientListByAccountResourceResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Updates ServiceEndpoint resource details.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - The name of the RecommendationsService Account resource.
//   - serviceEndpointName - The name of the ServiceEndpoint resource.
//   - body - ServiceEndpoint resource patch details.
//   - options - ServiceEndpointsClientBeginUpdateOptions contains the optional parameters for the ServiceEndpointsClient.BeginUpdate
//     method.
func (client *ServiceEndpointsClient) BeginUpdate(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointPatchResource, options *ServiceEndpointsClientBeginUpdateOptions) (*runtime.Poller[ServiceEndpointsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, accountName, serviceEndpointName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ServiceEndpointsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ServiceEndpointsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Updates ServiceEndpoint resource details.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-03-01-preview
func (client *ServiceEndpointsClient) update(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointPatchResource, options *ServiceEndpointsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ServiceEndpointsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, accountName, serviceEndpointName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *ServiceEndpointsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointPatchResource, options *ServiceEndpointsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints/{serviceEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if serviceEndpointName == "" {
		return nil, errors.New("parameter serviceEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceEndpointName}", url.PathEscape(serviceEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
