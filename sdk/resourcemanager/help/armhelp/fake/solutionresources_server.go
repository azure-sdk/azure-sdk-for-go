// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/help/armhelp"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// SolutionResourcesServer is a fake server for instances of the armhelp.SolutionResourcesClient type.
type SolutionResourcesServer struct {
	// BeginCreate is the fake for method SolutionResourcesClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, scope string, solutionResourceName string, solutionRequestBody armhelp.SolutionResource, options *armhelp.SolutionResourcesClientBeginCreateOptions) (resp azfake.PollerResponder[armhelp.SolutionResourcesClientCreateResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SolutionResourcesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, scope string, solutionResourceName string, options *armhelp.SolutionResourcesClientGetOptions) (resp azfake.Responder[armhelp.SolutionResourcesClientGetResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method SolutionResourcesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, scope string, solutionResourceName string, solutionPatchRequestBody armhelp.SolutionPatchRequestBody, options *armhelp.SolutionResourcesClientBeginUpdateOptions) (resp azfake.PollerResponder[armhelp.SolutionResourcesClientUpdateResponse], errResp azfake.ErrorResponder)

	// WarmUp is the fake for method SolutionResourcesClient.WarmUp
	// HTTP status codes to indicate success: http.StatusNoContent
	WarmUp func(ctx context.Context, scope string, solutionResourceName string, options *armhelp.SolutionResourcesClientWarmUpOptions) (resp azfake.Responder[armhelp.SolutionResourcesClientWarmUpResponse], errResp azfake.ErrorResponder)
}

// NewSolutionResourcesServerTransport creates a new instance of SolutionResourcesServerTransport with the provided implementation.
// The returned SolutionResourcesServerTransport instance is connected to an instance of armhelp.SolutionResourcesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSolutionResourcesServerTransport(srv *SolutionResourcesServer) *SolutionResourcesServerTransport {
	return &SolutionResourcesServerTransport{
		srv:         srv,
		beginCreate: newTracker[azfake.PollerResponder[armhelp.SolutionResourcesClientCreateResponse]](),
		beginUpdate: newTracker[azfake.PollerResponder[armhelp.SolutionResourcesClientUpdateResponse]](),
	}
}

// SolutionResourcesServerTransport connects instances of armhelp.SolutionResourcesClient to instances of SolutionResourcesServer.
// Don't use this type directly, use NewSolutionResourcesServerTransport instead.
type SolutionResourcesServerTransport struct {
	srv         *SolutionResourcesServer
	beginCreate *tracker[azfake.PollerResponder[armhelp.SolutionResourcesClientCreateResponse]]
	beginUpdate *tracker[azfake.PollerResponder[armhelp.SolutionResourcesClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for SolutionResourcesServerTransport.
func (s *SolutionResourcesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SolutionResourcesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if solutionResourcesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = solutionResourcesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SolutionResourcesClient.BeginCreate":
				res.resp, res.err = s.dispatchBeginCreate(req)
			case "SolutionResourcesClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			case "SolutionResourcesClient.BeginUpdate":
				res.resp, res.err = s.dispatchBeginUpdate(req)
			case "SolutionResourcesClient.WarmUp":
				res.resp, res.err = s.dispatchWarmUp(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SolutionResourcesServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := s.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Help/solutions/(?P<solutionResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhelp.SolutionResource](req)
		if err != nil {
			return nil, err
		}
		scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
		if err != nil {
			return nil, err
		}
		solutionResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionResourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreate(req.Context(), scopeParam, solutionResourceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		s.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		s.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		s.beginCreate.remove(req)
	}

	return resp, nil
}

func (s *SolutionResourcesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Help/solutions/(?P<solutionResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	solutionResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), scopeParam, solutionResourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SolutionResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SolutionResourcesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := s.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Help/solutions/(?P<solutionResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhelp.SolutionPatchRequestBody](req)
		if err != nil {
			return nil, err
		}
		scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
		if err != nil {
			return nil, err
		}
		solutionResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionResourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginUpdate(req.Context(), scopeParam, solutionResourceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		s.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		s.beginUpdate.remove(req)
	}

	return resp, nil
}

func (s *SolutionResourcesServerTransport) dispatchWarmUp(req *http.Request) (*http.Response, error) {
	if s.srv.WarmUp == nil {
		return nil, &nonRetriableError{errors.New("fake for method WarmUp not implemented")}
	}
	const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Help/solutions/(?P<solutionResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/warmup`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armhelp.SolutionWarmUpRequestBody](req)
	if err != nil {
		return nil, err
	}
	scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
	if err != nil {
		return nil, err
	}
	solutionResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionResourceName")])
	if err != nil {
		return nil, err
	}
	var options *armhelp.SolutionResourcesClientWarmUpOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armhelp.SolutionResourcesClientWarmUpOptions{
			SolutionWarmUpRequestBody: &body,
		}
	}
	respr, errRespr := s.srv.WarmUp(req.Context(), scopeParam, solutionResourceNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SolutionResourcesServerTransport
var solutionResourcesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
