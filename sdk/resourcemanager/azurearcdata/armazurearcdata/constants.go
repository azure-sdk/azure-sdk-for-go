//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurearcdata/armazurearcdata"
	moduleVersion = "v1.0.0"
)

// AccountProvisioningMode - The service account provisioning mode for this Active Directory connector.
type AccountProvisioningMode string

const (
	AccountProvisioningModeAutomatic AccountProvisioningMode = "automatic"
	AccountProvisioningModeManual    AccountProvisioningMode = "manual"
)

// PossibleAccountProvisioningModeValues returns the possible values for the AccountProvisioningMode const type.
func PossibleAccountProvisioningModeValues() []AccountProvisioningMode {
	return []AccountProvisioningMode{
		AccountProvisioningModeAutomatic,
		AccountProvisioningModeManual,
	}
}

// AggregationType - The aggregation type to use for the numerical columns in the dataset.
type AggregationType string

const (
	AggregationTypeAverage AggregationType = "Average"
	AggregationTypeCount   AggregationType = "Count"
	AggregationTypeMaximum AggregationType = "Maximum"
	AggregationTypeMinimum AggregationType = "Minimum"
	AggregationTypeSum     AggregationType = "Sum"
)

// PossibleAggregationTypeValues returns the possible values for the AggregationType const type.
func PossibleAggregationTypeValues() []AggregationType {
	return []AggregationType{
		AggregationTypeAverage,
		AggregationTypeCount,
		AggregationTypeMaximum,
		AggregationTypeMinimum,
		AggregationTypeSum,
	}
}

// AlwaysOnRole - The role of the SQL Server, based on availability.
type AlwaysOnRole string

const (
	AlwaysOnRoleAvailabilityGroupReplica AlwaysOnRole = "AvailabilityGroupReplica"
	AlwaysOnRoleFailoverClusterInstance  AlwaysOnRole = "FailoverClusterInstance"
	AlwaysOnRoleFailoverClusterNode      AlwaysOnRole = "FailoverClusterNode"
	AlwaysOnRoleNone                     AlwaysOnRole = "None"
)

// PossibleAlwaysOnRoleValues returns the possible values for the AlwaysOnRole const type.
func PossibleAlwaysOnRoleValues() []AlwaysOnRole {
	return []AlwaysOnRole{
		AlwaysOnRoleAvailabilityGroupReplica,
		AlwaysOnRoleFailoverClusterInstance,
		AlwaysOnRoleFailoverClusterNode,
		AlwaysOnRoleNone,
	}
}

// ArcSQLManagedInstanceLicenseType - The license type to apply for this managed instance.
type ArcSQLManagedInstanceLicenseType string

const (
	ArcSQLManagedInstanceLicenseTypeBasePrice        ArcSQLManagedInstanceLicenseType = "BasePrice"
	ArcSQLManagedInstanceLicenseTypeDisasterRecovery ArcSQLManagedInstanceLicenseType = "DisasterRecovery"
	ArcSQLManagedInstanceLicenseTypeLicenseIncluded  ArcSQLManagedInstanceLicenseType = "LicenseIncluded"
)

// PossibleArcSQLManagedInstanceLicenseTypeValues returns the possible values for the ArcSQLManagedInstanceLicenseType const type.
func PossibleArcSQLManagedInstanceLicenseTypeValues() []ArcSQLManagedInstanceLicenseType {
	return []ArcSQLManagedInstanceLicenseType{
		ArcSQLManagedInstanceLicenseTypeBasePrice,
		ArcSQLManagedInstanceLicenseTypeDisasterRecovery,
		ArcSQLManagedInstanceLicenseTypeLicenseIncluded,
	}
}

// ArcSQLServerLicenseType - SQL Server license type.
type ArcSQLServerLicenseType string

const (
	ArcSQLServerLicenseTypeFree        ArcSQLServerLicenseType = "Free"
	ArcSQLServerLicenseTypeHADR        ArcSQLServerLicenseType = "HADR"
	ArcSQLServerLicenseTypeLicenseOnly ArcSQLServerLicenseType = "LicenseOnly"
	ArcSQLServerLicenseTypePAYG        ArcSQLServerLicenseType = "PAYG"
	ArcSQLServerLicenseTypePaid        ArcSQLServerLicenseType = "Paid"
	ArcSQLServerLicenseTypeServerCAL   ArcSQLServerLicenseType = "ServerCAL"
	ArcSQLServerLicenseTypeUndefined   ArcSQLServerLicenseType = "Undefined"
)

// PossibleArcSQLServerLicenseTypeValues returns the possible values for the ArcSQLServerLicenseType const type.
func PossibleArcSQLServerLicenseTypeValues() []ArcSQLServerLicenseType {
	return []ArcSQLServerLicenseType{
		ArcSQLServerLicenseTypeFree,
		ArcSQLServerLicenseTypeHADR,
		ArcSQLServerLicenseTypeLicenseOnly,
		ArcSQLServerLicenseTypePAYG,
		ArcSQLServerLicenseTypePaid,
		ArcSQLServerLicenseTypeServerCAL,
		ArcSQLServerLicenseTypeUndefined,
	}
}

// ConnectionStatus - The cloud connectivity status.
type ConnectionStatus string

const (
	ConnectionStatusConnected    ConnectionStatus = "Connected"
	ConnectionStatusDisconnected ConnectionStatus = "Disconnected"
	ConnectionStatusRegistered   ConnectionStatus = "Registered"
	ConnectionStatusUnknown      ConnectionStatus = "Unknown"
)

// PossibleConnectionStatusValues returns the possible values for the ConnectionStatus const type.
func PossibleConnectionStatusValues() []ConnectionStatus {
	return []ConnectionStatus{
		ConnectionStatusConnected,
		ConnectionStatusDisconnected,
		ConnectionStatusRegistered,
		ConnectionStatusUnknown,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DatabaseCreateMode - Database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of
// an existing database. sourceDatabaseId and restorePointInTime must be specified.
type DatabaseCreateMode string

const (
	DatabaseCreateModeDefault            DatabaseCreateMode = "Default"
	DatabaseCreateModePointInTimeRestore DatabaseCreateMode = "PointInTimeRestore"
)

// PossibleDatabaseCreateModeValues returns the possible values for the DatabaseCreateMode const type.
func PossibleDatabaseCreateModeValues() []DatabaseCreateMode {
	return []DatabaseCreateMode{
		DatabaseCreateModeDefault,
		DatabaseCreateModePointInTimeRestore,
	}
}

// DatabaseState - State of the database.
type DatabaseState string

const (
	DatabaseStateCopying          DatabaseState = "Copying"
	DatabaseStateEmergency        DatabaseState = "Emergency"
	DatabaseStateOffline          DatabaseState = "Offline"
	DatabaseStateOfflineSecondary DatabaseState = "OfflineSecondary"
	DatabaseStateOnline           DatabaseState = "Online"
	DatabaseStateRecovering       DatabaseState = "Recovering"
	DatabaseStateRecoveryPending  DatabaseState = "RecoveryPending"
	DatabaseStateRestoring        DatabaseState = "Restoring"
	DatabaseStateSuspect          DatabaseState = "Suspect"
)

// PossibleDatabaseStateValues returns the possible values for the DatabaseState const type.
func PossibleDatabaseStateValues() []DatabaseState {
	return []DatabaseState{
		DatabaseStateCopying,
		DatabaseStateEmergency,
		DatabaseStateOffline,
		DatabaseStateOfflineSecondary,
		DatabaseStateOnline,
		DatabaseStateRecovering,
		DatabaseStateRecoveryPending,
		DatabaseStateRestoring,
		DatabaseStateSuspect,
	}
}

// DefenderStatus - Status of Azure Defender.
type DefenderStatus string

const (
	DefenderStatusProtected   DefenderStatus = "Protected"
	DefenderStatusUnknown     DefenderStatus = "Unknown"
	DefenderStatusUnprotected DefenderStatus = "Unprotected"
)

// PossibleDefenderStatusValues returns the possible values for the DefenderStatus const type.
func PossibleDefenderStatusValues() []DefenderStatus {
	return []DefenderStatus{
		DefenderStatusProtected,
		DefenderStatusUnknown,
		DefenderStatusUnprotected,
	}
}

// DifferentialBackupHours - The differential backup interval in hours.
type DifferentialBackupHours int32

const (
	DifferentialBackupHoursTwelve     DifferentialBackupHours = 12
	DifferentialBackupHoursTwentyFour DifferentialBackupHours = 24
)

// PossibleDifferentialBackupHoursValues returns the possible values for the DifferentialBackupHours const type.
func PossibleDifferentialBackupHoursValues() []DifferentialBackupHours {
	return []DifferentialBackupHours{
		DifferentialBackupHoursTwelve,
		DifferentialBackupHoursTwentyFour,
	}
}

// EditionType - SQL Server edition.
type EditionType string

const (
	EditionTypeBusinessIntelligence EditionType = "Business Intelligence"
	EditionTypeDeveloper            EditionType = "Developer"
	EditionTypeEnterprise           EditionType = "Enterprise"
	EditionTypeEvaluation           EditionType = "Evaluation"
	EditionTypeExpress              EditionType = "Express"
	EditionTypeStandard             EditionType = "Standard"
	EditionTypeWeb                  EditionType = "Web"
)

// PossibleEditionTypeValues returns the possible values for the EditionType const type.
func PossibleEditionTypeValues() []EditionType {
	return []EditionType{
		EditionTypeBusinessIntelligence,
		EditionTypeDeveloper,
		EditionTypeEnterprise,
		EditionTypeEvaluation,
		EditionTypeExpress,
		EditionTypeStandard,
		EditionTypeWeb,
	}
}

// ExtendedLocationTypes - The type of extendedLocation.
type ExtendedLocationTypes string

const (
	ExtendedLocationTypesCustomLocation ExtendedLocationTypes = "CustomLocation"
)

// PossibleExtendedLocationTypesValues returns the possible values for the ExtendedLocationTypes const type.
func PossibleExtendedLocationTypesValues() []ExtendedLocationTypes {
	return []ExtendedLocationTypes{
		ExtendedLocationTypesCustomLocation,
	}
}

// FailoverGroupPartnerSyncMode - The partner sync mode of the SQL managed instance.
type FailoverGroupPartnerSyncMode string

const (
	FailoverGroupPartnerSyncModeAsync FailoverGroupPartnerSyncMode = "async"
	FailoverGroupPartnerSyncModeSync  FailoverGroupPartnerSyncMode = "sync"
)

// PossibleFailoverGroupPartnerSyncModeValues returns the possible values for the FailoverGroupPartnerSyncMode const type.
func PossibleFailoverGroupPartnerSyncModeValues() []FailoverGroupPartnerSyncMode {
	return []FailoverGroupPartnerSyncMode{
		FailoverGroupPartnerSyncModeAsync,
		FailoverGroupPartnerSyncModeSync,
	}
}

// HostType - Type of host for Azure Arc SQL Server
type HostType string

const (
	HostTypeAWSKubernetesService      HostType = "AWS Kubernetes Service"
	HostTypeAWSVMWareVirtualMachine   HostType = "AWS VMWare Virtual Machine"
	HostTypeAWSVirtualMachine         HostType = "AWS Virtual Machine"
	HostTypeAzureKubernetesService    HostType = "Azure Kubernetes Service"
	HostTypeAzureVMWareVirtualMachine HostType = "Azure VMWare Virtual Machine"
	HostTypeAzureVirtualMachine       HostType = "Azure Virtual Machine"
	HostTypeContainer                 HostType = "Container"
	HostTypeGCPKubernetesService      HostType = "GCP Kubernetes Service"
	HostTypeGCPVMWareVirtualMachine   HostType = "GCP VMWare Virtual Machine"
	HostTypeGCPVirtualMachine         HostType = "GCP Virtual Machine"
	HostTypeOther                     HostType = "Other"
	HostTypePhysicalServer            HostType = "Physical Server"
	HostTypeVirtualMachine            HostType = "Virtual Machine"
)

// PossibleHostTypeValues returns the possible values for the HostType const type.
func PossibleHostTypeValues() []HostType {
	return []HostType{
		HostTypeAWSKubernetesService,
		HostTypeAWSVMWareVirtualMachine,
		HostTypeAWSVirtualMachine,
		HostTypeAzureKubernetesService,
		HostTypeAzureVMWareVirtualMachine,
		HostTypeAzureVirtualMachine,
		HostTypeContainer,
		HostTypeGCPKubernetesService,
		HostTypeGCPVMWareVirtualMachine,
		HostTypeGCPVirtualMachine,
		HostTypeOther,
		HostTypePhysicalServer,
		HostTypeVirtualMachine,
	}
}

// Infrastructure - The infrastructure the data controller is running on.
type Infrastructure string

const (
	InfrastructureAlibaba    Infrastructure = "alibaba"
	InfrastructureAws        Infrastructure = "aws"
	InfrastructureAzure      Infrastructure = "azure"
	InfrastructureGcp        Infrastructure = "gcp"
	InfrastructureOnpremises Infrastructure = "onpremises"
	InfrastructureOther      Infrastructure = "other"
)

// PossibleInfrastructureValues returns the possible values for the Infrastructure const type.
func PossibleInfrastructureValues() []Infrastructure {
	return []Infrastructure{
		InfrastructureAlibaba,
		InfrastructureAws,
		InfrastructureAzure,
		InfrastructureGcp,
		InfrastructureOnpremises,
		InfrastructureOther,
	}
}

// InstanceFailoverGroupRole - The role of the SQL managed instance in this failover group.
type InstanceFailoverGroupRole string

const (
	InstanceFailoverGroupRoleForcePrimaryAllowDataLoss InstanceFailoverGroupRole = "force-primary-allow-data-loss"
	InstanceFailoverGroupRoleForceSecondary            InstanceFailoverGroupRole = "force-secondary"
	InstanceFailoverGroupRolePrimary                   InstanceFailoverGroupRole = "primary"
	InstanceFailoverGroupRoleSecondary                 InstanceFailoverGroupRole = "secondary"
)

// PossibleInstanceFailoverGroupRoleValues returns the possible values for the InstanceFailoverGroupRole const type.
func PossibleInstanceFailoverGroupRoleValues() []InstanceFailoverGroupRole {
	return []InstanceFailoverGroupRole{
		InstanceFailoverGroupRoleForcePrimaryAllowDataLoss,
		InstanceFailoverGroupRoleForceSecondary,
		InstanceFailoverGroupRolePrimary,
		InstanceFailoverGroupRoleSecondary,
	}
}

// OperationOrigin - The intended executor of the operation.
type OperationOrigin string

const (
	OperationOriginSystem OperationOrigin = "system"
	OperationOriginUser   OperationOrigin = "user"
)

// PossibleOperationOriginValues returns the possible values for the OperationOrigin const type.
func PossibleOperationOriginValues() []OperationOrigin {
	return []OperationOrigin{
		OperationOriginSystem,
		OperationOriginUser,
	}
}

// ProvisioningState - The provisioning state of the failover group resource.
type ProvisioningState string

const (
	ProvisioningStateAccepted  ProvisioningState = "Accepted"
	ProvisioningStateCanceled  ProvisioningState = "Canceled"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateAccepted,
		ProvisioningStateCanceled,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
	}
}

// RecoveryMode - Status of the database.
type RecoveryMode string

const (
	RecoveryModeBulkLogged RecoveryMode = "Bulk-logged"
	RecoveryModeFull       RecoveryMode = "Full"
	RecoveryModeSimple     RecoveryMode = "Simple"
)

// PossibleRecoveryModeValues returns the possible values for the RecoveryMode const type.
func PossibleRecoveryModeValues() []RecoveryMode {
	return []RecoveryMode{
		RecoveryModeBulkLogged,
		RecoveryModeFull,
		RecoveryModeSimple,
	}
}

type ReplicationPartnerType string

const (
	ReplicationPartnerTypeAzureSQLManagedInstance ReplicationPartnerType = "AzureSQLManagedInstance"
	ReplicationPartnerTypeAzureSQLVM              ReplicationPartnerType = "AzureSQLVM"
	ReplicationPartnerTypeSQLServer               ReplicationPartnerType = "SQLServer"
	ReplicationPartnerTypeUnknown                 ReplicationPartnerType = "Unknown"
)

// PossibleReplicationPartnerTypeValues returns the possible values for the ReplicationPartnerType const type.
func PossibleReplicationPartnerTypeValues() []ReplicationPartnerType {
	return []ReplicationPartnerType{
		ReplicationPartnerTypeAzureSQLManagedInstance,
		ReplicationPartnerTypeAzureSQLVM,
		ReplicationPartnerTypeSQLServer,
		ReplicationPartnerTypeUnknown,
	}
}

// SQLManagedInstanceSKUTier - The pricing tier for the instance.
type SQLManagedInstanceSKUTier string

const (
	SQLManagedInstanceSKUTierBusinessCritical SQLManagedInstanceSKUTier = "BusinessCritical"
	SQLManagedInstanceSKUTierGeneralPurpose   SQLManagedInstanceSKUTier = "GeneralPurpose"
)

// PossibleSQLManagedInstanceSKUTierValues returns the possible values for the SQLManagedInstanceSKUTier const type.
func PossibleSQLManagedInstanceSKUTierValues() []SQLManagedInstanceSKUTier {
	return []SQLManagedInstanceSKUTier{
		SQLManagedInstanceSKUTierBusinessCritical,
		SQLManagedInstanceSKUTierGeneralPurpose,
	}
}

// SQLServerInstanceTelemetryColumnType - The type of the telemetry column.
type SQLServerInstanceTelemetryColumnType string

const (
	SQLServerInstanceTelemetryColumnTypeBool     SQLServerInstanceTelemetryColumnType = "bool"
	SQLServerInstanceTelemetryColumnTypeDatetime SQLServerInstanceTelemetryColumnType = "datetime"
	SQLServerInstanceTelemetryColumnTypeDouble   SQLServerInstanceTelemetryColumnType = "double"
	SQLServerInstanceTelemetryColumnTypeGUID     SQLServerInstanceTelemetryColumnType = "guid"
	SQLServerInstanceTelemetryColumnTypeInt      SQLServerInstanceTelemetryColumnType = "int"
	SQLServerInstanceTelemetryColumnTypeLong     SQLServerInstanceTelemetryColumnType = "long"
	SQLServerInstanceTelemetryColumnTypeString   SQLServerInstanceTelemetryColumnType = "string"
	SQLServerInstanceTelemetryColumnTypeTimespan SQLServerInstanceTelemetryColumnType = "timespan"
)

// PossibleSQLServerInstanceTelemetryColumnTypeValues returns the possible values for the SQLServerInstanceTelemetryColumnType const type.
func PossibleSQLServerInstanceTelemetryColumnTypeValues() []SQLServerInstanceTelemetryColumnType {
	return []SQLServerInstanceTelemetryColumnType{
		SQLServerInstanceTelemetryColumnTypeBool,
		SQLServerInstanceTelemetryColumnTypeDatetime,
		SQLServerInstanceTelemetryColumnTypeDouble,
		SQLServerInstanceTelemetryColumnTypeGUID,
		SQLServerInstanceTelemetryColumnTypeInt,
		SQLServerInstanceTelemetryColumnTypeLong,
		SQLServerInstanceTelemetryColumnTypeString,
		SQLServerInstanceTelemetryColumnTypeTimespan,
	}
}

// SQLVersion - SQL Server version.
type SQLVersion string

const (
	SQLVersionSQLServer2012 SQLVersion = "SQL Server 2012"
	SQLVersionSQLServer2014 SQLVersion = "SQL Server 2014"
	SQLVersionSQLServer2016 SQLVersion = "SQL Server 2016"
	SQLVersionSQLServer2017 SQLVersion = "SQL Server 2017"
	SQLVersionSQLServer2019 SQLVersion = "SQL Server 2019"
	SQLVersionSQLServer2022 SQLVersion = "SQL Server 2022"
	SQLVersionUnknown       SQLVersion = "Unknown"
)

// PossibleSQLVersionValues returns the possible values for the SQLVersion const type.
func PossibleSQLVersionValues() []SQLVersion {
	return []SQLVersion{
		SQLVersionSQLServer2012,
		SQLVersionSQLServer2014,
		SQLVersionSQLServer2016,
		SQLVersionSQLServer2017,
		SQLVersionSQLServer2019,
		SQLVersionSQLServer2022,
		SQLVersionUnknown,
	}
}
