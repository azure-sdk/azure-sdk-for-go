//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapimanagement

const (
	moduleName    = "armapimanagement"
	moduleVersion = "v2.0.0"
)

// APIType - Type of API.
type APIType string

const (
	APITypeHTTP APIType = "http"
	APITypeSoap APIType = "soap"
)

// PossibleAPITypeValues returns the possible values for the APIType const type.
func PossibleAPITypeValues() []APIType {
	return []APIType{
		APITypeHTTP,
		APITypeSoap,
	}
}

type AccessIDName string

const (
	AccessIDNameAccess AccessIDName = "access"
)

// PossibleAccessIDNameValues returns the possible values for the AccessIDName const type.
func PossibleAccessIDNameValues() []AccessIDName {
	return []AccessIDName{
		AccessIDNameAccess,
	}
}

// ApimIdentityType - The identity type. Currently the only supported type is 'SystemAssigned'.
type ApimIdentityType string

const (
	ApimIdentityTypeSystemAssigned ApimIdentityType = "SystemAssigned"
)

// PossibleApimIdentityTypeValues returns the possible values for the ApimIdentityType const type.
func PossibleApimIdentityTypeValues() []ApimIdentityType {
	return []ApimIdentityType{
		ApimIdentityTypeSystemAssigned,
	}
}

// AsyncOperationStatus - Status of an async operation.
type AsyncOperationStatus string

const (
	AsyncOperationStatusStarted    AsyncOperationStatus = "Started"
	AsyncOperationStatusInProgress AsyncOperationStatus = "InProgress"
	AsyncOperationStatusSucceeded  AsyncOperationStatus = "Succeeded"
	AsyncOperationStatusFailed     AsyncOperationStatus = "Failed"
)

// PossibleAsyncOperationStatusValues returns the possible values for the AsyncOperationStatus const type.
func PossibleAsyncOperationStatusValues() []AsyncOperationStatus {
	return []AsyncOperationStatus{
		AsyncOperationStatusStarted,
		AsyncOperationStatusInProgress,
		AsyncOperationStatusSucceeded,
		AsyncOperationStatusFailed,
	}
}

type AuthorizationMethod string

const (
	AuthorizationMethodHEAD    AuthorizationMethod = "HEAD"
	AuthorizationMethodOPTIONS AuthorizationMethod = "OPTIONS"
	AuthorizationMethodTRACE   AuthorizationMethod = "TRACE"
	AuthorizationMethodGET     AuthorizationMethod = "GET"
	AuthorizationMethodPOST    AuthorizationMethod = "POST"
	AuthorizationMethodPUT     AuthorizationMethod = "PUT"
	AuthorizationMethodPATCH   AuthorizationMethod = "PATCH"
	AuthorizationMethodDELETE  AuthorizationMethod = "DELETE"
)

// PossibleAuthorizationMethodValues returns the possible values for the AuthorizationMethod const type.
func PossibleAuthorizationMethodValues() []AuthorizationMethod {
	return []AuthorizationMethod{
		AuthorizationMethodHEAD,
		AuthorizationMethodOPTIONS,
		AuthorizationMethodTRACE,
		AuthorizationMethodGET,
		AuthorizationMethodPOST,
		AuthorizationMethodPUT,
		AuthorizationMethodPATCH,
		AuthorizationMethodDELETE,
	}
}

// BackendProtocol - Backend communication protocol.
type BackendProtocol string

const (
	// BackendProtocolHTTP - The Backend is a RESTful service.
	BackendProtocolHTTP BackendProtocol = "http"
	// BackendProtocolSoap - The Backend is a SOAP service.
	BackendProtocolSoap BackendProtocol = "soap"
)

// PossibleBackendProtocolValues returns the possible values for the BackendProtocol const type.
func PossibleBackendProtocolValues() []BackendProtocol {
	return []BackendProtocol{
		BackendProtocolHTTP,
		BackendProtocolSoap,
	}
}

type BearerTokenSendingMethod string

const (
	BearerTokenSendingMethodAuthorizationHeader BearerTokenSendingMethod = "authorizationHeader"
	BearerTokenSendingMethodQuery               BearerTokenSendingMethod = "query"
)

// PossibleBearerTokenSendingMethodValues returns the possible values for the BearerTokenSendingMethod const type.
func PossibleBearerTokenSendingMethodValues() []BearerTokenSendingMethod {
	return []BearerTokenSendingMethod{
		BearerTokenSendingMethodAuthorizationHeader,
		BearerTokenSendingMethodQuery,
	}
}

// CertificateConfigurationStoreName - The local certificate store location. Only Root and CertificateAuthority are valid
// locations.
type CertificateConfigurationStoreName string

const (
	CertificateConfigurationStoreNameCertificateAuthority CertificateConfigurationStoreName = "CertificateAuthority"
	CertificateConfigurationStoreNameRoot                 CertificateConfigurationStoreName = "Root"
)

// PossibleCertificateConfigurationStoreNameValues returns the possible values for the CertificateConfigurationStoreName const type.
func PossibleCertificateConfigurationStoreNameValues() []CertificateConfigurationStoreName {
	return []CertificateConfigurationStoreName{
		CertificateConfigurationStoreNameCertificateAuthority,
		CertificateConfigurationStoreNameRoot,
	}
}

type ClientAuthenticationMethod string

const (
	// ClientAuthenticationMethodBasic - Basic Client Authentication method.
	ClientAuthenticationMethodBasic ClientAuthenticationMethod = "Basic"
	// ClientAuthenticationMethodBody - Body based Authentication method.
	ClientAuthenticationMethodBody ClientAuthenticationMethod = "Body"
)

// PossibleClientAuthenticationMethodValues returns the possible values for the ClientAuthenticationMethod const type.
func PossibleClientAuthenticationMethodValues() []ClientAuthenticationMethod {
	return []ClientAuthenticationMethod{
		ClientAuthenticationMethodBasic,
		ClientAuthenticationMethodBody,
	}
}

type ConfigurationIDName string

const (
	ConfigurationIDNameConfiguration ConfigurationIDName = "configuration"
)

// PossibleConfigurationIDNameValues returns the possible values for the ConfigurationIDName const type.
func PossibleConfigurationIDNameValues() []ConfigurationIDName {
	return []ConfigurationIDName{
		ConfigurationIDNameConfiguration,
	}
}

// Confirmation - Determines the type of confirmation e-mail that will be sent to the newly created user.
type Confirmation string

const (
	// ConfirmationInvite - Send an e-mail inviting the user to sign-up and complete registration.
	ConfirmationInvite Confirmation = "invite"
	// ConfirmationSignup - Send an e-mail to the user confirming they have successfully signed up.
	ConfirmationSignup Confirmation = "signup"
)

// PossibleConfirmationValues returns the possible values for the Confirmation const type.
func PossibleConfirmationValues() []Confirmation {
	return []Confirmation{
		ConfirmationInvite,
		ConfirmationSignup,
	}
}

// ConnectivityStatusType - Resource Connectivity Status Type identifier.
type ConnectivityStatusType string

const (
	ConnectivityStatusTypeFailure      ConnectivityStatusType = "failure"
	ConnectivityStatusTypeInitializing ConnectivityStatusType = "initializing"
	ConnectivityStatusTypeSuccess      ConnectivityStatusType = "success"
)

// PossibleConnectivityStatusTypeValues returns the possible values for the ConnectivityStatusType const type.
func PossibleConnectivityStatusTypeValues() []ConnectivityStatusType {
	return []ConnectivityStatusType{
		ConnectivityStatusTypeFailure,
		ConnectivityStatusTypeInitializing,
		ConnectivityStatusTypeSuccess,
	}
}

// ContentFormat - Format of the Content in which the API is getting imported.
type ContentFormat string

const (
	// ContentFormatSwaggerJSON - The contents are inline and Content Type is a OpenApi 2.0 Document.
	ContentFormatSwaggerJSON ContentFormat = "swagger-json"
	// ContentFormatSwaggerLinkJSON - The Open Api 2.0 document is hosted on a publicly accessible internet address.
	ContentFormatSwaggerLinkJSON ContentFormat = "swagger-link-json"
	// ContentFormatWadlLinkJSON - The WADL document is hosted on a publicly accessible internet address.
	ContentFormatWadlLinkJSON ContentFormat = "wadl-link-json"
	// ContentFormatWadlXML - The contents are inline and Content type is a WADL document.
	ContentFormatWadlXML ContentFormat = "wadl-xml"
	// ContentFormatWsdl - The contents are inline and the document is a WSDL/Soap document.
	ContentFormatWsdl ContentFormat = "wsdl"
	// ContentFormatWsdlLink - The WSDL document is hosted on a publicly accessible internet address.
	ContentFormatWsdlLink ContentFormat = "wsdl-link"
)

// PossibleContentFormatValues returns the possible values for the ContentFormat const type.
func PossibleContentFormatValues() []ContentFormat {
	return []ContentFormat{
		ContentFormatSwaggerJSON,
		ContentFormatSwaggerLinkJSON,
		ContentFormatWadlLinkJSON,
		ContentFormatWadlXML,
		ContentFormatWsdl,
		ContentFormatWsdlLink,
	}
}

type ExportAPI string

const (
	ExportAPITrue ExportAPI = "true"
)

// PossibleExportAPIValues returns the possible values for the ExportAPI const type.
func PossibleExportAPIValues() []ExportAPI {
	return []ExportAPI{
		ExportAPITrue,
	}
}

type ExportFormat string

const (
	// ExportFormatOpenApi2 - Export the Api Definition in OpenApi Specification 2.0 format to the Storage Blob.
	ExportFormatOpenApi2 ExportFormat = "application/vnd.swagger.link+json"
	// ExportFormatWadl - Export the Api Definition in WADL Schema to Storage Blob.
	ExportFormatWadl ExportFormat = "application/vnd.sun.wadl.link+json"
	// ExportFormatWsdl - Export the Api Definition in WSDL Schema to Storage Blob.
	ExportFormatWsdl ExportFormat = "application/vnd.ms.wsdl.link+xml"
)

// PossibleExportFormatValues returns the possible values for the ExportFormat const type.
func PossibleExportFormatValues() []ExportFormat {
	return []ExportFormat{
		ExportFormatOpenApi2,
		ExportFormatWadl,
		ExportFormatWsdl,
	}
}

type GrantType string

const (
	// GrantTypeAuthorizationCode - Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
	GrantTypeAuthorizationCode GrantType = "authorizationCode"
	// GrantTypeClientCredentials - Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
	GrantTypeClientCredentials GrantType = "clientCredentials"
	// GrantTypeImplicit - Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
	GrantTypeImplicit GrantType = "implicit"
	// GrantTypeResourceOwnerPassword - Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3.
	GrantTypeResourceOwnerPassword GrantType = "resourceOwnerPassword"
)

// PossibleGrantTypeValues returns the possible values for the GrantType const type.
func PossibleGrantTypeValues() []GrantType {
	return []GrantType{
		GrantTypeAuthorizationCode,
		GrantTypeClientCredentials,
		GrantTypeImplicit,
		GrantTypeResourceOwnerPassword,
	}
}

// GroupType - Group type.
type GroupType string

const (
	GroupTypeCustom   GroupType = "custom"
	GroupTypeSystem   GroupType = "system"
	GroupTypeExternal GroupType = "external"
)

// PossibleGroupTypeValues returns the possible values for the GroupType const type.
func PossibleGroupTypeValues() []GroupType {
	return []GroupType{
		GroupTypeCustom,
		GroupTypeSystem,
		GroupTypeExternal,
	}
}

// HostnameType - Hostname type.
type HostnameType string

const (
	HostnameTypeProxy      HostnameType = "Proxy"
	HostnameTypePortal     HostnameType = "Portal"
	HostnameTypeManagement HostnameType = "Management"
	HostnameTypeScm        HostnameType = "Scm"
)

// PossibleHostnameTypeValues returns the possible values for the HostnameType const type.
func PossibleHostnameTypeValues() []HostnameType {
	return []HostnameType{
		HostnameTypeProxy,
		HostnameTypePortal,
		HostnameTypeManagement,
		HostnameTypeScm,
	}
}

// IdentityProviderType - Identity Provider Type identifier.
type IdentityProviderType string

const (
	// IdentityProviderTypeAAD - Azure Active Directory as Identity provider.
	IdentityProviderTypeAAD IdentityProviderType = "aad"
	// IdentityProviderTypeAADB2C - Azure Active Directory B2C as Identity provider.
	IdentityProviderTypeAADB2C IdentityProviderType = "aadB2C"
	// IdentityProviderTypeFacebook - Facebook as Identity provider.
	IdentityProviderTypeFacebook IdentityProviderType = "facebook"
	// IdentityProviderTypeGoogle - Google as Identity provider.
	IdentityProviderTypeGoogle IdentityProviderType = "google"
	// IdentityProviderTypeMicrosoft - Microsoft Live as Identity provider.
	IdentityProviderTypeMicrosoft IdentityProviderType = "microsoft"
	// IdentityProviderTypeTwitter - Twitter as Identity provider.
	IdentityProviderTypeTwitter IdentityProviderType = "twitter"
)

// PossibleIdentityProviderTypeValues returns the possible values for the IdentityProviderType const type.
func PossibleIdentityProviderTypeValues() []IdentityProviderType {
	return []IdentityProviderType{
		IdentityProviderTypeAAD,
		IdentityProviderTypeAADB2C,
		IdentityProviderTypeFacebook,
		IdentityProviderTypeGoogle,
		IdentityProviderTypeMicrosoft,
		IdentityProviderTypeTwitter,
	}
}

// KeyType - The Key to be used to generate token for user.
type KeyType string

const (
	KeyTypePrimary   KeyType = "primary"
	KeyTypeSecondary KeyType = "secondary"
)

// PossibleKeyTypeValues returns the possible values for the KeyType const type.
func PossibleKeyTypeValues() []KeyType {
	return []KeyType{
		KeyTypePrimary,
		KeyTypeSecondary,
	}
}

// LoggerType - Logger type.
type LoggerType string

const (
	// LoggerTypeApplicationInsights - Azure Application Insights as log destination.
	LoggerTypeApplicationInsights LoggerType = "applicationInsights"
	// LoggerTypeAzureEventHub - Azure Event Hub as log destination.
	LoggerTypeAzureEventHub LoggerType = "azureEventHub"
)

// PossibleLoggerTypeValues returns the possible values for the LoggerType const type.
func PossibleLoggerTypeValues() []LoggerType {
	return []LoggerType{
		LoggerTypeApplicationInsights,
		LoggerTypeAzureEventHub,
	}
}

// NameAvailabilityReason - Invalid indicates the name provided does not match the resource provider’s naming requirements
// (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use
// and is therefore unavailable.
type NameAvailabilityReason string

const (
	NameAvailabilityReasonValid         NameAvailabilityReason = "Valid"
	NameAvailabilityReasonInvalid       NameAvailabilityReason = "Invalid"
	NameAvailabilityReasonAlreadyExists NameAvailabilityReason = "AlreadyExists"
)

// PossibleNameAvailabilityReasonValues returns the possible values for the NameAvailabilityReason const type.
func PossibleNameAvailabilityReasonValues() []NameAvailabilityReason {
	return []NameAvailabilityReason{
		NameAvailabilityReasonValid,
		NameAvailabilityReasonInvalid,
		NameAvailabilityReasonAlreadyExists,
	}
}

type NotificationName string

const (
	// NotificationNameRequestPublisherNotificationMessage - The following email recipients and users will receive email notifications
	// about subscription requests for API products requiring approval.
	NotificationNameRequestPublisherNotificationMessage NotificationName = "RequestPublisherNotificationMessage"
	// NotificationNamePurchasePublisherNotificationMessage - The following email recipients and users will receive email notifications
	// about new API product subscriptions.
	NotificationNamePurchasePublisherNotificationMessage NotificationName = "PurchasePublisherNotificationMessage"
	// NotificationNameNewApplicationNotificationMessage - The following email recipients and users will receive email notifications
	// when new applications are submitted to the application gallery.
	NotificationNameNewApplicationNotificationMessage NotificationName = "NewApplicationNotificationMessage"
	// NotificationNameBCC - The following recipients will receive blind carbon copies of all emails sent to developers.
	NotificationNameBCC NotificationName = "BCC"
	// NotificationNameNewIssuePublisherNotificationMessage - The following email recipients and users will receive email notifications
	// when a new issue or comment is submitted on the developer portal.
	NotificationNameNewIssuePublisherNotificationMessage NotificationName = "NewIssuePublisherNotificationMessage"
	// NotificationNameAccountClosedPublisher - The following email recipients and users will receive email notifications when
	// developer closes his account.
	NotificationNameAccountClosedPublisher NotificationName = "AccountClosedPublisher"
	// NotificationNameQuotaLimitApproachingPublisherNotificationMessage - The following email recipients and users will receive
	// email notifications when subscription usage gets close to usage quota.
	NotificationNameQuotaLimitApproachingPublisherNotificationMessage NotificationName = "QuotaLimitApproachingPublisherNotificationMessage"
)

// PossibleNotificationNameValues returns the possible values for the NotificationName const type.
func PossibleNotificationNameValues() []NotificationName {
	return []NotificationName{
		NotificationNameRequestPublisherNotificationMessage,
		NotificationNamePurchasePublisherNotificationMessage,
		NotificationNameNewApplicationNotificationMessage,
		NotificationNameBCC,
		NotificationNameNewIssuePublisherNotificationMessage,
		NotificationNameAccountClosedPublisher,
		NotificationNameQuotaLimitApproachingPublisherNotificationMessage,
	}
}

type PolicyIDName string

const (
	PolicyIDNamePolicy PolicyIDName = "policy"
)

// PossiblePolicyIDNameValues returns the possible values for the PolicyIDName const type.
func PossiblePolicyIDNameValues() []PolicyIDName {
	return []PolicyIDName{
		PolicyIDNamePolicy,
	}
}

type PolicyScopeContract string

const (
	PolicyScopeContractTenant    PolicyScopeContract = "Tenant"
	PolicyScopeContractProduct   PolicyScopeContract = "Product"
	PolicyScopeContractAPI       PolicyScopeContract = "Api"
	PolicyScopeContractOperation PolicyScopeContract = "Operation"
	PolicyScopeContractAll       PolicyScopeContract = "All"
)

// PossiblePolicyScopeContractValues returns the possible values for the PolicyScopeContract const type.
func PossiblePolicyScopeContractValues() []PolicyScopeContract {
	return []PolicyScopeContract{
		PolicyScopeContractTenant,
		PolicyScopeContractProduct,
		PolicyScopeContractAPI,
		PolicyScopeContractOperation,
		PolicyScopeContractAll,
	}
}

// ProductState - whether product is published or not. Published products are discoverable by users of developer portal. Non
// published products are visible only to administrators. Default state of Product is
// notPublished.
type ProductState string

const (
	ProductStateNotPublished ProductState = "notPublished"
	ProductStatePublished    ProductState = "published"
)

// PossibleProductStateValues returns the possible values for the ProductState const type.
func PossibleProductStateValues() []ProductState {
	return []ProductState{
		ProductStateNotPublished,
		ProductStatePublished,
	}
}

type Protocol string

const (
	ProtocolHTTP  Protocol = "http"
	ProtocolHTTPS Protocol = "https"
)

// PossibleProtocolValues returns the possible values for the Protocol const type.
func PossibleProtocolValues() []Protocol {
	return []Protocol{
		ProtocolHTTP,
		ProtocolHTTPS,
	}
}

// SKUType - Name of the Sku.
type SKUType string

const (
	// SKUTypeBasic - Basic SKU of Api Management.
	SKUTypeBasic SKUType = "Basic"
	// SKUTypeDeveloper - Developer SKU of Api Management.
	SKUTypeDeveloper SKUType = "Developer"
	// SKUTypePremium - Premium SKU of Api Management.
	SKUTypePremium SKUType = "Premium"
	// SKUTypeStandard - Standard SKU of Api Management.
	SKUTypeStandard SKUType = "Standard"
)

// PossibleSKUTypeValues returns the possible values for the SKUType const type.
func PossibleSKUTypeValues() []SKUType {
	return []SKUType{
		SKUTypeBasic,
		SKUTypeDeveloper,
		SKUTypePremium,
		SKUTypeStandard,
	}
}

// SamplingType - Sampling type.
type SamplingType string

const (
	// SamplingTypeAdaptive - Sampling with a dynamically adjustable rate.
	SamplingTypeAdaptive SamplingType = "adaptive"
	// SamplingTypeFixed - Fixed-rate sampling.
	SamplingTypeFixed SamplingType = "fixed"
)

// PossibleSamplingTypeValues returns the possible values for the SamplingType const type.
func PossibleSamplingTypeValues() []SamplingType {
	return []SamplingType{
		SamplingTypeAdaptive,
		SamplingTypeFixed,
	}
}

// State - Status of the issue.
type State string

const (
	// StateClosed - The issue was closed.
	StateClosed State = "closed"
	// StateOpen - The issue is opened.
	StateOpen State = "open"
	// StateProposed - The issue is proposed.
	StateProposed State = "proposed"
	// StateRemoved - The issue was removed.
	StateRemoved State = "removed"
	// StateResolved - The issue is now resolved.
	StateResolved State = "resolved"
)

// PossibleStateValues returns the possible values for the State const type.
func PossibleStateValues() []State {
	return []State{
		StateClosed,
		StateOpen,
		StateProposed,
		StateRemoved,
		StateResolved,
	}
}

// SubscriptionState - Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription
// is blocked, and the subscriber cannot call any APIs of the product, * submitted – the
// subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription
// request has been denied by an administrator, * cancelled – the
// subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration
// date and was deactivated.
type SubscriptionState string

const (
	SubscriptionStateSuspended SubscriptionState = "suspended"
	SubscriptionStateActive    SubscriptionState = "active"
	SubscriptionStateExpired   SubscriptionState = "expired"
	SubscriptionStateSubmitted SubscriptionState = "submitted"
	SubscriptionStateRejected  SubscriptionState = "rejected"
	SubscriptionStateCancelled SubscriptionState = "cancelled"
)

// PossibleSubscriptionStateValues returns the possible values for the SubscriptionState const type.
func PossibleSubscriptionStateValues() []SubscriptionState {
	return []SubscriptionState{
		SubscriptionStateSuspended,
		SubscriptionStateActive,
		SubscriptionStateExpired,
		SubscriptionStateSubmitted,
		SubscriptionStateRejected,
		SubscriptionStateCancelled,
	}
}

type TemplateName string

const (
	TemplateNameAccountClosedDeveloper                            TemplateName = "accountClosedDeveloper"
	TemplateNameApplicationApprovedNotificationMessage            TemplateName = "applicationApprovedNotificationMessage"
	TemplateNameConfirmSignUpIdentityDefault                      TemplateName = "confirmSignUpIdentityDefault"
	TemplateNameEmailChangeIdentityDefault                        TemplateName = "emailChangeIdentityDefault"
	TemplateNameInviteUserNotificationMessage                     TemplateName = "inviteUserNotificationMessage"
	TemplateNameNewCommentNotificationMessage                     TemplateName = "newCommentNotificationMessage"
	TemplateNameNewDeveloperNotificationMessage                   TemplateName = "newDeveloperNotificationMessage"
	TemplateNameNewIssueNotificationMessage                       TemplateName = "newIssueNotificationMessage"
	TemplateNamePasswordResetByAdminNotificationMessage           TemplateName = "passwordResetByAdminNotificationMessage"
	TemplateNamePasswordResetIdentityDefault                      TemplateName = "passwordResetIdentityDefault"
	TemplateNamePurchaseDeveloperNotificationMessage              TemplateName = "purchaseDeveloperNotificationMessage"
	TemplateNameQuotaLimitApproachingDeveloperNotificationMessage TemplateName = "quotaLimitApproachingDeveloperNotificationMessage"
	TemplateNameRejectDeveloperNotificationMessage                TemplateName = "rejectDeveloperNotificationMessage"
	TemplateNameRequestDeveloperNotificationMessage               TemplateName = "requestDeveloperNotificationMessage"
)

// PossibleTemplateNameValues returns the possible values for the TemplateName const type.
func PossibleTemplateNameValues() []TemplateName {
	return []TemplateName{
		TemplateNameAccountClosedDeveloper,
		TemplateNameApplicationApprovedNotificationMessage,
		TemplateNameConfirmSignUpIdentityDefault,
		TemplateNameEmailChangeIdentityDefault,
		TemplateNameInviteUserNotificationMessage,
		TemplateNameNewCommentNotificationMessage,
		TemplateNameNewDeveloperNotificationMessage,
		TemplateNameNewIssueNotificationMessage,
		TemplateNamePasswordResetByAdminNotificationMessage,
		TemplateNamePasswordResetIdentityDefault,
		TemplateNamePurchaseDeveloperNotificationMessage,
		TemplateNameQuotaLimitApproachingDeveloperNotificationMessage,
		TemplateNameRejectDeveloperNotificationMessage,
		TemplateNameRequestDeveloperNotificationMessage,
	}
}

// UserState - Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer
// portal or call any APIs of subscribed products. Default state is Active.
type UserState string

const (
	// UserStateActive - User state is active.
	UserStateActive UserState = "active"
	// UserStateBlocked - User is blocked. Blocked users cannot authenticate at developer portal or call API.
	UserStateBlocked UserState = "blocked"
	// UserStateDeleted - User account is closed. All identities and related entities are removed.
	UserStateDeleted UserState = "deleted"
	// UserStatePending - User account is pending. Requires identity confirmation before it can be made active.
	UserStatePending UserState = "pending"
)

// PossibleUserStateValues returns the possible values for the UserState const type.
func PossibleUserStateValues() []UserState {
	return []UserState{
		UserStateActive,
		UserStateBlocked,
		UserStateDeleted,
		UserStatePending,
	}
}

// VersioningScheme - An value that determines where the API Version identifier will be located in a HTTP request.
type VersioningScheme string

const (
	// VersioningSchemeHeader - The API Version is passed in a HTTP header.
	VersioningSchemeHeader VersioningScheme = "Header"
	// VersioningSchemeQuery - The API Version is passed in a query parameter.
	VersioningSchemeQuery VersioningScheme = "Query"
	// VersioningSchemeSegment - The API Version is passed in a path segment.
	VersioningSchemeSegment VersioningScheme = "Segment"
)

// PossibleVersioningSchemeValues returns the possible values for the VersioningScheme const type.
func PossibleVersioningSchemeValues() []VersioningScheme {
	return []VersioningScheme{
		VersioningSchemeHeader,
		VersioningSchemeQuery,
		VersioningSchemeSegment,
	}
}

// VirtualNetworkType - The type of VPN in which API Management service needs to be configured in. None (Default Value) means
// the API Management service is not part of any Virtual Network, External means the API Management
// deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management
// deployment is setup inside a Virtual Network having an Intranet Facing Endpoint
// only.
type VirtualNetworkType string

const (
	// VirtualNetworkTypeExternal - The service is part of Virtual Network and it is accessible from Internet.
	VirtualNetworkTypeExternal VirtualNetworkType = "External"
	// VirtualNetworkTypeInternal - The service is part of Virtual Network and it is only accessible from within the virtual network.
	VirtualNetworkTypeInternal VirtualNetworkType = "Internal"
	// VirtualNetworkTypeNone - The service is not part of any Virtual Network.
	VirtualNetworkTypeNone VirtualNetworkType = "None"
)

// PossibleVirtualNetworkTypeValues returns the possible values for the VirtualNetworkType const type.
func PossibleVirtualNetworkTypeValues() []VirtualNetworkType {
	return []VirtualNetworkType{
		VirtualNetworkTypeExternal,
		VirtualNetworkTypeInternal,
		VirtualNetworkTypeNone,
	}
}
