//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationhub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// MigrateProjectsControllerClient contains the methods for the MigrateProjectsController group.
// Don't use this type directly, use NewMigrateProjectsControllerClient() instead.
type MigrateProjectsControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewMigrateProjectsControllerClient creates a new instance of MigrateProjectsControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewMigrateProjectsControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MigrateProjectsControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &MigrateProjectsControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// DeleteMigrateProject - Delete the migrate project. It deletes summary of the project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - options - MigrateProjectsControllerClientDeleteMigrateProjectOptions contains the optional parameters for the MigrateProjectsControllerClient.DeleteMigrateProject
//     method.
func (client *MigrateProjectsControllerClient) DeleteMigrateProject(ctx context.Context, resourceGroupName string, migrateProjectName string, options *MigrateProjectsControllerClientDeleteMigrateProjectOptions) (MigrateProjectsControllerClientDeleteMigrateProjectResponse, error) {
	var err error
	const operationName = "MigrateProjectsControllerClient.DeleteMigrateProject"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteMigrateProjectCreateRequest(ctx, resourceGroupName, migrateProjectName, options)
	if err != nil {
		return MigrateProjectsControllerClientDeleteMigrateProjectResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MigrateProjectsControllerClientDeleteMigrateProjectResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return MigrateProjectsControllerClientDeleteMigrateProjectResponse{}, err
	}
	return MigrateProjectsControllerClientDeleteMigrateProjectResponse{}, nil
}

// deleteMigrateProjectCreateRequest creates the DeleteMigrateProject request.
func (client *MigrateProjectsControllerClient) deleteMigrateProjectCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, options *MigrateProjectsControllerClientDeleteMigrateProjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetMigrateProject - Get information related to a specific migrate project. Returns a json object of type 'migrateProject'
// as specified in the models section.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - options - MigrateProjectsControllerClientGetMigrateProjectOptions contains the optional parameters for the MigrateProjectsControllerClient.GetMigrateProject
//     method.
func (client *MigrateProjectsControllerClient) GetMigrateProject(ctx context.Context, resourceGroupName string, migrateProjectName string, options *MigrateProjectsControllerClientGetMigrateProjectOptions) (MigrateProjectsControllerClientGetMigrateProjectResponse, error) {
	var err error
	const operationName = "MigrateProjectsControllerClient.GetMigrateProject"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getMigrateProjectCreateRequest(ctx, resourceGroupName, migrateProjectName, options)
	if err != nil {
		return MigrateProjectsControllerClientGetMigrateProjectResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MigrateProjectsControllerClientGetMigrateProjectResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MigrateProjectsControllerClientGetMigrateProjectResponse{}, err
	}
	resp, err := client.getMigrateProjectHandleResponse(httpResp)
	return resp, err
}

// getMigrateProjectCreateRequest creates the GetMigrateProject request.
func (client *MigrateProjectsControllerClient) getMigrateProjectCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, options *MigrateProjectsControllerClientGetMigrateProjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMigrateProjectHandleResponse handles the GetMigrateProject response.
func (client *MigrateProjectsControllerClient) getMigrateProjectHandleResponse(resp *http.Response) (MigrateProjectsControllerClientGetMigrateProjectResponse, error) {
	result := MigrateProjectsControllerClientGetMigrateProjectResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MigrateProject); err != nil {
		return MigrateProjectsControllerClientGetMigrateProjectResponse{}, err
	}
	return result, nil
}

// GetToolRegistrationDetails -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - options - MigrateProjectsControllerClientGetToolRegistrationDetailsOptions contains the optional parameters for the MigrateProjectsControllerClient.GetToolRegistrationDetails
//     method.
func (client *MigrateProjectsControllerClient) GetToolRegistrationDetails(ctx context.Context, resourceGroupName string, migrateProjectName string, input RegistrationDetailsInput, options *MigrateProjectsControllerClientGetToolRegistrationDetailsOptions) (MigrateProjectsControllerClientGetToolRegistrationDetailsResponse, error) {
	var err error
	const operationName = "MigrateProjectsControllerClient.GetToolRegistrationDetails"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getToolRegistrationDetailsCreateRequest(ctx, resourceGroupName, migrateProjectName, input, options)
	if err != nil {
		return MigrateProjectsControllerClientGetToolRegistrationDetailsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MigrateProjectsControllerClientGetToolRegistrationDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MigrateProjectsControllerClientGetToolRegistrationDetailsResponse{}, err
	}
	resp, err := client.getToolRegistrationDetailsHandleResponse(httpResp)
	return resp, err
}

// getToolRegistrationDetailsCreateRequest creates the GetToolRegistrationDetails request.
func (client *MigrateProjectsControllerClient) getToolRegistrationDetailsCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, input RegistrationDetailsInput, options *MigrateProjectsControllerClientGetToolRegistrationDetailsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/registrationDetails"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, input); err != nil {
		return nil, err
	}
	return req, nil
}

// getToolRegistrationDetailsHandleResponse handles the GetToolRegistrationDetails response.
func (client *MigrateProjectsControllerClient) getToolRegistrationDetailsHandleResponse(resp *http.Response) (MigrateProjectsControllerClientGetToolRegistrationDetailsResponse, error) {
	result := MigrateProjectsControllerClientGetToolRegistrationDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RegistrationDetailsResponse); err != nil {
		return MigrateProjectsControllerClientGetToolRegistrationDetailsResponse{}, err
	}
	return result, nil
}

// PatchMigrateProject - Update a project with specified name. Supports partial updates, for example only tags can be provided.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - body - Migrate project body.
//   - options - MigrateProjectsControllerClientPatchMigrateProjectOptions contains the optional parameters for the MigrateProjectsControllerClient.PatchMigrateProject
//     method.
func (client *MigrateProjectsControllerClient) PatchMigrateProject(ctx context.Context, resourceGroupName string, migrateProjectName string, body MigrateProject, options *MigrateProjectsControllerClientPatchMigrateProjectOptions) (MigrateProjectsControllerClientPatchMigrateProjectResponse, error) {
	var err error
	const operationName = "MigrateProjectsControllerClient.PatchMigrateProject"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchMigrateProjectCreateRequest(ctx, resourceGroupName, migrateProjectName, body, options)
	if err != nil {
		return MigrateProjectsControllerClientPatchMigrateProjectResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MigrateProjectsControllerClientPatchMigrateProjectResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MigrateProjectsControllerClientPatchMigrateProjectResponse{}, err
	}
	resp, err := client.patchMigrateProjectHandleResponse(httpResp)
	return resp, err
}

// patchMigrateProjectCreateRequest creates the PatchMigrateProject request.
func (client *MigrateProjectsControllerClient) patchMigrateProjectCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, body MigrateProject, options *MigrateProjectsControllerClientPatchMigrateProjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// patchMigrateProjectHandleResponse handles the PatchMigrateProject response.
func (client *MigrateProjectsControllerClient) patchMigrateProjectHandleResponse(resp *http.Response) (MigrateProjectsControllerClientPatchMigrateProjectResponse, error) {
	result := MigrateProjectsControllerClientPatchMigrateProjectResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MigrateProject); err != nil {
		return MigrateProjectsControllerClientPatchMigrateProjectResponse{}, err
	}
	return result, nil
}

// PutMigrateProject - Create or update a new project by sending a json object of type 'migrateproject' as given in Models
// section as part of the Request Body. The project name is unique.
// This operation is Idempotent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - body - Migrate project body.
//   - options - MigrateProjectsControllerClientPutMigrateProjectOptions contains the optional parameters for the MigrateProjectsControllerClient.PutMigrateProject
//     method.
func (client *MigrateProjectsControllerClient) PutMigrateProject(ctx context.Context, resourceGroupName string, migrateProjectName string, body MigrateProject, options *MigrateProjectsControllerClientPutMigrateProjectOptions) (MigrateProjectsControllerClientPutMigrateProjectResponse, error) {
	var err error
	const operationName = "MigrateProjectsControllerClient.PutMigrateProject"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putMigrateProjectCreateRequest(ctx, resourceGroupName, migrateProjectName, body, options)
	if err != nil {
		return MigrateProjectsControllerClientPutMigrateProjectResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MigrateProjectsControllerClientPutMigrateProjectResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return MigrateProjectsControllerClientPutMigrateProjectResponse{}, err
	}
	resp, err := client.putMigrateProjectHandleResponse(httpResp)
	return resp, err
}

// putMigrateProjectCreateRequest creates the PutMigrateProject request.
func (client *MigrateProjectsControllerClient) putMigrateProjectCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, body MigrateProject, options *MigrateProjectsControllerClientPutMigrateProjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// putMigrateProjectHandleResponse handles the PutMigrateProject response.
func (client *MigrateProjectsControllerClient) putMigrateProjectHandleResponse(resp *http.Response) (MigrateProjectsControllerClientPutMigrateProjectResponse, error) {
	result := MigrateProjectsControllerClientPutMigrateProjectResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return MigrateProjectsControllerClientPutMigrateProjectResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.MigrateProject); err != nil {
		return MigrateProjectsControllerClientPutMigrateProjectResponse{}, err
	}
	return result, nil
}

// RefreshSummary - Refresh the summary of the migrate project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - input - The goal input which needs to be refreshed.
//   - options - MigrateProjectsControllerClientRefreshSummaryOptions contains the optional parameters for the MigrateProjectsControllerClient.RefreshSummary
//     method.
func (client *MigrateProjectsControllerClient) RefreshSummary(ctx context.Context, resourceGroupName string, migrateProjectName string, input RefreshSummaryInput, options *MigrateProjectsControllerClientRefreshSummaryOptions) (MigrateProjectsControllerClientRefreshSummaryResponse, error) {
	var err error
	const operationName = "MigrateProjectsControllerClient.RefreshSummary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.refreshSummaryCreateRequest(ctx, resourceGroupName, migrateProjectName, input, options)
	if err != nil {
		return MigrateProjectsControllerClientRefreshSummaryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MigrateProjectsControllerClientRefreshSummaryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MigrateProjectsControllerClientRefreshSummaryResponse{}, err
	}
	resp, err := client.refreshSummaryHandleResponse(httpResp)
	return resp, err
}

// refreshSummaryCreateRequest creates the RefreshSummary request.
func (client *MigrateProjectsControllerClient) refreshSummaryCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, input RefreshSummaryInput, options *MigrateProjectsControllerClientRefreshSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/refreshSummary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, input); err != nil {
		return nil, err
	}
	return req, nil
}

// refreshSummaryHandleResponse handles the RefreshSummary response.
func (client *MigrateProjectsControllerClient) refreshSummaryHandleResponse(resp *http.Response) (MigrateProjectsControllerClientRefreshSummaryResponse, error) {
	result := MigrateProjectsControllerClientRefreshSummaryResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RefreshSummaryResult); err != nil {
		return MigrateProjectsControllerClientRefreshSummaryResponse{}, err
	}
	return result, nil
}

// RegisterTool - Registers a tool with the migrate project.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - migrateProjectName - Name of the Azure Migrate project.
//   - input - Input containing the name of the tool to be registered.
//   - options - MigrateProjectsControllerClientRegisterToolOptions contains the optional parameters for the MigrateProjectsControllerClient.RegisterTool
//     method.
func (client *MigrateProjectsControllerClient) RegisterTool(ctx context.Context, resourceGroupName string, migrateProjectName string, input RegisterToolInput, options *MigrateProjectsControllerClientRegisterToolOptions) (MigrateProjectsControllerClientRegisterToolResponse, error) {
	var err error
	const operationName = "MigrateProjectsControllerClient.RegisterTool"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.registerToolCreateRequest(ctx, resourceGroupName, migrateProjectName, input, options)
	if err != nil {
		return MigrateProjectsControllerClientRegisterToolResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MigrateProjectsControllerClientRegisterToolResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MigrateProjectsControllerClientRegisterToolResponse{}, err
	}
	resp, err := client.registerToolHandleResponse(httpResp)
	return resp, err
}

// registerToolCreateRequest creates the RegisterTool request.
func (client *MigrateProjectsControllerClient) registerToolCreateRequest(ctx context.Context, resourceGroupName string, migrateProjectName string, input RegisterToolInput, options *MigrateProjectsControllerClientRegisterToolOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/registerTool"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if migrateProjectName == "" {
		return nil, errors.New("parameter migrateProjectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{migrateProjectName}", url.PathEscape(migrateProjectName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, input); err != nil {
		return nil, err
	}
	return req, nil
}

// registerToolHandleResponse handles the RegisterTool response.
func (client *MigrateProjectsControllerClient) registerToolHandleResponse(resp *http.Response) (MigrateProjectsControllerClientRegisterToolResponse, error) {
	result := MigrateProjectsControllerClientRegisterToolResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RegistrationResult); err != nil {
		return MigrateProjectsControllerClientRegisterToolResponse{}, err
	}
	return result, nil
}
