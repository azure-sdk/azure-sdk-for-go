//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armazurearcdata.ClientFactory type.
type ServerFactory struct {
	ActiveDirectoryConnectorsServer   ActiveDirectoryConnectorsServer
	DataControllersServer             DataControllersServer
	FailoverGroupsServer              FailoverGroupsServer
	OperationsServer                  OperationsServer
	PostgresInstancesServer           PostgresInstancesServer
	SQLManagedInstancesServer         SQLManagedInstancesServer
	SQLServerAvailabilityGroupsServer SQLServerAvailabilityGroupsServer
	SQLServerDatabasesServer          SQLServerDatabasesServer
	SQLServerEsuLicensesServer        SQLServerEsuLicensesServer
	SQLServerInstancesServer          SQLServerInstancesServer
	SQLServerLicensesServer           SQLServerLicensesServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armazurearcdata.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armazurearcdata.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                 *ServerFactory
	trMu                                sync.Mutex
	trActiveDirectoryConnectorsServer   *ActiveDirectoryConnectorsServerTransport
	trDataControllersServer             *DataControllersServerTransport
	trFailoverGroupsServer              *FailoverGroupsServerTransport
	trOperationsServer                  *OperationsServerTransport
	trPostgresInstancesServer           *PostgresInstancesServerTransport
	trSQLManagedInstancesServer         *SQLManagedInstancesServerTransport
	trSQLServerAvailabilityGroupsServer *SQLServerAvailabilityGroupsServerTransport
	trSQLServerDatabasesServer          *SQLServerDatabasesServerTransport
	trSQLServerEsuLicensesServer        *SQLServerEsuLicensesServerTransport
	trSQLServerInstancesServer          *SQLServerInstancesServerTransport
	trSQLServerLicensesServer           *SQLServerLicensesServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "ActiveDirectoryConnectorsClient":
		initServer(s, &s.trActiveDirectoryConnectorsServer, func() *ActiveDirectoryConnectorsServerTransport {
			return NewActiveDirectoryConnectorsServerTransport(&s.srv.ActiveDirectoryConnectorsServer)
		})
		resp, err = s.trActiveDirectoryConnectorsServer.Do(req)
	case "DataControllersClient":
		initServer(s, &s.trDataControllersServer, func() *DataControllersServerTransport {
			return NewDataControllersServerTransport(&s.srv.DataControllersServer)
		})
		resp, err = s.trDataControllersServer.Do(req)
	case "FailoverGroupsClient":
		initServer(s, &s.trFailoverGroupsServer, func() *FailoverGroupsServerTransport {
			return NewFailoverGroupsServerTransport(&s.srv.FailoverGroupsServer)
		})
		resp, err = s.trFailoverGroupsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PostgresInstancesClient":
		initServer(s, &s.trPostgresInstancesServer, func() *PostgresInstancesServerTransport {
			return NewPostgresInstancesServerTransport(&s.srv.PostgresInstancesServer)
		})
		resp, err = s.trPostgresInstancesServer.Do(req)
	case "SQLManagedInstancesClient":
		initServer(s, &s.trSQLManagedInstancesServer, func() *SQLManagedInstancesServerTransport {
			return NewSQLManagedInstancesServerTransport(&s.srv.SQLManagedInstancesServer)
		})
		resp, err = s.trSQLManagedInstancesServer.Do(req)
	case "SQLServerAvailabilityGroupsClient":
		initServer(s, &s.trSQLServerAvailabilityGroupsServer, func() *SQLServerAvailabilityGroupsServerTransport {
			return NewSQLServerAvailabilityGroupsServerTransport(&s.srv.SQLServerAvailabilityGroupsServer)
		})
		resp, err = s.trSQLServerAvailabilityGroupsServer.Do(req)
	case "SQLServerDatabasesClient":
		initServer(s, &s.trSQLServerDatabasesServer, func() *SQLServerDatabasesServerTransport {
			return NewSQLServerDatabasesServerTransport(&s.srv.SQLServerDatabasesServer)
		})
		resp, err = s.trSQLServerDatabasesServer.Do(req)
	case "SQLServerEsuLicensesClient":
		initServer(s, &s.trSQLServerEsuLicensesServer, func() *SQLServerEsuLicensesServerTransport {
			return NewSQLServerEsuLicensesServerTransport(&s.srv.SQLServerEsuLicensesServer)
		})
		resp, err = s.trSQLServerEsuLicensesServer.Do(req)
	case "SQLServerInstancesClient":
		initServer(s, &s.trSQLServerInstancesServer, func() *SQLServerInstancesServerTransport {
			return NewSQLServerInstancesServerTransport(&s.srv.SQLServerInstancesServer)
		})
		resp, err = s.trSQLServerInstancesServer.Do(req)
	case "SQLServerLicensesClient":
		initServer(s, &s.trSQLServerLicensesServer, func() *SQLServerLicensesServerTransport {
			return NewSQLServerLicensesServerTransport(&s.srv.SQLServerLicensesServer)
		})
		resp, err = s.trSQLServerLicensesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
