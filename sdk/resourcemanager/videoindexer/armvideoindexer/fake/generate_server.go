//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/videoindexer/armvideoindexer"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// GenerateServer is a fake server for instances of the armvideoindexer.GenerateClient type.
type GenerateServer struct {
	// AccessToken is the fake for method GenerateClient.AccessToken
	// HTTP status codes to indicate success: http.StatusOK
	AccessToken func(ctx context.Context, resourceGroupName string, accountName string, options *armvideoindexer.GenerateClientAccessTokenOptions) (resp azfake.Responder[armvideoindexer.GenerateClientAccessTokenResponse], errResp azfake.ErrorResponder)

	// RestrictedViewerAccessToken is the fake for method GenerateClient.RestrictedViewerAccessToken
	// HTTP status codes to indicate success: http.StatusOK
	RestrictedViewerAccessToken func(ctx context.Context, resourceGroupName string, accountName string, options *armvideoindexer.GenerateClientRestrictedViewerAccessTokenOptions) (resp azfake.Responder[armvideoindexer.GenerateClientRestrictedViewerAccessTokenResponse], errResp azfake.ErrorResponder)
}

// NewGenerateServerTransport creates a new instance of GenerateServerTransport with the provided implementation.
// The returned GenerateServerTransport instance is connected to an instance of armvideoindexer.GenerateClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewGenerateServerTransport(srv *GenerateServer) *GenerateServerTransport {
	return &GenerateServerTransport{srv: srv}
}

// GenerateServerTransport connects instances of armvideoindexer.GenerateClient to instances of GenerateServer.
// Don't use this type directly, use NewGenerateServerTransport instead.
type GenerateServerTransport struct {
	srv *GenerateServer
}

// Do implements the policy.Transporter interface for GenerateServerTransport.
func (g *GenerateServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "GenerateClient.AccessToken":
		resp, err = g.dispatchAccessToken(req)
	case "GenerateClient.RestrictedViewerAccessToken":
		resp, err = g.dispatchRestrictedViewerAccessToken(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *GenerateServerTransport) dispatchAccessToken(req *http.Request) (*http.Response, error) {
	if g.srv.AccessToken == nil {
		return nil, &nonRetriableError{errors.New("fake for method AccessToken not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.VideoIndexer/accounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/generateAccessToken`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armvideoindexer.GenerateAccessTokenParameters](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	var options *armvideoindexer.GenerateClientAccessTokenOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armvideoindexer.GenerateClientAccessTokenOptions{
			Parameters: &body,
		}
	}
	respr, errRespr := g.srv.AccessToken(req.Context(), resourceGroupNameParam, accountNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AccessToken, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *GenerateServerTransport) dispatchRestrictedViewerAccessToken(req *http.Request) (*http.Response, error) {
	if g.srv.RestrictedViewerAccessToken == nil {
		return nil, &nonRetriableError{errors.New("fake for method RestrictedViewerAccessToken not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.VideoIndexer/accounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/generateRestrictedViewerAccessToken`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armvideoindexer.GenerateRestrictedViewerAccessTokenParameters](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	var options *armvideoindexer.GenerateClientRestrictedViewerAccessTokenOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armvideoindexer.GenerateClientRestrictedViewerAccessTokenOptions{
			Parameters: &body,
		}
	}
	respr, errRespr := g.srv.RestrictedViewerAccessToken(req.Context(), resourceGroupNameParam, accountNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AccessToken, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
