//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mysqldiscovery/armmysqldiscovery"
	"net/http"
	"net/url"
	"regexp"
)

// AgentsServer is a fake server for instances of the armmysqldiscovery.AgentsClient type.
type AgentsServer struct {
	// BeginCreateOrUpdate is the fake for method AgentsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, body armmysqldiscovery.Agent, options *armmysqldiscovery.AgentsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmysqldiscovery.AgentsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method AgentsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, options *armmysqldiscovery.AgentsClientBeginDeleteOptions) (resp azfake.PollerResponder[armmysqldiscovery.AgentsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AgentsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, options *armmysqldiscovery.AgentsClientGetOptions) (resp azfake.Responder[armmysqldiscovery.AgentsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListBySitePager is the fake for method AgentsClient.NewListBySitePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySitePager func(resourceGroupName string, options *armmysqldiscovery.AgentsClientListBySiteOptions) (resp azfake.PagerResponder[armmysqldiscovery.AgentsClientListBySiteResponse])

	// BeginTriggerRefresh is the fake for method AgentsClient.BeginTriggerRefresh
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginTriggerRefresh func(ctx context.Context, resourceGroupName string, options *armmysqldiscovery.AgentsClientBeginTriggerRefreshOptions) (resp azfake.PollerResponder[armmysqldiscovery.AgentsClientTriggerRefreshResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method AgentsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, body armmysqldiscovery.AgentResourcePatch, options *armmysqldiscovery.AgentsClientBeginUpdateOptions) (resp azfake.PollerResponder[armmysqldiscovery.AgentsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewAgentsServerTransport creates a new instance of AgentsServerTransport with the provided implementation.
// The returned AgentsServerTransport instance is connected to an instance of armmysqldiscovery.AgentsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAgentsServerTransport(srv *AgentsServer) *AgentsServerTransport {
	return &AgentsServerTransport{
		srv:                 srv,
		beginCreateOrUpdate: newTracker[azfake.PollerResponder[armmysqldiscovery.AgentsClientCreateOrUpdateResponse]](),
		beginDelete:         newTracker[azfake.PollerResponder[armmysqldiscovery.AgentsClientDeleteResponse]](),
		newListBySitePager:  newTracker[azfake.PagerResponder[armmysqldiscovery.AgentsClientListBySiteResponse]](),
		beginTriggerRefresh: newTracker[azfake.PollerResponder[armmysqldiscovery.AgentsClientTriggerRefreshResponse]](),
		beginUpdate:         newTracker[azfake.PollerResponder[armmysqldiscovery.AgentsClientUpdateResponse]](),
	}
}

// AgentsServerTransport connects instances of armmysqldiscovery.AgentsClient to instances of AgentsServer.
// Don't use this type directly, use NewAgentsServerTransport instead.
type AgentsServerTransport struct {
	srv                 *AgentsServer
	beginCreateOrUpdate *tracker[azfake.PollerResponder[armmysqldiscovery.AgentsClientCreateOrUpdateResponse]]
	beginDelete         *tracker[azfake.PollerResponder[armmysqldiscovery.AgentsClientDeleteResponse]]
	newListBySitePager  *tracker[azfake.PagerResponder[armmysqldiscovery.AgentsClientListBySiteResponse]]
	beginTriggerRefresh *tracker[azfake.PollerResponder[armmysqldiscovery.AgentsClientTriggerRefreshResponse]]
	beginUpdate         *tracker[azfake.PollerResponder[armmysqldiscovery.AgentsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for AgentsServerTransport.
func (a *AgentsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "AgentsClient.BeginCreateOrUpdate":
		resp, err = a.dispatchBeginCreateOrUpdate(req)
	case "AgentsClient.BeginDelete":
		resp, err = a.dispatchBeginDelete(req)
	case "AgentsClient.Get":
		resp, err = a.dispatchGet(req)
	case "AgentsClient.NewListBySitePager":
		resp, err = a.dispatchNewListBySitePager(req)
	case "AgentsClient.BeginTriggerRefresh":
		resp, err = a.dispatchBeginTriggerRefresh(req)
	case "AgentsClient.BeginUpdate":
		resp, err = a.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *AgentsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := a.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MySQLDiscovery/MySQLSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/agents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmysqldiscovery.Agent](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		a.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		a.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		a.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (a *AgentsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MySQLDiscovery/MySQLSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/agents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceGroupNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *AgentsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MySQLDiscovery/MySQLSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/agents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Agent, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AgentsServerTransport) dispatchNewListBySitePager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListBySitePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySitePager not implemented")}
	}
	newListBySitePager := a.newListBySitePager.get(req)
	if newListBySitePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MySQLDiscovery/MySQLSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/agents`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListBySitePager(resourceGroupNameParam, nil)
		newListBySitePager = &resp
		a.newListBySitePager.add(req, newListBySitePager)
		server.PagerResponderInjectNextLinks(newListBySitePager, req, func(page *armmysqldiscovery.AgentsClientListBySiteResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySitePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListBySitePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySitePager) {
		a.newListBySitePager.remove(req)
	}
	return resp, nil
}

func (a *AgentsServerTransport) dispatchBeginTriggerRefresh(req *http.Request) (*http.Response, error) {
	if a.srv.BeginTriggerRefresh == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginTriggerRefresh not implemented")}
	}
	beginTriggerRefresh := a.beginTriggerRefresh.get(req)
	if beginTriggerRefresh == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MySQLDiscovery/MySQLSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/agents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/refresh`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginTriggerRefresh(req.Context(), resourceGroupNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginTriggerRefresh = &respr
		a.beginTriggerRefresh.add(req, beginTriggerRefresh)
	}

	resp, err := server.PollerResponderNext(beginTriggerRefresh, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		a.beginTriggerRefresh.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginTriggerRefresh) {
		a.beginTriggerRefresh.remove(req)
	}

	return resp, nil
}

func (a *AgentsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := a.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MySQLDiscovery/MySQLSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/agents/(?P<agentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmysqldiscovery.AgentResourcePatch](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginUpdate(req.Context(), resourceGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		a.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		a.beginUpdate.remove(req)
	}

	return resp, nil
}
