//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armedgeorder

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HciCatalogPlatformsClient contains the methods for the HciCatalogPlatforms group.
// Don't use this type directly, use NewHciCatalogPlatformsClient() instead.
type HciCatalogPlatformsClient struct {
	internal *arm.Client
}

// NewHciCatalogPlatformsClient creates a new instance of HciCatalogPlatformsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHciCatalogPlatformsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*HciCatalogPlatformsClient, error) {
	cl, err := arm.NewClient(moduleName+".HciCatalogPlatformsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HciCatalogPlatformsClient{
		internal: cl,
	}
	return client, nil
}

// Get - Get HCI catalog platform by id.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - platformID - Unique identifier for HCI catalog platform.
//   - options - HciCatalogPlatformsClientGetOptions contains the optional parameters for the HciCatalogPlatformsClient.Get method.
func (client *HciCatalogPlatformsClient) Get(ctx context.Context, catalogName string, platformID string, options *HciCatalogPlatformsClientGetOptions) (HciCatalogPlatformsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, catalogName, platformID, options)
	if err != nil {
		return HciCatalogPlatformsClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HciCatalogPlatformsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HciCatalogPlatformsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *HciCatalogPlatformsClient) getCreateRequest(ctx context.Context, catalogName string, platformID string, options *HciCatalogPlatformsClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciCatalog/{catalogName}/platforms/{platformId}"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if platformID == "" {
		return nil, errors.New("parameter platformID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{platformId}", url.PathEscape(platformID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HciCatalogPlatformsClient) getHandleResponse(resp *http.Response) (HciCatalogPlatformsClientGetResponse, error) {
	result := HciCatalogPlatformsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlatformResource); err != nil {
		return HciCatalogPlatformsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List HCI catalog platform resources.
//
// Generated from API version 2023-05-01-preview
//   - catalogName - Name of HCI catalog resource.
//   - options - HciCatalogPlatformsClientListOptions contains the optional parameters for the HciCatalogPlatformsClient.NewListPager
//     method.
func (client *HciCatalogPlatformsClient) NewListPager(catalogName string, options *HciCatalogPlatformsClientListOptions) *runtime.Pager[HciCatalogPlatformsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[HciCatalogPlatformsClientListResponse]{
		More: func(page HciCatalogPlatformsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HciCatalogPlatformsClientListResponse) (HciCatalogPlatformsClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, catalogName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HciCatalogPlatformsClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return HciCatalogPlatformsClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HciCatalogPlatformsClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *HciCatalogPlatformsClient) listCreateRequest(ctx context.Context, catalogName string, options *HciCatalogPlatformsClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/hciCatalog/{catalogName}/platforms"
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *HciCatalogPlatformsClient) listHandleResponse(resp *http.Response) (HciCatalogPlatformsClientListResponse, error) {
	result := HciCatalogPlatformsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlatformResourceList); err != nil {
		return HciCatalogPlatformsClientListResponse{}, err
	}
	return result, nil
}
