//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HyperVHostClient contains the methods for the HyperVHost group.
// Don't use this type directly, use NewHyperVHostClient() instead.
type HyperVHostClient struct {
	host string
	pl   runtime.Pipeline
}

// NewHyperVHostClient creates a new instance of HyperVHostClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHyperVHostClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*HyperVHostClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &HyperVHostClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// NewGetAllHostsInSitePager - Method to get all hosts in a site.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - options - HyperVHostClientGetAllHostsInSiteOptions contains the optional parameters for the HyperVHostClient.NewGetAllHostsInSitePager
//     method.
func (client *HyperVHostClient) NewGetAllHostsInSitePager(subscriptionID string, resourceGroupName string, siteName string, options *HyperVHostClientGetAllHostsInSiteOptions) *runtime.Pager[HyperVHostClientGetAllHostsInSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[HyperVHostClientGetAllHostsInSiteResponse]{
		More: func(page HyperVHostClientGetAllHostsInSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HyperVHostClientGetAllHostsInSiteResponse) (HyperVHostClientGetAllHostsInSiteResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getAllHostsInSiteCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HyperVHostClientGetAllHostsInSiteResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return HyperVHostClientGetAllHostsInSiteResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HyperVHostClientGetAllHostsInSiteResponse{}, runtime.NewResponseError(resp)
			}
			return client.getAllHostsInSiteHandleResponse(resp)
		},
	})
}

// getAllHostsInSiteCreateRequest creates the GetAllHostsInSite request.
func (client *HyperVHostClient) getAllHostsInSiteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, options *HyperVHostClientGetAllHostsInSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAllHostsInSiteHandleResponse handles the GetAllHostsInSite response.
func (client *HyperVHostClient) getAllHostsInSiteHandleResponse(resp *http.Response) (HyperVHostClientGetAllHostsInSiteResponse, error) {
	result := HyperVHostClientGetAllHostsInSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HyperVHostCollection); err != nil {
		return HyperVHostClientGetAllHostsInSiteResponse{}, err
	}
	return result, nil
}

// GetHost - Method to get a Hyper-V host.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - hostName - Host ARM name.
//   - options - HyperVHostClientGetHostOptions contains the optional parameters for the HyperVHostClient.GetHost method.
func (client *HyperVHostClient) GetHost(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, hostName string, options *HyperVHostClientGetHostOptions) (HyperVHostClientGetHostResponse, error) {
	req, err := client.getHostCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, hostName, options)
	if err != nil {
		return HyperVHostClientGetHostResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HyperVHostClientGetHostResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HyperVHostClientGetHostResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHostHandleResponse(resp)
}

// getHostCreateRequest creates the GetHost request.
func (client *HyperVHostClient) getHostCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, hostName string, options *HyperVHostClientGetHostOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts/{hostName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if hostName == "" {
		return nil, errors.New("parameter hostName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hostName}", url.PathEscape(hostName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHostHandleResponse handles the GetHost response.
func (client *HyperVHostClient) getHostHandleResponse(resp *http.Response) (HyperVHostClientGetHostResponse, error) {
	result := HyperVHostClientGetHostResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HyperVHost); err != nil {
		return HyperVHostClientGetHostResponse{}, err
	}
	return result, nil
}

// PutHost - Method to create or update a host in site.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2020-01-01
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name.
//   - hostName - Host ARM name.
//   - body - Put host body.
//   - options - HyperVHostClientPutHostOptions contains the optional parameters for the HyperVHostClient.PutHost method.
func (client *HyperVHostClient) PutHost(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, hostName string, body HyperVHost, options *HyperVHostClientPutHostOptions) (HyperVHostClientPutHostResponse, error) {
	req, err := client.putHostCreateRequest(ctx, subscriptionID, resourceGroupName, siteName, hostName, body, options)
	if err != nil {
		return HyperVHostClientPutHostResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HyperVHostClientPutHostResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return HyperVHostClientPutHostResponse{}, runtime.NewResponseError(resp)
	}
	return client.putHostHandleResponse(resp)
}

// putHostCreateRequest creates the PutHost request.
func (client *HyperVHostClient) putHostCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, siteName string, hostName string, body HyperVHost, options *HyperVHostClientPutHostOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts/{hostName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if hostName == "" {
		return nil, errors.New("parameter hostName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hostName}", url.PathEscape(hostName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, runtime.MarshalAsJSON(req, body)
}

// putHostHandleResponse handles the PutHost response.
func (client *HyperVHostClient) putHostHandleResponse(resp *http.Response) (HyperVHostClientPutHostResponse, error) {
	result := HyperVHostClientPutHostResponse{}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	return result, nil
}
