//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armsecurity

const (
	moduleName    = "armsecurity"
	moduleVersion = "v0.12.0"
)

// Effect - expected effect of this assignment (Audit/Exempt)
type Effect string

const (
	EffectAudit  Effect = "Audit"
	EffectExempt Effect = "Exempt"
)

// PossibleEffectValues returns the possible values for the Effect const type.
func PossibleEffectValues() []Effect {
	return []Effect{
		EffectAudit,
		EffectExempt,
	}
}

// ExemptionCategory - Exemption category of this assignment
type ExemptionCategory string

const (
	ExemptionCategoryMitigated ExemptionCategory = "mitigated"
	ExemptionCategoryWaiver    ExemptionCategory = "waiver"
)

// PossibleExemptionCategoryValues returns the possible values for the ExemptionCategory const type.
func PossibleExemptionCategoryValues() []ExemptionCategory {
	return []ExemptionCategory{
		ExemptionCategoryMitigated,
		ExemptionCategoryWaiver,
	}
}

// RecommendationSupportedClouds - The cloud that the recommendation is supported on.
type RecommendationSupportedClouds string

const (
	RecommendationSupportedCloudsAWS   RecommendationSupportedClouds = "AWS"
	RecommendationSupportedCloudsAzure RecommendationSupportedClouds = "Azure"
	RecommendationSupportedCloudsGCP   RecommendationSupportedClouds = "GCP"
)

// PossibleRecommendationSupportedCloudsValues returns the possible values for the RecommendationSupportedClouds const type.
func PossibleRecommendationSupportedCloudsValues() []RecommendationSupportedClouds {
	return []RecommendationSupportedClouds{
		RecommendationSupportedCloudsAWS,
		RecommendationSupportedCloudsAzure,
		RecommendationSupportedCloudsGCP,
	}
}

// SeverityEnum - The severity to relate to the assessments generated by this Recommendation.
type SeverityEnum string

const (
	SeverityEnumHigh   SeverityEnum = "High"
	SeverityEnumLow    SeverityEnum = "Low"
	SeverityEnumMedium SeverityEnum = "Medium"
)

// PossibleSeverityEnumValues returns the possible values for the SeverityEnum const type.
func PossibleSeverityEnumValues() []SeverityEnum {
	return []SeverityEnum{
		SeverityEnumHigh,
		SeverityEnumLow,
		SeverityEnumMedium,
	}
}

// Source - The status of the health report
type Source string

const (
	SourceAws   Source = "Aws"
	SourceAzure Source = "Azure"
	SourceGcp   Source = "Gcp"
)

// PossibleSourceValues returns the possible values for the Source const type.
func PossibleSourceValues() []Source {
	return []Source{
		SourceAws,
		SourceAzure,
		SourceGcp,
	}
}

// StandardSupportedCloud - The cloud that the standard is supported on.
type StandardSupportedCloud string

const (
	StandardSupportedCloudAWS   StandardSupportedCloud = "AWS"
	StandardSupportedCloudAzure StandardSupportedCloud = "Azure"
	StandardSupportedCloudGCP   StandardSupportedCloud = "GCP"
)

// PossibleStandardSupportedCloudValues returns the possible values for the StandardSupportedCloud const type.
func PossibleStandardSupportedCloudValues() []StandardSupportedCloud {
	return []StandardSupportedCloud{
		StandardSupportedCloudAWS,
		StandardSupportedCloudAzure,
		StandardSupportedCloudGCP,
	}
}

// StandardType - standard type (Custom or BuiltIn only currently)
type StandardType string

const (
	StandardTypeBuiltIn StandardType = "BuiltIn"
	StandardTypeCustom  StandardType = "Custom"
)

// PossibleStandardTypeValues returns the possible values for the StandardType const type.
func PossibleStandardTypeValues() []StandardType {
	return []StandardType{
		StandardTypeBuiltIn,
		StandardTypeCustom,
	}
}

// StatusName - The status of the health report
type StatusName string

const (
	StatusNameHealthy       StatusName = "Healthy"
	StatusNameNotApplicable StatusName = "NotApplicable"
	StatusNameNotHealthy    StatusName = "NotHealthy"
)

// PossibleStatusNameValues returns the possible values for the StatusName const type.
func PossibleStatusNameValues() []StatusName {
	return []StatusName{
		StatusNameHealthy,
		StatusNameNotApplicable,
		StatusNameNotHealthy,
	}
}
