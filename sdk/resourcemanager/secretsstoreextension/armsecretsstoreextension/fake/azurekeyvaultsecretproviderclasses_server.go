// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/secretsstoreextension/armsecretsstoreextension"
	"net/http"
	"net/url"
	"regexp"
)

// AzureKeyVaultSecretProviderClassesServer is a fake server for instances of the armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClient type.
type AzureKeyVaultSecretProviderClassesServer struct {
	// BeginCreateOrUpdate is the fake for method AzureKeyVaultSecretProviderClassesClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, resource armsecretsstoreextension.AzureKeyVaultSecretProviderClass, options *armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method AzureKeyVaultSecretProviderClassesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, options *armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientBeginDeleteOptions) (resp azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AzureKeyVaultSecretProviderClassesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, options *armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientGetOptions) (resp azfake.Responder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByResourceGroupPager is the fake for method AzureKeyVaultSecretProviderClassesClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse])

	// NewListBySubscriptionPager is the fake for method AzureKeyVaultSecretProviderClassesClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListBySubscriptionOptions) (resp azfake.PagerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse])

	// BeginUpdate is the fake for method AzureKeyVaultSecretProviderClassesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, azureKeyVaultSecretProviderClassName string, properties armsecretsstoreextension.AzureKeyVaultSecretProviderClassUpdate, options *armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientBeginUpdateOptions) (resp azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewAzureKeyVaultSecretProviderClassesServerTransport creates a new instance of AzureKeyVaultSecretProviderClassesServerTransport with the provided implementation.
// The returned AzureKeyVaultSecretProviderClassesServerTransport instance is connected to an instance of armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAzureKeyVaultSecretProviderClassesServerTransport(srv *AzureKeyVaultSecretProviderClassesServer) *AzureKeyVaultSecretProviderClassesServerTransport {
	return &AzureKeyVaultSecretProviderClassesServerTransport{
		srv:                         srv,
		beginCreateOrUpdate:         newTracker[azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientCreateOrUpdateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientDeleteResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse]](),
		newListBySubscriptionPager:  newTracker[azfake.PagerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse]](),
		beginUpdate:                 newTracker[azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientUpdateResponse]](),
	}
}

// AzureKeyVaultSecretProviderClassesServerTransport connects instances of armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClient to instances of AzureKeyVaultSecretProviderClassesServer.
// Don't use this type directly, use NewAzureKeyVaultSecretProviderClassesServerTransport instead.
type AzureKeyVaultSecretProviderClassesServerTransport struct {
	srv                         *AzureKeyVaultSecretProviderClassesServer
	beginCreateOrUpdate         *tracker[azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientCreateOrUpdateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientDeleteResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse]]
	newListBySubscriptionPager  *tracker[azfake.PagerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse]]
	beginUpdate                 *tracker[azfake.PollerResponder[armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for AzureKeyVaultSecretProviderClassesServerTransport.
func (a *AzureKeyVaultSecretProviderClassesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *AzureKeyVaultSecretProviderClassesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if azureKeyVaultSecretProviderClassesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = azureKeyVaultSecretProviderClassesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "AzureKeyVaultSecretProviderClassesClient.BeginCreateOrUpdate":
				res.resp, res.err = a.dispatchBeginCreateOrUpdate(req)
			case "AzureKeyVaultSecretProviderClassesClient.BeginDelete":
				res.resp, res.err = a.dispatchBeginDelete(req)
			case "AzureKeyVaultSecretProviderClassesClient.Get":
				res.resp, res.err = a.dispatchGet(req)
			case "AzureKeyVaultSecretProviderClassesClient.NewListByResourceGroupPager":
				res.resp, res.err = a.dispatchNewListByResourceGroupPager(req)
			case "AzureKeyVaultSecretProviderClassesClient.NewListBySubscriptionPager":
				res.resp, res.err = a.dispatchNewListBySubscriptionPager(req)
			case "AzureKeyVaultSecretProviderClassesClient.BeginUpdate":
				res.resp, res.err = a.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *AzureKeyVaultSecretProviderClassesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := a.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecretSyncController/azureKeyVaultSecretProviderClasses/(?P<azureKeyVaultSecretProviderClassName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armsecretsstoreextension.AzureKeyVaultSecretProviderClass](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		azureKeyVaultSecretProviderClassNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("azureKeyVaultSecretProviderClassName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, azureKeyVaultSecretProviderClassNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		a.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		a.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		a.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (a *AzureKeyVaultSecretProviderClassesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecretSyncController/azureKeyVaultSecretProviderClasses/(?P<azureKeyVaultSecretProviderClassName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		azureKeyVaultSecretProviderClassNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("azureKeyVaultSecretProviderClassName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceGroupNameParam, azureKeyVaultSecretProviderClassNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *AzureKeyVaultSecretProviderClassesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecretSyncController/azureKeyVaultSecretProviderClasses/(?P<azureKeyVaultSecretProviderClassName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	azureKeyVaultSecretProviderClassNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("azureKeyVaultSecretProviderClassName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, azureKeyVaultSecretProviderClassNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AzureKeyVaultSecretProviderClass, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AzureKeyVaultSecretProviderClassesServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := a.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecretSyncController/azureKeyVaultSecretProviderClasses`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		a.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		a.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (a *AzureKeyVaultSecretProviderClassesServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := a.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecretSyncController/azureKeyVaultSecretProviderClasses`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := a.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		a.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armsecretsstoreextension.AzureKeyVaultSecretProviderClassesClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		a.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (a *AzureKeyVaultSecretProviderClassesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := a.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecretSyncController/azureKeyVaultSecretProviderClasses/(?P<azureKeyVaultSecretProviderClassName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armsecretsstoreextension.AzureKeyVaultSecretProviderClassUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		azureKeyVaultSecretProviderClassNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("azureKeyVaultSecretProviderClassName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginUpdate(req.Context(), resourceGroupNameParam, azureKeyVaultSecretProviderClassNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		a.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		a.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to AzureKeyVaultSecretProviderClassesServerTransport
var azureKeyVaultSecretProviderClassesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
