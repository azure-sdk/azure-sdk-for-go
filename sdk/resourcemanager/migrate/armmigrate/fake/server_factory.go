//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armmigrate.ClientFactory type.
type ServerFactory struct {
	AssessedMachinesOperationsServer             AssessedMachinesOperationsServer
	AssessedSQLDatabaseV2OperationsServer        AssessedSQLDatabaseV2OperationsServer
	AssessedSQLInstanceV2OperationsServer        AssessedSQLInstanceV2OperationsServer
	AssessedSQLMachinesOperationsServer          AssessedSQLMachinesOperationsServer
	AssessedSQLRecommendedEntityOperationsServer AssessedSQLRecommendedEntityOperationsServer
	AssessmentOptionsOperationsServer            AssessmentOptionsOperationsServer
	AssessmentProjectSummaryOperationsServer     AssessmentProjectSummaryOperationsServer
	AssessmentProjectsOperationsServer           AssessmentProjectsOperationsServer
	AssessmentsOperationsServer                  AssessmentsOperationsServer
	AvsAssessedMachinesOperationsServer          AvsAssessedMachinesOperationsServer
	AvsAssessmentOptionsOperationsServer         AvsAssessmentOptionsOperationsServer
	AvsAssessmentsOperationsServer               AvsAssessmentsOperationsServer
	GroupsOperationsServer                       GroupsOperationsServer
	HypervCollectorsOperationsServer             HypervCollectorsOperationsServer
	ImportCollectorsOperationsServer             ImportCollectorsOperationsServer
	MachinesOperationsServer                     MachinesOperationsServer
	OperationsServer                             OperationsServer
	PrivateEndpointConnectionOperationsServer    PrivateEndpointConnectionOperationsServer
	PrivateLinkResourceOperationsServer          PrivateLinkResourceOperationsServer
	SQLAssessmentOptionsOperationsServer         SQLAssessmentOptionsOperationsServer
	SQLAssessmentV2OperationsServer              SQLAssessmentV2OperationsServer
	SQLAssessmentV2SummaryOperationsServer       SQLAssessmentV2SummaryOperationsServer
	SQLCollectorOperationsServer                 SQLCollectorOperationsServer
	ServerCollectorsOperationsServer             ServerCollectorsOperationsServer
	VmwareCollectorsOperationsServer             VmwareCollectorsOperationsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armmigrate.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armmigrate.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                            *ServerFactory
	trMu                                           sync.Mutex
	trAssessedMachinesOperationsServer             *AssessedMachinesOperationsServerTransport
	trAssessedSQLDatabaseV2OperationsServer        *AssessedSQLDatabaseV2OperationsServerTransport
	trAssessedSQLInstanceV2OperationsServer        *AssessedSQLInstanceV2OperationsServerTransport
	trAssessedSQLMachinesOperationsServer          *AssessedSQLMachinesOperationsServerTransport
	trAssessedSQLRecommendedEntityOperationsServer *AssessedSQLRecommendedEntityOperationsServerTransport
	trAssessmentOptionsOperationsServer            *AssessmentOptionsOperationsServerTransport
	trAssessmentProjectSummaryOperationsServer     *AssessmentProjectSummaryOperationsServerTransport
	trAssessmentProjectsOperationsServer           *AssessmentProjectsOperationsServerTransport
	trAssessmentsOperationsServer                  *AssessmentsOperationsServerTransport
	trAvsAssessedMachinesOperationsServer          *AvsAssessedMachinesOperationsServerTransport
	trAvsAssessmentOptionsOperationsServer         *AvsAssessmentOptionsOperationsServerTransport
	trAvsAssessmentsOperationsServer               *AvsAssessmentsOperationsServerTransport
	trGroupsOperationsServer                       *GroupsOperationsServerTransport
	trHypervCollectorsOperationsServer             *HypervCollectorsOperationsServerTransport
	trImportCollectorsOperationsServer             *ImportCollectorsOperationsServerTransport
	trMachinesOperationsServer                     *MachinesOperationsServerTransport
	trOperationsServer                             *OperationsServerTransport
	trPrivateEndpointConnectionOperationsServer    *PrivateEndpointConnectionOperationsServerTransport
	trPrivateLinkResourceOperationsServer          *PrivateLinkResourceOperationsServerTransport
	trSQLAssessmentOptionsOperationsServer         *SQLAssessmentOptionsOperationsServerTransport
	trSQLAssessmentV2OperationsServer              *SQLAssessmentV2OperationsServerTransport
	trSQLAssessmentV2SummaryOperationsServer       *SQLAssessmentV2SummaryOperationsServerTransport
	trSQLCollectorOperationsServer                 *SQLCollectorOperationsServerTransport
	trServerCollectorsOperationsServer             *ServerCollectorsOperationsServerTransport
	trVmwareCollectorsOperationsServer             *VmwareCollectorsOperationsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AssessedMachinesOperationsClient":
		initServer(s, &s.trAssessedMachinesOperationsServer, func() *AssessedMachinesOperationsServerTransport {
			return NewAssessedMachinesOperationsServerTransport(&s.srv.AssessedMachinesOperationsServer)
		})
		resp, err = s.trAssessedMachinesOperationsServer.Do(req)
	case "AssessedSQLDatabaseV2OperationsClient":
		initServer(s, &s.trAssessedSQLDatabaseV2OperationsServer, func() *AssessedSQLDatabaseV2OperationsServerTransport {
			return NewAssessedSQLDatabaseV2OperationsServerTransport(&s.srv.AssessedSQLDatabaseV2OperationsServer)
		})
		resp, err = s.trAssessedSQLDatabaseV2OperationsServer.Do(req)
	case "AssessedSQLInstanceV2OperationsClient":
		initServer(s, &s.trAssessedSQLInstanceV2OperationsServer, func() *AssessedSQLInstanceV2OperationsServerTransport {
			return NewAssessedSQLInstanceV2OperationsServerTransport(&s.srv.AssessedSQLInstanceV2OperationsServer)
		})
		resp, err = s.trAssessedSQLInstanceV2OperationsServer.Do(req)
	case "AssessedSQLMachinesOperationsClient":
		initServer(s, &s.trAssessedSQLMachinesOperationsServer, func() *AssessedSQLMachinesOperationsServerTransport {
			return NewAssessedSQLMachinesOperationsServerTransport(&s.srv.AssessedSQLMachinesOperationsServer)
		})
		resp, err = s.trAssessedSQLMachinesOperationsServer.Do(req)
	case "AssessedSQLRecommendedEntityOperationsClient":
		initServer(s, &s.trAssessedSQLRecommendedEntityOperationsServer, func() *AssessedSQLRecommendedEntityOperationsServerTransport {
			return NewAssessedSQLRecommendedEntityOperationsServerTransport(&s.srv.AssessedSQLRecommendedEntityOperationsServer)
		})
		resp, err = s.trAssessedSQLRecommendedEntityOperationsServer.Do(req)
	case "AssessmentOptionsOperationsClient":
		initServer(s, &s.trAssessmentOptionsOperationsServer, func() *AssessmentOptionsOperationsServerTransport {
			return NewAssessmentOptionsOperationsServerTransport(&s.srv.AssessmentOptionsOperationsServer)
		})
		resp, err = s.trAssessmentOptionsOperationsServer.Do(req)
	case "AssessmentProjectSummaryOperationsClient":
		initServer(s, &s.trAssessmentProjectSummaryOperationsServer, func() *AssessmentProjectSummaryOperationsServerTransport {
			return NewAssessmentProjectSummaryOperationsServerTransport(&s.srv.AssessmentProjectSummaryOperationsServer)
		})
		resp, err = s.trAssessmentProjectSummaryOperationsServer.Do(req)
	case "AssessmentProjectsOperationsClient":
		initServer(s, &s.trAssessmentProjectsOperationsServer, func() *AssessmentProjectsOperationsServerTransport {
			return NewAssessmentProjectsOperationsServerTransport(&s.srv.AssessmentProjectsOperationsServer)
		})
		resp, err = s.trAssessmentProjectsOperationsServer.Do(req)
	case "AssessmentsOperationsClient":
		initServer(s, &s.trAssessmentsOperationsServer, func() *AssessmentsOperationsServerTransport {
			return NewAssessmentsOperationsServerTransport(&s.srv.AssessmentsOperationsServer)
		})
		resp, err = s.trAssessmentsOperationsServer.Do(req)
	case "AvsAssessedMachinesOperationsClient":
		initServer(s, &s.trAvsAssessedMachinesOperationsServer, func() *AvsAssessedMachinesOperationsServerTransport {
			return NewAvsAssessedMachinesOperationsServerTransport(&s.srv.AvsAssessedMachinesOperationsServer)
		})
		resp, err = s.trAvsAssessedMachinesOperationsServer.Do(req)
	case "AvsAssessmentOptionsOperationsClient":
		initServer(s, &s.trAvsAssessmentOptionsOperationsServer, func() *AvsAssessmentOptionsOperationsServerTransport {
			return NewAvsAssessmentOptionsOperationsServerTransport(&s.srv.AvsAssessmentOptionsOperationsServer)
		})
		resp, err = s.trAvsAssessmentOptionsOperationsServer.Do(req)
	case "AvsAssessmentsOperationsClient":
		initServer(s, &s.trAvsAssessmentsOperationsServer, func() *AvsAssessmentsOperationsServerTransport {
			return NewAvsAssessmentsOperationsServerTransport(&s.srv.AvsAssessmentsOperationsServer)
		})
		resp, err = s.trAvsAssessmentsOperationsServer.Do(req)
	case "GroupsOperationsClient":
		initServer(s, &s.trGroupsOperationsServer, func() *GroupsOperationsServerTransport {
			return NewGroupsOperationsServerTransport(&s.srv.GroupsOperationsServer)
		})
		resp, err = s.trGroupsOperationsServer.Do(req)
	case "HypervCollectorsOperationsClient":
		initServer(s, &s.trHypervCollectorsOperationsServer, func() *HypervCollectorsOperationsServerTransport {
			return NewHypervCollectorsOperationsServerTransport(&s.srv.HypervCollectorsOperationsServer)
		})
		resp, err = s.trHypervCollectorsOperationsServer.Do(req)
	case "ImportCollectorsOperationsClient":
		initServer(s, &s.trImportCollectorsOperationsServer, func() *ImportCollectorsOperationsServerTransport {
			return NewImportCollectorsOperationsServerTransport(&s.srv.ImportCollectorsOperationsServer)
		})
		resp, err = s.trImportCollectorsOperationsServer.Do(req)
	case "MachinesOperationsClient":
		initServer(s, &s.trMachinesOperationsServer, func() *MachinesOperationsServerTransport {
			return NewMachinesOperationsServerTransport(&s.srv.MachinesOperationsServer)
		})
		resp, err = s.trMachinesOperationsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrivateEndpointConnectionOperationsClient":
		initServer(s, &s.trPrivateEndpointConnectionOperationsServer, func() *PrivateEndpointConnectionOperationsServerTransport {
			return NewPrivateEndpointConnectionOperationsServerTransport(&s.srv.PrivateEndpointConnectionOperationsServer)
		})
		resp, err = s.trPrivateEndpointConnectionOperationsServer.Do(req)
	case "PrivateLinkResourceOperationsClient":
		initServer(s, &s.trPrivateLinkResourceOperationsServer, func() *PrivateLinkResourceOperationsServerTransport {
			return NewPrivateLinkResourceOperationsServerTransport(&s.srv.PrivateLinkResourceOperationsServer)
		})
		resp, err = s.trPrivateLinkResourceOperationsServer.Do(req)
	case "SQLAssessmentOptionsOperationsClient":
		initServer(s, &s.trSQLAssessmentOptionsOperationsServer, func() *SQLAssessmentOptionsOperationsServerTransport {
			return NewSQLAssessmentOptionsOperationsServerTransport(&s.srv.SQLAssessmentOptionsOperationsServer)
		})
		resp, err = s.trSQLAssessmentOptionsOperationsServer.Do(req)
	case "SQLAssessmentV2OperationsClient":
		initServer(s, &s.trSQLAssessmentV2OperationsServer, func() *SQLAssessmentV2OperationsServerTransport {
			return NewSQLAssessmentV2OperationsServerTransport(&s.srv.SQLAssessmentV2OperationsServer)
		})
		resp, err = s.trSQLAssessmentV2OperationsServer.Do(req)
	case "SQLAssessmentV2SummaryOperationsClient":
		initServer(s, &s.trSQLAssessmentV2SummaryOperationsServer, func() *SQLAssessmentV2SummaryOperationsServerTransport {
			return NewSQLAssessmentV2SummaryOperationsServerTransport(&s.srv.SQLAssessmentV2SummaryOperationsServer)
		})
		resp, err = s.trSQLAssessmentV2SummaryOperationsServer.Do(req)
	case "SQLCollectorOperationsClient":
		initServer(s, &s.trSQLCollectorOperationsServer, func() *SQLCollectorOperationsServerTransport {
			return NewSQLCollectorOperationsServerTransport(&s.srv.SQLCollectorOperationsServer)
		})
		resp, err = s.trSQLCollectorOperationsServer.Do(req)
	case "ServerCollectorsOperationsClient":
		initServer(s, &s.trServerCollectorsOperationsServer, func() *ServerCollectorsOperationsServerTransport {
			return NewServerCollectorsOperationsServerTransport(&s.srv.ServerCollectorsOperationsServer)
		})
		resp, err = s.trServerCollectorsOperationsServer.Do(req)
	case "VmwareCollectorsOperationsClient":
		initServer(s, &s.trVmwareCollectorsOperationsServer, func() *VmwareCollectorsOperationsServerTransport {
			return NewVmwareCollectorsOperationsServerTransport(&s.srv.VmwareCollectorsOperationsServer)
		})
		resp, err = s.trVmwareCollectorsOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
