// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestack/armazurestack"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// ProductsServer is a fake server for instances of the armazurestack.ProductsClient type.
type ProductsServer struct {
	// Get is the fake for method ProductsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroup string, registrationName string, productName string, options *armazurestack.ProductsClientGetOptions) (resp azfake.Responder[armazurestack.ProductsClientGetResponse], errResp azfake.ErrorResponder)

	// GetProduct is the fake for method ProductsClient.GetProduct
	// HTTP status codes to indicate success: http.StatusOK
	GetProduct func(ctx context.Context, resourceGroup string, registrationName string, productName string, options *armazurestack.ProductsClientGetProductOptions) (resp azfake.Responder[armazurestack.ProductsClientGetProductResponse], errResp azfake.ErrorResponder)

	// GetProducts is the fake for method ProductsClient.GetProducts
	// HTTP status codes to indicate success: http.StatusOK
	GetProducts func(ctx context.Context, resourceGroup string, registrationName string, productName string, options *armazurestack.ProductsClientGetProductsOptions) (resp azfake.Responder[armazurestack.ProductsClientGetProductsResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method ProductsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroup string, registrationName string, options *armazurestack.ProductsClientListOptions) (resp azfake.PagerResponder[armazurestack.ProductsClientListResponse])

	// ListDetails is the fake for method ProductsClient.ListDetails
	// HTTP status codes to indicate success: http.StatusOK
	ListDetails func(ctx context.Context, resourceGroup string, registrationName string, productName string, options *armazurestack.ProductsClientListDetailsOptions) (resp azfake.Responder[armazurestack.ProductsClientListDetailsResponse], errResp azfake.ErrorResponder)

	// ListProducts is the fake for method ProductsClient.ListProducts
	// HTTP status codes to indicate success: http.StatusOK
	ListProducts func(ctx context.Context, resourceGroup string, registrationName string, productName string, options *armazurestack.ProductsClientListProductsOptions) (resp azfake.Responder[armazurestack.ProductsClientListProductsResponse], errResp azfake.ErrorResponder)

	// UploadLog is the fake for method ProductsClient.UploadLog
	// HTTP status codes to indicate success: http.StatusOK
	UploadLog func(ctx context.Context, resourceGroup string, registrationName string, productName string, options *armazurestack.ProductsClientUploadLogOptions) (resp azfake.Responder[armazurestack.ProductsClientUploadLogResponse], errResp azfake.ErrorResponder)
}

// NewProductsServerTransport creates a new instance of ProductsServerTransport with the provided implementation.
// The returned ProductsServerTransport instance is connected to an instance of armazurestack.ProductsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProductsServerTransport(srv *ProductsServer) *ProductsServerTransport {
	return &ProductsServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armazurestack.ProductsClientListResponse]](),
	}
}

// ProductsServerTransport connects instances of armazurestack.ProductsClient to instances of ProductsServer.
// Don't use this type directly, use NewProductsServerTransport instead.
type ProductsServerTransport struct {
	srv          *ProductsServer
	newListPager *tracker[azfake.PagerResponder[armazurestack.ProductsClientListResponse]]
}

// Do implements the policy.Transporter interface for ProductsServerTransport.
func (p *ProductsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *ProductsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if productsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = productsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ProductsClient.Get":
				res.resp, res.err = p.dispatchGet(req)
			case "ProductsClient.GetProduct":
				res.resp, res.err = p.dispatchGetProduct(req)
			case "ProductsClient.GetProducts":
				res.resp, res.err = p.dispatchGetProducts(req)
			case "ProductsClient.NewListPager":
				res.resp, res.err = p.dispatchNewListPager(req)
			case "ProductsClient.ListDetails":
				res.resp, res.err = p.dispatchListDetails(req)
			case "ProductsClient.ListProducts":
				res.resp, res.err = p.dispatchListProducts(req)
			case "ProductsClient.UploadLog":
				res.resp, res.err = p.dispatchUploadLog(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *ProductsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/products/(?P<productName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	productNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("productName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), resourceGroupParam, registrationNameParam, productNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Product, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProductsServerTransport) dispatchGetProduct(req *http.Request) (*http.Response, error) {
	if p.srv.GetProduct == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetProduct not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/products/(?P<productName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getProduct`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurestack.DeviceConfiguration](req)
	if err != nil {
		return nil, err
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	productNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("productName")])
	if err != nil {
		return nil, err
	}
	var options *armazurestack.ProductsClientGetProductOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armazurestack.ProductsClientGetProductOptions{
			DeviceConfiguration: &body,
		}
	}
	respr, errRespr := p.srv.GetProduct(req.Context(), resourceGroupParam, registrationNameParam, productNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Product, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProductsServerTransport) dispatchGetProducts(req *http.Request) (*http.Response, error) {
	if p.srv.GetProducts == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetProducts not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/products/(?P<productName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getProducts`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurestack.DeviceConfiguration](req)
	if err != nil {
		return nil, err
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	productNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("productName")])
	if err != nil {
		return nil, err
	}
	var options *armazurestack.ProductsClientGetProductsOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armazurestack.ProductsClientGetProductsOptions{
			DeviceConfiguration: &body,
		}
	}
	respr, errRespr := p.srv.GetProducts(req.Context(), resourceGroupParam, registrationNameParam, productNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProductList, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProductsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := p.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/products`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
		if err != nil {
			return nil, err
		}
		registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewListPager(resourceGroupParam, registrationNameParam, nil)
		newListPager = &resp
		p.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armazurestack.ProductsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		p.newListPager.remove(req)
	}
	return resp, nil
}

func (p *ProductsServerTransport) dispatchListDetails(req *http.Request) (*http.Response, error) {
	if p.srv.ListDetails == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListDetails not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/products/(?P<productName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listDetails`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	productNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("productName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.ListDetails(req.Context(), resourceGroupParam, registrationNameParam, productNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExtendedProduct, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProductsServerTransport) dispatchListProducts(req *http.Request) (*http.Response, error) {
	if p.srv.ListProducts == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListProducts not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/products/(?P<productName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listProducts`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurestack.DeviceConfiguration](req)
	if err != nil {
		return nil, err
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	productNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("productName")])
	if err != nil {
		return nil, err
	}
	var options *armazurestack.ProductsClientListProductsOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armazurestack.ProductsClientListProductsOptions{
			DeviceConfiguration: &body,
		}
	}
	respr, errRespr := p.srv.ListProducts(req.Context(), resourceGroupParam, registrationNameParam, productNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProductList, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProductsServerTransport) dispatchUploadLog(req *http.Request) (*http.Response, error) {
	if p.srv.UploadLog == nil {
		return nil, &nonRetriableError{errors.New("fake for method UploadLog not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroup>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStack/registrations/(?P<registrationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/products/(?P<productName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/uploadProductLog`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armazurestack.MarketplaceProductLogUpdate](req)
	if err != nil {
		return nil, err
	}
	resourceGroupParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroup")])
	if err != nil {
		return nil, err
	}
	registrationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationName")])
	if err != nil {
		return nil, err
	}
	productNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("productName")])
	if err != nil {
		return nil, err
	}
	var options *armazurestack.ProductsClientUploadLogOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armazurestack.ProductsClientUploadLogOptions{
			MarketplaceProductLogUpdate: &body,
		}
	}
	respr, errRespr := p.srv.UploadLog(req.Context(), resourceGroupParam, registrationNameParam, productNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProductLog, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ProductsServerTransport
var productsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
