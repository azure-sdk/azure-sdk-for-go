//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/Premonition/armPremonition"
	"net/http"
	"net/url"
	"regexp"
)

// SampleOperationsServer is a fake server for instances of the armPremonition.SampleOperationsClient type.
type SampleOperationsServer struct {
	// Create is the fake for method SampleOperationsClient.Create
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Create func(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, resource armPremonition.Sample, options *armPremonition.SampleOperationsClientCreateOptions) (resp azfake.Responder[armPremonition.SampleOperationsClientCreateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method SampleOperationsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, options *armPremonition.SampleOperationsClientDeleteOptions) (resp azfake.Responder[armPremonition.SampleOperationsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SampleOperationsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, options *armPremonition.SampleOperationsClientGetOptions) (resp azfake.Responder[armPremonition.SampleOperationsClientGetResponse], errResp azfake.ErrorResponder)

	// BeginIdentify is the fake for method SampleOperationsClient.BeginIdentify
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginIdentify func(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, body armPremonition.IdentifyRequest, options *armPremonition.SampleOperationsClientBeginIdentifyOptions) (resp azfake.PollerResponder[armPremonition.SampleOperationsClientIdentifyResponse], errResp azfake.ErrorResponder)

	// NewListByParentPager is the fake for method SampleOperationsClient.NewListByParentPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByParentPager func(resourceGroupName string, libraryName string, options *armPremonition.SampleOperationsClientListByParentOptions) (resp azfake.PagerResponder[armPremonition.SampleOperationsClientListByParentResponse])

	// Update is the fake for method SampleOperationsClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceGroupName string, libraryName string, sampleName string, properties armPremonition.SampleUpdate, options *armPremonition.SampleOperationsClientUpdateOptions) (resp azfake.Responder[armPremonition.SampleOperationsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewSampleOperationsServerTransport creates a new instance of SampleOperationsServerTransport with the provided implementation.
// The returned SampleOperationsServerTransport instance is connected to an instance of armPremonition.SampleOperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSampleOperationsServerTransport(srv *SampleOperationsServer) *SampleOperationsServerTransport {
	return &SampleOperationsServerTransport{
		srv:                  srv,
		beginIdentify:        newTracker[azfake.PollerResponder[armPremonition.SampleOperationsClientIdentifyResponse]](),
		newListByParentPager: newTracker[azfake.PagerResponder[armPremonition.SampleOperationsClientListByParentResponse]](),
	}
}

// SampleOperationsServerTransport connects instances of armPremonition.SampleOperationsClient to instances of SampleOperationsServer.
// Don't use this type directly, use NewSampleOperationsServerTransport instead.
type SampleOperationsServerTransport struct {
	srv                  *SampleOperationsServer
	beginIdentify        *tracker[azfake.PollerResponder[armPremonition.SampleOperationsClientIdentifyResponse]]
	newListByParentPager *tracker[azfake.PagerResponder[armPremonition.SampleOperationsClientListByParentResponse]]
}

// Do implements the policy.Transporter interface for SampleOperationsServerTransport.
func (s *SampleOperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SampleOperationsClient.Create":
		resp, err = s.dispatchCreate(req)
	case "SampleOperationsClient.Delete":
		resp, err = s.dispatchDelete(req)
	case "SampleOperationsClient.Get":
		resp, err = s.dispatchGet(req)
	case "SampleOperationsClient.BeginIdentify":
		resp, err = s.dispatchBeginIdentify(req)
	case "SampleOperationsClient.NewListByParentPager":
		resp, err = s.dispatchNewListByParentPager(req)
	case "SampleOperationsClient.Update":
		resp, err = s.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SampleOperationsServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if s.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("fake for method Create not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/samples/(?P<sampleName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armPremonition.Sample](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
	if err != nil {
		return nil, err
	}
	sampleNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sampleName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Create(req.Context(), resourceGroupNameParam, libraryNameParam, sampleNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Sample, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SampleOperationsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if s.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/samples/(?P<sampleName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
	if err != nil {
		return nil, err
	}
	sampleNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sampleName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Delete(req.Context(), resourceGroupNameParam, libraryNameParam, sampleNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SampleOperationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/samples/(?P<sampleName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
	if err != nil {
		return nil, err
	}
	sampleNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sampleName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, libraryNameParam, sampleNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Sample, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SampleOperationsServerTransport) dispatchBeginIdentify(req *http.Request) (*http.Response, error) {
	if s.srv.BeginIdentify == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginIdentify not implemented")}
	}
	beginIdentify := s.beginIdentify.get(req)
	if beginIdentify == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/samples/(?P<sampleName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/identify`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armPremonition.IdentifyRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
		if err != nil {
			return nil, err
		}
		sampleNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sampleName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginIdentify(req.Context(), resourceGroupNameParam, libraryNameParam, sampleNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginIdentify = &respr
		s.beginIdentify.add(req, beginIdentify)
	}

	resp, err := server.PollerResponderNext(beginIdentify, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		s.beginIdentify.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginIdentify) {
		s.beginIdentify.remove(req)
	}

	return resp, nil
}

func (s *SampleOperationsServerTransport) dispatchNewListByParentPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListByParentPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByParentPager not implemented")}
	}
	newListByParentPager := s.newListByParentPager.get(req)
	if newListByParentPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/samples`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListByParentPager(resourceGroupNameParam, libraryNameParam, nil)
		newListByParentPager = &resp
		s.newListByParentPager.add(req, newListByParentPager)
		server.PagerResponderInjectNextLinks(newListByParentPager, req, func(page *armPremonition.SampleOperationsClientListByParentResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByParentPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListByParentPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByParentPager) {
		s.newListByParentPager.remove(req)
	}
	return resp, nil
}

func (s *SampleOperationsServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Premonition/libraries/(?P<libraryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/samples/(?P<sampleName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armPremonition.SampleUpdate](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	libraryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("libraryName")])
	if err != nil {
		return nil, err
	}
	sampleNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("sampleName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Update(req.Context(), resourceGroupNameParam, libraryNameParam, sampleNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Sample, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
