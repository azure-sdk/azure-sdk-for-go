// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armhelp

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DiscoverySolutionNLPOperationGroupClient contains the methods for the DiscoverySolutionNLPOperationGroup group.
// Don't use this type directly, use NewDiscoverySolutionNLPOperationGroupClient() instead.
type DiscoverySolutionNLPOperationGroupClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDiscoverySolutionNLPOperationGroupClient creates a new instance of DiscoverySolutionNLPOperationGroupClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDiscoverySolutionNLPOperationGroupClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DiscoverySolutionNLPOperationGroupClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DiscoverySolutionNLPOperationGroupClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// DiscoverSolutions - Search for relevant Azure Diagnostics, Solutions and Troubleshooters using a natural language issue
// summary.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - discoverSolutionRequest - The request body
//   - options - DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsOptions contains the optional parameters for the DiscoverySolutionNLPOperationGroupClient.DiscoverSolutions
//     method.
func (client *DiscoverySolutionNLPOperationGroupClient) DiscoverSolutions(ctx context.Context, discoverSolutionRequest DiscoveryNlpRequest, options *DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsOptions) (DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsResponse, error) {
	var err error
	const operationName = "DiscoverySolutionNLPOperationGroupClient.DiscoverSolutions"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.discoverSolutionsCreateRequest(ctx, discoverSolutionRequest, options)
	if err != nil {
		return DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsResponse{}, err
	}
	resp, err := client.discoverSolutionsHandleResponse(httpResp)
	return resp, err
}

// discoverSolutionsCreateRequest creates the DiscoverSolutions request.
func (client *DiscoverySolutionNLPOperationGroupClient) discoverSolutionsCreateRequest(ctx context.Context, discoverSolutionRequest DiscoveryNlpRequest, _ *DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Help/discoverSolutions"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, discoverSolutionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// discoverSolutionsHandleResponse handles the DiscoverSolutions response.
func (client *DiscoverySolutionNLPOperationGroupClient) discoverSolutionsHandleResponse(resp *http.Response) (DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsResponse, error) {
	result := DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveryNlpResponse); err != nil {
		return DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsResponse{}, err
	}
	return result, nil
}

// DiscoverSolutionsBySubscription - Search for relevant Azure Diagnostics, Solutions and Troubleshooters using a natural
// language issue summary and subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-03-01-preview
//   - discoverSolutionRequest - The request body
//   - options - DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionOptions contains the optional parameters
//     for the DiscoverySolutionNLPOperationGroupClient.DiscoverSolutionsBySubscription method.
func (client *DiscoverySolutionNLPOperationGroupClient) DiscoverSolutionsBySubscription(ctx context.Context, discoverSolutionRequest DiscoveryNlpRequest, options *DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionOptions) (DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionResponse, error) {
	var err error
	const operationName = "DiscoverySolutionNLPOperationGroupClient.DiscoverSolutionsBySubscription"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.discoverSolutionsBySubscriptionCreateRequest(ctx, discoverSolutionRequest, options)
	if err != nil {
		return DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionResponse{}, err
	}
	resp, err := client.discoverSolutionsBySubscriptionHandleResponse(httpResp)
	return resp, err
}

// discoverSolutionsBySubscriptionCreateRequest creates the DiscoverSolutionsBySubscription request.
func (client *DiscoverySolutionNLPOperationGroupClient) discoverSolutionsBySubscriptionCreateRequest(ctx context.Context, discoverSolutionRequest DiscoveryNlpRequest, _ *DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Help/discoverSolutions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, discoverSolutionRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// discoverSolutionsBySubscriptionHandleResponse handles the DiscoverSolutionsBySubscription response.
func (client *DiscoverySolutionNLPOperationGroupClient) discoverSolutionsBySubscriptionHandleResponse(resp *http.Response) (DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionResponse, error) {
	result := DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveryNlpResponse); err != nil {
		return DiscoverySolutionNLPOperationGroupClientDiscoverSolutionsBySubscriptionResponse{}, err
	}
	return result, nil
}
