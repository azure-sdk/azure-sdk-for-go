//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// PrivateEndpointConnectionControllerServer is a fake server for instances of the armmigrationhub.PrivateEndpointConnectionControllerClient type.
type PrivateEndpointConnectionControllerServer struct {
	// DeletePrivateEndpointConnection is the fake for method PrivateEndpointConnectionControllerClient.DeletePrivateEndpointConnection
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	DeletePrivateEndpointConnection func(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, options *armmigrationhub.PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionOptions) (resp azfake.Responder[armmigrationhub.PrivateEndpointConnectionControllerClientDeletePrivateEndpointConnectionResponse], errResp azfake.ErrorResponder)

	// GetPrivateEndpointConnection is the fake for method PrivateEndpointConnectionControllerClient.GetPrivateEndpointConnection
	// HTTP status codes to indicate success: http.StatusOK
	GetPrivateEndpointConnection func(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, options *armmigrationhub.PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionOptions) (resp azfake.Responder[armmigrationhub.PrivateEndpointConnectionControllerClientGetPrivateEndpointConnectionResponse], errResp azfake.ErrorResponder)

	// PutPrivateEndpointConnection is the fake for method PrivateEndpointConnectionControllerClient.PutPrivateEndpointConnection
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	PutPrivateEndpointConnection func(ctx context.Context, resourceGroupName string, migrateProjectName string, peConnectionName string, body armmigrationhub.PrivateEndpointConnection, options *armmigrationhub.PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionOptions) (resp azfake.Responder[armmigrationhub.PrivateEndpointConnectionControllerClientPutPrivateEndpointConnectionResponse], errResp azfake.ErrorResponder)
}

// NewPrivateEndpointConnectionControllerServerTransport creates a new instance of PrivateEndpointConnectionControllerServerTransport with the provided implementation.
// The returned PrivateEndpointConnectionControllerServerTransport instance is connected to an instance of armmigrationhub.PrivateEndpointConnectionControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPrivateEndpointConnectionControllerServerTransport(srv *PrivateEndpointConnectionControllerServer) *PrivateEndpointConnectionControllerServerTransport {
	return &PrivateEndpointConnectionControllerServerTransport{srv: srv}
}

// PrivateEndpointConnectionControllerServerTransport connects instances of armmigrationhub.PrivateEndpointConnectionControllerClient to instances of PrivateEndpointConnectionControllerServer.
// Don't use this type directly, use NewPrivateEndpointConnectionControllerServerTransport instead.
type PrivateEndpointConnectionControllerServerTransport struct {
	srv *PrivateEndpointConnectionControllerServer
}

// Do implements the policy.Transporter interface for PrivateEndpointConnectionControllerServerTransport.
func (p *PrivateEndpointConnectionControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PrivateEndpointConnectionControllerClient.DeletePrivateEndpointConnection":
		resp, err = p.dispatchDeletePrivateEndpointConnection(req)
	case "PrivateEndpointConnectionControllerClient.GetPrivateEndpointConnection":
		resp, err = p.dispatchGetPrivateEndpointConnection(req)
	case "PrivateEndpointConnectionControllerClient.PutPrivateEndpointConnection":
		resp, err = p.dispatchPutPrivateEndpointConnection(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PrivateEndpointConnectionControllerServerTransport) dispatchDeletePrivateEndpointConnection(req *http.Request) (*http.Response, error) {
	if p.srv.DeletePrivateEndpointConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeletePrivateEndpointConnection not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/privateEndpointConnections/(?P<peConnectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	peConnectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("peConnectionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.DeletePrivateEndpointConnection(req.Context(), resourceGroupNameParam, migrateProjectNameParam, peConnectionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PrivateEndpointConnectionControllerServerTransport) dispatchGetPrivateEndpointConnection(req *http.Request) (*http.Response, error) {
	if p.srv.GetPrivateEndpointConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetPrivateEndpointConnection not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/privateEndpointConnections/(?P<peConnectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	peConnectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("peConnectionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.GetPrivateEndpointConnection(req.Context(), resourceGroupNameParam, migrateProjectNameParam, peConnectionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PrivateEndpointConnection, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PrivateEndpointConnectionControllerServerTransport) dispatchPutPrivateEndpointConnection(req *http.Request) (*http.Response, error) {
	if p.srv.PutPrivateEndpointConnection == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutPrivateEndpointConnection not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/privateEndpointConnections/(?P<peConnectionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmigrationhub.PrivateEndpointConnection](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	peConnectionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("peConnectionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.PutPrivateEndpointConnection(req.Context(), resourceGroupNameParam, migrateProjectNameParam, peConnectionNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PrivateEndpointConnection, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).RetryAfter; val != nil {
		resp.Header.Set("Retry-After", strconv.FormatInt(int64(*val), 10))
	}
	return resp, nil
}
