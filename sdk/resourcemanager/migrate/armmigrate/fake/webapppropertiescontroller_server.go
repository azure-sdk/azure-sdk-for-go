//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate"
	"net/http"
	"net/url"
	"regexp"
)

// WebAppPropertiesControllerServer is a fake server for instances of the armmigrate.WebAppPropertiesControllerClient type.
type WebAppPropertiesControllerServer struct {
	// BeginUpdateProperties is the fake for method WebAppPropertiesControllerClient.BeginUpdateProperties
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdateProperties func(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, body armmigrate.WebAppPropertiesCollection, options *armmigrate.WebAppPropertiesControllerClientBeginUpdatePropertiesOptions) (resp azfake.PollerResponder[armmigrate.WebAppPropertiesControllerClientUpdatePropertiesResponse], errResp azfake.ErrorResponder)
}

// NewWebAppPropertiesControllerServerTransport creates a new instance of WebAppPropertiesControllerServerTransport with the provided implementation.
// The returned WebAppPropertiesControllerServerTransport instance is connected to an instance of armmigrate.WebAppPropertiesControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWebAppPropertiesControllerServerTransport(srv *WebAppPropertiesControllerServer) *WebAppPropertiesControllerServerTransport {
	return &WebAppPropertiesControllerServerTransport{
		srv:                   srv,
		beginUpdateProperties: newTracker[azfake.PollerResponder[armmigrate.WebAppPropertiesControllerClientUpdatePropertiesResponse]](),
	}
}

// WebAppPropertiesControllerServerTransport connects instances of armmigrate.WebAppPropertiesControllerClient to instances of WebAppPropertiesControllerServer.
// Don't use this type directly, use NewWebAppPropertiesControllerServerTransport instead.
type WebAppPropertiesControllerServerTransport struct {
	srv                   *WebAppPropertiesControllerServer
	beginUpdateProperties *tracker[azfake.PollerResponder[armmigrate.WebAppPropertiesControllerClientUpdatePropertiesResponse]]
}

// Do implements the policy.Transporter interface for WebAppPropertiesControllerServerTransport.
func (w *WebAppPropertiesControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "WebAppPropertiesControllerClient.BeginUpdateProperties":
		resp, err = w.dispatchBeginUpdateProperties(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (w *WebAppPropertiesControllerServerTransport) dispatchBeginUpdateProperties(req *http.Request) (*http.Response, error) {
	if w.srv.BeginUpdateProperties == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdateProperties not implemented")}
	}
	beginUpdateProperties := w.beginUpdateProperties.get(req)
	if beginUpdateProperties == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/masterSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/webAppSites/(?P<webAppSiteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/updateProperties`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armmigrate.WebAppPropertiesCollection](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		webAppSiteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("webAppSiteName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginUpdateProperties(req.Context(), resourceGroupNameParam, siteNameParam, webAppSiteNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdateProperties = &respr
		w.beginUpdateProperties.add(req, beginUpdateProperties)
	}

	resp, err := server.PollerResponderNext(beginUpdateProperties, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		w.beginUpdateProperties.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdateProperties) {
		w.beginUpdateProperties.remove(req)
	}

	return resp, nil
}
