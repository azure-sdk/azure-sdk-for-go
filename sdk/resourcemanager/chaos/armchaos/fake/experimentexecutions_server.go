// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/chaos/armchaos/v2"
	"net/http"
	"net/url"
	"regexp"
)

// ExperimentExecutionsServer is a fake server for instances of the armchaos.ExperimentExecutionsClient type.
type ExperimentExecutionsServer struct {
	// GetExecution is the fake for method ExperimentExecutionsClient.GetExecution
	// HTTP status codes to indicate success: http.StatusOK
	GetExecution func(ctx context.Context, resourceGroupName string, experimentName string, executionID string, options *armchaos.ExperimentExecutionsClientGetExecutionOptions) (resp azfake.Responder[armchaos.ExperimentExecutionsClientGetExecutionResponse], errResp azfake.ErrorResponder)

	// GetExecutionDetails is the fake for method ExperimentExecutionsClient.GetExecutionDetails
	// HTTP status codes to indicate success: http.StatusOK
	GetExecutionDetails func(ctx context.Context, resourceGroupName string, experimentName string, executionID string, options *armchaos.ExperimentExecutionsClientGetExecutionDetailsOptions) (resp azfake.Responder[armchaos.ExperimentExecutionsClientGetExecutionDetailsResponse], errResp azfake.ErrorResponder)

	// NewListAllExecutionsPager is the fake for method ExperimentExecutionsClient.NewListAllExecutionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAllExecutionsPager func(resourceGroupName string, experimentName string, options *armchaos.ExperimentExecutionsClientListAllExecutionsOptions) (resp azfake.PagerResponder[armchaos.ExperimentExecutionsClientListAllExecutionsResponse])
}

// NewExperimentExecutionsServerTransport creates a new instance of ExperimentExecutionsServerTransport with the provided implementation.
// The returned ExperimentExecutionsServerTransport instance is connected to an instance of armchaos.ExperimentExecutionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewExperimentExecutionsServerTransport(srv *ExperimentExecutionsServer) *ExperimentExecutionsServerTransport {
	return &ExperimentExecutionsServerTransport{
		srv:                       srv,
		newListAllExecutionsPager: newTracker[azfake.PagerResponder[armchaos.ExperimentExecutionsClientListAllExecutionsResponse]](),
	}
}

// ExperimentExecutionsServerTransport connects instances of armchaos.ExperimentExecutionsClient to instances of ExperimentExecutionsServer.
// Don't use this type directly, use NewExperimentExecutionsServerTransport instead.
type ExperimentExecutionsServerTransport struct {
	srv                       *ExperimentExecutionsServer
	newListAllExecutionsPager *tracker[azfake.PagerResponder[armchaos.ExperimentExecutionsClientListAllExecutionsResponse]]
}

// Do implements the policy.Transporter interface for ExperimentExecutionsServerTransport.
func (e *ExperimentExecutionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return e.dispatchToMethodFake(req, method)
}

func (e *ExperimentExecutionsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if experimentExecutionsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = experimentExecutionsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ExperimentExecutionsClient.GetExecution":
				res.resp, res.err = e.dispatchGetExecution(req)
			case "ExperimentExecutionsClient.GetExecutionDetails":
				res.resp, res.err = e.dispatchGetExecutionDetails(req)
			case "ExperimentExecutionsClient.NewListAllExecutionsPager":
				res.resp, res.err = e.dispatchNewListAllExecutionsPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (e *ExperimentExecutionsServerTransport) dispatchGetExecution(req *http.Request) (*http.Response, error) {
	if e.srv.GetExecution == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetExecution not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Chaos/experiments/(?P<experimentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/executions/(?P<executionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	experimentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("experimentName")])
	if err != nil {
		return nil, err
	}
	executionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("executionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.GetExecution(req.Context(), resourceGroupNameParam, experimentNameParam, executionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExperimentExecution, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *ExperimentExecutionsServerTransport) dispatchGetExecutionDetails(req *http.Request) (*http.Response, error) {
	if e.srv.GetExecutionDetails == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetExecutionDetails not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Chaos/experiments/(?P<experimentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/executions/(?P<executionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getExecutionDetails`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	experimentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("experimentName")])
	if err != nil {
		return nil, err
	}
	executionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("executionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.GetExecutionDetails(req.Context(), resourceGroupNameParam, experimentNameParam, executionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ExperimentExecutionDetails, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *ExperimentExecutionsServerTransport) dispatchNewListAllExecutionsPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListAllExecutionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAllExecutionsPager not implemented")}
	}
	newListAllExecutionsPager := e.newListAllExecutionsPager.get(req)
	if newListAllExecutionsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Chaos/experiments/(?P<experimentName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/executions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		experimentNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("experimentName")])
		if err != nil {
			return nil, err
		}
		resp := e.srv.NewListAllExecutionsPager(resourceGroupNameParam, experimentNameParam, nil)
		newListAllExecutionsPager = &resp
		e.newListAllExecutionsPager.add(req, newListAllExecutionsPager)
		server.PagerResponderInjectNextLinks(newListAllExecutionsPager, req, func(page *armchaos.ExperimentExecutionsClientListAllExecutionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAllExecutionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListAllExecutionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAllExecutionsPager) {
		e.newListAllExecutionsPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ExperimentExecutionsServerTransport
var experimentExecutionsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
