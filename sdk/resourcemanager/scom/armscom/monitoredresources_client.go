//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armscom

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MonitoredResourcesClient contains the methods for the MonitoredResources group.
// Don't use this type directly, use NewMonitoredResourcesClient() instead.
type MonitoredResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewMonitoredResourcesClient creates a new instance of MonitoredResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewMonitoredResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MonitoredResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &MonitoredResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update a monitored resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - monitoredResourceName - The monitored resource name.
//   - resource - Resource create parameters.
//   - options - MonitoredResourcesClientCreateOrUpdateOptions contains the optional parameters for the MonitoredResourcesClient.CreateOrUpdate
//     method.
func (client *MonitoredResourcesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, instanceName string, monitoredResourceName string, resource MonitoredResource, options *MonitoredResourcesClientCreateOrUpdateOptions) (MonitoredResourcesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "MonitoredResourcesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, instanceName, monitoredResourceName, resource, options)
	if err != nil {
		return MonitoredResourcesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MonitoredResourcesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return MonitoredResourcesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *MonitoredResourcesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, monitoredResourceName string, resource MonitoredResource, options *MonitoredResourcesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/monitoredResources/{monitoredResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	if monitoredResourceName == "" {
		return nil, errors.New("parameter monitoredResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{monitoredResourceName}", url.PathEscape(monitoredResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *MonitoredResourcesClient) createOrUpdateHandleResponse(resp *http.Response) (MonitoredResourcesClientCreateOrUpdateResponse, error) {
	result := MonitoredResourcesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoredResource); err != nil {
		return MonitoredResourcesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a monitored resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - monitoredResourceName - The monitored resource name.
//   - options - MonitoredResourcesClientDeleteOptions contains the optional parameters for the MonitoredResourcesClient.Delete
//     method.
func (client *MonitoredResourcesClient) Delete(ctx context.Context, resourceGroupName string, instanceName string, monitoredResourceName string, options *MonitoredResourcesClientDeleteOptions) (MonitoredResourcesClientDeleteResponse, error) {
	var err error
	const operationName = "MonitoredResourcesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, instanceName, monitoredResourceName, options)
	if err != nil {
		return MonitoredResourcesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MonitoredResourcesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return MonitoredResourcesClientDeleteResponse{}, err
	}
	return MonitoredResourcesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *MonitoredResourcesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, monitoredResourceName string, options *MonitoredResourcesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/monitoredResources/{monitoredResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	if monitoredResourceName == "" {
		return nil, errors.New("parameter monitoredResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{monitoredResourceName}", url.PathEscape(monitoredResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieve the details of the monitored resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - monitoredResourceName - The monitored resource name.
//   - options - MonitoredResourcesClientGetOptions contains the optional parameters for the MonitoredResourcesClient.Get method.
func (client *MonitoredResourcesClient) Get(ctx context.Context, resourceGroupName string, instanceName string, monitoredResourceName string, options *MonitoredResourcesClientGetOptions) (MonitoredResourcesClientGetResponse, error) {
	var err error
	const operationName = "MonitoredResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, instanceName, monitoredResourceName, options)
	if err != nil {
		return MonitoredResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MonitoredResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MonitoredResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *MonitoredResourcesClient) getCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, monitoredResourceName string, options *MonitoredResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/monitoredResources/{monitoredResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	if monitoredResourceName == "" {
		return nil, errors.New("parameter monitoredResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{monitoredResourceName}", url.PathEscape(monitoredResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MonitoredResourcesClient) getHandleResponse(resp *http.Response) (MonitoredResourcesClientGetResponse, error) {
	result := MonitoredResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoredResource); err != nil {
		return MonitoredResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByManagedInstancePager - A comprehensive list of all monitored resources within a SCOM managed instance.
//
// Generated from API version 2023-07-07-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - instanceName - Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
//   - options - MonitoredResourcesClientListByManagedInstanceOptions contains the optional parameters for the MonitoredResourcesClient.NewListByManagedInstancePager
//     method.
func (client *MonitoredResourcesClient) NewListByManagedInstancePager(resourceGroupName string, instanceName string, options *MonitoredResourcesClientListByManagedInstanceOptions) *runtime.Pager[MonitoredResourcesClientListByManagedInstanceResponse] {
	return runtime.NewPager(runtime.PagingHandler[MonitoredResourcesClientListByManagedInstanceResponse]{
		More: func(page MonitoredResourcesClientListByManagedInstanceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MonitoredResourcesClientListByManagedInstanceResponse) (MonitoredResourcesClientListByManagedInstanceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "MonitoredResourcesClient.NewListByManagedInstancePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByManagedInstanceCreateRequest(ctx, resourceGroupName, instanceName, options)
			}, nil)
			if err != nil {
				return MonitoredResourcesClientListByManagedInstanceResponse{}, err
			}
			return client.listByManagedInstanceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByManagedInstanceCreateRequest creates the ListByManagedInstance request.
func (client *MonitoredResourcesClient) listByManagedInstanceCreateRequest(ctx context.Context, resourceGroupName string, instanceName string, options *MonitoredResourcesClientListByManagedInstanceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/monitoredResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instanceName == "" {
		return nil, errors.New("parameter instanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instanceName}", url.PathEscape(instanceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByManagedInstanceHandleResponse handles the ListByManagedInstance response.
func (client *MonitoredResourcesClient) listByManagedInstanceHandleResponse(resp *http.Response) (MonitoredResourcesClientListByManagedInstanceResponse, error) {
	result := MonitoredResourcesClientListByManagedInstanceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoredResourceListResult); err != nil {
		return MonitoredResourcesClientListByManagedInstanceResponse{}, err
	}
	return result, nil
}
