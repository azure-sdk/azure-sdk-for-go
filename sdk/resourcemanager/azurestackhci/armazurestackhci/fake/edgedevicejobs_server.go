// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhci/v3"
	"net/http"
	"net/url"
	"regexp"
)

// EdgeDeviceJobsServer is a fake server for instances of the armazurestackhci.EdgeDeviceJobsClient type.
type EdgeDeviceJobsServer struct {
	// BeginCreateOrUpdate is the fake for method EdgeDeviceJobsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, resource armazurestackhci.EdgeDeviceJobClassification, options *armazurestackhci.EdgeDeviceJobsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armazurestackhci.EdgeDeviceJobsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method EdgeDeviceJobsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, options *armazurestackhci.EdgeDeviceJobsClientBeginDeleteOptions) (resp azfake.PollerResponder[armazurestackhci.EdgeDeviceJobsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method EdgeDeviceJobsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, options *armazurestackhci.EdgeDeviceJobsClientGetOptions) (resp azfake.Responder[armazurestackhci.EdgeDeviceJobsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByEdgeDevicePager is the fake for method EdgeDeviceJobsClient.NewListByEdgeDevicePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByEdgeDevicePager func(resourceURI string, edgeDeviceName string, options *armazurestackhci.EdgeDeviceJobsClientListByEdgeDeviceOptions) (resp azfake.PagerResponder[armazurestackhci.EdgeDeviceJobsClientListByEdgeDeviceResponse])
}

// NewEdgeDeviceJobsServerTransport creates a new instance of EdgeDeviceJobsServerTransport with the provided implementation.
// The returned EdgeDeviceJobsServerTransport instance is connected to an instance of armazurestackhci.EdgeDeviceJobsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEdgeDeviceJobsServerTransport(srv *EdgeDeviceJobsServer) *EdgeDeviceJobsServerTransport {
	return &EdgeDeviceJobsServerTransport{
		srv:                      srv,
		beginCreateOrUpdate:      newTracker[azfake.PollerResponder[armazurestackhci.EdgeDeviceJobsClientCreateOrUpdateResponse]](),
		beginDelete:              newTracker[azfake.PollerResponder[armazurestackhci.EdgeDeviceJobsClientDeleteResponse]](),
		newListByEdgeDevicePager: newTracker[azfake.PagerResponder[armazurestackhci.EdgeDeviceJobsClientListByEdgeDeviceResponse]](),
	}
}

// EdgeDeviceJobsServerTransport connects instances of armazurestackhci.EdgeDeviceJobsClient to instances of EdgeDeviceJobsServer.
// Don't use this type directly, use NewEdgeDeviceJobsServerTransport instead.
type EdgeDeviceJobsServerTransport struct {
	srv                      *EdgeDeviceJobsServer
	beginCreateOrUpdate      *tracker[azfake.PollerResponder[armazurestackhci.EdgeDeviceJobsClientCreateOrUpdateResponse]]
	beginDelete              *tracker[azfake.PollerResponder[armazurestackhci.EdgeDeviceJobsClientDeleteResponse]]
	newListByEdgeDevicePager *tracker[azfake.PagerResponder[armazurestackhci.EdgeDeviceJobsClientListByEdgeDeviceResponse]]
}

// Do implements the policy.Transporter interface for EdgeDeviceJobsServerTransport.
func (e *EdgeDeviceJobsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return e.dispatchToMethodFake(req, method)
}

func (e *EdgeDeviceJobsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if edgeDeviceJobsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = edgeDeviceJobsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "EdgeDeviceJobsClient.BeginCreateOrUpdate":
				res.resp, res.err = e.dispatchBeginCreateOrUpdate(req)
			case "EdgeDeviceJobsClient.BeginDelete":
				res.resp, res.err = e.dispatchBeginDelete(req)
			case "EdgeDeviceJobsClient.Get":
				res.resp, res.err = e.dispatchGet(req)
			case "EdgeDeviceJobsClient.NewListByEdgeDevicePager":
				res.resp, res.err = e.dispatchNewListByEdgeDevicePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (e *EdgeDeviceJobsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if e.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := e.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/edgeDevices/(?P<edgeDeviceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jobs/(?P<jobsName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		raw, err := readRequestBody(req)
		if err != nil {
			return nil, err
		}
		body, err := unmarshalEdgeDeviceJobClassification(raw)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		edgeDeviceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeDeviceName")])
		if err != nil {
			return nil, err
		}
		jobsNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jobsName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginCreateOrUpdate(req.Context(), resourceURIParam, edgeDeviceNameParam, jobsNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		e.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		e.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		e.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (e *EdgeDeviceJobsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if e.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := e.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/edgeDevices/(?P<edgeDeviceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jobs/(?P<jobsName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		edgeDeviceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeDeviceName")])
		if err != nil {
			return nil, err
		}
		jobsNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jobsName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginDelete(req.Context(), resourceURIParam, edgeDeviceNameParam, jobsNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		e.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		e.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		e.beginDelete.remove(req)
	}

	return resp, nil
}

func (e *EdgeDeviceJobsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if e.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/edgeDevices/(?P<edgeDeviceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jobs/(?P<jobsName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	edgeDeviceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeDeviceName")])
	if err != nil {
		return nil, err
	}
	jobsNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jobsName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.Get(req.Context(), resourceURIParam, edgeDeviceNameParam, jobsNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EdgeDeviceJobClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EdgeDeviceJobsServerTransport) dispatchNewListByEdgeDevicePager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListByEdgeDevicePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByEdgeDevicePager not implemented")}
	}
	newListByEdgeDevicePager := e.newListByEdgeDevicePager.get(req)
	if newListByEdgeDevicePager == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/edgeDevices/(?P<edgeDeviceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jobs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		edgeDeviceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeDeviceName")])
		if err != nil {
			return nil, err
		}
		resp := e.srv.NewListByEdgeDevicePager(resourceURIParam, edgeDeviceNameParam, nil)
		newListByEdgeDevicePager = &resp
		e.newListByEdgeDevicePager.add(req, newListByEdgeDevicePager)
		server.PagerResponderInjectNextLinks(newListByEdgeDevicePager, req, func(page *armazurestackhci.EdgeDeviceJobsClientListByEdgeDeviceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByEdgeDevicePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListByEdgeDevicePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByEdgeDevicePager) {
		e.newListByEdgeDevicePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to EdgeDeviceJobsServerTransport
var edgeDeviceJobsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
