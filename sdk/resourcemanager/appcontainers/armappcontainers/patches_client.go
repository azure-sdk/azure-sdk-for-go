//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappcontainers

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PatchesClient contains the methods for the Patches group.
// Don't use this type directly, use NewPatchesClient() instead.
type PatchesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPatchesClient creates a new instance of PatchesClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPatchesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PatchesClient, error) {
	cl, err := arm.NewClient(moduleName+".PatchesClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PatchesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginApply - Apply a PatchResource with patch name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - builderName - The name of the builder.
//   - patchName - The name of the patch
//   - options - PatchesClientBeginApplyOptions contains the optional parameters for the PatchesClient.BeginApply method.
func (client *PatchesClient) BeginApply(ctx context.Context, resourceGroupName string, builderName string, patchName string, options *PatchesClientBeginApplyOptions) (*runtime.Poller[PatchesClientApplyResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.apply(ctx, resourceGroupName, builderName, patchName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PatchesClientApplyResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[PatchesClientApplyResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Apply - Apply a PatchResource with patch name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
func (client *PatchesClient) apply(ctx context.Context, resourceGroupName string, builderName string, patchName string, options *PatchesClientBeginApplyOptions) (*http.Response, error) {
	var err error
	req, err := client.applyCreateRequest(ctx, resourceGroupName, builderName, patchName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// applyCreateRequest creates the Apply request.
func (client *PatchesClient) applyCreateRequest(ctx context.Context, resourceGroupName string, builderName string, patchName string, options *PatchesClientBeginApplyOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches/{patchName}/apply"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if builderName == "" {
		return nil, errors.New("parameter builderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{builderName}", url.PathEscape(builderName))
	if patchName == "" {
		return nil, errors.New("parameter patchName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{patchName}", url.PathEscape(patchName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDelete - Delete specific patch by patch name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - builderName - The name of the builder.
//   - patchName - The name of the patch
//   - options - PatchesClientBeginDeleteOptions contains the optional parameters for the PatchesClient.BeginDelete method.
func (client *PatchesClient) BeginDelete(ctx context.Context, resourceGroupName string, builderName string, patchName string, options *PatchesClientBeginDeleteOptions) (*runtime.Poller[PatchesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, builderName, patchName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PatchesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[PatchesClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete specific patch by patch name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
func (client *PatchesClient) deleteOperation(ctx context.Context, resourceGroupName string, builderName string, patchName string, options *PatchesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, builderName, patchName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PatchesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, builderName string, patchName string, options *PatchesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches/{patchName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if builderName == "" {
		return nil, errors.New("parameter builderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{builderName}", url.PathEscape(builderName))
	if patchName == "" {
		return nil, errors.New("parameter patchName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{patchName}", url.PathEscape(patchName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get details for specific patch by patch name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - builderName - The name of the builder.
//   - patchName - The name of the patch
//   - options - PatchesClientGetOptions contains the optional parameters for the PatchesClient.Get method.
func (client *PatchesClient) Get(ctx context.Context, resourceGroupName string, builderName string, patchName string, options *PatchesClientGetOptions) (PatchesClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, resourceGroupName, builderName, patchName, options)
	if err != nil {
		return PatchesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PatchesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PatchesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PatchesClient) getCreateRequest(ctx context.Context, resourceGroupName string, builderName string, patchName string, options *PatchesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches/{patchName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if builderName == "" {
		return nil, errors.New("parameter builderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{builderName}", url.PathEscape(builderName))
	if patchName == "" {
		return nil, errors.New("parameter patchName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{patchName}", url.PathEscape(patchName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PatchesClient) getHandleResponse(resp *http.Response) (PatchesClientGetResponse, error) {
	result := PatchesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PatchResource); err != nil {
		return PatchesClientGetResponse{}, err
	}
	return result, nil
}

// ListByBuilderResource - List PatchResource resources by BuilderResource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - builderName - The name of the builder.
//   - options - PatchesClientListByBuilderResourceOptions contains the optional parameters for the PatchesClient.ListByBuilderResource
//     method.
func (client *PatchesClient) ListByBuilderResource(ctx context.Context, resourceGroupName string, builderName string, options *PatchesClientListByBuilderResourceOptions) (PatchesClientListByBuilderResourceResponse, error) {
	var err error
	req, err := client.listByBuilderResourceCreateRequest(ctx, resourceGroupName, builderName, options)
	if err != nil {
		return PatchesClientListByBuilderResourceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PatchesClientListByBuilderResourceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PatchesClientListByBuilderResourceResponse{}, err
	}
	resp, err := client.listByBuilderResourceHandleResponse(httpResp)
	return resp, err
}

// listByBuilderResourceCreateRequest creates the ListByBuilderResource request.
func (client *PatchesClient) listByBuilderResourceCreateRequest(ctx context.Context, resourceGroupName string, builderName string, options *PatchesClientListByBuilderResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if builderName == "" {
		return nil, errors.New("parameter builderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{builderName}", url.PathEscape(builderName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-08-01-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByBuilderResourceHandleResponse handles the ListByBuilderResource response.
func (client *PatchesClient) listByBuilderResourceHandleResponse(resp *http.Response) (PatchesClientListByBuilderResourceResponse, error) {
	result := PatchesClientListByBuilderResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PatchCollection); err != nil {
		return PatchesClientListByBuilderResourceResponse{}, err
	}
	return result, nil
}

// BeginSkipConfigure - Configure the patch skip option by patch name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - builderName - The name of the builder.
//   - patchName - The name of the patch
//   - patchSkipConfig - Configure patcher to skip a patch or not.
//   - options - PatchesClientBeginSkipConfigureOptions contains the optional parameters for the PatchesClient.BeginSkipConfigure
//     method.
func (client *PatchesClient) BeginSkipConfigure(ctx context.Context, resourceGroupName string, builderName string, patchName string, patchSkipConfig bool, options *PatchesClientBeginSkipConfigureOptions) (*runtime.Poller[PatchesClientSkipConfigureResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.skipConfigure(ctx, resourceGroupName, builderName, patchName, patchSkipConfig, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[PatchesClientSkipConfigureResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[PatchesClientSkipConfigureResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// SkipConfigure - Configure the patch skip option by patch name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-08-01-preview
func (client *PatchesClient) skipConfigure(ctx context.Context, resourceGroupName string, builderName string, patchName string, patchSkipConfig bool, options *PatchesClientBeginSkipConfigureOptions) (*http.Response, error) {
	var err error
	req, err := client.skipConfigureCreateRequest(ctx, resourceGroupName, builderName, patchName, patchSkipConfig, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// skipConfigureCreateRequest creates the SkipConfigure request.
func (client *PatchesClient) skipConfigureCreateRequest(ctx context.Context, resourceGroupName string, builderName string, patchName string, patchSkipConfig bool, options *PatchesClientBeginSkipConfigureOptions) (*policy.Request, error) {
	urlPath := "/subscription/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches/{patchName}/skipConfig"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if builderName == "" {
		return nil, errors.New("parameter builderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{builderName}", url.PathEscape(builderName))
	if patchName == "" {
		return nil, errors.New("parameter patchName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{patchName}", url.PathEscape(patchName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, patchSkipConfig); err != nil {
		return nil, err
	}
	return req, nil
}
