//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// VirtualDesktopUserControllerServer is a fake server for instances of the armmigrationhub.VirtualDesktopUserControllerClient type.
type VirtualDesktopUserControllerServer struct {
	// GetVirtualDesktopUser is the fake for method VirtualDesktopUserControllerClient.GetVirtualDesktopUser
	// HTTP status codes to indicate success: http.StatusOK
	GetVirtualDesktopUser func(ctx context.Context, resourceGroupName string, migrateProjectName string, virtualDesktopUserName string, options *armmigrationhub.VirtualDesktopUserControllerClientGetVirtualDesktopUserOptions) (resp azfake.Responder[armmigrationhub.VirtualDesktopUserControllerClientGetVirtualDesktopUserResponse], errResp azfake.ErrorResponder)

	// NewListVirtualDesktopUsersPager is the fake for method VirtualDesktopUserControllerClient.NewListVirtualDesktopUsersPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListVirtualDesktopUsersPager func(resourceGroupName string, migrateProjectName string, options *armmigrationhub.VirtualDesktopUserControllerClientListVirtualDesktopUsersOptions) (resp azfake.PagerResponder[armmigrationhub.VirtualDesktopUserControllerClientListVirtualDesktopUsersResponse])
}

// NewVirtualDesktopUserControllerServerTransport creates a new instance of VirtualDesktopUserControllerServerTransport with the provided implementation.
// The returned VirtualDesktopUserControllerServerTransport instance is connected to an instance of armmigrationhub.VirtualDesktopUserControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVirtualDesktopUserControllerServerTransport(srv *VirtualDesktopUserControllerServer) *VirtualDesktopUserControllerServerTransport {
	return &VirtualDesktopUserControllerServerTransport{
		srv:                             srv,
		newListVirtualDesktopUsersPager: newTracker[azfake.PagerResponder[armmigrationhub.VirtualDesktopUserControllerClientListVirtualDesktopUsersResponse]](),
	}
}

// VirtualDesktopUserControllerServerTransport connects instances of armmigrationhub.VirtualDesktopUserControllerClient to instances of VirtualDesktopUserControllerServer.
// Don't use this type directly, use NewVirtualDesktopUserControllerServerTransport instead.
type VirtualDesktopUserControllerServerTransport struct {
	srv                             *VirtualDesktopUserControllerServer
	newListVirtualDesktopUsersPager *tracker[azfake.PagerResponder[armmigrationhub.VirtualDesktopUserControllerClientListVirtualDesktopUsersResponse]]
}

// Do implements the policy.Transporter interface for VirtualDesktopUserControllerServerTransport.
func (v *VirtualDesktopUserControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VirtualDesktopUserControllerClient.GetVirtualDesktopUser":
		resp, err = v.dispatchGetVirtualDesktopUser(req)
	case "VirtualDesktopUserControllerClient.NewListVirtualDesktopUsersPager":
		resp, err = v.dispatchNewListVirtualDesktopUsersPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VirtualDesktopUserControllerServerTransport) dispatchGetVirtualDesktopUser(req *http.Request) (*http.Response, error) {
	if v.srv.GetVirtualDesktopUser == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetVirtualDesktopUser not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/virtualDesktopUsers/(?P<virtualDesktopUserName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	virtualDesktopUserNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualDesktopUserName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.GetVirtualDesktopUser(req.Context(), resourceGroupNameParam, migrateProjectNameParam, virtualDesktopUserNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VirtualDesktopUser, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VirtualDesktopUserControllerServerTransport) dispatchNewListVirtualDesktopUsersPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListVirtualDesktopUsersPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListVirtualDesktopUsersPager not implemented")}
	}
	newListVirtualDesktopUsersPager := v.newListVirtualDesktopUsersPager.get(req)
	if newListVirtualDesktopUsersPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/virtualDesktopUsers`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		pageSizeUnescaped, err := url.QueryUnescape(qp.Get("pageSize"))
		if err != nil {
			return nil, err
		}
		pageSizeParam, err := parseOptional(pageSizeUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armmigrationhub.VirtualDesktopUserControllerClientListVirtualDesktopUsersOptions
		if continuationTokenParam != nil || pageSizeParam != nil {
			options = &armmigrationhub.VirtualDesktopUserControllerClientListVirtualDesktopUsersOptions{
				ContinuationToken: continuationTokenParam,
				PageSize:          pageSizeParam,
			}
		}
		resp := v.srv.NewListVirtualDesktopUsersPager(resourceGroupNameParam, migrateProjectNameParam, options)
		newListVirtualDesktopUsersPager = &resp
		v.newListVirtualDesktopUsersPager.add(req, newListVirtualDesktopUsersPager)
		server.PagerResponderInjectNextLinks(newListVirtualDesktopUsersPager, req, func(page *armmigrationhub.VirtualDesktopUserControllerClientListVirtualDesktopUsersResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListVirtualDesktopUsersPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListVirtualDesktopUsersPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListVirtualDesktopUsersPager) {
		v.newListVirtualDesktopUsersPager.remove(req)
	}
	return resp, nil
}
