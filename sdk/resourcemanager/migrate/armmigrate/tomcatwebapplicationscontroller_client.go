//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// TomcatWebApplicationsControllerClient contains the methods for the TomcatWebApplicationsController group.
// Don't use this type directly, use NewTomcatWebApplicationsControllerClient() instead.
type TomcatWebApplicationsControllerClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewTomcatWebApplicationsControllerClient creates a new instance of TomcatWebApplicationsControllerClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewTomcatWebApplicationsControllerClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*TomcatWebApplicationsControllerClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &TomcatWebApplicationsControllerClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Method to get an Tomcat web application.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - webAppSiteName - Web app site name.
//   - webApplicationName - Web application name.
//   - options - TomcatWebApplicationsControllerClientGetOptions contains the optional parameters for the TomcatWebApplicationsControllerClient.Get
//     method.
func (client *TomcatWebApplicationsControllerClient) Get(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, webApplicationName string, options *TomcatWebApplicationsControllerClientGetOptions) (TomcatWebApplicationsControllerClientGetResponse, error) {
	var err error
	const operationName = "TomcatWebApplicationsControllerClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, siteName, webAppSiteName, webApplicationName, options)
	if err != nil {
		return TomcatWebApplicationsControllerClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TomcatWebApplicationsControllerClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TomcatWebApplicationsControllerClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *TomcatWebApplicationsControllerClient) getCreateRequest(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, webApplicationName string, options *TomcatWebApplicationsControllerClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/webAppSites/{webAppSiteName}/tomcatWebApplications/{webApplicationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if webAppSiteName == "" {
		return nil, errors.New("parameter webAppSiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{webAppSiteName}", url.PathEscape(webAppSiteName))
	if webApplicationName == "" {
		return nil, errors.New("parameter webApplicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{webApplicationName}", url.PathEscape(webApplicationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *TomcatWebApplicationsControllerClient) getHandleResponse(resp *http.Response) (TomcatWebApplicationsControllerClientGetResponse, error) {
	result := TomcatWebApplicationsControllerClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TomcatWebApplications); err != nil {
		return TomcatWebApplicationsControllerClientGetResponse{}, err
	}
	return result, nil
}

// NewListByWebAppSitePager - Method to get all Tomcat web application.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - webAppSiteName - Web app site name.
//   - options - TomcatWebApplicationsControllerClientListByWebAppSiteOptions contains the optional parameters for the TomcatWebApplicationsControllerClient.NewListByWebAppSitePager
//     method.
func (client *TomcatWebApplicationsControllerClient) NewListByWebAppSitePager(resourceGroupName string, siteName string, webAppSiteName string, options *TomcatWebApplicationsControllerClientListByWebAppSiteOptions) *runtime.Pager[TomcatWebApplicationsControllerClientListByWebAppSiteResponse] {
	return runtime.NewPager(runtime.PagingHandler[TomcatWebApplicationsControllerClientListByWebAppSiteResponse]{
		More: func(page TomcatWebApplicationsControllerClientListByWebAppSiteResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *TomcatWebApplicationsControllerClientListByWebAppSiteResponse) (TomcatWebApplicationsControllerClientListByWebAppSiteResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "TomcatWebApplicationsControllerClient.NewListByWebAppSitePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByWebAppSiteCreateRequest(ctx, resourceGroupName, siteName, webAppSiteName, options)
			}, nil)
			if err != nil {
				return TomcatWebApplicationsControllerClientListByWebAppSiteResponse{}, err
			}
			return client.listByWebAppSiteHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByWebAppSiteCreateRequest creates the ListByWebAppSite request.
func (client *TomcatWebApplicationsControllerClient) listByWebAppSiteCreateRequest(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, options *TomcatWebApplicationsControllerClientListByWebAppSiteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/webAppSites/{webAppSiteName}/tomcatWebApplications"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if webAppSiteName == "" {
		return nil, errors.New("parameter webAppSiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{webAppSiteName}", url.PathEscape(webAppSiteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	if options != nil && options.ContinuationToken != nil {
		reqQP.Set("continuationToken", *options.ContinuationToken)
	}
	if options != nil && options.Filter != nil {
		reqQP.Set("filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", *options.Top)
	}
	if options != nil && options.TotalRecordCount != nil {
		reqQP.Set("totalRecordCount", strconv.FormatInt(int64(*options.TotalRecordCount), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByWebAppSiteHandleResponse handles the ListByWebAppSite response.
func (client *TomcatWebApplicationsControllerClient) listByWebAppSiteHandleResponse(resp *http.Response) (TomcatWebApplicationsControllerClientListByWebAppSiteResponse, error) {
	result := TomcatWebApplicationsControllerClientListByWebAppSiteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TomcatWebApplicationsListResult); err != nil {
		return TomcatWebApplicationsControllerClientListByWebAppSiteResponse{}, err
	}
	return result, nil
}

// Update - Updates the Tomcat web application tags.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - siteName - Site name
//   - webAppSiteName - Web app site name.
//   - webApplicationName - Web application name.
//   - body - The resource properties to be updated.
//   - options - TomcatWebApplicationsControllerClientUpdateOptions contains the optional parameters for the TomcatWebApplicationsControllerClient.Update
//     method.
func (client *TomcatWebApplicationsControllerClient) Update(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, webApplicationName string, body any, options *TomcatWebApplicationsControllerClientUpdateOptions) (TomcatWebApplicationsControllerClientUpdateResponse, error) {
	var err error
	const operationName = "TomcatWebApplicationsControllerClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, siteName, webAppSiteName, webApplicationName, body, options)
	if err != nil {
		return TomcatWebApplicationsControllerClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TomcatWebApplicationsControllerClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TomcatWebApplicationsControllerClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *TomcatWebApplicationsControllerClient) updateCreateRequest(ctx context.Context, resourceGroupName string, siteName string, webAppSiteName string, webApplicationName string, body any, options *TomcatWebApplicationsControllerClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/webAppSites/{webAppSiteName}/tomcatWebApplications/{webApplicationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if siteName == "" {
		return nil, errors.New("parameter siteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{siteName}", url.PathEscape(siteName))
	if webAppSiteName == "" {
		return nil, errors.New("parameter webAppSiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{webAppSiteName}", url.PathEscape(webAppSiteName))
	if webApplicationName == "" {
		return nil, errors.New("parameter webApplicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{webApplicationName}", url.PathEscape(webApplicationName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *TomcatWebApplicationsControllerClient) updateHandleResponse(resp *http.Response) (TomcatWebApplicationsControllerClientUpdateResponse, error) {
	result := TomcatWebApplicationsControllerClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TomcatWebApplications); err != nil {
		return TomcatWebApplicationsControllerClientUpdateResponse{}, err
	}
	return result, nil
}
