//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	"net/http"
	"net/url"
	"regexp"
)

// EventsControllerServer is a fake server for instances of the armmigrationhub.EventsControllerClient type.
type EventsControllerServer struct {
	// Delete is the fake for method EventsControllerClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, migrateProjectName string, eventName string, options *armmigrationhub.EventsControllerClientDeleteOptions) (resp azfake.Responder[armmigrationhub.EventsControllerClientDeleteResponse], errResp azfake.ErrorResponder)

	// GetEvent is the fake for method EventsControllerClient.GetEvent
	// HTTP status codes to indicate success: http.StatusOK
	GetEvent func(ctx context.Context, resourceGroupName string, migrateProjectName string, eventName string, options *armmigrationhub.EventsControllerClientGetEventOptions) (resp azfake.Responder[armmigrationhub.EventsControllerClientGetEventResponse], errResp azfake.ErrorResponder)

	// NewListEventsPager is the fake for method EventsControllerClient.NewListEventsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListEventsPager func(resourceGroupName string, migrateProjectName string, options *armmigrationhub.EventsControllerClientListEventsOptions) (resp azfake.PagerResponder[armmigrationhub.EventsControllerClientListEventsResponse])
}

// NewEventsControllerServerTransport creates a new instance of EventsControllerServerTransport with the provided implementation.
// The returned EventsControllerServerTransport instance is connected to an instance of armmigrationhub.EventsControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEventsControllerServerTransport(srv *EventsControllerServer) *EventsControllerServerTransport {
	return &EventsControllerServerTransport{
		srv:                srv,
		newListEventsPager: newTracker[azfake.PagerResponder[armmigrationhub.EventsControllerClientListEventsResponse]](),
	}
}

// EventsControllerServerTransport connects instances of armmigrationhub.EventsControllerClient to instances of EventsControllerServer.
// Don't use this type directly, use NewEventsControllerServerTransport instead.
type EventsControllerServerTransport struct {
	srv                *EventsControllerServer
	newListEventsPager *tracker[azfake.PagerResponder[armmigrationhub.EventsControllerClientListEventsResponse]]
}

// Do implements the policy.Transporter interface for EventsControllerServerTransport.
func (e *EventsControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "EventsControllerClient.Delete":
		resp, err = e.dispatchDelete(req)
	case "EventsControllerClient.GetEvent":
		resp, err = e.dispatchGetEvent(req)
	case "EventsControllerClient.NewListEventsPager":
		resp, err = e.dispatchNewListEventsPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (e *EventsControllerServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if e.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrateEvents/(?P<eventName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	eventNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.Delete(req.Context(), resourceGroupNameParam, migrateProjectNameParam, eventNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Interface, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EventsControllerServerTransport) dispatchGetEvent(req *http.Request) (*http.Response, error) {
	if e.srv.GetEvent == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEvent not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrateEvents/(?P<eventName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
	if err != nil {
		return nil, err
	}
	eventNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("eventName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.GetEvent(req.Context(), resourceGroupNameParam, migrateProjectNameParam, eventNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MigrateEvent, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EventsControllerServerTransport) dispatchNewListEventsPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListEventsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListEventsPager not implemented")}
	}
	newListEventsPager := e.newListEventsPager.get(req)
	if newListEventsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Migrate/migrateProjects/(?P<migrateProjectName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/migrateEvents`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		migrateProjectNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("migrateProjectName")])
		if err != nil {
			return nil, err
		}
		continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
		if err != nil {
			return nil, err
		}
		continuationTokenParam := getOptional(continuationTokenUnescaped)
		var options *armmigrationhub.EventsControllerClientListEventsOptions
		if continuationTokenParam != nil {
			options = &armmigrationhub.EventsControllerClientListEventsOptions{
				ContinuationToken: continuationTokenParam,
			}
		}
		resp := e.srv.NewListEventsPager(resourceGroupNameParam, migrateProjectNameParam, options)
		newListEventsPager = &resp
		e.newListEventsPager.add(req, newListEventsPager)
		server.PagerResponderInjectNextLinks(newListEventsPager, req, func(page *armmigrationhub.EventsControllerClientListEventsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListEventsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListEventsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListEventsPager) {
		e.newListEventsPager.remove(req)
	}
	return resp, nil
}
