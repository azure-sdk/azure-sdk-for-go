//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationdiscovery/armmigrationdiscovery"
	"net/http"
	"net/url"
	"regexp"
)

// VmwareHostControllerServer is a fake server for instances of the armmigrationdiscovery.VmwareHostControllerClient type.
type VmwareHostControllerServer struct {
	// Get is the fake for method VmwareHostControllerClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, siteName string, hostName string, options *armmigrationdiscovery.VmwareHostControllerClientGetOptions) (resp azfake.Responder[armmigrationdiscovery.VmwareHostControllerClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByVmwareSitePager is the fake for method VmwareHostControllerClient.NewListByVmwareSitePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByVmwareSitePager func(resourceGroupName string, siteName string, options *armmigrationdiscovery.VmwareHostControllerClientListByVmwareSiteOptions) (resp azfake.PagerResponder[armmigrationdiscovery.VmwareHostControllerClientListByVmwareSiteResponse])
}

// NewVmwareHostControllerServerTransport creates a new instance of VmwareHostControllerServerTransport with the provided implementation.
// The returned VmwareHostControllerServerTransport instance is connected to an instance of armmigrationdiscovery.VmwareHostControllerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVmwareHostControllerServerTransport(srv *VmwareHostControllerServer) *VmwareHostControllerServerTransport {
	return &VmwareHostControllerServerTransport{
		srv:                      srv,
		newListByVmwareSitePager: newTracker[azfake.PagerResponder[armmigrationdiscovery.VmwareHostControllerClientListByVmwareSiteResponse]](),
	}
}

// VmwareHostControllerServerTransport connects instances of armmigrationdiscovery.VmwareHostControllerClient to instances of VmwareHostControllerServer.
// Don't use this type directly, use NewVmwareHostControllerServerTransport instead.
type VmwareHostControllerServerTransport struct {
	srv                      *VmwareHostControllerServer
	newListByVmwareSitePager *tracker[azfake.PagerResponder[armmigrationdiscovery.VmwareHostControllerClientListByVmwareSiteResponse]]
}

// Do implements the policy.Transporter interface for VmwareHostControllerServerTransport.
func (v *VmwareHostControllerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VmwareHostControllerClient.Get":
		resp, err = v.dispatchGet(req)
	case "VmwareHostControllerClient.NewListByVmwareSitePager":
		resp, err = v.dispatchNewListByVmwareSitePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VmwareHostControllerServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/hosts/(?P<hostName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	hostNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("hostName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.Get(req.Context(), resourceGroupNameParam, siteNameParam, hostNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VmwareHost, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VmwareHostControllerServerTransport) dispatchNewListByVmwareSitePager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListByVmwareSitePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByVmwareSitePager not implemented")}
	}
	newListByVmwareSitePager := v.newListByVmwareSitePager.get(req)
	if newListByVmwareSitePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OffAzure/vmwareSites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/hosts`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		resp := v.srv.NewListByVmwareSitePager(resourceGroupNameParam, siteNameParam, nil)
		newListByVmwareSitePager = &resp
		v.newListByVmwareSitePager.add(req, newListByVmwareSitePager)
		server.PagerResponderInjectNextLinks(newListByVmwareSitePager, req, func(page *armmigrationdiscovery.VmwareHostControllerClientListByVmwareSiteResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByVmwareSitePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListByVmwareSitePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByVmwareSitePager) {
		v.newListByVmwareSitePager.remove(req)
	}
	return resp, nil
}
