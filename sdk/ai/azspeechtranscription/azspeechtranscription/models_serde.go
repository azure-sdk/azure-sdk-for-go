// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azspeechtranscription

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type ChannelCombinedPhrases.
func (c ChannelCombinedPhrases) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "channel", c.Channel)
	populate(objectMap, "text", c.Text)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ChannelCombinedPhrases.
func (c *ChannelCombinedPhrases) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "channel":
			err = unpopulate(val, "Channel", &c.Channel)
			delete(rawMsg, key)
		case "text":
			err = unpopulate(val, "Text", &c.Text)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// toMultipartFormData converts TranscribeRequest to multipart/form data.
func (t TranscribeRequest) toMultipartFormData() (map[string]any, error) {
	objectMap := make(map[string]any)
	objectMap["audio"] = t.Audio
	if t.Options != nil {
		if err := populateMultipartJSON(objectMap, "definition", *t.Options); err != nil {
			return nil, err
		}
	}
	return objectMap, nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscribedPhrase.
func (t TranscribedPhrase) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "channel", t.Channel)
	populate(objectMap, "confidence", t.Confidence)
	populate(objectMap, "durationMilliseconds", t.DurationMilliseconds)
	populate(objectMap, "locale", t.Locale)
	populate(objectMap, "offsetMilliseconds", t.OffsetMilliseconds)
	populate(objectMap, "speaker", t.Speaker)
	populate(objectMap, "text", t.Text)
	populate(objectMap, "words", t.Words)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscribedPhrase.
func (t *TranscribedPhrase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "channel":
			err = unpopulate(val, "Channel", &t.Channel)
			delete(rawMsg, key)
		case "confidence":
			err = unpopulate(val, "Confidence", &t.Confidence)
			delete(rawMsg, key)
		case "durationMilliseconds":
			err = unpopulate(val, "DurationMilliseconds", &t.DurationMilliseconds)
			delete(rawMsg, key)
		case "locale":
			err = unpopulate(val, "Locale", &t.Locale)
			delete(rawMsg, key)
		case "offsetMilliseconds":
			err = unpopulate(val, "OffsetMilliseconds", &t.OffsetMilliseconds)
			delete(rawMsg, key)
		case "speaker":
			err = unpopulate(val, "Speaker", &t.Speaker)
			delete(rawMsg, key)
		case "text":
			err = unpopulate(val, "Text", &t.Text)
			delete(rawMsg, key)
		case "words":
			err = unpopulate(val, "Words", &t.Words)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscribedWord.
func (t TranscribedWord) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "durationMilliseconds", t.DurationMilliseconds)
	populate(objectMap, "offsetMilliseconds", t.OffsetMilliseconds)
	populate(objectMap, "text", t.Text)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscribedWord.
func (t *TranscribedWord) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "durationMilliseconds":
			err = unpopulate(val, "DurationMilliseconds", &t.DurationMilliseconds)
			delete(rawMsg, key)
		case "offsetMilliseconds":
			err = unpopulate(val, "OffsetMilliseconds", &t.OffsetMilliseconds)
			delete(rawMsg, key)
		case "text":
			err = unpopulate(val, "Text", &t.Text)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscriptionDiarizationOptions.
func (t TranscriptionDiarizationOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "enabled", t.Enabled)
	populate(objectMap, "maxSpeakers", t.MaxSpeakers)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscriptionDiarizationOptions.
func (t *TranscriptionDiarizationOptions) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "enabled":
			err = unpopulate(val, "Enabled", &t.Enabled)
			delete(rawMsg, key)
		case "maxSpeakers":
			err = unpopulate(val, "MaxSpeakers", &t.MaxSpeakers)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscriptionOptions.
func (t TranscriptionOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "channels", t.ActiveChannels)
	populate(objectMap, "diarization", t.DiarizationOptions)
	populate(objectMap, "locales", t.Locales)
	populate(objectMap, "models", t.Models)
	populate(objectMap, "profanityFilterMode", t.ProfanityFilterMode)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscriptionOptions.
func (t *TranscriptionOptions) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "channels":
			err = unpopulate(val, "ActiveChannels", &t.ActiveChannels)
			delete(rawMsg, key)
		case "diarization":
			err = unpopulate(val, "DiarizationOptions", &t.DiarizationOptions)
			delete(rawMsg, key)
		case "locales":
			err = unpopulate(val, "Locales", &t.Locales)
			delete(rawMsg, key)
		case "models":
			err = unpopulate(val, "Models", &t.Models)
			delete(rawMsg, key)
		case "profanityFilterMode":
			err = unpopulate(val, "ProfanityFilterMode", &t.ProfanityFilterMode)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TranscriptionResult.
func (t TranscriptionResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "combinedPhrases", t.CombinedPhrases)
	populate(objectMap, "durationMilliseconds", t.DurationMilliseconds)
	populate(objectMap, "phrases", t.Phrases)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TranscriptionResult.
func (t *TranscriptionResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "combinedPhrases":
			err = unpopulate(val, "CombinedPhrases", &t.CombinedPhrases)
			delete(rawMsg, key)
		case "durationMilliseconds":
			err = unpopulate(val, "DurationMilliseconds", &t.DurationMilliseconds)
			delete(rawMsg, key)
		case "phrases":
			err = unpopulate(val, "Phrases", &t.Phrases)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}

func populateMultipartJSON(m map[string]any, k string, v any) error {
	data, err := json.Marshal(v)
	if err != nil {
		return err
	}
	m[k] = data
	return nil
}
