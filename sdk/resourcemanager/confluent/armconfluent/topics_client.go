//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconfluent

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// TopicsClient contains the methods for the Topics group.
// Don't use this type directly, use NewTopicsClient() instead.
type TopicsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewTopicsClient creates a new instance of TopicsClient with the specified values.
//   - subscriptionID - Microsoft Azure subscription id
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewTopicsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*TopicsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &TopicsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// NewListPager - Lists of all the topics in a clusters
//
// Generated from API version 2024-07-07
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - organizationName - Organization resource name
//   - environmentID - Confluent environment id
//   - clusterID - Confluent kafka or schema registry cluster id
//   - options - TopicsClientListOptions contains the optional parameters for the TopicsClient.NewListPager method.
func (client *TopicsClient) NewListPager(resourceGroupName string, organizationName string, environmentID string, clusterID string, options *TopicsClientListOptions) *runtime.Pager[TopicsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[TopicsClientListResponse]{
		More: func(page TopicsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *TopicsClientListResponse) (TopicsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "TopicsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, organizationName, environmentID, clusterID, options)
			}, nil)
			if err != nil {
				return TopicsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *TopicsClient) listCreateRequest(ctx context.Context, resourceGroupName string, organizationName string, environmentID string, clusterID string, options *TopicsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/topics"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if organizationName == "" {
		return nil, errors.New("parameter organizationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{organizationName}", url.PathEscape(organizationName))
	if environmentID == "" {
		return nil, errors.New("parameter environmentID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentId}", url.PathEscape(environmentID))
	if clusterID == "" {
		return nil, errors.New("parameter clusterID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterId}", url.PathEscape(clusterID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-07")
	if options != nil && options.PageSize != nil {
		reqQP.Set("pageSize", strconv.FormatInt(int64(*options.PageSize), 10))
	}
	if options != nil && options.PageToken != nil {
		reqQP.Set("pageToken", *options.PageToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *TopicsClient) listHandleResponse(resp *http.Response) (TopicsClientListResponse, error) {
	result := TopicsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListTopicsSuccessResponse); err != nil {
		return TopicsClientListResponse{}, err
	}
	return result, nil
}
