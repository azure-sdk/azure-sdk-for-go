//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationhub

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationhub/armmigrationhub"
	moduleVersion = "v1.0.0"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// CleanupState - Gets or sets the cleanup state of the solution.
type CleanupState string

const (
	CleanupStateCompleted  CleanupState = "Completed"
	CleanupStateFailed     CleanupState = "Failed"
	CleanupStateInProgress CleanupState = "InProgress"
	CleanupStateNone       CleanupState = "None"
	CleanupStateStarted    CleanupState = "Started"
)

// PossibleCleanupStateValues returns the possible values for the CleanupState const type.
func PossibleCleanupStateValues() []CleanupState {
	return []CleanupState{
		CleanupStateCompleted,
		CleanupStateFailed,
		CleanupStateInProgress,
		CleanupStateNone,
		CleanupStateStarted,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

type Enum string

const (
	EnumAccepted                     Enum = "Accepted"
	EnumAmbiguous                    Enum = "Ambiguous"
	EnumBadGateway                   Enum = "BadGateway"
	EnumBadRequest                   Enum = "BadRequest"
	EnumConflict                     Enum = "Conflict"
	EnumContinue                     Enum = "Continue"
	EnumCreated                      Enum = "Created"
	EnumExpectationFailed            Enum = "ExpectationFailed"
	EnumForbidden                    Enum = "Forbidden"
	EnumFound                        Enum = "Found"
	EnumGatewayTimeout               Enum = "GatewayTimeout"
	EnumGone                         Enum = "Gone"
	EnumHTTPVersionNotSupported      Enum = "HttpVersionNotSupported"
	EnumInternalServerError          Enum = "InternalServerError"
	EnumLengthRequired               Enum = "LengthRequired"
	EnumMethodNotAllowed             Enum = "MethodNotAllowed"
	EnumMoved                        Enum = "Moved"
	EnumMovedPermanently             Enum = "MovedPermanently"
	EnumMultipleChoices              Enum = "MultipleChoices"
	EnumNoContent                    Enum = "NoContent"
	EnumNonAuthoritativeInformation  Enum = "NonAuthoritativeInformation"
	EnumNotAcceptable                Enum = "NotAcceptable"
	EnumNotFound                     Enum = "NotFound"
	EnumNotImplemented               Enum = "NotImplemented"
	EnumNotModified                  Enum = "NotModified"
	EnumOK                           Enum = "OK"
	EnumPartialContent               Enum = "PartialContent"
	EnumPaymentRequired              Enum = "PaymentRequired"
	EnumPreconditionFailed           Enum = "PreconditionFailed"
	EnumProxyAuthenticationRequired  Enum = "ProxyAuthenticationRequired"
	EnumRedirect                     Enum = "Redirect"
	EnumRedirectKeepVerb             Enum = "RedirectKeepVerb"
	EnumRedirectMethod               Enum = "RedirectMethod"
	EnumRequestEntityTooLarge        Enum = "RequestEntityTooLarge"
	EnumRequestTimeout               Enum = "RequestTimeout"
	EnumRequestURITooLong            Enum = "RequestUriTooLong"
	EnumRequestedRangeNotSatisfiable Enum = "RequestedRangeNotSatisfiable"
	EnumResetContent                 Enum = "ResetContent"
	EnumSeeOther                     Enum = "SeeOther"
	EnumServiceUnavailable           Enum = "ServiceUnavailable"
	EnumSwitchingProtocols           Enum = "SwitchingProtocols"
	EnumTemporaryRedirect            Enum = "TemporaryRedirect"
	EnumUnauthorized                 Enum = "Unauthorized"
	EnumUnsupportedMediaType         Enum = "UnsupportedMediaType"
	EnumUnused                       Enum = "Unused"
	EnumUpgradeRequired              Enum = "UpgradeRequired"
	EnumUseProxy                     Enum = "UseProxy"
)

// PossibleEnumValues returns the possible values for the Enum const type.
func PossibleEnumValues() []Enum {
	return []Enum{
		EnumAccepted,
		EnumAmbiguous,
		EnumBadGateway,
		EnumBadRequest,
		EnumConflict,
		EnumContinue,
		EnumCreated,
		EnumExpectationFailed,
		EnumForbidden,
		EnumFound,
		EnumGatewayTimeout,
		EnumGone,
		EnumHTTPVersionNotSupported,
		EnumInternalServerError,
		EnumLengthRequired,
		EnumMethodNotAllowed,
		EnumMoved,
		EnumMovedPermanently,
		EnumMultipleChoices,
		EnumNoContent,
		EnumNonAuthoritativeInformation,
		EnumNotAcceptable,
		EnumNotFound,
		EnumNotImplemented,
		EnumNotModified,
		EnumOK,
		EnumPartialContent,
		EnumPaymentRequired,
		EnumPreconditionFailed,
		EnumProxyAuthenticationRequired,
		EnumRedirect,
		EnumRedirectKeepVerb,
		EnumRedirectMethod,
		EnumRequestEntityTooLarge,
		EnumRequestTimeout,
		EnumRequestURITooLong,
		EnumRequestedRangeNotSatisfiable,
		EnumResetContent,
		EnumSeeOther,
		EnumServiceUnavailable,
		EnumSwitchingProtocols,
		EnumTemporaryRedirect,
		EnumUnauthorized,
		EnumUnsupportedMediaType,
		EnumUnused,
		EnumUpgradeRequired,
		EnumUseProxy,
	}
}

// Goal - Gets or sets the goal for which summary needs to be refreshed.
type Goal string

const (
	GoalDataCenter            Goal = "DataCenter"
	GoalDatabases             Goal = "Databases"
	GoalDesktopVirtualization Goal = "DesktopVirtualization"
	GoalServers               Goal = "Servers"
	GoalWebApplications       Goal = "WebApplications"
)

// PossibleGoalValues returns the possible values for the Goal const type.
func PossibleGoalValues() []Goal {
	return []Goal{
		GoalDataCenter,
		GoalDatabases,
		GoalDesktopVirtualization,
		GoalServers,
		GoalWebApplications,
	}
}

type Items string

const (
	ItemsAppServiceMigrationAssistant   Items = "AppServiceMigrationAssistant"
	ItemsCarbonite                      Items = "Carbonite"
	ItemsCloudSphere                    Items = "CloudSphere"
	ItemsCloudamize                     Items = "Cloudamize"
	ItemsCorentTech                     Items = "CorentTech"
	ItemsDataMigrationAssistant         Items = "DataMigrationAssistant"
	ItemsDatabaseMigrationService       Items = "DatabaseMigrationService"
	ItemsDevice42                       Items = "Device42"
	ItemsFlexera                        Items = "Flexera"
	ItemsJetStream                      Items = "JetStream"
	ItemsLakeside                       Items = "Lakeside"
	ItemsModernization                  Items = "Modernization"
	ItemsMovere                         Items = "Movere"
	ItemsRackWare                       Items = "RackWare"
	ItemsServerAssessment               Items = "ServerAssessment"
	ItemsServerAssessmentV1             Items = "ServerAssessmentV1"
	ItemsServerDiscovery                Items = "ServerDiscovery"
	ItemsServerDiscoveryImport          Items = "ServerDiscovery_Import"
	ItemsServerMigration                Items = "ServerMigration"
	ItemsServerMigrationDataReplication Items = "ServerMigration_DataReplication"
	ItemsServerMigrationReplication     Items = "ServerMigration_Replication"
	ItemsTurbonomic                     Items = "Turbonomic"
	ItemsUnifyCloud                     Items = "UnifyCloud"
	ItemsUnknown                        Items = "Unknown"
	ItemsZerto                          Items = "Zerto"
)

// PossibleItemsValues returns the possible values for the Items const type.
func PossibleItemsValues() []Items {
	return []Items{
		ItemsAppServiceMigrationAssistant,
		ItemsCarbonite,
		ItemsCloudSphere,
		ItemsCloudamize,
		ItemsCorentTech,
		ItemsDataMigrationAssistant,
		ItemsDatabaseMigrationService,
		ItemsDevice42,
		ItemsFlexera,
		ItemsJetStream,
		ItemsLakeside,
		ItemsModernization,
		ItemsMovere,
		ItemsRackWare,
		ItemsServerAssessment,
		ItemsServerAssessmentV1,
		ItemsServerDiscovery,
		ItemsServerDiscoveryImport,
		ItemsServerMigration,
		ItemsServerMigrationDataReplication,
		ItemsServerMigrationReplication,
		ItemsTurbonomic,
		ItemsUnifyCloud,
		ItemsUnknown,
		ItemsZerto,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

type PrivateEndpointConnectionProxyPropertiesStatus string

const (
	PrivateEndpointConnectionProxyPropertiesStatusCancelled PrivateEndpointConnectionProxyPropertiesStatus = "Cancelled"
	PrivateEndpointConnectionProxyPropertiesStatusFailed    PrivateEndpointConnectionProxyPropertiesStatus = "Failed"
	PrivateEndpointConnectionProxyPropertiesStatusRunning   PrivateEndpointConnectionProxyPropertiesStatus = "Running"
	PrivateEndpointConnectionProxyPropertiesStatusSucceeded PrivateEndpointConnectionProxyPropertiesStatus = "Succeeded"
)

// PossiblePrivateEndpointConnectionProxyPropertiesStatusValues returns the possible values for the PrivateEndpointConnectionProxyPropertiesStatus const type.
func PossiblePrivateEndpointConnectionProxyPropertiesStatusValues() []PrivateEndpointConnectionProxyPropertiesStatus {
	return []PrivateEndpointConnectionProxyPropertiesStatus{
		PrivateEndpointConnectionProxyPropertiesStatusCancelled,
		PrivateEndpointConnectionProxyPropertiesStatusFailed,
		PrivateEndpointConnectionProxyPropertiesStatusRunning,
		PrivateEndpointConnectionProxyPropertiesStatusSucceeded,
	}
}

// PrivateLinkServiceConnectionStateStatus - Private link connection state.
type PrivateLinkServiceConnectionStateStatus string

const (
	PrivateLinkServiceConnectionStateStatusApproved     PrivateLinkServiceConnectionStateStatus = "Approved"
	PrivateLinkServiceConnectionStateStatusDisconnected PrivateLinkServiceConnectionStateStatus = "Disconnected"
	PrivateLinkServiceConnectionStateStatusPending      PrivateLinkServiceConnectionStateStatus = "Pending"
	PrivateLinkServiceConnectionStateStatusRejected     PrivateLinkServiceConnectionStateStatus = "Rejected"
)

// PossiblePrivateLinkServiceConnectionStateStatusValues returns the possible values for the PrivateLinkServiceConnectionStateStatus const type.
func PossiblePrivateLinkServiceConnectionStateStatusValues() []PrivateLinkServiceConnectionStateStatus {
	return []PrivateLinkServiceConnectionStateStatus{
		PrivateLinkServiceConnectionStateStatusApproved,
		PrivateLinkServiceConnectionStateStatusDisconnected,
		PrivateLinkServiceConnectionStateStatusPending,
		PrivateLinkServiceConnectionStateStatusRejected,
	}
}

// ProvisioningState - Provisioning state.
type ProvisioningState string

const (
	ProvisioningStateAccepted   ProvisioningState = "Accepted"
	ProvisioningStateCanceled   ProvisioningState = "Canceled"
	ProvisioningStateFailed     ProvisioningState = "Failed"
	ProvisioningStateInProgress ProvisioningState = "InProgress"
	ProvisioningStateSucceeded  ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateAccepted,
		ProvisioningStateCanceled,
		ProvisioningStateFailed,
		ProvisioningStateInProgress,
		ProvisioningStateSucceeded,
	}
}

// PublicNetworkAccess - Gets or sets the state of public network access.
type PublicNetworkAccess string

const (
	PublicNetworkAccessDisabled     PublicNetworkAccess = "Disabled"
	PublicNetworkAccessEnabled      PublicNetworkAccess = "Enabled"
	PublicNetworkAccessNotSpecified PublicNetworkAccess = "NotSpecified"
)

// PossiblePublicNetworkAccessValues returns the possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{
		PublicNetworkAccessDisabled,
		PublicNetworkAccessEnabled,
		PublicNetworkAccessNotSpecified,
	}
}

// Purpose - Gets or sets the purpose of the solution.
type Purpose string

const (
	PurposeAssessment Purpose = "Assessment"
	PurposeDiscovery  Purpose = "Discovery"
	PurposeMigration  Purpose = "Migration"
)

// PossiblePurposeValues returns the possible values for the Purpose const type.
func PossiblePurposeValues() []Purpose {
	return []Purpose{
		PurposeAssessment,
		PurposeDiscovery,
		PurposeMigration,
	}
}

// RefreshSummaryState - Refresh summary state.
type RefreshSummaryState string

const (
	RefreshSummaryStateCompleted  RefreshSummaryState = "Completed"
	RefreshSummaryStateFailed     RefreshSummaryState = "Failed"
	RefreshSummaryStateInProgress RefreshSummaryState = "InProgress"
	RefreshSummaryStateStarted    RefreshSummaryState = "Started"
)

// PossibleRefreshSummaryStateValues returns the possible values for the RefreshSummaryState const type.
func PossibleRefreshSummaryStateValues() []RefreshSummaryState {
	return []RefreshSummaryState{
		RefreshSummaryStateCompleted,
		RefreshSummaryStateFailed,
		RefreshSummaryStateInProgress,
		RefreshSummaryStateStarted,
	}
}

// Status - Gets or sets the current status of the solution.
type Status string

const (
	StatusActive   Status = "Active"
	StatusInactive Status = "Inactive"
)

// PossibleStatusValues returns the possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{
		StatusActive,
		StatusInactive,
	}
}

// Tool - Gets or sets the tool to be registered.
type Tool string

const (
	ToolAppServiceMigrationAssistant   Tool = "AppServiceMigrationAssistant"
	ToolCarbonite                      Tool = "Carbonite"
	ToolCloudSphere                    Tool = "CloudSphere"
	ToolCloudamize                     Tool = "Cloudamize"
	ToolCorentTech                     Tool = "CorentTech"
	ToolDataMigrationAssistant         Tool = "DataMigrationAssistant"
	ToolDatabaseMigrationService       Tool = "DatabaseMigrationService"
	ToolDevice42                       Tool = "Device42"
	ToolFlexera                        Tool = "Flexera"
	ToolJetStream                      Tool = "JetStream"
	ToolLakeside                       Tool = "Lakeside"
	ToolModernization                  Tool = "Modernization"
	ToolMovere                         Tool = "Movere"
	ToolRackWare                       Tool = "RackWare"
	ToolServerAssessment               Tool = "ServerAssessment"
	ToolServerAssessmentV1             Tool = "ServerAssessmentV1"
	ToolServerDiscovery                Tool = "ServerDiscovery"
	ToolServerDiscoveryImport          Tool = "ServerDiscovery_Import"
	ToolServerMigration                Tool = "ServerMigration"
	ToolServerMigrationDataReplication Tool = "ServerMigration_DataReplication"
	ToolServerMigrationReplication     Tool = "ServerMigration_Replication"
	ToolTurbonomic                     Tool = "Turbonomic"
	ToolUnifyCloud                     Tool = "UnifyCloud"
	ToolUnknown                        Tool = "Unknown"
	ToolZerto                          Tool = "Zerto"
)

// PossibleToolValues returns the possible values for the Tool const type.
func PossibleToolValues() []Tool {
	return []Tool{
		ToolAppServiceMigrationAssistant,
		ToolCarbonite,
		ToolCloudSphere,
		ToolCloudamize,
		ToolCorentTech,
		ToolDataMigrationAssistant,
		ToolDatabaseMigrationService,
		ToolDevice42,
		ToolFlexera,
		ToolJetStream,
		ToolLakeside,
		ToolModernization,
		ToolMovere,
		ToolRackWare,
		ToolServerAssessment,
		ToolServerAssessmentV1,
		ToolServerDiscovery,
		ToolServerDiscoveryImport,
		ToolServerMigration,
		ToolServerMigrationDataReplication,
		ToolServerMigrationReplication,
		ToolTurbonomic,
		ToolUnifyCloud,
		ToolUnknown,
		ToolZerto,
	}
}
