//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsights/armsecurityinsights/v2"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
)

// SystemsServer is a fake server for instances of the armsecurityinsights.SystemsClient type.
type SystemsServer struct {
	// CreateOrUpdate is the fake for method SystemsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *armsecurityinsights.SystemsClientCreateOrUpdateOptions) (resp azfake.Responder[armsecurityinsights.SystemsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method SystemsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *armsecurityinsights.SystemsClientDeleteOptions) (resp azfake.Responder[armsecurityinsights.SystemsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SystemsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, workspaceName string, systemResourceName string, options *armsecurityinsights.SystemsClientGetOptions) (resp azfake.Responder[armsecurityinsights.SystemsClientGetResponse], errResp azfake.ErrorResponder)

	// NewGetAllPager is the fake for method SystemsClient.NewGetAllPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetAllPager func(resourceGroupName string, workspaceName string, options *armsecurityinsights.SystemsClientGetAllOptions) (resp azfake.PagerResponder[armsecurityinsights.SystemsClientGetAllResponse])
}

// NewSystemsServerTransport creates a new instance of SystemsServerTransport with the provided implementation.
// The returned SystemsServerTransport instance is connected to an instance of armsecurityinsights.SystemsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSystemsServerTransport(srv *SystemsServer) *SystemsServerTransport {
	return &SystemsServerTransport{
		srv:            srv,
		newGetAllPager: newTracker[azfake.PagerResponder[armsecurityinsights.SystemsClientGetAllResponse]](),
	}
}

// SystemsServerTransport connects instances of armsecurityinsights.SystemsClient to instances of SystemsServer.
// Don't use this type directly, use NewSystemsServerTransport instead.
type SystemsServerTransport struct {
	srv            *SystemsServer
	newGetAllPager *tracker[azfake.PagerResponder[armsecurityinsights.SystemsClientGetAllResponse]]
}

// Do implements the policy.Transporter interface for SystemsServerTransport.
func (s *SystemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SystemsClient.CreateOrUpdate":
		resp, err = s.dispatchCreateOrUpdate(req)
	case "SystemsClient.Delete":
		resp, err = s.dispatchDelete(req)
	case "SystemsClient.Get":
		resp, err = s.dispatchGet(req)
	case "SystemsClient.NewGetAllPager":
		resp, err = s.dispatchNewGetAllPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SystemsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/systems/(?P<systemResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armsecurityinsights.System](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	systemResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("systemResourceName")])
	if err != nil {
		return nil, err
	}
	xMSClientWorkspaceIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-workspace-id"))
	xMSClientObjectIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-object-id"))
	var options *armsecurityinsights.SystemsClientCreateOrUpdateOptions
	if xMSClientWorkspaceIDParam != nil || xMSClientObjectIDParam != nil || !reflect.ValueOf(body).IsZero() {
		options = &armsecurityinsights.SystemsClientCreateOrUpdateOptions{
			XMSClientWorkspaceID: xMSClientWorkspaceIDParam,
			XMSClientObjectID:    xMSClientObjectIDParam,
			SystemToUpsert:       &body,
		}
	}
	respr, errRespr := s.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, workspaceNameParam, systemResourceNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).System, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SystemsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if s.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/systems/(?P<systemResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	systemResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("systemResourceName")])
	if err != nil {
		return nil, err
	}
	xMSClientWorkspaceIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-workspace-id"))
	var options *armsecurityinsights.SystemsClientDeleteOptions
	if xMSClientWorkspaceIDParam != nil {
		options = &armsecurityinsights.SystemsClientDeleteOptions{
			XMSClientWorkspaceID: xMSClientWorkspaceIDParam,
		}
	}
	respr, errRespr := s.srv.Delete(req.Context(), resourceGroupNameParam, workspaceNameParam, systemResourceNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SystemsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/systems/(?P<systemResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	systemResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("systemResourceName")])
	if err != nil {
		return nil, err
	}
	xMSClientWorkspaceIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-workspace-id"))
	var options *armsecurityinsights.SystemsClientGetOptions
	if xMSClientWorkspaceIDParam != nil {
		options = &armsecurityinsights.SystemsClientGetOptions{
			XMSClientWorkspaceID: xMSClientWorkspaceIDParam,
		}
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, workspaceNameParam, systemResourceNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).System, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SystemsServerTransport) dispatchNewGetAllPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewGetAllPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetAllPager not implemented")}
	}
	newGetAllPager := s.newGetAllPager.get(req)
	if newGetAllPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/systems`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
		if err != nil {
			return nil, err
		}
		xMSClientWorkspaceIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-workspace-id"))
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		orderbyUnescaped, err := url.QueryUnescape(qp.Get("$orderby"))
		if err != nil {
			return nil, err
		}
		orderbyParam := getOptional(orderbyUnescaped)
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		topUnescaped, err := url.QueryUnescape(qp.Get("$top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armsecurityinsights.SystemsClientGetAllOptions
		if xMSClientWorkspaceIDParam != nil || filterParam != nil || orderbyParam != nil || skipTokenParam != nil || topParam != nil {
			options = &armsecurityinsights.SystemsClientGetAllOptions{
				XMSClientWorkspaceID: xMSClientWorkspaceIDParam,
				Filter:               filterParam,
				Orderby:              orderbyParam,
				SkipToken:            skipTokenParam,
				Top:                  topParam,
			}
		}
		resp := s.srv.NewGetAllPager(resourceGroupNameParam, workspaceNameParam, options)
		newGetAllPager = &resp
		s.newGetAllPager.add(req, newGetAllPager)
		server.PagerResponderInjectNextLinks(newGetAllPager, req, func(page *armsecurityinsights.SystemsClientGetAllResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetAllPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newGetAllPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetAllPager) {
		s.newGetAllPager.remove(req)
	}
	return resp, nil
}
