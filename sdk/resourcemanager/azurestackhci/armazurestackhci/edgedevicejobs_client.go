// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestackhci

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EdgeDeviceJobsClient contains the methods for the EdgeDeviceJobs group.
// Don't use this type directly, use NewEdgeDeviceJobsClient() instead.
type EdgeDeviceJobsClient struct {
	internal *arm.Client
}

// NewEdgeDeviceJobsClient creates a new instance of EdgeDeviceJobsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewEdgeDeviceJobsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*EdgeDeviceJobsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &EdgeDeviceJobsClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a EdgeDeviceJob
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - edgeDeviceName - The name of the EdgeDevice
//   - jobsName - Name of EdgeDevice Job
//   - resource - Resource create parameters.
//   - options - EdgeDeviceJobsClientBeginCreateOrUpdateOptions contains the optional parameters for the EdgeDeviceJobsClient.BeginCreateOrUpdate
//     method.
func (client *EdgeDeviceJobsClient) BeginCreateOrUpdate(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, resource EdgeDeviceJobClassification, options *EdgeDeviceJobsClientBeginCreateOrUpdateOptions) (*runtime.Poller[EdgeDeviceJobsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceURI, edgeDeviceName, jobsName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeDeviceJobsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeDeviceJobsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a EdgeDeviceJob
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-01-preview
func (client *EdgeDeviceJobsClient) createOrUpdate(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, resource EdgeDeviceJobClassification, options *EdgeDeviceJobsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeDeviceJobsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceURI, edgeDeviceName, jobsName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *EdgeDeviceJobsClient) createOrUpdateCreateRequest(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, resource EdgeDeviceJobClassification, _ *EdgeDeviceJobsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}/jobs/{jobsName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if edgeDeviceName == "" {
		return nil, errors.New("parameter edgeDeviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeDeviceName}", url.PathEscape(edgeDeviceName))
	if jobsName == "" {
		return nil, errors.New("parameter jobsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobsName}", url.PathEscape(jobsName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a EdgeDeviceJob
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - edgeDeviceName - The name of the EdgeDevice
//   - jobsName - Name of EdgeDevice Job
//   - options - EdgeDeviceJobsClientBeginDeleteOptions contains the optional parameters for the EdgeDeviceJobsClient.BeginDelete
//     method.
func (client *EdgeDeviceJobsClient) BeginDelete(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, options *EdgeDeviceJobsClientBeginDeleteOptions) (*runtime.Poller[EdgeDeviceJobsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceURI, edgeDeviceName, jobsName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeDeviceJobsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeDeviceJobsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a EdgeDeviceJob
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-01-preview
func (client *EdgeDeviceJobsClient) deleteOperation(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, options *EdgeDeviceJobsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeDeviceJobsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceURI, edgeDeviceName, jobsName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *EdgeDeviceJobsClient) deleteCreateRequest(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, _ *EdgeDeviceJobsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}/jobs/{jobsName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if edgeDeviceName == "" {
		return nil, errors.New("parameter edgeDeviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeDeviceName}", url.PathEscape(edgeDeviceName))
	if jobsName == "" {
		return nil, errors.New("parameter jobsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobsName}", url.PathEscape(jobsName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a EdgeDeviceJob
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - edgeDeviceName - The name of the EdgeDevice
//   - jobsName - Name of EdgeDevice Job
//   - options - EdgeDeviceJobsClientGetOptions contains the optional parameters for the EdgeDeviceJobsClient.Get method.
func (client *EdgeDeviceJobsClient) Get(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, options *EdgeDeviceJobsClientGetOptions) (EdgeDeviceJobsClientGetResponse, error) {
	var err error
	const operationName = "EdgeDeviceJobsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceURI, edgeDeviceName, jobsName, options)
	if err != nil {
		return EdgeDeviceJobsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EdgeDeviceJobsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EdgeDeviceJobsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *EdgeDeviceJobsClient) getCreateRequest(ctx context.Context, resourceURI string, edgeDeviceName string, jobsName string, _ *EdgeDeviceJobsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}/jobs/{jobsName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if edgeDeviceName == "" {
		return nil, errors.New("parameter edgeDeviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeDeviceName}", url.PathEscape(edgeDeviceName))
	if jobsName == "" {
		return nil, errors.New("parameter jobsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobsName}", url.PathEscape(jobsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EdgeDeviceJobsClient) getHandleResponse(resp *http.Response) (EdgeDeviceJobsClientGetResponse, error) {
	result := EdgeDeviceJobsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return EdgeDeviceJobsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByEdgeDevicePager - List EdgeDeviceJob resources by EdgeDevice
//
// Generated from API version 2025-02-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - edgeDeviceName - The name of the EdgeDevice
//   - options - EdgeDeviceJobsClientListByEdgeDeviceOptions contains the optional parameters for the EdgeDeviceJobsClient.NewListByEdgeDevicePager
//     method.
func (client *EdgeDeviceJobsClient) NewListByEdgeDevicePager(resourceURI string, edgeDeviceName string, options *EdgeDeviceJobsClientListByEdgeDeviceOptions) *runtime.Pager[EdgeDeviceJobsClientListByEdgeDeviceResponse] {
	return runtime.NewPager(runtime.PagingHandler[EdgeDeviceJobsClientListByEdgeDeviceResponse]{
		More: func(page EdgeDeviceJobsClientListByEdgeDeviceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EdgeDeviceJobsClientListByEdgeDeviceResponse) (EdgeDeviceJobsClientListByEdgeDeviceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EdgeDeviceJobsClient.NewListByEdgeDevicePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByEdgeDeviceCreateRequest(ctx, resourceURI, edgeDeviceName, options)
			}, nil)
			if err != nil {
				return EdgeDeviceJobsClientListByEdgeDeviceResponse{}, err
			}
			return client.listByEdgeDeviceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByEdgeDeviceCreateRequest creates the ListByEdgeDevice request.
func (client *EdgeDeviceJobsClient) listByEdgeDeviceCreateRequest(ctx context.Context, resourceURI string, edgeDeviceName string, _ *EdgeDeviceJobsClientListByEdgeDeviceOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}/jobs"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if edgeDeviceName == "" {
		return nil, errors.New("parameter edgeDeviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeDeviceName}", url.PathEscape(edgeDeviceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByEdgeDeviceHandleResponse handles the ListByEdgeDevice response.
func (client *EdgeDeviceJobsClient) listByEdgeDeviceHandleResponse(resp *http.Response) (EdgeDeviceJobsClientListByEdgeDeviceResponse, error) {
	result := EdgeDeviceJobsClientListByEdgeDeviceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EdgeDeviceJobListResult); err != nil {
		return EdgeDeviceJobsClientListByEdgeDeviceResponse{}, err
	}
	return result, nil
}
