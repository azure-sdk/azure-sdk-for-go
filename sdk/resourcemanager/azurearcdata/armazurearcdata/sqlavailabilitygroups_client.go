//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armazurearcdata

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SQLAvailabilityGroupsClient contains the methods for the SQLAvailabilityGroups group.
// Don't use this type directly, use NewSQLAvailabilityGroupsClient() instead.
type SQLAvailabilityGroupsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewSQLAvailabilityGroupsClient creates a new instance of SQLAvailabilityGroupsClient with the specified values.
//   - subscriptionID - The ID of the Azure subscription
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSQLAvailabilityGroupsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SQLAvailabilityGroupsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &SQLAvailabilityGroupsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginCreate - Creates or replaces a SQL Availability Group resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - sqlAvailabilityGroup - The SQL Availability Group to be created or updated.
//   - options - SQLAvailabilityGroupsClientBeginCreateOptions contains the optional parameters for the SQLAvailabilityGroupsClient.BeginCreate
//     method.
func (client *SQLAvailabilityGroupsClient) BeginCreate(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, sqlAvailabilityGroup SQLAvailabilityGroup, options *SQLAvailabilityGroupsClientBeginCreateOptions) (*runtime.Poller[SQLAvailabilityGroupsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, sqlAvailabilityGroupName, sqlAvailabilityGroup, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[SQLAvailabilityGroupsClientCreateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[SQLAvailabilityGroupsClientCreateResponse](options.ResumeToken, client.pl, nil)
	}
}

// Create - Creates or replaces a SQL Availability Group resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
func (client *SQLAvailabilityGroupsClient) create(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, sqlAvailabilityGroup SQLAvailabilityGroup, options *SQLAvailabilityGroupsClientBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupName, sqlAvailabilityGroup, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *SQLAvailabilityGroupsClient) createCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, sqlAvailabilityGroup SQLAvailabilityGroup, options *SQLAvailabilityGroupsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sqlAvailabilityGroup)
}

// BeginDelete - Deletes a SQL Availability Group resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - options - SQLAvailabilityGroupsClientBeginDeleteOptions contains the optional parameters for the SQLAvailabilityGroupsClient.BeginDelete
//     method.
func (client *SQLAvailabilityGroupsClient) BeginDelete(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupsClientBeginDeleteOptions) (*runtime.Poller[SQLAvailabilityGroupsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, sqlAvailabilityGroupName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[SQLAvailabilityGroupsClientDeleteResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[SQLAvailabilityGroupsClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Deletes a SQL Availability Group resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
func (client *SQLAvailabilityGroupsClient) deleteOperation(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SQLAvailabilityGroupsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieves a SQL Availability Group resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - options - SQLAvailabilityGroupsClientGetOptions contains the optional parameters for the SQLAvailabilityGroupsClient.Get
//     method.
func (client *SQLAvailabilityGroupsClient) Get(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupsClientGetOptions) (SQLAvailabilityGroupsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupName, options)
	if err != nil {
		return SQLAvailabilityGroupsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SQLAvailabilityGroupsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SQLAvailabilityGroupsClient) getCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, options *SQLAvailabilityGroupsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SQLAvailabilityGroupsClient) getHandleResponse(resp *http.Response) (SQLAvailabilityGroupsClientGetResponse, error) {
	result := SQLAvailabilityGroupsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroup); err != nil {
		return SQLAvailabilityGroupsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List sqlAvailabilityGroups resources in the subscription
//
// Generated from API version 2023-03-15-preview
//   - options - SQLAvailabilityGroupsClientListOptions contains the optional parameters for the SQLAvailabilityGroupsClient.NewListPager
//     method.
func (client *SQLAvailabilityGroupsClient) NewListPager(options *SQLAvailabilityGroupsClientListOptions) *runtime.Pager[SQLAvailabilityGroupsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SQLAvailabilityGroupsClientListResponse]{
		More: func(page SQLAvailabilityGroupsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SQLAvailabilityGroupsClientListResponse) (SQLAvailabilityGroupsClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SQLAvailabilityGroupsClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return SQLAvailabilityGroupsClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SQLAvailabilityGroupsClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *SQLAvailabilityGroupsClient) listCreateRequest(ctx context.Context, options *SQLAvailabilityGroupsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SQLAvailabilityGroupsClient) listHandleResponse(resp *http.Response) (SQLAvailabilityGroupsClientListResponse, error) {
	result := SQLAvailabilityGroupsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroupListResult); err != nil {
		return SQLAvailabilityGroupsClientListResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets all sqlAvailabilityGroups in a resource group.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - options - SQLAvailabilityGroupsClientListByResourceGroupOptions contains the optional parameters for the SQLAvailabilityGroupsClient.NewListByResourceGroupPager
//     method.
func (client *SQLAvailabilityGroupsClient) NewListByResourceGroupPager(resourceGroupName string, options *SQLAvailabilityGroupsClientListByResourceGroupOptions) *runtime.Pager[SQLAvailabilityGroupsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[SQLAvailabilityGroupsClientListByResourceGroupResponse]{
		More: func(page SQLAvailabilityGroupsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SQLAvailabilityGroupsClientListByResourceGroupResponse) (SQLAvailabilityGroupsClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SQLAvailabilityGroupsClientListByResourceGroupResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return SQLAvailabilityGroupsClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SQLAvailabilityGroupsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *SQLAvailabilityGroupsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *SQLAvailabilityGroupsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *SQLAvailabilityGroupsClient) listByResourceGroupHandleResponse(resp *http.Response) (SQLAvailabilityGroupsClientListByResourceGroupResponse, error) {
	result := SQLAvailabilityGroupsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroupListResult); err != nil {
		return SQLAvailabilityGroupsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// Update - Updates a SQL Availability Group resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-15-preview
//   - resourceGroupName - The name of the Azure resource group
//   - sqlAvailabilityGroupName - Name of SQL Availability Group
//   - parameters - The SQL Availability Group.
//   - options - SQLAvailabilityGroupsClientUpdateOptions contains the optional parameters for the SQLAvailabilityGroupsClient.Update
//     method.
func (client *SQLAvailabilityGroupsClient) Update(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, parameters SQLAvailabilityGroupUpdate, options *SQLAvailabilityGroupsClientUpdateOptions) (SQLAvailabilityGroupsClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, sqlAvailabilityGroupName, parameters, options)
	if err != nil {
		return SQLAvailabilityGroupsClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SQLAvailabilityGroupsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SQLAvailabilityGroupsClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *SQLAvailabilityGroupsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, sqlAvailabilityGroupName string, parameters SQLAvailabilityGroupUpdate, options *SQLAvailabilityGroupsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if sqlAvailabilityGroupName == "" {
		return nil, errors.New("parameter sqlAvailabilityGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlAvailabilityGroupName}", url.PathEscape(sqlAvailabilityGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateHandleResponse handles the Update response.
func (client *SQLAvailabilityGroupsClient) updateHandleResponse(resp *http.Response) (SQLAvailabilityGroupsClientUpdateResponse, error) {
	result := SQLAvailabilityGroupsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLAvailabilityGroup); err != nil {
		return SQLAvailabilityGroupsClientUpdateResponse{}, err
	}
	return result, nil
}
