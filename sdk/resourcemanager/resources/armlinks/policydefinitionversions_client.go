//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlinks

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PolicyDefinitionVersionsClient contains the methods for the PolicyDefinitionVersions group.
// Don't use this type directly, use NewPolicyDefinitionVersionsClient() instead.
type PolicyDefinitionVersionsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPolicyDefinitionVersionsClient creates a new instance of PolicyDefinitionVersionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPolicyDefinitionVersionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PolicyDefinitionVersionsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PolicyDefinitionVersionsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - This operation creates or updates a policy definition in the given subscription with the given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policyDefinitionName - The name of the policy definition.
//   - policyDefinitionVersion - The policy definition version. The format is x.y.z where x is the major version number, y is
//     the minor version number, and z is the patch number
//   - parameters - The policy definition properties.
//   - options - PolicyDefinitionVersionsClientCreateOrUpdateOptions contains the optional parameters for the PolicyDefinitionVersionsClient.CreateOrUpdate
//     method.
func (client *PolicyDefinitionVersionsClient) CreateOrUpdate(ctx context.Context, policyDefinitionName string, policyDefinitionVersion string, parameters PolicyDefinitionVersion, options *PolicyDefinitionVersionsClientCreateOrUpdateOptions) (PolicyDefinitionVersionsClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, policyDefinitionName, policyDefinitionVersion, parameters, options)
	if err != nil {
		return PolicyDefinitionVersionsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PolicyDefinitionVersionsClient) createOrUpdateCreateRequest(ctx context.Context, policyDefinitionName string, policyDefinitionVersion string, parameters PolicyDefinitionVersion, options *PolicyDefinitionVersionsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *PolicyDefinitionVersionsClient) createOrUpdateHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientCreateOrUpdateResponse, error) {
	result := PolicyDefinitionVersionsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersion); err != nil {
		return PolicyDefinitionVersionsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// CreateOrUpdateAtManagementGroup - This operation creates or updates a policy definition version in the given management
// group with the given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - policyDefinitionName - The name of the policy definition.
//   - policyDefinitionVersion - The policy definition version. The format is x.y.z where x is the major version number, y is
//     the minor version number, and z is the patch number
//   - parameters - The policy definition properties.
//   - options - PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the
//     PolicyDefinitionVersionsClient.CreateOrUpdateAtManagementGroup method.
func (client *PolicyDefinitionVersionsClient) CreateOrUpdateAtManagementGroup(ctx context.Context, managementGroupName string, policyDefinitionName string, policyDefinitionVersion string, parameters PolicyDefinitionVersion, options *PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions) (PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.CreateOrUpdateAtManagementGroup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateAtManagementGroupCreateRequest(ctx, managementGroupName, policyDefinitionName, policyDefinitionVersion, parameters, options)
	if err != nil {
		return PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}, err
	}
	resp, err := client.createOrUpdateAtManagementGroupHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateAtManagementGroupCreateRequest creates the CreateOrUpdateAtManagementGroup request.
func (client *PolicyDefinitionVersionsClient) createOrUpdateAtManagementGroupCreateRequest(ctx context.Context, managementGroupName string, policyDefinitionName string, policyDefinitionVersion string, parameters PolicyDefinitionVersion, options *PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateAtManagementGroupHandleResponse handles the CreateOrUpdateAtManagementGroup response.
func (client *PolicyDefinitionVersionsClient) createOrUpdateAtManagementGroupHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse, error) {
	result := PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersion); err != nil {
		return PolicyDefinitionVersionsClientCreateOrUpdateAtManagementGroupResponse{}, err
	}
	return result, nil
}

// Delete - This operation deletes the policy definition version in the given subscription with the given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policyDefinitionName - The name of the policy definition.
//   - policyDefinitionVersion - The policy definition version. The format is x.y.z where x is the major version number, y is
//     the minor version number, and z is the patch number
//   - options - PolicyDefinitionVersionsClientDeleteOptions contains the optional parameters for the PolicyDefinitionVersionsClient.Delete
//     method.
func (client *PolicyDefinitionVersionsClient) Delete(ctx context.Context, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientDeleteOptions) (PolicyDefinitionVersionsClientDeleteResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, policyDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicyDefinitionVersionsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientDeleteResponse{}, err
	}
	return PolicyDefinitionVersionsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PolicyDefinitionVersionsClient) deleteCreateRequest(ctx context.Context, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteAtManagementGroup - This operation deletes the policy definition in the given management group with the given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - policyDefinitionName - The name of the policy definition.
//   - policyDefinitionVersion - The policy definition version. The format is x.y.z where x is the major version number, y is
//     the minor version number, and z is the patch number
//   - options - PolicyDefinitionVersionsClientDeleteAtManagementGroupOptions contains the optional parameters for the PolicyDefinitionVersionsClient.DeleteAtManagementGroup
//     method.
func (client *PolicyDefinitionVersionsClient) DeleteAtManagementGroup(ctx context.Context, managementGroupName string, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientDeleteAtManagementGroupOptions) (PolicyDefinitionVersionsClientDeleteAtManagementGroupResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.DeleteAtManagementGroup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteAtManagementGroupCreateRequest(ctx, managementGroupName, policyDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicyDefinitionVersionsClientDeleteAtManagementGroupResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientDeleteAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientDeleteAtManagementGroupResponse{}, err
	}
	return PolicyDefinitionVersionsClientDeleteAtManagementGroupResponse{}, nil
}

// deleteAtManagementGroupCreateRequest creates the DeleteAtManagementGroup request.
func (client *PolicyDefinitionVersionsClient) deleteAtManagementGroupCreateRequest(ctx context.Context, managementGroupName string, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientDeleteAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - This operation retrieves the policy definition version in the given subscription with the given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policyDefinitionName - The name of the policy definition.
//   - policyDefinitionVersion - The policy definition version. The format is x.y.z where x is the major version number, y is
//     the minor version number, and z is the patch number
//   - options - PolicyDefinitionVersionsClientGetOptions contains the optional parameters for the PolicyDefinitionVersionsClient.Get
//     method.
func (client *PolicyDefinitionVersionsClient) Get(ctx context.Context, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientGetOptions) (PolicyDefinitionVersionsClientGetResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, policyDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicyDefinitionVersionsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PolicyDefinitionVersionsClient) getCreateRequest(ctx context.Context, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PolicyDefinitionVersionsClient) getHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientGetResponse, error) {
	result := PolicyDefinitionVersionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersion); err != nil {
		return PolicyDefinitionVersionsClientGetResponse{}, err
	}
	return result, nil
}

// GetAtManagementGroup - This operation retrieves the policy definition version in the given management group with the given
// name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - policyDefinitionName - The name of the policy definition.
//   - policyDefinitionVersion - The policy definition version. The format is x.y.z where x is the major version number, y is
//     the minor version number, and z is the patch number
//   - options - PolicyDefinitionVersionsClientGetAtManagementGroupOptions contains the optional parameters for the PolicyDefinitionVersionsClient.GetAtManagementGroup
//     method.
func (client *PolicyDefinitionVersionsClient) GetAtManagementGroup(ctx context.Context, managementGroupName string, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientGetAtManagementGroupOptions) (PolicyDefinitionVersionsClientGetAtManagementGroupResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.GetAtManagementGroup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAtManagementGroupCreateRequest(ctx, managementGroupName, policyDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicyDefinitionVersionsClientGetAtManagementGroupResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientGetAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientGetAtManagementGroupResponse{}, err
	}
	resp, err := client.getAtManagementGroupHandleResponse(httpResp)
	return resp, err
}

// getAtManagementGroupCreateRequest creates the GetAtManagementGroup request.
func (client *PolicyDefinitionVersionsClient) getAtManagementGroupCreateRequest(ctx context.Context, managementGroupName string, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientGetAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAtManagementGroupHandleResponse handles the GetAtManagementGroup response.
func (client *PolicyDefinitionVersionsClient) getAtManagementGroupHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientGetAtManagementGroupResponse, error) {
	result := PolicyDefinitionVersionsClientGetAtManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersion); err != nil {
		return PolicyDefinitionVersionsClientGetAtManagementGroupResponse{}, err
	}
	return result, nil
}

// GetBuiltIn - This operation retrieves the built-in policy definition version with the given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - policyDefinitionName - The name of the policy definition.
//   - policyDefinitionVersion - The policy definition version. The format is x.y.z where x is the major version number, y is
//     the minor version number, and z is the patch number
//   - options - PolicyDefinitionVersionsClientGetBuiltInOptions contains the optional parameters for the PolicyDefinitionVersionsClient.GetBuiltIn
//     method.
func (client *PolicyDefinitionVersionsClient) GetBuiltIn(ctx context.Context, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientGetBuiltInOptions) (PolicyDefinitionVersionsClientGetBuiltInResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.GetBuiltIn"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBuiltInCreateRequest(ctx, policyDefinitionName, policyDefinitionVersion, options)
	if err != nil {
		return PolicyDefinitionVersionsClientGetBuiltInResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientGetBuiltInResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientGetBuiltInResponse{}, err
	}
	resp, err := client.getBuiltInHandleResponse(httpResp)
	return resp, err
}

// getBuiltInCreateRequest creates the GetBuiltIn request.
func (client *PolicyDefinitionVersionsClient) getBuiltInCreateRequest(ctx context.Context, policyDefinitionName string, policyDefinitionVersion string, options *PolicyDefinitionVersionsClientGetBuiltInOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}"
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	if policyDefinitionVersion == "" {
		return nil, errors.New("parameter policyDefinitionVersion cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionVersion}", url.PathEscape(policyDefinitionVersion))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBuiltInHandleResponse handles the GetBuiltIn response.
func (client *PolicyDefinitionVersionsClient) getBuiltInHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientGetBuiltInResponse, error) {
	result := PolicyDefinitionVersionsClientGetBuiltInResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersion); err != nil {
		return PolicyDefinitionVersionsClientGetBuiltInResponse{}, err
	}
	return result, nil
}

// NewListPager - This operation retrieves a list of all the policy definition versions for the given policy definition.
//
// Generated from API version 2025-01-01
//   - policyDefinitionName - The name of the policy definition.
//   - options - PolicyDefinitionVersionsClientListOptions contains the optional parameters for the PolicyDefinitionVersionsClient.NewListPager
//     method.
func (client *PolicyDefinitionVersionsClient) NewListPager(policyDefinitionName string, options *PolicyDefinitionVersionsClientListOptions) *runtime.Pager[PolicyDefinitionVersionsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicyDefinitionVersionsClientListResponse]{
		More: func(page PolicyDefinitionVersionsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicyDefinitionVersionsClientListResponse) (PolicyDefinitionVersionsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicyDefinitionVersionsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, policyDefinitionName, options)
			}, nil)
			if err != nil {
				return PolicyDefinitionVersionsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *PolicyDefinitionVersionsClient) listCreateRequest(ctx context.Context, policyDefinitionName string, options *PolicyDefinitionVersionsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PolicyDefinitionVersionsClient) listHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientListResponse, error) {
	result := PolicyDefinitionVersionsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersionListResult); err != nil {
		return PolicyDefinitionVersionsClientListResponse{}, err
	}
	return result, nil
}

// ListAll - This operation lists all the policy definition versions for all policy definitions within a subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - options - PolicyDefinitionVersionsClientListAllOptions contains the optional parameters for the PolicyDefinitionVersionsClient.ListAll
//     method.
func (client *PolicyDefinitionVersionsClient) ListAll(ctx context.Context, options *PolicyDefinitionVersionsClientListAllOptions) (PolicyDefinitionVersionsClientListAllResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.ListAll"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listAllCreateRequest(ctx, options)
	if err != nil {
		return PolicyDefinitionVersionsClientListAllResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientListAllResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientListAllResponse{}, err
	}
	resp, err := client.listAllHandleResponse(httpResp)
	return resp, err
}

// listAllCreateRequest creates the ListAll request.
func (client *PolicyDefinitionVersionsClient) listAllCreateRequest(ctx context.Context, options *PolicyDefinitionVersionsClientListAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/listPolicyDefinitionVersions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *PolicyDefinitionVersionsClient) listAllHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientListAllResponse, error) {
	result := PolicyDefinitionVersionsClientListAllResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersionListResult); err != nil {
		return PolicyDefinitionVersionsClientListAllResponse{}, err
	}
	return result, nil
}

// ListAllAtManagementGroup - This operation lists all the policy definition versions for all policy definitions at the management
// group scope.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - options - PolicyDefinitionVersionsClientListAllAtManagementGroupOptions contains the optional parameters for the PolicyDefinitionVersionsClient.ListAllAtManagementGroup
//     method.
func (client *PolicyDefinitionVersionsClient) ListAllAtManagementGroup(ctx context.Context, managementGroupName string, options *PolicyDefinitionVersionsClientListAllAtManagementGroupOptions) (PolicyDefinitionVersionsClientListAllAtManagementGroupResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.ListAllAtManagementGroup"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listAllAtManagementGroupCreateRequest(ctx, managementGroupName, options)
	if err != nil {
		return PolicyDefinitionVersionsClientListAllAtManagementGroupResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientListAllAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientListAllAtManagementGroupResponse{}, err
	}
	resp, err := client.listAllAtManagementGroupHandleResponse(httpResp)
	return resp, err
}

// listAllAtManagementGroupCreateRequest creates the ListAllAtManagementGroup request.
func (client *PolicyDefinitionVersionsClient) listAllAtManagementGroupCreateRequest(ctx context.Context, managementGroupName string, options *PolicyDefinitionVersionsClientListAllAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/listPolicyDefinitionVersions"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllAtManagementGroupHandleResponse handles the ListAllAtManagementGroup response.
func (client *PolicyDefinitionVersionsClient) listAllAtManagementGroupHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientListAllAtManagementGroupResponse, error) {
	result := PolicyDefinitionVersionsClientListAllAtManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersionListResult); err != nil {
		return PolicyDefinitionVersionsClientListAllAtManagementGroupResponse{}, err
	}
	return result, nil
}

// ListAllBuiltins - This operation lists all the built-in policy definition versions for all built-in policy definitions.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - options - PolicyDefinitionVersionsClientListAllBuiltinsOptions contains the optional parameters for the PolicyDefinitionVersionsClient.ListAllBuiltins
//     method.
func (client *PolicyDefinitionVersionsClient) ListAllBuiltins(ctx context.Context, options *PolicyDefinitionVersionsClientListAllBuiltinsOptions) (PolicyDefinitionVersionsClientListAllBuiltinsResponse, error) {
	var err error
	const operationName = "PolicyDefinitionVersionsClient.ListAllBuiltins"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listAllBuiltinsCreateRequest(ctx, options)
	if err != nil {
		return PolicyDefinitionVersionsClientListAllBuiltinsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PolicyDefinitionVersionsClientListAllBuiltinsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PolicyDefinitionVersionsClientListAllBuiltinsResponse{}, err
	}
	resp, err := client.listAllBuiltinsHandleResponse(httpResp)
	return resp, err
}

// listAllBuiltinsCreateRequest creates the ListAllBuiltins request.
func (client *PolicyDefinitionVersionsClient) listAllBuiltinsCreateRequest(ctx context.Context, options *PolicyDefinitionVersionsClientListAllBuiltinsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Authorization/listPolicyDefinitionVersions"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllBuiltinsHandleResponse handles the ListAllBuiltins response.
func (client *PolicyDefinitionVersionsClient) listAllBuiltinsHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientListAllBuiltinsResponse, error) {
	result := PolicyDefinitionVersionsClientListAllBuiltinsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersionListResult); err != nil {
		return PolicyDefinitionVersionsClientListAllBuiltinsResponse{}, err
	}
	return result, nil
}

// NewListBuiltInPager - This operation retrieves a list of all the built-in policy definition versions for the given policy
// definition.
//
// Generated from API version 2025-01-01
//   - policyDefinitionName - The name of the policy definition.
//   - options - PolicyDefinitionVersionsClientListBuiltInOptions contains the optional parameters for the PolicyDefinitionVersionsClient.NewListBuiltInPager
//     method.
func (client *PolicyDefinitionVersionsClient) NewListBuiltInPager(policyDefinitionName string, options *PolicyDefinitionVersionsClientListBuiltInOptions) *runtime.Pager[PolicyDefinitionVersionsClientListBuiltInResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicyDefinitionVersionsClientListBuiltInResponse]{
		More: func(page PolicyDefinitionVersionsClientListBuiltInResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicyDefinitionVersionsClientListBuiltInResponse) (PolicyDefinitionVersionsClientListBuiltInResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicyDefinitionVersionsClient.NewListBuiltInPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBuiltInCreateRequest(ctx, policyDefinitionName, options)
			}, nil)
			if err != nil {
				return PolicyDefinitionVersionsClientListBuiltInResponse{}, err
			}
			return client.listBuiltInHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBuiltInCreateRequest creates the ListBuiltIn request.
func (client *PolicyDefinitionVersionsClient) listBuiltInCreateRequest(ctx context.Context, policyDefinitionName string, options *PolicyDefinitionVersionsClientListBuiltInOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions"
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBuiltInHandleResponse handles the ListBuiltIn response.
func (client *PolicyDefinitionVersionsClient) listBuiltInHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientListBuiltInResponse, error) {
	result := PolicyDefinitionVersionsClientListBuiltInResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersionListResult); err != nil {
		return PolicyDefinitionVersionsClientListBuiltInResponse{}, err
	}
	return result, nil
}

// NewListByManagementGroupPager - This operation retrieves a list of all the policy definition versions for the given policy
// definition in the given management group.
//
// Generated from API version 2025-01-01
//   - managementGroupName - The name of the management group. The name is case insensitive.
//   - policyDefinitionName - The name of the policy definition.
//   - options - PolicyDefinitionVersionsClientListByManagementGroupOptions contains the optional parameters for the PolicyDefinitionVersionsClient.NewListByManagementGroupPager
//     method.
func (client *PolicyDefinitionVersionsClient) NewListByManagementGroupPager(managementGroupName string, policyDefinitionName string, options *PolicyDefinitionVersionsClientListByManagementGroupOptions) *runtime.Pager[PolicyDefinitionVersionsClientListByManagementGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicyDefinitionVersionsClientListByManagementGroupResponse]{
		More: func(page PolicyDefinitionVersionsClientListByManagementGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicyDefinitionVersionsClientListByManagementGroupResponse) (PolicyDefinitionVersionsClientListByManagementGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PolicyDefinitionVersionsClient.NewListByManagementGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByManagementGroupCreateRequest(ctx, managementGroupName, policyDefinitionName, options)
			}, nil)
			if err != nil {
				return PolicyDefinitionVersionsClientListByManagementGroupResponse{}, err
			}
			return client.listByManagementGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByManagementGroupCreateRequest creates the ListByManagementGroup request.
func (client *PolicyDefinitionVersionsClient) listByManagementGroupCreateRequest(ctx context.Context, managementGroupName string, policyDefinitionName string, options *PolicyDefinitionVersionsClientListByManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions"
	if managementGroupName == "" {
		return nil, errors.New("parameter managementGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupName}", url.PathEscape(managementGroupName))
	if policyDefinitionName == "" {
		return nil, errors.New("parameter policyDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyDefinitionName}", url.PathEscape(policyDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2025-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByManagementGroupHandleResponse handles the ListByManagementGroup response.
func (client *PolicyDefinitionVersionsClient) listByManagementGroupHandleResponse(resp *http.Response) (PolicyDefinitionVersionsClientListByManagementGroupResponse, error) {
	result := PolicyDefinitionVersionsClientListByManagementGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyDefinitionVersionListResult); err != nil {
		return PolicyDefinitionVersionsClientListByManagementGroupResponse{}, err
	}
	return result, nil
}
